# -*- rd -*-

= README.en

== Author

  * Kouhei Sutou <kou@cozmixng.org>
  * Hiroyuki Ikezoe <poincare@ikezoe.net>

== License

LGPL

== What's this?

Cutter is an Unit Testing Framework for C.

The feature of Cutter is to making test as shared library.

== Dependency libraries

  * GLib

=== Suggested programs

  * run-test.el which is attached to
    ((<GaUnit|URL:http://www.cozmixng.org/~rwiki/?cmd=view;name=GaUnit>)).
    (If you want to run test with ease on the Emacs.)

== Get

((<URL:http://sourceforge.net/project/showfiles.php?group_id=208375>))

  % svn co https://cutter.svn.sourceforge.net/svnroot/cutter/trunk cutter

== Install

  % ./configure
  % make
  # make install

== Usage

  % cutter [Options] [Directory which has libtest_*.so]

=== Options

: -v LEVEL, --verbose=LEVEL

   It specifies verbose level. LEVEL is silent (s), normal (n),
   progress (p) or verbose (v). Output is more verbosely in
   the back.

: -s DIRECTORY, --source-directory=DIRECTORY

   Cutter adds DIRECTORY before file name when test fails. This
   is for tolls (like Emacs) which have function jumping to
   error line.

: -c DIRECTORY, --color=DIRECTORY

   Cutter adds DIRECTORY before file name when test fails. This
   is for tolls (like Emacs) which have function jumping to
   error line.

: -n DIRECTORY, --name=DIRECTORY

   Cutter adds DIRECTORY before file name when test fails. This
   is for tolls (like Emacs) which have function jumping to
   error line.

: -t DIRECTORY, --test=DIRECTORY

   Cutter adds DIRECTORY before file name when test fails. This
   is for tolls (like Emacs) which have function jumping to
   error line.

: -m, --multi-thread

   Cutter adds DIRECTORY before file name when test fails. This
   is for tolls (like Emacs) which have function jumping to
   error line.

== How to make test

Executing flow of test is the following.

  (1) Make test.
  (2) Compile it and make libtest_*.so.
  (3) Execute cutter. It loads libtest_*.so and tests.

See sample/calc/.

== References

=== Assertions

This is the list of assertion functions. (({message})) in the
arguments is displayed when assertion fails.

--- cut_fail(message)

    It always fails.

--- cut_assert(expected)

    It passes when (({expected})) is not 0.

--- cut_assert_equal_int(expected, actual)

    It passes when (({expected})) equals (({actual})). They
    must be int type or variant of int (like long).

--- cut_assert_equal_double(expected, actual)

    It passes when (({expected})) equals (({actual})). They
    must be float type or variant of double.

--- cut_assert_equal_string(expected, actual)

    It passes when (({expected})) and (({actual})) are same
    content string.

=== Template

The following is template of test.

  #include <cutter.h>
  
  #include "HEADER_FILE_OF_YOUR_PROGRAM"
  
  void test_function1(void);
  void test_function2(void);

  static int condition = 0;
  
  void
  setup (void)
  {
    condition = 1;
  }
  
  void
  teardown (void)
  {
    condition = 2;
  }

  void
  test_function1(void)
  {
    cut_assert_XXX();
    ...
  }
  
  void
  test_function1(void)
  {
    ...
  }
  
