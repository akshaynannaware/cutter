# -*- rd -*-

= README.ja

== 名前

Cutter

== 作者

  * Kouhei Sutou <kou@cozmixng.org>
  * Hiroyuki Ikezoe <poincare@ikezoe.net>

== ライセンス

LGPL

== なにこれ？

CのためのUnit Testing Frameworkです．

テストを共有ライブラリとして作成するのが特長です．

== 依存ライブラリ

  * GLib

=== あればよいもの

  * ((<GaUnit|URL:http://www.cozmixng.org/~rwiki/?cmd=view;name=GaUnit>))
    に付いているrun-test.el（Emacs上で楽にテストしたい場合）

== 入手方法

((<URL:http://sourceforge.net/project/showfiles.php?group_id=208375>))

  % svn co https://cutter.svn.sourceforge.net/svnroot/cutter/trunk cutter

== インストール

  % ./configure
  % make
  # make install

== 使い方

  % cutter [オプション] [libtest_*.soがあるディレクトリ]

=== オプション

: -vLEVEL, --verbose=LEVEL

   出力の詳細さを指定します．LEVELにはsilent, normal,
   progress, verboseが指定できます（それぞれs, n, p, vでも可）．
   後ろの方ほど詳細になります．
   
: -bBASE, --base=BASE
   
   テストが失敗した場合にファイル名の前にBASEを付加します．
   Cutterの出力からテストが失敗した箇所にジャンプするツール
   （Emacsなど）と連携するための機能です．

== テストの作り方

テストの実行は以下のような流れになります．

  (1) テストを作成する
  (2) コンパイルし，libtest_*.soを作成する
  (3) cutterを起動し，libtest_*.soを読み込ませ，テストをする

詳しくはTutorial.jaを参考にして下さい．

== リファレンス

=== 表明

表明の一覧です．引数にある(({message}))は表明が失敗した場合に
表示されます．

--- cut_fail(message)
    
    必ず失敗します．

--- cut_assert(expected)
    
    (({expected}))が0以外ならパスします．

--- cut_assert_equal_int(expected, actual)
    
    (({expected}))と(({actual}))が等しければパスします．どちら
    もint型あるいはその亜種（longとか）である必要があります．

--- cut_assert_equal_double(expected, error, actual)
    
    (({actual}))が(({expected}))-(({error}))から
    (({expected}))+(({error}))の間であればパスします．どちら
    もdouble型あるいはその亜種（floatとか）である必要があり
    ます．

--- cut_assert_equal_string(expected, actual, message)
    
    (({expected}))と(({actual}))が同じ内容の文字列であればパス
    します．

=== 雛型

テストの雛型は以下のようになります．

  #include <cutter.h>
  
  #include "自分のプログラムのヘッダファイル"
  
  void test_function1(void);
  void test_function2(void);

  void
  setup (void)
  {
    /* 初期化用コード */
  }
  
  void
  teardown (void)
  {
    /* 後片付け用コード */
  }

  void
  test_function1(void)
  {
    cut_assert_XXX();
    ...
  }
  
  void
  test_function1(void)
  {
    ...
  }
