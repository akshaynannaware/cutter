# cutter.h

<FUNCTION>
<NAME>cut_set_message</NAME>
<RETURNS>void</RETURNS>
const char *format, ...
</FUNCTION>

<FUNCTION>
<NAME>cut_set_message_va_list</NAME>
<RETURNS>void</RETURNS>
const char *format, va_list args
</FUNCTION>

<FUNCTION>
<NAME>cut_keep_message</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>

# cut-assertion.h

<FUNCTION>
<NAME>cut_error</NAME>
<RETURNS>void</RETURNS>
const char *format, ...
</FUNCTION>

<FUNCTION>
<NAME>cut_fail</NAME>
<RETURNS>void</RETURNS>
const char *format, ...
</FUNCTION>

<FUNCTION>
<NAME>cut_pend</NAME>
<RETURNS>void</RETURNS>
const char *format, ...
</FUNCTION>

<FUNCTION>
<NAME>cut_pending</NAME>
<RETURNS>void</RETURNS>
const char *format, ...
</FUNCTION>

<FUNCTION>
<NAME>cut_notify</NAME>
<RETURNS>void</RETURNS>
const char *format, ...
</FUNCTION>

<FUNCTION>
<NAME>cut_omit</NAME>
<RETURNS>void</RETURNS>
const char *format, ...
</FUNCTION>

# cut-types.h

<TYPEDEF>
<NAME>cut_boolean</NAME>
</TYPEDEF>

<MACRO>
<NAME>CUT_TRUE</NAME>
#define CUT_TRUE
</MACRO>

<MACRO>
<NAME>CUT_FALSE</NAME>
#define CUT_FALSE
</MACRO>

# cut-test-utils.h

<FUNCTION>
<NAME>cut_take</NAME>
<RETURNS>void *</RETURNS>
void *object, CutDestroyFunction destroy_function
</FUNCTION>

<FUNCTION>
<NAME>cut_take_printf</NAME>
<RETURNS>const char *</RETURNS>
const char *format, ...
</FUNCTION>

<FUNCTION>
<NAME>cut_take_string_array</NAME>
<RETURNS>char **</RETURNS>
char **strings
</FUNCTION>

<FUNCTION>
<NAME>cut_set_fixture_data_dir</NAME>
<RETURNS>void</RETURNS>
const char *path, ...
</FUNCTION>

<FUNCTION>
<NAME>cut_build_fixture_data_path</NAME>
<RETURNS>char *</RETURNS>
const char *path, ...
</FUNCTION>

<FUNCTION>
<NAME>cut_equal_string</NAME>
<RETURNS>cut_boolean</RETURNS>
const char *string1, const char *string2
</FUNCTION>

<FUNCTION>
<NAME>cut_equal_double</NAME>
<RETURNS>cut_boolean</RETURNS>
double double1, double double2, double error
</FUNCTION>

# cut-helper.h

<FUNCTION>
<NAME>cut_test_fail</NAME>
<RETURNS>void</RETURNS>
const char *system_message, ...
</FUNCTION>

<FUNCTION>
<NAME>cut_test_fail_va_list</NAME>
<RETURNS>void</RETURNS>
const char *system_message, const char *user_message_format
</FUNCTION>

# gcut-test-utils.h

<FUNCTION>
<NAME>gcut_take_list</NAME>
<RETURNS>const GList *</RETURNS>
const GList *list, CutDestroyFunction destroy_function
</FUNCTION>

<FUNCTION>
<NAME>gcut_take_new_list_string</NAME>
<RETURNS>const GList *</RETURNS>
const gchar *value, ...
</FUNCTION>

<FUNCTION>
<NAME>gcut_take_new_list_string_array</NAME>
<RETURNS>const GList *</RETURNS>
const gchar **strings
</FUNCTION>

<FUNCTION>
<NAME>gcut_take_new_hash_table_string_string</NAME>
<RETURNS>GHashTable *</RETURNS>
const gchar *key, ...
</FUNCTION>

# gcut-assertions.h

<FUNCTION>
<NAME>gcut_assert_equal_list</NAME>
<RETURNS>void</RETURNS>
GList *expected, GList *actual, GEqualFunc equal_function, GCutInspectFunction inspect_function, gpointer inspect_user_data, ...
</FUNCTION>

<FUNCTION>
<NAME>gcut_assert_equal_list_object</NAME>
<RETURNS>void</RETURNS>
GList *expected, GList *actual, ...
</FUNCTION>

<FUNCTION>
<NAME>gcut_assert_equal_list_object_custom</NAME>
<RETURNS>void</RETURNS>
GList *expected, GList *actual, GEqualFunc equal_function, ...
</FUNCTION>

<FUNCTION>
<NAME>gcut_assert_equal_hash_table</NAME>
<RETURNS>void</RETURNS>
GHashTable *expected, GHashTable *actual, GEqualFunc equal_function, GCutInspectFunction key_inspect_function, GCutInspectFunction value_inspect_function, gpointer inspect_user_data
</FUNCTION>

<FUNCTION>
<NAME>gcut_assert_equal_hash_table_string_string</NAME>
<RETURNS>void</RETURNS>
GHashTable *expected, GHashTable *actual, ...
</FUNCTION>

# gcut-test-utils.h
