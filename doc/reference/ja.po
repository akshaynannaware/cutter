# ja.po for Cutter Reference.
# Copyright (C) 2007-2009 Kouhei Sutou
# This file is distributed under the same license as the Cutter package.
# Kouhei Sutou <kou@cozmixng.org>, 2007.
#
msgid ""
msgstr ""
"Project-Id-Version: Cutter 1.0.8\n"
"POT-Creation-Date: 2009-08-25 09:31+0900\n"
"PO-Revision-Date: 2009-08-25 09:36+0900\n"
"Last-Translator: Kouhei Sutou <kou@cozmixng.org>\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\\n\n"

#: cutter-docs.sgml:7(title)
msgid "Cutter Reference Manual"
msgstr "Cutterリファレンスマニュアル"

#: cutter-docs.sgml:8(releaseinfo)
msgid "for Cutter &version;"
msgstr "Cutter &version;用"

#: cutter-docs.sgml:12(title)
msgid "Introduction"
msgstr "はじめに"

#: cutter-docs.sgml:14(title)
msgid "Overview of Cutter"
msgstr "Cutterの概要"

#: cutter-docs.sgml:21(title)
msgid "Install Cutter to your platform"
msgstr "プラットフォーム毎のCutterのインストール方法"

#: cutter-docs.sgml:32(title)
msgid "Getting start"
msgstr "はじめよう"

#: cutter-docs.sgml:38(title)
msgid "Reference"
msgstr "リファレンス"

#: cutter-docs.sgml:40(title)
msgid "Command"
msgstr "コマンド"

#: cutter-docs.sgml:44(title)
msgid "Writing test"
msgstr "テスト作成"

#: cutter-docs.sgml:68(title)
msgid "Writing assertion"
msgstr "検証作成"

#: cutter-docs.sgml:110(title)
msgid "Index of all symbols"
msgstr "すべてのシンボル一覧"

#: cutter-docs.sgml:113(title)
msgid "Index of deprecated symbols"
msgstr "非推奨のシンボル一覧"

#: cutter-docs.sgml:116(title)
msgid "Index of new symbols in 1.0.8"
msgstr "1.0.8での新しいシンボル一覧"

#: cutter-docs.sgml:119(title)
msgid "Index of new symbols in 1.0.7"
msgstr "1.0.7での新しいシンボル一覧"

#: cutter-docs.sgml:122(title)
msgid "Index of new symbols in 1.0.6"
msgstr "1.0.6での新しいシンボル一覧"

#: cutter-docs.sgml:125(title)
msgid "Index of new symbols in 1.0.5"
msgstr "1.0.5での新しいシンボル一覧"

#: cutter-docs.sgml:128(title)
msgid "Index of new symbols in 1.0.4"
msgstr "1.0.4での新しいシンボル一覧"

#: cutter-docs.sgml:131(title)
msgid "Index of new symbols in 1.0.3"
msgstr "1.0.3での新しいシンボル一覧"

#: cutter-docs.sgml:134(title)
msgid "Index of new symbols in 1.0.2"
msgstr "1.0.2での新しいシンボル一覧"

#: cutter-docs.sgml:137(title)
msgid "Index of new symbols in 1.0.1"
msgstr "1.0.1での新しいシンボル一覧"

#: cutter-docs.sgml:140(title)
msgid "Index of new symbols in 1.0"
msgstr "1.0での新しいシンボル一覧"

#: cutter-docs.sgml:143(title)
msgid "Index of new symbols in 0.9"
msgstr "0.9での新しいシンボル一覧"

#: cutter-docs.sgml:146(title)
msgid "Index of new symbols in 0.8"
msgstr "0.8での新しいシンボル一覧"

#: cutter-docs.sgml:149(title)
msgid "Index of new symbols in 0.7"
msgstr "0.7での新しいシンボル一覧"

#: cutter-docs.sgml:152(title)
msgid "Index of new symbols in 0.6"
msgstr "0.6での新しいシンボル一覧"

#: cutter-docs.sgml:155(title)
msgid "Index of new symbols in 0.5"
msgstr "0.5での新しいシンボル一覧"

#: cutter-docs.sgml:158(title)
msgid "Index of new symbols in 0.4"
msgstr "0.4での新しいシンボル一覧"

#: cutter-docs.sgml:161(title)
msgid "Index of new symbols in 0.3"
msgstr "0.3での新しいシンボル一覧"

#: xml/api-index-0.3.xml:6(title) xml/api-index-0.8.xml:6(title)
#: xml/api-index-0.9.xml:6(title) xml/api-index-1.0.2.xml:6(title)
#: xml/api-index-1.0.3.xml:6(title) xml/api-index-1.0.4.xml:6(title)
#: xml/api-index-1.0.5.xml:6(title) xml/api-index-1.0.6.xml:6(title)
#: xml/api-index-1.0.7.xml:6(title) xml/api-index-1.0.xml:6(title)
#: xml/api-index-deprecated.xml:6(title) xml/api-index-full.xml:6(title)
msgid "C"
msgstr ""

#: xml/api-index-0.3.xml:7(link) xml/api-index-full.xml:36(link)
#: xml/cut-assertions.xml:64(link) xml/cut-assertions.xml:525(primary)
msgid "cut_assert_equal_string_with_free"
msgstr ""

#: xml/api-index-0.3.xml:8(link) xml/api-index-full.xml:55(link)
#: xml/cut-assertions.xml:33(link) xml/cut-assertions.xml:281(primary)
msgid "cut_assert_null_string"
msgstr ""

#: xml/api-index-0.8.xml:7(link) xml/api-index-deprecated.xml:8(link)
#: xml/api-index-full.xml:24(link) xml/gcut-assertions.xml:42(link)
#: xml/gcut-assertions.xml:278(primary)
msgid "cut_assert_equal_g_list_int"
msgstr ""

#: xml/api-index-0.8.xml:8(link) xml/api-index-deprecated.xml:9(link)
#: xml/api-index-full.xml:25(link) xml/gcut-assertions.xml:51(link)
#: xml/gcut-assertions.xml:342(primary)
msgid "cut_assert_equal_g_list_string"
msgstr ""

#: xml/api-index-0.8.xml:9(link) xml/api-index-full.xml:39(link)
#: xml/cut-assertions.xml:98(link) xml/cut-assertions.xml:903(primary)
msgid "cut_assert_errno"
msgstr ""

#: xml/api-index-0.8.xml:10(link) xml/api-index-full.xml:74(link)
#: xml/cut-experimental.xml:21(link) xml/cut-experimental.xml:48(primary)
msgid "cut_fork"
msgstr ""

#: xml/api-index-0.8.xml:11(link) xml/api-index-full.xml:75(link)
#: xml/cut-experimental.xml:24(link) xml/cut-experimental.xml:131(primary)
msgid "cut_fork_get_stderr_message"
msgstr ""

#: xml/api-index-0.8.xml:12(link) xml/api-index-full.xml:76(link)
#: xml/cut-experimental.xml:23(link) xml/cut-experimental.xml:104(primary)
msgid "cut_fork_get_stdout_message"
msgstr ""

#: xml/api-index-0.8.xml:13(link) xml/api-index-full.xml:82(link)
#: xml/cut-assertions.xml:129(link) xml/cut-assertions.xml:1187(primary)
msgid "cut_omit"
msgstr ""

#: xml/api-index-0.8.xml:14(link) xml/api-index-full.xml:153(link)
#: xml/cut-experimental.xml:22(link) xml/cut-experimental.xml:74(primary)
msgid "cut_wait_process"
msgstr ""

#: xml/api-index-0.9.xml:7(link) xml/api-index-full.xml:34(link)
#: xml/cut-assertions.xml:88(link) xml/cut-assertions.xml:712(primary)
msgid "cut_assert_equal_string_array_with_free"
msgstr ""

#: xml/api-index-0.9.xml:8(link) xml/api-index-full.xml:40(link)
#: xml/cut-assertions.xml:25(link) xml/cut-assertions.xml:197(primary)
msgid "cut_assert_false"
msgstr ""

#: xml/api-index-0.9.xml:9(link) xml/api-index-deprecated.xml:13(link)
#: xml/api-index-full.xml:41(link) xml/cut-assertions.xml:99(link)
#: xml/cut-assertions.xml:923(primary)
msgid "cut_assert_file_exist"
msgstr ""

#: xml/api-index-0.9.xml:10(link) xml/api-index-full.xml:64(link)
#: xml/cut-assertions.xml:23(link) xml/cut-assertions.xml:180(primary)
msgid "cut_assert_true"
msgstr ""

#: xml/api-index-1.0.2.xml:7(link) xml/api-index-full.xml:23(link)
#: xml/cut-assertions.xml:114(link) xml/cut-assertions.xml:1067(primary)
msgid "cut_assert_equal_fixture_data_string"
msgstr ""

#: xml/api-index-1.0.2.xml:8(link) xml/api-index-full.xml:61(link)
#: xml/cut-assertions.xml:101(link) xml/cut-assertions.xml:948(primary)
msgid "cut_assert_path_exist"
msgstr ""

#: xml/api-index-1.0.2.xml:9(link) xml/api-index-full.xml:62(link)
#: xml/cut-assertions.xml:103(link) xml/cut-assertions.xml:972(primary)
msgid "cut_assert_path_not_exist"
msgstr ""

#: xml/api-index-1.0.2.xml:10(link) xml/api-index-deprecated.xml:15(link)
#: xml/api-index-full.xml:63(link) xml/gcut-assertions.xml:89(link)
#: xml/gcut-assertions.xml:594(primary)
msgid "cut_assert_remove_path"
msgstr ""

#: xml/api-index-1.0.2.xml:11(link) xml/api-index-full.xml:66(link)
#: xml/cut-test-utils.xml:44(link) xml/cut-test-utils.xml:316(primary)
msgid "cut_build_fixture_data_path"
msgstr ""

#: xml/api-index-1.0.2.xml:12(link) xml/api-index-full.xml:71(link)
#: xml/cut-assertions.xml:120(link) xml/cut-assertions.xml:1102(primary)
msgid "cut_error_errno"
msgstr ""

#: xml/api-index-1.0.2.xml:13(link) xml/api-index-full.xml:78(link)
#: xml/cut-test-utils.xml:46(link) xml/cut-test-utils.xml:339(primary)
msgid "cut_get_fixture_data_string"
msgstr ""

#: xml/api-index-1.0.2.xml:14(link) xml/api-index-full.xml:88(link)
#: xml/cut-test-utils.xml:48(link) xml/cut-test-utils.xml:362(primary)
msgid "cut_remove_path"
msgstr ""

#: xml/api-index-1.0.2.xml:15(link) xml/api-index-full.xml:93(link)
#: xml/cut-test-utils.xml:42(link) xml/cut-test-utils.xml:299(primary)
msgid "cut_set_fixture_data_dir"
msgstr ""

#: xml/api-index-1.0.3.xml:7(link) xml/api-index-full.xml:16(link)
#: xml/cutter.xml:27(link) xml/cutter.xml:214(primary)
msgid "cut_add_data"
msgstr ""

#: xml/api-index-1.0.3.xml:8(link) xml/api-index-full.xml:18(link)
#: xml/cut-test-utils.xml:38(link) xml/cut-test-utils.xml:262(primary)
msgid "cut_append_diff"
msgstr ""

#: xml/api-index-1.0.3.xml:10(title) xml/api-index-1.0.4.xml:43(title)
#: xml/api-index-1.0.5.xml:25(title) xml/api-index-1.0.6.xml:21(title)
#: xml/api-index-1.0.7.xml:20(title) xml/api-index-1.0.8.xml:6(title)
#: xml/api-index-deprecated.xml:19(title) xml/api-index-full.xml:155(title)
msgid "G"
msgstr ""

#: xml/api-index-1.0.3.xml:11(link) xml/api-index-full.xml:187(link)
#: xml/gcut-assertions.xml:39(link) xml/gcut-assertions.xml:257(primary)
msgid "gcut_assert_equal_list_int"
msgstr ""

#: xml/api-index-1.0.3.xml:12(link) xml/api-index-full.xml:192(link)
#: xml/gcut-assertions.xml:48(link) xml/gcut-assertions.xml:321(primary)
msgid "gcut_assert_equal_list_string"
msgstr ""

#: xml/api-index-1.0.3.xml:13(link) xml/api-index-full.xml:194(link)
#: xml/gcut-assertions.xml:45(link) xml/gcut-assertions.xml:300(primary)
msgid "gcut_assert_equal_list_uint"
msgstr ""

#: xml/api-index-1.0.3.xml:14(link) xml/api-index-full.xml:203(link)
#: xml/gcut-assertions.xml:22(link) xml/gcut-assertions.xml:142(primary)
msgid "gcut_assert_equal_type"
msgstr ""

#: xml/api-index-1.0.3.xml:15(link) xml/api-index-full.xml:207(link)
#: xml/gcut-assertions.xml:28(link) xml/gcut-assertions.xml:185(primary)
msgid "gcut_assert_equal_value"
msgstr ""

#: xml/api-index-1.0.3.xml:16(link) xml/api-index-full.xml:209(link)
#: xml/gcut-assertions.xml:80(link) xml/gcut-assertions.xml:523(primary)
msgid "gcut_assert_error"
msgstr ""

#: xml/api-index-1.0.3.xml:17(link) xml/api-index-full.xml:213(link)
#: xml/gcut-assertions.xml:87(link) xml/gcut-assertions.xml:579(primary)
msgid "gcut_assert_remove_path"
msgstr ""

#: xml/api-index-1.0.3.xml:18(link) xml/api-index-full.xml:314(link)
#: xml/gcut-test-utils.xml:34(link) xml/gcut-test-utils.xml:222(primary)
msgid "gcut_list_string_free"
msgstr ""

#: xml/api-index-1.0.3.xml:19(link) xml/api-index-full.xml:316(link)
#: xml/gcut-test-utils.xml:27(link) xml/gcut-test-utils.xml:139(primary)
msgid "gcut_list_string_new"
msgstr ""

#: xml/api-index-1.0.3.xml:20(link) xml/api-index-full.xml:335(link)
#: xml/gcut-test-utils.xml:23(link) xml/gcut-test-utils.xml:86(primary)
msgid "gcut_take_error"
msgstr ""

#: xml/api-index-1.0.3.xml:21(link) xml/api-index-full.xml:337(link)
#: xml/gcut-test-utils.xml:24(link) xml/gcut-test-utils.xml:102(primary)
msgid "gcut_take_list"
msgstr ""

#: xml/api-index-1.0.3.xml:22(link) xml/api-index-full.xml:342(link)
#: xml/gcut-test-utils.xml:22(link) xml/gcut-test-utils.xml:72(primary)
msgid "gcut_take_object"
msgstr ""

#: xml/api-index-1.0.4.xml:7(link) xml/api-index-full.xml:9(link)
#: xml/cut-multi-process.xml:22(link) xml/cut-multi-process.xml:24(link)
#: xml/cut-multi-process.xml:25(link) xml/cut-multi-process.xml:26(link)
#: xml/cut-multi-process.xml:27(link) xml/cut-multi-process.xml:28(link)
#: xml/cut-multi-process.xml:29(link) xml/cut-multi-process.xml:30(link)
#: xml/cut-multi-process.xml:31(link) xml/cut-multi-process.xml:34(link)
#: xml/cut-multi-process.xml:36(link) xml/cut-multi-process.xml:38(link)
#: xml/cut-multi-process.xml:39(link) xml/cut-multi-process.xml:41(link)
#: xml/cut-multi-process.xml:42(link) xml/cut-multi-process.xml:44(link)
#: xml/cut-multi-process.xml:45(link) xml/cut-multi-process.xml:48(link)
#: xml/cut-multi-process.xml:50(link) xml/cut-multi-process.xml:53(link)
#: xml/cut-multi-process.xml:55(link) xml/cut-multi-process.xml:58(link)
#: xml/cut-multi-process.xml:60(link) xml/cut-multi-process.xml:62(link)
#: xml/cut-multi-process.xml:63(link) xml/cut-multi-process.xml:64(link)
#: xml/cut-multi-process.xml:65(link) xml/cut-multi-process.xml:66(link)
#: xml/cut-multi-process.xml:70(link) xml/cut-multi-process.xml:108(title)
#: xml/cut-multi-process.xml:109(primary)
msgid "CutSubProcess"
msgstr ""

#: xml/api-index-1.0.4.xml:8(link) xml/api-index-full.xml:10(link)
#: xml/cut-multi-process.xml:23(link) xml/cut-multi-process.xml:68(link)
#: xml/cut-multi-process.xml:69(link) xml/cut-multi-process.xml:71(link)
#: xml/cut-multi-process.xml:72(link) xml/cut-multi-process.xml:73(link)
#: xml/cut-multi-process.xml:127(title) xml/cut-multi-process.xml:128(primary)
msgid "CutSubProcessGroup"
msgstr ""

#: xml/api-index-1.0.4.xml:9(link) xml/api-index-full.xml:77(link)
#: xml/cutter.xml:30(link) xml/cutter.xml:353(primary)
msgid "cut_get_current_test_context"
msgstr ""

#: xml/api-index-1.0.4.xml:10(link) xml/api-index-full.xml:91(link)
#: xml/cutter.xml:29(link) xml/cutter.xml:313(primary)
msgid "cut_set_attributes"
msgstr ""

#: xml/api-index-1.0.4.xml:11(link) xml/api-index-full.xml:92(link)
#: xml/cutter.xml:31(link) xml/cutter.xml:394(primary)
msgid "cut_set_current_test_context"
msgstr ""

#: xml/api-index-1.0.4.xml:12(link) xml/api-index-full.xml:98(link)
#: xml/cut-multi-process.xml:62(link) xml/cut-multi-process.xml:504(primary)
msgid "cut_sub_process_get_elapsed"
msgstr ""

#: xml/api-index-1.0.4.xml:13(link) xml/api-index-full.xml:99(link)
#: xml/cut-multi-process.xml:47(link) xml/cut-multi-process.xml:404(primary)
msgid "cut_sub_process_get_exclude_directories"
msgstr ""

#: xml/api-index-1.0.4.xml:14(link) xml/api-index-full.xml:100(link)
#: xml/cut-multi-process.xml:44(link) xml/cut-multi-process.xml:372(primary)
msgid "cut_sub_process_get_exclude_files"
msgstr ""

#: xml/api-index-1.0.4.xml:15(link) xml/api-index-full.xml:101(link)
#: xml/cut-multi-process.xml:65(link) xml/cut-multi-process.xml:547(primary)
msgid "cut_sub_process_get_fatal_failures"
msgstr ""

#: xml/api-index-1.0.4.xml:16(link) xml/api-index-full.xml:103(link)
#: xml/cut-multi-process.xml:38(link) xml/cut-multi-process.xml:307(primary)
msgid "cut_sub_process_get_multi_thread"
msgstr ""

#: xml/api-index-1.0.4.xml:17(link) xml/api-index-full.xml:104(link)
#: xml/cut-multi-process.xml:33(link) xml/cut-multi-process.xml:274(primary)
msgid "cut_sub_process_get_source_directory"
msgstr ""

#: xml/api-index-1.0.4.xml:18(link) xml/api-index-full.xml:105(link)
#: xml/cut-multi-process.xml:52(link) xml/cut-multi-process.xml:440(primary)
msgid "cut_sub_process_get_target_test_case_names"
msgstr ""

#: xml/api-index-1.0.4.xml:19(link) xml/api-index-full.xml:106(link)
#: xml/cut-multi-process.xml:57(link) xml/cut-multi-process.xml:472(primary)
msgid "cut_sub_process_get_target_test_names"
msgstr ""

#: xml/api-index-1.0.4.xml:20(link) xml/api-index-full.xml:107(link)
#: xml/cut-multi-process.xml:30(link) xml/cut-multi-process.xml:243(primary)
msgid "cut_sub_process_get_test_directory"
msgstr ""

#: xml/api-index-1.0.4.xml:21(link) xml/api-index-full.xml:108(link)
#: xml/cut-multi-process.xml:63(link) xml/cut-multi-process.xml:518(primary)
msgid "cut_sub_process_get_total_elapsed"
msgstr ""

#: xml/api-index-1.0.4.xml:22(link) xml/api-index-full.xml:109(link)
#: xml/cut-multi-process.xml:69(link) xml/cut-multi-process.xml:597(primary)
msgid "cut_sub_process_group_add"
msgstr ""

#: xml/api-index-1.0.4.xml:23(link) xml/api-index-full.xml:110(link)
#: xml/cut-multi-process.xml:71(link) xml/cut-multi-process.xml:612(primary)
msgid "cut_sub_process_group_run"
msgstr ""

#: xml/api-index-1.0.4.xml:24(link) xml/api-index-full.xml:111(link)
#: xml/cut-multi-process.xml:72(link) xml/cut-multi-process.xml:628(primary)
msgid "cut_sub_process_group_run_async"
msgstr ""

#: xml/api-index-1.0.4.xml:25(link) xml/api-index-full.xml:112(link)
#: xml/cut-multi-process.xml:73(link) xml/cut-multi-process.xml:641(primary)
msgid "cut_sub_process_group_wait"
msgstr ""

#: xml/api-index-1.0.4.xml:26(link) xml/api-index-full.xml:113(link)
#: xml/cut-multi-process.xml:64(link) xml/cut-multi-process.xml:532(primary)
msgid "cut_sub_process_is_crashed"
msgstr ""

#: xml/api-index-1.0.4.xml:27(link) xml/api-index-full.xml:114(link)
#: xml/cut-multi-process.xml:29(link) xml/cut-multi-process.xml:228(primary)
msgid "cut_sub_process_is_running"
msgstr ""

#: xml/api-index-1.0.4.xml:28(link) xml/api-index-full.xml:115(link)
#: xml/cut-multi-process.xml:28(link) xml/cut-multi-process.xml:212(primary)
msgid "cut_sub_process_is_success"
msgstr ""

#: xml/api-index-1.0.4.xml:29(link) xml/api-index-full.xml:116(link)
#: xml/cut-multi-process.xml:25(link) xml/cut-multi-process.xml:169(primary)
msgid "cut_sub_process_run"
msgstr ""

#: xml/api-index-1.0.4.xml:30(link) xml/api-index-full.xml:117(link)
#: xml/cut-multi-process.xml:26(link) xml/cut-multi-process.xml:184(primary)
msgid "cut_sub_process_run_async"
msgstr ""

#: xml/api-index-1.0.4.xml:31(link) xml/api-index-full.xml:118(link)
#: xml/cut-multi-process.xml:49(link) xml/cut-multi-process.xml:421(primary)
msgid "cut_sub_process_set_exclude_directories"
msgstr ""

#: xml/api-index-1.0.4.xml:32(link) xml/api-index-full.xml:119(link)
#: xml/cut-multi-process.xml:45(link) xml/cut-multi-process.xml:387(primary)
msgid "cut_sub_process_set_exclude_files"
msgstr ""

#: xml/api-index-1.0.4.xml:33(link) xml/api-index-full.xml:120(link)
#: xml/cut-multi-process.xml:66(link) xml/cut-multi-process.xml:564(primary)
msgid "cut_sub_process_set_fatal_failures"
msgstr ""

#: xml/api-index-1.0.4.xml:34(link) xml/api-index-full.xml:122(link)
#: xml/cut-multi-process.xml:39(link) xml/cut-multi-process.xml:322(primary)
msgid "cut_sub_process_set_multi_thread"
msgstr ""

#: xml/api-index-1.0.4.xml:35(link) xml/api-index-full.xml:123(link)
#: xml/cut-multi-process.xml:35(link) xml/cut-multi-process.xml:289(primary)
msgid "cut_sub_process_set_source_directory"
msgstr ""

#: xml/api-index-1.0.4.xml:36(link) xml/api-index-full.xml:124(link)
#: xml/cut-multi-process.xml:54(link) xml/cut-multi-process.xml:455(primary)
msgid "cut_sub_process_set_target_test_case_names"
msgstr ""

#: xml/api-index-1.0.4.xml:37(link) xml/api-index-full.xml:125(link)
#: xml/cut-multi-process.xml:59(link) xml/cut-multi-process.xml:487(primary)
msgid "cut_sub_process_set_target_test_names"
msgstr ""

#: xml/api-index-1.0.4.xml:38(link) xml/api-index-full.xml:126(link)
#: xml/cut-multi-process.xml:31(link) xml/cut-multi-process.xml:257(primary)
msgid "cut_sub_process_set_test_directory"
msgstr ""

#: xml/api-index-1.0.4.xml:39(link) xml/api-index-full.xml:127(link)
#: xml/cut-multi-process.xml:27(link) xml/cut-multi-process.xml:196(primary)
msgid "cut_sub_process_wait"
msgstr ""

#: xml/api-index-1.0.4.xml:40(link) xml/api-index-full.xml:134(link)
#: xml/cut-multi-process.xml:24(link) xml/cut-multi-process.xml:153(primary)
msgid "cut_take_new_sub_process"
msgstr ""

#: xml/api-index-1.0.4.xml:41(link) xml/api-index-full.xml:135(link)
#: xml/cut-multi-process.xml:68(link) xml/cut-multi-process.xml:585(primary)
msgid "cut_take_new_sub_process_group"
msgstr ""

#: xml/api-index-1.0.4.xml:44(link) xml/api-index-full.xml:177(link)
#: xml/gcut-assertions.xml:76(link) xml/gcut-assertions.xml:501(primary)
msgid "gcut_assert_equal_hash_table_string_string"
msgstr ""

#: xml/api-index-1.0.4.xml:45(link) xml/api-index-full.xml:201(link)
#: xml/gcut-assertions.xml:91(link) xml/gcut-assertions.xml:610(primary)
msgid "gcut_assert_equal_time_val"
msgstr ""

#: xml/api-index-1.0.4.xml:46(link) xml/api-index-full.xml:283(link)
#: xml/gcut-test-utils.xml:35(link) xml/gcut-test-utils.xml:233(primary)
msgid "gcut_hash_table_string_string_new"
msgstr ""

#: xml/api-index-1.0.4.xml:47(link) xml/api-index-full.xml:336(link)
#: xml/gcut-test-utils.xml:26(link) xml/gcut-test-utils.xml:123(primary)
msgid "gcut_take_hash_table"
msgstr ""

#: xml/api-index-1.0.5.xml:7(link) xml/api-index-full.xml:57(link)
#: xml/cut-assertions.xml:96(link) xml/cut-assertions.xml:847(primary)
msgid "cut_assert_operator_double"
msgstr ""

#: xml/api-index-1.0.5.xml:8(link) xml/api-index-full.xml:59(link)
#: xml/cut-assertions.xml:95(link) xml/cut-assertions.xml:819(primary)
msgid "cut_assert_operator_size"
msgstr ""

#: xml/api-index-1.0.5.xml:9(link) xml/api-index-full.xml:60(link)
#: xml/cut-assertions.xml:94(link) xml/cut-assertions.xml:791(primary)
msgid "cut_assert_operator_uint"
msgstr ""

#: xml/api-index-1.0.5.xml:10(link) xml/api-index-full.xml:68(link)
#: xml/cut-test-utils.xml:54(link) xml/cut-test-utils.xml:417(primary)
msgid "cut_equal_double"
msgstr ""

#: xml/api-index-1.0.5.xml:11(link) xml/api-index-full.xml:69(link)
#: xml/cut-test-utils.xml:52(link) xml/cut-test-utils.xml:397(primary)
msgid "cut_equal_string"
msgstr ""

#: xml/api-index-1.0.5.xml:12(link) xml/api-index-full.xml:102(link)
#: xml/cut-multi-process.xml:41(link) xml/cut-multi-process.xml:338(primary)
msgid "cut_sub_process_get_max_threads"
msgstr ""

#: xml/api-index-1.0.5.xml:13(link) xml/api-index-full.xml:121(link)
#: xml/cut-multi-process.xml:42(link) xml/cut-multi-process.xml:354(primary)
msgid "cut_sub_process_set_max_threads"
msgstr ""

#: xml/api-index-1.0.5.xml:14(link) xml/api-index-full.xml:130(link)
#: xml/cut-test-utils.xml:21(link) xml/cut-test-utils.xml:86(primary)
msgid "cut_take"
msgstr ""

#: xml/api-index-1.0.5.xml:15(link) xml/api-index-full.xml:132(link)
#: xml/cut-test-utils.xml:28(link) xml/cut-test-utils.xml:170(primary)
msgid "cut_take_memdup"
msgstr ""

#: xml/api-index-1.0.5.xml:16(link) xml/api-index-full.xml:133(link)
#: xml/cut-test-utils.xml:23(link) xml/cut-test-utils.xml:105(primary)
msgid "cut_take_memory"
msgstr ""

#: xml/api-index-1.0.5.xml:17(link) xml/api-index-full.xml:138(link)
#: xml/cut-test-utils.xml:25(link) xml/cut-test-utils.xml:134(primary)
msgid "cut_take_strdup"
msgstr ""

#: xml/api-index-1.0.5.xml:18(link) xml/api-index-full.xml:141(link)
#: xml/cut-test-utils.xml:26(link) xml/cut-test-utils.xml:149(primary)
msgid "cut_take_strndup"
msgstr ""

#: xml/api-index-1.0.5.xml:19(link) xml/api-index-full.xml:147(link)
#: xml/cut-helper.xml:23(link) xml/cut-helper.xml:132(primary)
msgid "cut_test_fail"
msgstr ""

#: xml/api-index-1.0.5.xml:20(link) xml/api-index-deprecated.xml:17(link)
#: xml/api-index-full.xml:148(link) xml/cut-helper.xml:25(link)
#: xml/cut-helper.xml:151(primary)
msgid "cut_test_fail_va_list"
msgstr ""

#: xml/api-index-1.0.5.xml:21(link) xml/api-index-full.xml:149(link)
#: xml/cut-helper.xml:22(link) xml/cut-helper.xml:124(primary)
msgid "cut_test_pass"
msgstr ""

#: xml/api-index-1.0.5.xml:22(link) xml/api-index-full.xml:150(link)
#: xml/cut-helper.xml:30(link) xml/cut-helper.xml:274(primary)
msgid "cut_trace"
msgstr ""

#: xml/api-index-1.0.5.xml:23(link) xml/api-index-full.xml:151(link)
#: xml/cut-helper.xml:31(link) xml/cut-helper.xml:341(primary)
msgid "cut_trace_with_info_expression"
msgstr ""

#: xml/api-index-1.0.5.xml:26(link) xml/api-index-full.xml:169(link)
#: xml/gcut-assertions.xml:94(link) xml/gcut-assertions.xml:631(primary)
msgid "gcut_assert_equal_enum"
msgstr ""

#: xml/api-index-1.0.5.xml:27(link) xml/api-index-full.xml:171(link)
#: xml/gcut-assertions.xml:84(link) xml/gcut-assertions.xml:558(primary)
msgid "gcut_assert_equal_error"
msgstr ""

#: xml/api-index-1.0.5.xml:28(link) xml/api-index-full.xml:173(link)
#: xml/gcut-assertions.xml:98(link) xml/gcut-assertions.xml:665(primary)
msgid "gcut_assert_equal_flags"
msgstr ""

#: xml/api-index-1.0.5.xml:29(link) xml/api-index-full.xml:179(link)
#: xml/gcut-assertions.xml:109(link) xml/gcut-assertions.xml:780(primary)
msgid "gcut_assert_equal_int64"
msgstr ""

#: xml/api-index-1.0.5.xml:30(link) xml/api-index-full.xml:182(link)
#: xml/gcut-assertions.xml:62(link) xml/gcut-assertions.xml:415(primary)
msgid "gcut_assert_equal_list_enum"
msgstr ""

#: xml/api-index-1.0.5.xml:31(link) xml/api-index-full.xml:184(link)
#: xml/gcut-assertions.xml:66(link) xml/gcut-assertions.xml:441(primary)
msgid "gcut_assert_equal_list_flags"
msgstr ""

#: xml/api-index-1.0.5.xml:32(link) xml/api-index-full.xml:189(link)
#: xml/gcut-assertions.xml:54(link) xml/gcut-assertions.xml:364(primary)
msgid "gcut_assert_equal_list_object"
msgstr ""

#: xml/api-index-1.0.5.xml:33(link) xml/api-index-full.xml:190(link)
#: xml/gcut-assertions.xml:57(link) xml/gcut-assertions.xml:386(primary)
msgid "gcut_assert_equal_list_object_custom"
msgstr ""

#: xml/api-index-1.0.5.xml:34(link) xml/api-index-full.xml:196(link)
#: xml/gcut-assertions.xml:102(link) xml/gcut-assertions.xml:704(primary)
msgid "gcut_assert_equal_object"
msgstr ""

#: xml/api-index-1.0.5.xml:35(link) xml/api-index-full.xml:197(link)
#: xml/gcut-assertions.xml:105(link) xml/gcut-assertions.xml:736(primary)
msgid "gcut_assert_equal_object_custom"
msgstr ""

#: xml/api-index-1.0.5.xml:36(link) xml/api-index-full.xml:205(link)
#: xml/gcut-assertions.xml:112(link) xml/gcut-assertions.xml:801(primary)
msgid "gcut_assert_equal_uint64"
msgstr ""

#: xml/api-index-1.0.5.xml:37(link) xml/api-index-full.xml:270(link)
#: xml/gcut-enum.xml:25(link) xml/gcut-enum.xml:105(primary)
msgid "gcut_enum_inspect"
msgstr ""

#: xml/api-index-1.0.5.xml:38(link) xml/api-index-full.xml:272(link)
#: xml/gcut-error.xml:22(link) xml/gcut-error.xml:53(primary)
msgid "gcut_error_equal"
msgstr ""

#: xml/api-index-1.0.5.xml:39(link) xml/api-index-full.xml:274(link)
#: xml/gcut-error.xml:24(link) xml/gcut-error.xml:72(primary)
msgid "gcut_error_inspect"
msgstr ""

#: xml/api-index-1.0.5.xml:40(link) xml/api-index-full.xml:276(link)
#: xml/gcut-enum.xml:30(link) xml/gcut-enum.xml:149(primary)
msgid "gcut_flags_inspect"
msgstr ""

#: xml/api-index-1.0.5.xml:41(link) xml/api-index-full.xml:278(link)
#: xml/gcut-hash-table.xml:22(link) xml/gcut-hash-table.xml:62(primary)
msgid "gcut_hash_table_equal"
msgstr ""

#: xml/api-index-1.0.5.xml:42(link) xml/api-index-full.xml:279(link)
#: xml/gcut-hash-table.xml:25(link) xml/gcut-hash-table.xml:94(primary)
msgid "gcut_hash_table_inspect"
msgstr ""

#: xml/api-index-1.0.5.xml:43(link) xml/api-index-full.xml:280(link)
#: xml/gcut-hash-table.xml:29(link) xml/gcut-hash-table.xml:129(primary)
msgid "gcut_hash_table_string_equal"
msgstr ""

#: xml/api-index-1.0.5.xml:44(link) xml/api-index-full.xml:282(link)
#: xml/gcut-hash-table.xml:31(link) xml/gcut-hash-table.xml:150(primary)
msgid "gcut_hash_table_string_string_inspect"
msgstr ""

#: xml/api-index-1.0.5.xml:45(link) xml/api-index-full.xml:284(link)
#: xml/gcut-test-utils.xml:37(link) xml/gcut-test-utils.xml:257(primary)
msgid "gcut_hash_table_string_string_new_va_list"
msgstr ""

#: xml/api-index-1.0.5.xml:46(link) xml/api-index-deprecated.xml:20(link)
#: xml/api-index-full.xml:297(link) xml/gcut-list.xml:49(link)
#: xml/gcut-list.xml:399(primary)
msgid "gcut_list_enum_inspect"
msgstr ""

#: xml/api-index-1.0.5.xml:47(link) xml/api-index-full.xml:298(link)
#: xml/gcut-list.xml:22(link) xml/gcut-list.xml:79(primary)
msgid "gcut_list_equal"
msgstr ""

#: xml/api-index-1.0.5.xml:48(link) xml/api-index-deprecated.xml:21(link)
#: xml/api-index-full.xml:302(link) xml/gcut-list.xml:50(link)
#: xml/gcut-list.xml:416(primary)
msgid "gcut_list_flags_inspect"
msgstr ""

#: xml/api-index-1.0.5.xml:49(link) xml/api-index-full.xml:303(link)
#: xml/gcut-list.xml:25(link) xml/gcut-list.xml:109(primary)
msgid "gcut_list_inspect"
msgstr ""

#: xml/api-index-1.0.5.xml:50(link) xml/api-index-deprecated.xml:22(link)
#: xml/api-index-full.xml:310(link) xml/gcut-list.xml:42(link)
#: xml/gcut-list.xml:299(primary)
msgid "gcut_list_int_equal"
msgstr ""

#: xml/api-index-1.0.5.xml:51(link) xml/api-index-deprecated.xml:23(link)
#: xml/api-index-full.xml:311(link) xml/gcut-list.xml:43(link)
#: xml/gcut-list.xml:315(primary)
msgid "gcut_list_int_inspect"
msgstr ""

#: xml/api-index-1.0.5.xml:52(link) xml/api-index-deprecated.xml:24(link)
#: xml/api-index-full.xml:312(link) xml/gcut-list.xml:48(link)
#: xml/gcut-list.xml:386(primary)
msgid "gcut_list_object_inspect"
msgstr ""

#: xml/api-index-1.0.5.xml:53(link) xml/api-index-deprecated.xml:25(link)
#: xml/api-index-full.xml:313(link) xml/gcut-list.xml:46(link)
#: xml/gcut-list.xml:357(primary)
msgid "gcut_list_string_equal"
msgstr ""

#: xml/api-index-1.0.5.xml:54(link) xml/api-index-deprecated.xml:26(link)
#: xml/api-index-full.xml:315(link) xml/gcut-list.xml:47(link)
#: xml/gcut-list.xml:373(primary)
msgid "gcut_list_string_inspect"
msgstr ""

#: xml/api-index-1.0.5.xml:55(link) xml/api-index-deprecated.xml:27(link)
#: xml/api-index-full.xml:318(link) xml/gcut-list.xml:44(link)
#: xml/gcut-list.xml:328(primary)
msgid "gcut_list_uint_equal"
msgstr ""

#: xml/api-index-1.0.5.xml:56(link) xml/api-index-deprecated.xml:28(link)
#: xml/api-index-full.xml:319(link) xml/gcut-list.xml:45(link)
#: xml/gcut-list.xml:344(primary)
msgid "gcut_list_uint_inspect"
msgstr ""

#: xml/api-index-1.0.5.xml:57(link) xml/api-index-full.xml:320(link)
#: xml/gcut-object.xml:22(link) xml/gcut-object.xml:57(primary)
msgid "gcut_object_equal"
msgstr ""

#: xml/api-index-1.0.5.xml:58(link) xml/api-index-full.xml:321(link)
#: xml/gcut-object.xml:25(link) xml/gcut-object.xml:83(primary)
msgid "gcut_object_inspect"
msgstr ""

#: xml/api-index-1.0.5.xml:59(link) xml/api-index-full.xml:322(link)
#: xml/gcut-object.xml:26(link) xml/gcut-object.xml:98(primary)
msgid "gcut_object_inspect_custom"
msgstr ""

#: xml/api-index-1.0.5.xml:60(link) xml/api-index-full.xml:338(link)
#: xml/gcut-test-utils.xml:40(link) xml/gcut-test-utils.xml:282(primary)
msgid "gcut_take_new_hash_table_string_string"
msgstr ""

#: xml/api-index-1.0.5.xml:61(link) xml/api-index-full.xml:339(link)
#: xml/gcut-test-utils.xml:30(link) xml/gcut-test-utils.xml:173(primary)
msgid "gcut_take_new_list_string"
msgstr ""

#: xml/api-index-1.0.5.xml:62(link) xml/api-index-full.xml:344(link)
#: xml/gcut-value-equal.xml:22(link) xml/gcut-value-equal.xml:55(primary)
msgid "gcut_value_equal"
msgstr ""

#: xml/api-index-1.0.5.xml:63(link) xml/api-index-full.xml:347(link)
#: xml/gcut-value-equal.xml:24(link) xml/gcut-value-equal.xml:76(primary)
msgid "gcut_value_register_equal_func"
msgstr ""

#: xml/api-index-1.0.5.xml:64(link) xml/api-index-full.xml:349(link)
#: xml/gdkcut-pixbuf-assertions.xml:22(link)
#: xml/gdkcut-pixbuf-assertions.xml:48(primary)
msgid "gdkcut_pixbuf_assert_equal"
msgstr ""

#: xml/api-index-1.0.6.xml:7(link) xml/api-index-full.xml:31(link)
#: xml/cut-assertions.xml:47(link) xml/cut-assertions.xml:387(primary)
msgid "cut_assert_equal_size"
msgstr ""

#: xml/api-index-1.0.6.xml:8(link) xml/api-index-full.xml:80(link)
#: xml/cutter.xml:36(link) xml/cutter.xml:437(primary)
msgid "cut_keep_message"
msgstr ""

#: xml/api-index-1.0.6.xml:9(link) xml/api-index-full.xml:85(link)
#: xml/cut-helper.xml:29(link) xml/cut-helper.xml:263(primary)
msgid "cut_pop_backtrace"
msgstr ""

#: xml/api-index-1.0.6.xml:10(link) xml/api-index-full.xml:86(link)
#: xml/cut-helper.xml:28(link) xml/cut-helper.xml:247(primary)
msgid "cut_push_backtrace"
msgstr ""

#: xml/api-index-1.0.6.xml:11(link) xml/api-index-full.xml:87(link)
#: xml/cut-helper.xml:27(link) xml/cut-helper.xml:185(title)
#: xml/cut-helper.xml:186(primary)
msgid "CUT_RELATIVE_PATH"
msgstr ""

#: xml/api-index-1.0.6.xml:12(link) xml/api-index-full.xml:89(link)
#: xml/cut-assertions.xml:131(link) xml/cut-assertions.xml:1209(primary)
msgid "cut_return"
msgstr ""

#: xml/api-index-1.0.6.xml:13(link) xml/api-index-full.xml:90(link)
#: xml/cutter.xml:22(link) xml/cutter.xml:166(primary)
msgid "cut_setup"
msgstr ""

#: xml/api-index-1.0.6.xml:14(link) xml/api-index-full.xml:94(link)
#: xml/cutter.xml:32(link) xml/cutter.xml:407(primary)
msgid "cut_set_message"
msgstr ""

#: xml/api-index-1.0.6.xml:15(link) xml/api-index-full.xml:95(link)
#: xml/cutter.xml:34(link) xml/cutter.xml:422(primary)
msgid "cut_set_message_va_list"
msgstr ""

#: xml/api-index-1.0.6.xml:16(link) xml/api-index-full.xml:96(link)
#: xml/cutter.xml:26(link) xml/cutter.xml:205(primary)
msgid "cut_shutdown"
msgstr ""

#: xml/api-index-1.0.6.xml:17(link) xml/api-index-full.xml:97(link)
#: xml/cutter.xml:25(link) xml/cutter.xml:196(primary)
msgid "cut_startup"
msgstr ""

#: xml/api-index-1.0.6.xml:18(link) xml/api-index-full.xml:137(link)
#: xml/cut-test-utils.xml:35(link) xml/cut-test-utils.xml:239(primary)
msgid "cut_take_replace"
msgstr ""

#: xml/api-index-1.0.6.xml:19(link) xml/api-index-full.xml:142(link)
#: xml/cutter.xml:24(link) xml/cutter.xml:186(primary)
msgid "cut_teardown"
msgstr ""

#: xml/api-index-1.0.6.xml:22(link) xml/api-index-full.xml:159(link)
#: xml/gcut-egg.xml:599(primary)
msgid "GCutEgg::error"
msgstr ""

#: xml/api-index-1.0.6.xml:23(link) xml/api-index-full.xml:160(link)
#: xml/gcut-egg.xml:616(primary)
msgid "GCutEgg::error-received"
msgstr ""

#: xml/api-index-1.0.6.xml:24(link) xml/api-index-full.xml:161(link)
#: xml/gcut-egg.xml:645(primary)
msgid "GCutEgg::output-received"
msgstr ""

#: xml/api-index-1.0.6.xml:25(link) xml/api-index-full.xml:162(link)
#: xml/gcut-egg.xml:673(primary)
msgid "GCutEgg::reaped"
msgstr ""

#: xml/api-index-1.0.6.xml:26(link) xml/api-index-full.xml:164(link)
#: xml/gcut-egg.xml:24(link) xml/gcut-egg.xml:185(primary)
msgid "GCutEggError"
msgstr ""

#: xml/api-index-1.0.6.xml:27(link) xml/api-index-full.xml:165(link)
#: xml/gcut-enum.xml:24(link) xml/gcut-enum.xml:82(primary)
msgid "GCutEnumError"
msgstr ""

#: xml/api-index-1.0.6.xml:28(link) xml/api-index-full.xml:166(link)
#: xml/gcut-assertions-helper.xml:32(link)
#: xml/gcut-assertions-helper.xml:71(link)
#: xml/gcut-assertions-helper.xml:72(link) xml/gcut-assertions.xml:37(link)
#: xml/gcut-assertions.xml:73(link) xml/gcut-assertions.xml:74(link)
#: xml/gcut-hash-table.xml:26(link) xml/gcut-hash-table.xml:27(link)
#: xml/gcut-list.xml:26(link) xml/gcut-object.xml:27(link)
#: xml/gcut-types.xml:49(primary)
msgid "GCutInspectFunction"
msgstr ""

#: xml/api-index-1.0.6.xml:29(link) xml/api-index-full.xml:167(link)
#: xml/gcutter.xml:21(link) xml/gcutter.xml:74(title)
#: xml/gcutter.xml:75(primary)
msgid "GCUTTER_ENABLED"
msgstr ""

#: xml/api-index-1.0.6.xml:30(link) xml/api-index-full.xml:168(link)
#: xml/gcut-data.xml:22(link) xml/gcut-data.xml:67(primary)
msgid "gcut_add_datum"
msgstr ""

#: xml/api-index-1.0.6.xml:31(link) xml/api-index-full.xml:175(link)
#: xml/gcut-assertions.xml:70(link) xml/gcut-assertions.xml:467(primary)
msgid "gcut_assert_equal_hash_table"
msgstr ""

#: xml/api-index-1.0.6.xml:32(link) xml/api-index-full.xml:181(link)
#: xml/gcut-assertions.xml:34(link) xml/gcut-assertions.xml:228(primary)
msgid "gcut_assert_equal_list"
msgstr ""

#: xml/api-index-1.0.6.xml:33(link) xml/api-index-full.xml:199(link)
#: xml/gcut-assertions.xml:115(link) xml/gcut-assertions.xml:822(primary)
msgid "gcut_assert_equal_pid"
msgstr ""

#: xml/api-index-1.0.6.xml:34(link) xml/api-index-full.xml:217(link)
#: xml/gcut-data.xml:35(link) xml/gcut-data.xml:342(primary)
msgid "gcut_data_get_enum"
msgstr ""

#: xml/api-index-1.0.6.xml:35(link) xml/api-index-full.xml:219(link)
#: xml/gcut-data.xml:33(link) xml/gcut-data.xml:323(primary)
msgid "gcut_data_get_flags"
msgstr ""

#: xml/api-index-1.0.6.xml:36(link) xml/api-index-full.xml:221(link)
#: xml/gcut-data.xml:27(link) xml/gcut-data.xml:268(primary)
msgid "gcut_data_get_int"
msgstr ""

#: xml/api-index-1.0.6.xml:37(link) xml/api-index-full.xml:223(link)
#: xml/gcut-data.xml:37(link) xml/gcut-data.xml:361(primary)
msgid "gcut_data_get_pointer"
msgstr ""

#: xml/api-index-1.0.6.xml:38(link) xml/api-index-full.xml:225(link)
#: xml/gcut-data.xml:25(link) xml/gcut-data.xml:250(primary)
msgid "gcut_data_get_string"
msgstr ""

#: xml/api-index-1.0.6.xml:39(link) xml/api-index-full.xml:227(link)
#: xml/gcut-data.xml:31(link) xml/gcut-data.xml:305(primary)
msgid "gcut_data_get_type"
msgstr ""

#: xml/api-index-1.0.6.xml:40(link) xml/api-index-full.xml:229(link)
#: xml/gcut-data.xml:29(link) xml/gcut-data.xml:286(primary)
msgid "gcut_data_get_uint"
msgstr ""

#: xml/api-index-1.0.6.xml:41(link) xml/api-index-full.xml:246(link)
#: xml/gcut-egg.xml:43(link) xml/gcut-egg.xml:409(primary)
msgid "gcut_egg_close"
msgstr ""

#: xml/api-index-1.0.6.xml:42(link) xml/api-index-full.xml:249(link)
#: xml/gcut-egg.xml:40(link) xml/gcut-egg.xml:374(primary)
msgid "gcut_egg_get_env"
msgstr ""

#: xml/api-index-1.0.6.xml:43(link) xml/api-index-full.xml:250(link)
#: xml/gcut-egg.xml:56(link) xml/gcut-egg.xml:538(primary)
msgid "gcut_egg_get_error"
msgstr ""

#: xml/api-index-1.0.6.xml:44(link) xml/api-index-full.xml:251(link)
#: xml/gcut-egg.xml:36(link) xml/gcut-egg.xml:340(primary)
msgid "gcut_egg_get_flags"
msgstr ""

#: xml/api-index-1.0.6.xml:45(link) xml/api-index-full.xml:252(link)
#: xml/gcut-egg.xml:57(link) xml/gcut-egg.xml:554(primary)
msgid "gcut_egg_get_forced_termination_wait_time"
msgstr ""

#: xml/api-index-1.0.6.xml:46(link) xml/api-index-full.xml:253(link)
#: xml/gcut-egg.xml:54(link) xml/gcut-egg.xml:506(primary)
msgid "gcut_egg_get_input"
msgstr ""

#: xml/api-index-1.0.6.xml:47(link) xml/api-index-full.xml:254(link)
#: xml/gcut-egg.xml:55(link) xml/gcut-egg.xml:522(primary)
msgid "gcut_egg_get_output"
msgstr ""

#: xml/api-index-1.0.6.xml:48(link) xml/api-index-full.xml:255(link)
#: xml/gcut-egg.xml:48(link) xml/gcut-egg.xml:447(primary)
msgid "gcut_egg_get_pid"
msgstr ""

#: xml/api-index-1.0.6.xml:49(link) xml/api-index-full.xml:256(link)
#: xml/gcut-egg.xml:41(link) xml/gcut-egg.xml:391(primary)
msgid "gcut_egg_hatch"
msgstr ""

#: xml/api-index-1.0.6.xml:50(link) xml/api-index-full.xml:257(link)
#: xml/gcut-egg.xml:52(link) xml/gcut-egg.xml:491(primary)
msgid "gcut_egg_kill"
msgstr ""

#: xml/api-index-1.0.6.xml:51(link) xml/api-index-full.xml:258(link)
#: xml/gcut-egg.xml:26(link) xml/gcut-egg.xml:240(primary)
msgid "gcut_egg_new"
msgstr ""

#: xml/api-index-1.0.6.xml:52(link) xml/api-index-full.xml:259(link)
#: xml/gcut-egg.xml:30(link) xml/gcut-egg.xml:276(primary)
msgid "gcut_egg_new_argv"
msgstr ""

#: xml/api-index-1.0.6.xml:53(link) xml/api-index-full.xml:260(link)
#: xml/gcut-egg.xml:33(link) xml/gcut-egg.xml:310(primary)
msgid "gcut_egg_new_array"
msgstr ""

#: xml/api-index-1.0.6.xml:54(link) xml/api-index-full.xml:261(link)
#: xml/gcut-egg.xml:32(link) xml/gcut-egg.xml:295(primary)
msgid "gcut_egg_new_strings"
msgstr ""

#: xml/api-index-1.0.6.xml:55(link) xml/api-index-full.xml:262(link)
#: xml/gcut-egg.xml:28(link) xml/gcut-egg.xml:258(primary)
msgid "gcut_egg_new_va_list"
msgstr ""

#: xml/api-index-1.0.6.xml:56(link) xml/api-index-full.xml:263(link)
#: xml/gcut-egg.xml:37(link) xml/gcut-egg.xml:354(primary)
msgid "gcut_egg_set_env"
msgstr ""

#: xml/api-index-1.0.6.xml:57(link) xml/api-index-full.xml:264(link)
#: xml/gcut-egg.xml:34(link) xml/gcut-egg.xml:325(primary)
msgid "gcut_egg_set_flags"
msgstr ""

#: xml/api-index-1.0.6.xml:58(link) xml/api-index-full.xml:265(link)
#: xml/gcut-egg.xml:59(link) xml/gcut-egg.xml:571(primary)
msgid "gcut_egg_set_forced_termination_wait_time"
msgstr ""

#: xml/api-index-1.0.6.xml:59(link) xml/api-index-full.xml:266(link)
#: xml/gcut-egg.xml:49(link) xml/gcut-egg.xml:463(primary)
msgid "gcut_egg_wait"
msgstr ""

#: xml/api-index-1.0.6.xml:60(link) xml/api-index-full.xml:267(link)
#: xml/gcut-egg.xml:44(link) xml/gcut-egg.xml:421(primary)
msgid "gcut_egg_write"
msgstr ""

#: xml/api-index-1.0.6.xml:61(link) xml/api-index-full.xml:268(link)
#: xml/gcut-enum.xml:22(link) xml/gcut-enum.xml:64(title)
#: xml/gcut-enum.xml:65(primary)
msgid "GCUT_ENUM_ERROR"
msgstr ""

#: xml/api-index-1.0.6.xml:62(link) xml/api-index-full.xml:271(link)
#: xml/gcut-enum.xml:27(link) xml/gcut-enum.xml:124(primary)
msgid "gcut_enum_parse"
msgstr ""

#: xml/api-index-1.0.6.xml:63(link) xml/api-index-full.xml:275(link)
#: xml/gcut-enum.xml:35(link) xml/gcut-enum.xml:194(primary)
msgid "gcut_flags_get_all"
msgstr ""

#: xml/api-index-1.0.6.xml:64(link) xml/api-index-full.xml:277(link)
#: xml/gcut-enum.xml:32(link) xml/gcut-enum.xml:168(primary)
msgid "gcut_flags_parse"
msgstr ""

#: xml/api-index-1.0.6.xml:65(link) xml/api-index-full.xml:286(link)
#: xml/gcut-inspect.xml:22(link) xml/gcut-inspect.xml:71(primary)
msgid "gcut_inspect_direct"
msgstr ""

#: xml/api-index-1.0.6.xml:66(link) xml/api-index-full.xml:287(link)
#: xml/gcut-inspect.xml:40(link) xml/gcut-inspect.xml:227(primary)
msgid "gcut_inspect_enum"
msgstr ""

#: xml/api-index-1.0.6.xml:67(link) xml/api-index-full.xml:288(link)
#: xml/gcut-inspect.xml:37(link) xml/gcut-inspect.xml:196(primary)
msgid "gcut_inspect_flags"
msgstr ""

#: xml/api-index-1.0.6.xml:68(link) xml/api-index-full.xml:289(link)
#: xml/gcut-inspect.xml:25(link) xml/gcut-inspect.xml:96(primary)
msgid "gcut_inspect_int"
msgstr ""

#: xml/api-index-1.0.6.xml:69(link) xml/api-index-full.xml:290(link)
#: xml/gcut-inspect.xml:43(link) xml/gcut-inspect.xml:258(primary)
msgid "gcut_inspect_pointer"
msgstr "gcut_inspect_pointer"

#: xml/api-index-1.0.6.xml:70(link) xml/api-index-full.xml:291(link)
#: xml/gcut-inspect.xml:31(link) xml/gcut-inspect.xml:146(primary)
msgid "gcut_inspect_string"
msgstr ""

#: xml/api-index-1.0.6.xml:71(link) xml/api-index-full.xml:292(link)
#: xml/gcut-inspect.xml:34(link) xml/gcut-inspect.xml:171(primary)
msgid "gcut_inspect_type"
msgstr ""

#: xml/api-index-1.0.6.xml:72(link) xml/api-index-full.xml:293(link)
#: xml/gcut-inspect.xml:28(link) xml/gcut-inspect.xml:121(primary)
msgid "gcut_inspect_uint"
msgstr ""

#: xml/api-index-1.0.6.xml:73(link) xml/api-index-full.xml:299(link)
#: xml/gcut-list.xml:28(link) xml/gcut-list.xml:139(primary)
msgid "gcut_list_equal_int"
msgstr ""

#: xml/api-index-1.0.6.xml:74(link) xml/api-index-full.xml:300(link)
#: xml/gcut-list.xml:34(link) xml/gcut-list.xml:209(primary)
msgid "gcut_list_equal_string"
msgstr ""

#: xml/api-index-1.0.6.xml:75(link) xml/api-index-full.xml:301(link)
#: xml/gcut-list.xml:31(link) xml/gcut-list.xml:174(primary)
msgid "gcut_list_equal_uint"
msgstr ""

#: xml/api-index-1.0.6.xml:76(link) xml/api-index-full.xml:304(link)
#: xml/gcut-list.xml:38(link) xml/gcut-list.xml:259(primary)
msgid "gcut_list_inspect_enum"
msgstr ""

#: xml/api-index-1.0.6.xml:77(link) xml/api-index-full.xml:305(link)
#: xml/gcut-list.xml:40(link) xml/gcut-list.xml:279(primary)
msgid "gcut_list_inspect_flags"
msgstr ""

#: xml/api-index-1.0.6.xml:78(link) xml/api-index-full.xml:306(link)
#: xml/gcut-list.xml:30(link) xml/gcut-list.xml:159(primary)
msgid "gcut_list_inspect_int"
msgstr ""

#: xml/api-index-1.0.6.xml:79(link) xml/api-index-full.xml:307(link)
#: xml/gcut-list.xml:37(link) xml/gcut-list.xml:244(primary)
msgid "gcut_list_inspect_object"
msgstr ""

#: xml/api-index-1.0.6.xml:80(link) xml/api-index-full.xml:308(link)
#: xml/gcut-list.xml:36(link) xml/gcut-list.xml:229(primary)
msgid "gcut_list_inspect_string"
msgstr ""

#: xml/api-index-1.0.6.xml:81(link) xml/api-index-full.xml:309(link)
#: xml/gcut-list.xml:33(link) xml/gcut-list.xml:194(primary)
msgid "gcut_list_inspect_uint"
msgstr ""

#: xml/api-index-1.0.6.xml:82(link) xml/api-index-full.xml:317(link)
#: xml/gcut-test-utils.xml:29(link) xml/gcut-test-utils.xml:158(primary)
msgid "gcut_list_string_new_array"
msgstr ""

#: xml/api-index-1.0.6.xml:83(link) xml/api-index-full.xml:340(link)
#: xml/gcut-test-utils.xml:33(link) xml/gcut-test-utils.xml:206(primary)
msgid "gcut_take_new_list_string_array"
msgstr ""

#: xml/api-index-1.0.6.xml:84(link) xml/api-index-full.xml:348(link)
#: xml/gdkcutter-pixbuf.xml:21(link) xml/gdkcutter-pixbuf.xml:76(title)
#: xml/gdkcutter-pixbuf.xml:77(primary)
msgid "GDKCUTTER_PIXBUF_ENABLED"
msgstr ""

#: xml/api-index-1.0.7.xml:7(link) xml/api-index-full.xml:11(link)
#: xml/cut-version.xml:25(link) xml/cut-version.xml:85(primary)
msgid "CUTTER_CHECK_VERSION"
msgstr ""

#: xml/api-index-1.0.7.xml:8(link) xml/api-index-full.xml:21(link)
#: xml/cut-assertions.xml:27(link) xml/cut-assertions.xml:214(primary)
msgid "cut_assert_equal_boolean"
msgstr ""

#: xml/api-index-1.0.7.xml:9(link) xml/api-index-full.xml:37(link)
#: xml/cut-assertions.xml:70(link) xml/cut-assertions.xml:573(primary)
msgid "cut_assert_equal_substring"
msgstr ""

#: xml/api-index-1.0.7.xml:10(link) xml/api-index-full.xml:45(link)
#: xml/cut-assertions.xml:29(link) xml/cut-assertions.xml:239(primary)
msgid "cut_assert_not_equal_boolean"
msgstr ""

#: xml/api-index-1.0.7.xml:11(link) xml/api-index-full.xml:46(link)
#: xml/cut-assertions.xml:56(link) xml/cut-assertions.xml:448(primary)
msgid "cut_assert_not_equal_double"
msgstr ""

#: xml/api-index-1.0.7.xml:12(link) xml/api-index-full.xml:47(link)
#: xml/cut-assertions.xml:40(link) xml/cut-assertions.xml:336(primary)
msgid "cut_assert_not_equal_int"
msgstr ""

#: xml/api-index-1.0.7.xml:13(link) xml/api-index-full.xml:48(link)
#: xml/cut-assertions.xml:81(link) xml/cut-assertions.xml:666(primary)
msgid "cut_assert_not_equal_memory"
msgstr ""

#: xml/api-index-1.0.7.xml:14(link) xml/api-index-full.xml:49(link)
#: xml/cut-assertions.xml:50(link) xml/cut-assertions.xml:408(primary)
msgid "cut_assert_not_equal_size"
msgstr ""

#: xml/api-index-1.0.7.xml:15(link) xml/api-index-full.xml:50(link)
#: xml/cut-assertions.xml:62(link) xml/cut-assertions.xml:499(primary)
msgid "cut_assert_not_equal_string"
msgstr ""

#: xml/api-index-1.0.7.xml:16(link) xml/api-index-full.xml:51(link)
#: xml/cut-assertions.xml:73(link) xml/cut-assertions.xml:605(primary)
msgid "cut_assert_not_equal_substring"
msgstr ""

#: xml/api-index-1.0.7.xml:17(link) xml/api-index-full.xml:52(link)
#: xml/cut-assertions.xml:45(link) xml/cut-assertions.xml:372(primary)
msgid "cut_assert_not_equal_uint"
msgstr ""

#: xml/api-index-1.0.7.xml:18(link) xml/api-index-full.xml:67(link)
#: xml/cut-test-utils.xml:50(link) xml/cut-test-utils.xml:379(primary)
msgid "cut_build_path"
msgstr ""

#: xml/api-index-1.0.7.xml:21(link) xml/api-index-full.xml:211(link)
#: xml/gcut-assertions.xml:117(link) xml/gcut-assertions.xml:837(primary)
msgid "gcut_assert_not_equal_pid"
msgstr ""

#: xml/api-index-1.0.7.xml:22(link) xml/api-index-full.xml:215(link)
#: xml/gcut-data.xml:39(link) xml/gcut-data.xml:380(primary)
msgid "gcut_data_get_boxed"
msgstr ""

#: xml/api-index-1.0.7.xml:23(link) xml/api-index-full.xml:273(link)
#: xml/gcut-types.xml:25(link) xml/gcut-types.xml:79(primary)
msgid "gcut_error_get_type"
msgstr ""

#: xml/api-index-1.0.7.xml:24(link) xml/api-index-full.xml:343(link)
#: xml/gcut-types.xml:24(link) xml/gcut-types.xml:70(title)
#: xml/gcut-types.xml:71(primary)
msgid "GCUT_TYPE_ERROR"
msgstr ""

#: xml/api-index-1.0.8.xml:7(link) xml/api-index-full.xml:281(link)
#: xml/gcut-hash-table.xml:33(link) xml/gcut-hash-table.xml:167(primary)
msgid "gcut_hash_table_string_string_copy"
msgstr ""

#: xml/api-index-1.0.8.xml:9(title) xml/api-index-deprecated.xml:31(title)
#: xml/api-index-full.xml:356(title)
msgid "S"
msgstr ""

#: xml/api-index-1.0.8.xml:10(link) xml/api-index-full.xml:360(link)
#: xml/soupcutter.xml:21(link) xml/soupcutter.xml:76(title)
#: xml/soupcutter.xml:77(primary)
msgid "SOUPCUTTER_ENABLED"
msgstr ""

#: xml/api-index-1.0.8.xml:11(link) xml/api-index-full.xml:361(link)
#: xml/soupcut-assertions.xml:29(link) xml/soupcut-assertions.xml:100(primary)
msgid "soupcut_client_assert_equal_body"
msgstr ""

#: xml/api-index-1.0.8.xml:12(link) xml/api-index-full.xml:363(link)
#: xml/soupcut-assertions.xml:25(link) xml/soupcut-assertions.xml:72(primary)
msgid "soupcut_client_assert_equal_content_type"
msgstr ""

#: xml/api-index-1.0.8.xml:13(link) xml/api-index-full.xml:365(link)
#: xml/soupcut-assertions.xml:31(link) xml/soupcut-assertions.xml:115(primary)
msgid "soupcut_client_assert_match_body"
msgstr ""

#: xml/api-index-1.0.8.xml:14(link) xml/api-index-full.xml:367(link)
#: xml/soupcut-assertions.xml:28(link) xml/soupcut-assertions.xml:89(primary)
msgid "soupcut_client_assert_response"
msgstr ""

#: xml/api-index-1.0.8.xml:15(link) xml/api-index-full.xml:369(link)
#: xml/soupcut-client.xml:27(link) xml/soupcut-client.xml:122(primary)
msgid "soupcut_client_get"
msgstr ""

#: xml/api-index-1.0.8.xml:16(link) xml/api-index-full.xml:370(link)
#: xml/soupcut-client.xml:33(link) xml/soupcut-client.xml:177(primary)
msgid "soupcut_client_get_async_context"
msgstr ""

#: xml/api-index-1.0.8.xml:17(link) xml/api-index-full.xml:371(link)
#: xml/soupcut-client.xml:32(link) xml/soupcut-client.xml:163(primary)
msgid "soupcut_client_get_latest_message"
msgstr ""

#: xml/api-index-1.0.8.xml:18(link) xml/api-index-full.xml:372(link)
#: xml/soupcut-client.xml:31(link) xml/soupcut-client.xml:149(primary)
msgid "soupcut_client_get_n_messages"
msgstr ""

#: xml/api-index-1.0.8.xml:19(link) xml/api-index-full.xml:373(link)
#: xml/soupcut-client.xml:22(link) xml/soupcut-client.xml:78(primary)
msgid "soupcut_client_new"
msgstr ""

#: xml/api-index-1.0.8.xml:20(link) xml/api-index-full.xml:374(link)
#: xml/soupcut-client.xml:25(link) xml/soupcut-client.xml:104(primary)
msgid "soupcut_client_send_message"
msgstr ""

#: xml/api-index-1.0.8.xml:21(link) xml/api-index-full.xml:375(link)
#: xml/soupcut-client.xml:23(link) xml/soupcut-client.xml:89(primary)
msgid "soupcut_client_set_base"
msgstr ""

#: xml/api-index-1.0.8.xml:22(link) xml/api-index-full.xml:376(link)
#: xml/soupcut-assertions.xml:22(link) xml/soupcut-assertions.xml:56(primary)
msgid "soupcut_message_assert_equal_content_type"
msgstr ""

#: xml/api-index-1.0.8.xml:23(link) xml/api-index-full.xml:378(link)
#: xml/soupcut-server.xml:23(link) xml/soupcut-server.xml:77(primary)
msgid "soupcut_server_build_uri"
msgstr ""

#: xml/api-index-1.0.8.xml:24(link) xml/api-index-full.xml:379(link)
#: xml/soupcut-server.xml:21(link) xml/soupcut-server.xml:48(primary)
msgid "soupcut_server_take"
msgstr ""

#: xml/api-index-1.0.8.xml:25(link) xml/api-index-full.xml:380(link)
#: xml/soupcut-server.xml:22(link) xml/soupcut-server.xml:62(primary)
msgid "soupcut_server_take_new"
msgstr ""

#: xml/api-index-1.0.xml:7(link) xml/api-index-full.xml:30(link)
#: xml/cut-assertions.xml:111(link) xml/cut-assertions.xml:1046(primary)
msgid "cut_assert_equal_pointer"
msgstr ""

#: xml/api-index-1.0.xml:8(link) xml/api-index-deprecated.xml:14(link)
#: xml/api-index-full.xml:42(link) xml/gcut-assertions.xml:82(link)
#: xml/gcut-assertions.xml:540(primary)
msgid "cut_assert_g_error"
msgstr ""

#: xml/api-index-1.0.xml:9(link) xml/api-index-full.xml:43(link)
#: xml/cut-assertions.xml:105(link) xml/cut-assertions.xml:996(primary)
msgid "cut_assert_match"
msgstr ""

#: xml/api-index-1.0.xml:10(link) xml/api-index-full.xml:44(link)
#: xml/cut-assertions.xml:108(link) xml/cut-assertions.xml:1024(primary)
msgid "cut_assert_match_with_free"
msgstr ""

#: xml/api-index-deprecated.xml:7(link) xml/api-index-full.xml:17(link)
#: xml/cutter.xml:28(link) xml/cutter.xml:300(primary)
msgid "cut_add_data_backward_compatibility"
msgstr ""

#: xml/api-index-deprecated.xml:10(link) xml/api-index-full.xml:26(link)
#: xml/gcut-assertions.xml:25(link) xml/gcut-assertions.xml:163(primary)
msgid "cut_assert_equal_g_type"
msgstr ""

#: xml/api-index-deprecated.xml:11(link) xml/api-index-full.xml:27(link)
#: xml/gcut-assertions.xml:31(link) xml/gcut-assertions.xml:206(primary)
msgid "cut_assert_equal_g_value"
msgstr ""

#: xml/api-index-deprecated.xml:12(link) xml/api-index-full.xml:35(link)
#: xml/cut-assertions.xml:67(link) xml/cut-assertions.xml:550(primary)
msgid "cut_assert_equal_string_or_null"
msgstr ""

#: xml/api-index-deprecated.xml:16(link) xml/api-index-full.xml:84(link)
#: xml/cut-assertions.xml:125(link) xml/cut-assertions.xml:1155(primary)
msgid "cut_pending"
msgstr ""

#: xml/api-index-deprecated.xml:29(link) xml/api-index-full.xml:341(link)
#: xml/gcut-test-utils.xml:32(link) xml/gcut-test-utils.xml:193(primary)
msgid "gcut_take_new_list_string_backward_compatibility"
msgstr ""

#: xml/api-index-deprecated.xml:32(link) xml/api-index-full.xml:357(link)
#: xml/cutter.xml:21(link) xml/cutter.xml:156(primary)
msgid "setup"
msgstr ""

#: xml/api-index-deprecated.xml:34(title) xml/api-index-full.xml:382(title)
msgid "T"
msgstr ""

#: xml/api-index-deprecated.xml:35(link) xml/api-index-full.xml:383(link)
#: xml/cutter.xml:23(link) xml/cutter.xml:175(primary)
msgid "teardown"
msgstr ""

#: xml/api-index-full.xml:7(link) xml/cut-types.xml:63(primary)
#: xml/gcut-data-helper.xml:23(link) xml/gcut-data-helper.xml:26(link)
#: xml/gcut-data-helper.xml:29(link) xml/gcut-data-helper.xml:32(link)
#: xml/gcut-data-helper.xml:35(link) xml/gcut-data-helper.xml:38(link)
#: xml/gcut-data-helper.xml:41(link) xml/gcut-data-helper.xml:44(link)
msgid "CutCallbackFunction"
msgstr ""

#: xml/api-index-full.xml:8(link) xml/cut-test-utils.xml:22(link)
#: xml/cut-types.xml:49(primary) xml/gcut-public.xml:27(link)
#: xml/gcut-test-utils.xml:25(link)
msgid "CutDestroyFunction"
msgstr ""

#: xml/api-index-full.xml:12(link) xml/cut-version.xml:21(link)
#: xml/cut-version.xml:51(title) xml/cut-version.xml:52(primary)
msgid "CUTTER_VERSION_MAJOR"
msgstr ""

#: xml/api-index-full.xml:13(link) xml/cut-version.xml:23(link)
#: xml/cut-version.xml:67(title) xml/cut-version.xml:68(primary)
msgid "CUTTER_VERSION_MICRO"
msgstr ""

#: xml/api-index-full.xml:14(link) xml/cut-version.xml:22(link)
#: xml/cut-version.xml:59(title) xml/cut-version.xml:60(primary)
msgid "CUTTER_VERSION_MINOR"
msgstr ""

#: xml/api-index-full.xml:15(link) xml/cut-version.xml:24(link)
#: xml/cut-version.xml:75(title) xml/cut-version.xml:76(primary)
msgid "CUTTER_VERSION_STRING"
msgstr ""

#: xml/api-index-full.xml:19(link) xml/cut-assertions.xml:21(link)
#: xml/cut-assertions.xml:163(primary)
msgid "cut_assert"
msgstr ""

#: xml/api-index-full.xml:20(link) xml/cut-assertions.xml:97(link)
#: xml/cut-assertions.xml:875(primary)
msgid "cut_assert_equal"
msgstr ""

#: xml/api-index-full.xml:22(link) xml/cut-assertions.xml:52(link)
#: xml/cut-assertions.xml:423(primary)
msgid "cut_assert_equal_double"
msgstr ""

#: xml/api-index-full.xml:28(link) xml/cut-assertions.xml:37(link)
#: xml/cut-assertions.xml:315(primary)
msgid "cut_assert_equal_int"
msgstr ""

#: xml/api-index-full.xml:29(link) xml/cut-assertions.xml:76(link)
#: xml/cut-assertions.xml:636(primary)
msgid "cut_assert_equal_memory"
msgstr ""

#: xml/api-index-full.xml:32(link) xml/cut-assertions.xml:59(link)
#: xml/cut-assertions.xml:467(primary)
msgid "cut_assert_equal_string"
msgstr ""

#: xml/api-index-full.xml:33(link) xml/cut-assertions.xml:85(link)
#: xml/cut-assertions.xml:690(primary)
msgid "cut_assert_equal_string_array"
msgstr ""

#: xml/api-index-full.xml:38(link) xml/cut-assertions.xml:42(link)
#: xml/cut-assertions.xml:351(primary)
msgid "cut_assert_equal_uint"
msgstr ""

#: xml/api-index-full.xml:53(link) xml/cut-assertions.xml:35(link)
#: xml/cut-assertions.xml:298(primary)
msgid "cut_assert_not_null"
msgstr ""

#: xml/api-index-full.xml:54(link) xml/cut-assertions.xml:31(link)
#: xml/cut-assertions.xml:264(primary)
msgid "cut_assert_null"
msgstr ""

#: xml/api-index-full.xml:56(link) xml/cut-assertions.xml:92(link)
#: xml/cut-assertions.xml:735(primary)
msgid "cut_assert_operator"
msgstr ""

#: xml/api-index-full.xml:58(link) xml/cut-assertions.xml:93(link)
#: xml/cut-assertions.xml:763(primary)
msgid "cut_assert_operator_int"
msgstr ""

#: xml/api-index-full.xml:65(link) xml/cut-assertions.xml:21(link)
#: xml/cut-assertions.xml:23(link) xml/cut-assertions.xml:25(link)
#: xml/cut-assertions.xml:27(link) xml/cut-assertions.xml:28(link)
#: xml/cut-assertions.xml:29(link) xml/cut-assertions.xml:30(link)
#: xml/cut-multi-process.xml:25(link) xml/cut-multi-process.xml:27(link)
#: xml/cut-multi-process.xml:28(link) xml/cut-multi-process.xml:29(link)
#: xml/cut-multi-process.xml:38(link) xml/cut-multi-process.xml:40(link)
#: xml/cut-multi-process.xml:64(link) xml/cut-multi-process.xml:65(link)
#: xml/cut-multi-process.xml:67(link) xml/cut-multi-process.xml:71(link)
#: xml/cut-multi-process.xml:73(link) xml/cut-test-utils.xml:52(link)
#: xml/cut-test-utils.xml:54(link) xml/cut-types.xml:23(link)
#: xml/cut-types.xml:67(title) xml/cut-types.xml:68(primary)
msgid "cut_boolean"
msgstr ""

#: xml/api-index-full.xml:70(link) xml/cut-assertions.xml:118(link)
#: xml/cut-assertions.xml:1087(primary)
msgid "cut_error"
msgstr ""

#: xml/api-index-full.xml:72(link) xml/cut-assertions.xml:121(link)
#: xml/cut-assertions.xml:1124(primary)
msgid "cut_fail"
msgstr ""

#: xml/api-index-full.xml:73(link) xml/cut-types.xml:25(link)
#: xml/cut-types.xml:84(title) xml/cut-types.xml:85(primary)
msgid "CUT_FALSE"
msgstr ""

#: xml/api-index-full.xml:79(link) xml/cut-test-utils.xml:41(link)
#: xml/cut-test-utils.xml:286(primary)
msgid "cut_inspect_string_array"
msgstr ""

#: xml/api-index-full.xml:81(link) xml/cut-assertions.xml:127(link)
#: xml/cut-assertions.xml:1172(primary)
msgid "cut_notify"
msgstr ""

#: xml/api-index-full.xml:83(link) xml/cut-assertions.xml:123(link)
#: xml/cut-assertions.xml:1139(primary)
msgid "cut_pend"
msgstr ""

#: xml/api-index-full.xml:128(link) xml/cut-features.xml:22(link)
#: xml/cut-features.xml:49(title) xml/cut-features.xml:50(primary)
msgid "CUT_SUPPORT_GDK_PIXBUF"
msgstr ""

#: xml/api-index-full.xml:129(link) xml/cut-features.xml:21(link)
#: xml/cut-features.xml:43(title) xml/cut-features.xml:44(primary)
msgid "CUT_SUPPORT_GLIB"
msgstr ""

#: xml/api-index-full.xml:131(link) xml/cut-test-utils.xml:33(link)
#: xml/cut-test-utils.xml:222(primary)
msgid "cut_take_diff"
msgstr ""

#: xml/api-index-full.xml:136(link) xml/cut-test-utils.xml:30(link)
#: xml/cut-test-utils.xml:190(primary)
msgid "cut_take_printf"
msgstr ""

#: xml/api-index-full.xml:139(link) xml/cut-test-utils.xml:24(link)
#: xml/cut-test-utils.xml:120(primary)
msgid "cut_take_string"
msgstr ""

#: xml/api-index-full.xml:140(link) xml/cut-test-utils.xml:32(link)
#: xml/cut-test-utils.xml:208(primary)
msgid "cut_take_string_array"
msgstr ""

#: xml/api-index-full.xml:143(link) xml/gcut-public.xml:23(link)
#: xml/gcut-public.xml:66(primary)
msgid "cut_test_context_take_g_error"
msgstr ""

#: xml/api-index-full.xml:144(link) xml/gcut-public.xml:28(link)
#: xml/gcut-public.xml:100(primary)
msgid "cut_test_context_take_g_hash_table"
msgstr ""

#: xml/api-index-full.xml:145(link) xml/gcut-public.xml:25(link)
#: xml/gcut-public.xml:81(primary)
msgid "cut_test_context_take_g_list"
msgstr ""

#: xml/api-index-full.xml:146(link) xml/gcut-public.xml:21(link)
#: xml/gcut-public.xml:51(primary)
msgid "cut_test_context_take_g_object"
msgstr ""

#: xml/api-index-full.xml:152(link) xml/cut-types.xml:24(link)
#: xml/cut-types.xml:76(title) xml/cut-types.xml:77(primary)
msgid "CUT_TRUE"
msgstr ""

#: xml/api-index-full.xml:156(link) xml/gcut-dynamic-data.xml:7(refentrytitle)
#: xml/gcut-dynamic-data.xml:13(refname) xml/gcut-dynamic-data.xml:23(link)
#: xml/gcut-dynamic-data.xml:26(link) xml/gcut-dynamic-data.xml:28(link)
#: xml/gcut-dynamic-data.xml:30(link) xml/gcut-dynamic-data.xml:31(link)
#: xml/gcut-dynamic-data.xml:32(link) xml/gcut-dynamic-data.xml:33(link)
#: xml/gcut-dynamic-data.xml:36(link) xml/gcut-dynamic-data.xml:39(link)
#: xml/gcut-dynamic-data.xml:42(link) xml/gcut-dynamic-data.xml:45(link)
#: xml/gcut-dynamic-data.xml:48(link) xml/gcut-dynamic-data.xml:51(link)
#: xml/gcut-dynamic-data.xml:54(link) xml/gcut-dynamic-data.xml:100(title)
#: xml/gcut-dynamic-data.xml:101(primary)
msgid "GCutDynamicData"
msgstr ""

#: xml/api-index-full.xml:157(link) xml/gcut-dynamic-data.xml:24(link)
#: xml/gcut-dynamic-data.xml:106(primary)
msgid "GCutDynamicDataError"
msgstr ""

#: xml/api-index-full.xml:158(link) xml/gcut-egg.xml:23(link)
#: xml/gcut-egg.xml:26(link) xml/gcut-egg.xml:28(link)
#: xml/gcut-egg.xml:30(link) xml/gcut-egg.xml:32(link)
#: xml/gcut-egg.xml:33(link) xml/gcut-egg.xml:34(link)
#: xml/gcut-egg.xml:36(link) xml/gcut-egg.xml:37(link)
#: xml/gcut-egg.xml:40(link) xml/gcut-egg.xml:41(link)
#: xml/gcut-egg.xml:43(link) xml/gcut-egg.xml:44(link)
#: xml/gcut-egg.xml:48(link) xml/gcut-egg.xml:49(link)
#: xml/gcut-egg.xml:52(link) xml/gcut-egg.xml:54(link)
#: xml/gcut-egg.xml:55(link) xml/gcut-egg.xml:56(link)
#: xml/gcut-egg.xml:58(link) xml/gcut-egg.xml:60(link)
#: xml/gcut-egg.xml:179(title) xml/gcut-egg.xml:180(primary)
msgid "GCutEgg"
msgstr ""

#: xml/api-index-full.xml:163(link) xml/gcut-egg.xml:592(primary)
msgid "GCutEgg:command"
msgstr ""

#: xml/api-index-full.xml:170(link) xml/gcut-assertions-helper.xml:94(link)
#: xml/gcut-assertions-helper.xml:507(primary)
msgid "gcut_assert_equal_enum_helper"
msgstr ""

#: xml/api-index-full.xml:172(link) xml/gcut-assertions-helper.xml:84(link)
#: xml/gcut-assertions-helper.xml:452(primary)
msgid "gcut_assert_equal_error_helper"
msgstr ""

#: xml/api-index-full.xml:174(link) xml/gcut-assertions-helper.xml:100(link)
#: xml/gcut-assertions-helper.xml:536(primary)
msgid "gcut_assert_equal_flags_helper"
msgstr ""

#: xml/api-index-full.xml:176(link) xml/gcut-assertions-helper.xml:68(link)
#: xml/gcut-assertions-helper.xml:376(primary)
msgid "gcut_assert_equal_hash_table_helper"
msgstr ""

#: xml/api-index-full.xml:178(link) xml/gcut-assertions-helper.xml:77(link)
#: xml/gcut-assertions-helper.xml:417(primary)
msgid "gcut_assert_equal_hash_table_string_string_helper"
msgstr ""

#: xml/api-index-full.xml:180(link) xml/gcut-assertions-helper.xml:112(link)
#: xml/gcut-assertions-helper.xml:594(primary)
msgid "gcut_assert_equal_int64_helper"
msgstr ""

#: xml/api-index-full.xml:183(link) xml/gcut-assertions-helper.xml:50(link)
#: xml/gcut-assertions-helper.xml:292(primary)
msgid "gcut_assert_equal_list_enum_helper"
msgstr ""

#: xml/api-index-full.xml:185(link) xml/gcut-assertions-helper.xml:56(link)
#: xml/gcut-assertions-helper.xml:321(primary)
msgid "gcut_assert_equal_list_flags_helper"
msgstr ""

#: xml/api-index-full.xml:186(link) xml/gcut-assertions-helper.xml:29(link)
#: xml/gcut-assertions-helper.xml:191(primary)
msgid "gcut_assert_equal_list_helper"
msgstr ""

#: xml/api-index-full.xml:188(link) xml/gcut-assertions-helper.xml:37(link)
#: xml/gcut-assertions-helper.xml:228(primary)
msgid "gcut_assert_equal_list_int_helper"
msgstr ""

#: xml/api-index-full.xml:191(link) xml/gcut-assertions-helper.xml:62(link)
#: xml/gcut-assertions-helper.xml:350(primary)
msgid "gcut_assert_equal_list_object_helper"
msgstr ""

#: xml/api-index-full.xml:193(link) xml/gcut-assertions-helper.xml:45(link)
#: xml/gcut-assertions-helper.xml:270(primary)
msgid "gcut_assert_equal_list_string_helper"
msgstr ""

#: xml/api-index-full.xml:195(link) xml/gcut-assertions-helper.xml:41(link)
#: xml/gcut-assertions-helper.xml:249(primary)
msgid "gcut_assert_equal_list_uint_helper"
msgstr ""

#: xml/api-index-full.xml:198(link) xml/gcut-assertions-helper.xml:106(link)
#: xml/gcut-assertions-helper.xml:565(primary)
msgid "gcut_assert_equal_object_helper"
msgstr ""

#: xml/api-index-full.xml:200(link) xml/gcut-assertions-helper.xml:120(link)
#: xml/gcut-assertions-helper.xml:636(primary)
msgid "gcut_assert_equal_pid_helper"
msgstr ""

#: xml/api-index-full.xml:202(link) xml/gcut-assertions-helper.xml:90(link)
#: xml/gcut-assertions-helper.xml:486(primary)
msgid "gcut_assert_equal_time_val_helper"
msgstr ""

#: xml/api-index-full.xml:204(link) xml/gcut-assertions-helper.xml:21(link)
#: xml/gcut-assertions-helper.xml:149(primary)
msgid "gcut_assert_equal_type_helper"
msgstr ""

#: xml/api-index-full.xml:206(link) xml/gcut-assertions-helper.xml:116(link)
#: xml/gcut-assertions-helper.xml:615(primary)
msgid "gcut_assert_equal_uint64_helper"
msgstr ""

#: xml/api-index-full.xml:208(link) xml/gcut-assertions-helper.xml:25(link)
#: xml/gcut-assertions-helper.xml:170(primary)
msgid "gcut_assert_equal_value_helper"
msgstr ""

#: xml/api-index-full.xml:210(link) xml/gcut-assertions-helper.xml:82(link)
#: xml/gcut-assertions-helper.xml:439(primary)
msgid "gcut_assert_error_helper"
msgstr ""

#: xml/api-index-full.xml:212(link) xml/gcut-assertions-helper.xml:124(link)
#: xml/gcut-assertions-helper.xml:657(primary)
msgid "gcut_assert_not_equal_pid_helper"
msgstr ""

#: xml/api-index-full.xml:214(link) xml/gcut-assertions-helper.xml:88(link)
#: xml/gcut-assertions-helper.xml:473(primary)
msgid "gcut_assert_remove_path_helper"
msgstr ""

#: xml/api-index-full.xml:216(link) xml/gcut-data-helper.xml:42(link)
#: xml/gcut-data-helper.xml:199(primary)
msgid "gcut_data_get_boxed_helper"
msgstr ""

#: xml/api-index-full.xml:218(link) xml/gcut-data-helper.xml:36(link)
#: xml/gcut-data-helper.xml:161(primary)
msgid "gcut_data_get_enum_helper"
msgstr ""

#: xml/api-index-full.xml:220(link) xml/gcut-data-helper.xml:33(link)
#: xml/gcut-data-helper.xml:142(primary)
msgid "gcut_data_get_flags_helper"
msgstr ""

#: xml/api-index-full.xml:222(link) xml/gcut-data-helper.xml:24(link)
#: xml/gcut-data-helper.xml:85(primary)
msgid "gcut_data_get_int_helper"
msgstr ""

#: xml/api-index-full.xml:224(link) xml/gcut-data-helper.xml:39(link)
#: xml/gcut-data-helper.xml:180(primary)
msgid "gcut_data_get_pointer_helper"
msgstr ""

#: xml/api-index-full.xml:226(link) xml/gcut-data-helper.xml:21(link)
#: xml/gcut-data-helper.xml:66(primary)
msgid "gcut_data_get_string_helper"
msgstr ""

#: xml/api-index-full.xml:228(link) xml/gcut-data-helper.xml:30(link)
#: xml/gcut-data-helper.xml:123(primary)
msgid "gcut_data_get_type_helper"
msgstr ""

#: xml/api-index-full.xml:230(link) xml/gcut-data-helper.xml:27(link)
#: xml/gcut-data-helper.xml:104(primary)
msgid "gcut_data_get_uint_helper"
msgstr ""

#: xml/api-index-full.xml:231(link) xml/gcut-dynamic-data.xml:22(link)
#: xml/gcut-dynamic-data.xml:91(primary)
msgid "GCUT_DYNAMIC_DATA"
msgstr ""

#: xml/api-index-full.xml:232(link) xml/gcut-dynamic-data.xml:31(link)
#: xml/gcut-dynamic-data.xml:164(primary)
msgid "gcut_dynamic_data_equal"
msgstr ""

#: xml/api-index-full.xml:233(link) xml/gcut-dynamic-data.xml:21(link)
#: xml/gcut-dynamic-data.xml:84(title) xml/gcut-dynamic-data.xml:85(primary)
msgid "GCUT_DYNAMIC_DATA_ERROR"
msgstr ""

#: xml/api-index-full.xml:234(link) xml/gcut-dynamic-data.xml:25(link)
#: xml/gcut-dynamic-data.xml:115(primary)
msgid "gcut_dynamic_data_error_quark"
msgstr ""

#: xml/api-index-full.xml:235(link) xml/gcut-dynamic-data.xml:54(link)
#: xml/gcut-dynamic-data.xml:312(primary)
msgid "gcut_dynamic_data_get_boxed"
msgstr ""

#: xml/api-index-full.xml:236(link) xml/gcut-dynamic-data.xml:42(link)
#: xml/gcut-dynamic-data.xml:236(primary)
msgid "gcut_dynamic_data_get_data_type"
msgstr ""

#: xml/api-index-full.xml:237(link) xml/gcut-dynamic-data.xml:48(link)
#: xml/gcut-dynamic-data.xml:274(primary)
msgid "gcut_dynamic_data_get_enum"
msgstr ""

#: xml/api-index-full.xml:238(link) xml/gcut-dynamic-data.xml:45(link)
#: xml/gcut-dynamic-data.xml:255(primary)
msgid "gcut_dynamic_data_get_flags"
msgstr ""

#: xml/api-index-full.xml:239(link) xml/gcut-dynamic-data.xml:36(link)
#: xml/gcut-dynamic-data.xml:198(primary)
msgid "gcut_dynamic_data_get_int"
msgstr ""

#: xml/api-index-full.xml:240(link) xml/gcut-dynamic-data.xml:51(link)
#: xml/gcut-dynamic-data.xml:293(primary)
msgid "gcut_dynamic_data_get_pointer"
msgstr "gcut_dynamic_data_get_pointer"

#: xml/api-index-full.xml:241(link) xml/gcut-dynamic-data.xml:33(link)
#: xml/gcut-dynamic-data.xml:179(primary)
msgid "gcut_dynamic_data_get_string"
msgstr ""

#: xml/api-index-full.xml:242(link) xml/gcut-dynamic-data.xml:39(link)
#: xml/gcut-dynamic-data.xml:217(primary)
msgid "gcut_dynamic_data_get_uint"
msgstr ""

#: xml/api-index-full.xml:243(link) xml/gcut-dynamic-data.xml:30(link)
#: xml/gcut-dynamic-data.xml:153(primary)
msgid "gcut_dynamic_data_inspect"
msgstr ""

#: xml/api-index-full.xml:244(link) xml/gcut-dynamic-data.xml:26(link)
#: xml/gcut-dynamic-data.xml:123(primary)
msgid "gcut_dynamic_data_new"
msgstr ""

#: xml/api-index-full.xml:245(link) xml/gcut-dynamic-data.xml:28(link)
#: xml/gcut-dynamic-data.xml:138(primary)
msgid "gcut_dynamic_data_new_va_list"
msgstr ""

#: xml/api-index-full.xml:247(link) xml/gcut-egg.xml:22(link)
#: xml/gcut-egg.xml:173(title) xml/gcut-egg.xml:174(primary)
msgid "GCUT_EGG_ERROR"
msgstr ""

#: xml/api-index-full.xml:248(link) xml/gcut-egg.xml:25(link)
#: xml/gcut-egg.xml:232(primary)
msgid "gcut_egg_error_quark"
msgstr ""

#: xml/api-index-full.xml:269(link) xml/gcut-enum.xml:23(link)
#: xml/gcut-enum.xml:74(primary)
msgid "gcut_enum_error_quark"
msgstr ""

#: xml/api-index-full.xml:285(link) xml/gcut-main.xml:21(link)
#: xml/gcut-main.xml:46(primary)
msgid "gcut_init"
msgstr ""

#: xml/api-index-full.xml:294(link) xml/gcut-io.xml:21(link)
#: xml/gcut-io.xml:43(primary)
msgid "gcut_io_inspect_condition"
msgstr ""

#: xml/api-index-full.xml:295(link) xml/gcut-key-file.xml:21(link)
#: xml/gcut-key-file.xml:52(primary)
msgid "gcut_key_file_get_enum"
msgstr ""

#: xml/api-index-full.xml:296(link) xml/gcut-key-file.xml:26(link)
#: xml/gcut-key-file.xml:79(primary)
msgid "gcut_key_file_get_flags"
msgstr ""

#: xml/api-index-full.xml:323(link) xml/gcut-main.xml:23(link)
#: xml/gcut-main.xml:56(primary)
msgid "gcut_quit"
msgstr ""

#: xml/api-index-full.xml:324(link) xml/gcut-string-io-channel.xml:23(link)
#: xml/gcut-string-io-channel.xml:85(primary)
msgid "gcut_string_io_channel_clear"
msgstr ""

#: xml/api-index-full.xml:325(link) xml/gcut-string-io-channel.xml:24(link)
#: xml/gcut-string-io-channel.xml:94(primary)
msgid "gcut_string_io_channel_get_buffer_limit"
msgstr ""

#: xml/api-index-full.xml:326(link) xml/gcut-string-io-channel.xml:29(link)
#: xml/gcut-string-io-channel.xml:120(primary)
msgid "gcut_string_io_channel_get_limit"
msgstr ""

#: xml/api-index-full.xml:327(link) xml/gcut-string-io-channel.xml:37(link)
#: xml/gcut-string-io-channel.xml:170(primary)
msgid "gcut_string_io_channel_get_pipe_mode"
msgstr ""

#: xml/api-index-full.xml:328(link) xml/gcut-string-io-channel.xml:32(link)
#: xml/gcut-string-io-channel.xml:144(primary)
msgid "gcut_string_io_channel_get_read_fail"
msgstr ""

#: xml/api-index-full.xml:329(link) xml/gcut-string-io-channel.xml:22(link)
#: xml/gcut-string-io-channel.xml:74(primary)
msgid "gcut_string_io_channel_get_string"
msgstr ""

#: xml/api-index-full.xml:330(link) xml/gcut-string-io-channel.xml:21(link)
#: xml/gcut-string-io-channel.xml:63(primary)
msgid "gcut_string_io_channel_new"
msgstr ""

#: xml/api-index-full.xml:331(link) xml/gcut-string-io-channel.xml:26(link)
#: xml/gcut-string-io-channel.xml:106(primary)
msgid "gcut_string_io_channel_set_buffer_limit"
msgstr ""

#: xml/api-index-full.xml:332(link) xml/gcut-string-io-channel.xml:30(link)
#: xml/gcut-string-io-channel.xml:131(primary)
msgid "gcut_string_io_channel_set_limit"
msgstr ""

#: xml/api-index-full.xml:333(link) xml/gcut-string-io-channel.xml:39(link)
#: xml/gcut-string-io-channel.xml:182(primary)
msgid "gcut_string_io_channel_set_pipe_mode"
msgstr ""

#: xml/api-index-full.xml:334(link) xml/gcut-string-io-channel.xml:34(link)
#: xml/gcut-string-io-channel.xml:156(primary)
msgid "gcut_string_io_channel_set_read_fail"
msgstr ""

#: xml/api-index-full.xml:345(link) xml/gcut-main.xml:22(link)
#: xml/gcut-main.xml:51(primary)
msgid "gcut_value_equal_init"
msgstr ""

#: xml/api-index-full.xml:346(link) xml/gcut-main.xml:24(link)
#: xml/gcut-main.xml:61(primary)
msgid "gcut_value_equal_quit"
msgstr ""

#: xml/api-index-full.xml:350(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:21(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:48(primary)
msgid "gdkcut_pixbuf_assert_equal_helper"
msgstr ""

#: xml/api-index-full.xml:351(link) xml/gdkcut-pixbuf.xml:26(link)
#: xml/gdkcut-pixbuf.xml:89(primary)
msgid "gdkcut_pixbuf_diff"
msgstr ""

#: xml/api-index-full.xml:352(link) xml/gdkcut-pixbuf.xml:23(link)
#: xml/gdkcut-pixbuf.xml:70(primary)
msgid "gdkcut_pixbuf_equal_content"
msgstr ""

#: xml/api-index-full.xml:353(link) xml/gdkcut-pixbuf.xml:21(link)
#: xml/gdkcut-pixbuf.xml:55(primary)
msgid "gdkcut_pixbuf_equal_property"
msgstr ""

#: xml/api-index-full.xml:354(link) xml/gdkcut-pixbuf.xml:29(link)
#: xml/gdkcut-pixbuf.xml:108(primary)
msgid "gdkcut_pixbuf_save_diff"
msgstr ""

#: xml/api-index-full.xml:358(link) xml/soupcut-assertions-helper.xml:28(link)
#: xml/soupcut-assertions-helper.xml:32(link)
#: xml/soupcut-assertions-helper.xml:36(link)
#: xml/soupcut-assertions-helper.xml:41(link)
#: xml/soupcut-assertions.xml:27(link) xml/soupcut-assertions.xml:28(link)
#: xml/soupcut-assertions.xml:30(link) xml/soupcut-assertions.xml:32(link)
#: xml/soupcut-client.xml:21(link) xml/soupcut-client.xml:22(link)
#: xml/soupcut-client.xml:23(link) xml/soupcut-client.xml:25(link)
#: xml/soupcut-client.xml:27(link) xml/soupcut-client.xml:31(link)
#: xml/soupcut-client.xml:32(link) xml/soupcut-client.xml:33(link)
#: xml/soupcut-client.xml:72(title) xml/soupcut-client.xml:73(primary)
msgid "SoupCutClient"
msgstr ""

#: xml/api-index-full.xml:359(link) xml/soupcut-client.xml:194(primary)
msgid "SoupCutClient:async"
msgstr ""

#: xml/api-index-full.xml:362(link) xml/soupcut-assertions-helper.xml:34(link)
#: xml/soupcut-assertions-helper.xml:123(primary)
msgid "soupcut_client_assert_equal_body_helper"
msgstr ""

#: xml/api-index-full.xml:364(link) xml/soupcut-assertions-helper.xml:26(link)
#: xml/soupcut-assertions-helper.xml:87(primary)
msgid "soupcut_client_assert_equal_content_type_helper"
msgstr ""

#: xml/api-index-full.xml:366(link) xml/soupcut-assertions-helper.xml:39(link)
#: xml/soupcut-assertions-helper.xml:145(primary)
msgid "soupcut_client_assert_match_body_helper"
msgstr ""

#: xml/api-index-full.xml:368(link) xml/soupcut-assertions-helper.xml:31(link)
#: xml/soupcut-assertions-helper.xml:109(primary)
msgid "soupcut_client_assert_response_helper"
msgstr ""

#: xml/api-index-full.xml:377(link) xml/soupcut-assertions-helper.xml:21(link)
#: xml/soupcut-assertions-helper.xml:65(primary)
msgid "soupcut_message_assert_equal_content_type_helper"
msgstr ""

#: xml/cut-analyzer.xml:7(refentrytitle) xml/cut-analyzer.xml:13(refname)
msgid "CutAnalyzer"
msgstr ""

#: xml/cut-analyzer.xml:8(manvolnum) xml/cut-assertions.xml:8(manvolnum)
#: xml/cut-backtrace-entry.xml:8(manvolnum)
#: xml/cut-cairo-chart-data.xml:8(manvolnum)
#: xml/cut-cairo-pie-chart.xml:8(manvolnum) xml/cut-cairo.xml:8(manvolnum)
#: xml/cut-contractor.xml:8(manvolnum)
#: xml/cut-crash-backtrace.xml:8(manvolnum) xml/cut-diff.xml:8(manvolnum)
#: xml/cut-elf-loader.xml:8(manvolnum) xml/cut-experimental.xml:8(manvolnum)
#: xml/cut-factory-builder.xml:8(manvolnum) xml/cut-features.xml:8(manvolnum)
#: xml/cut-file-stream-reader.xml:8(manvolnum) xml/cut-helper.xml:8(manvolnum)
#: xml/cut-iterated-test.xml:8(manvolnum)
#: xml/cut-listener-utils.xml:8(manvolnum) xml/cut-listener.xml:8(manvolnum)
#: xml/cut-mach-o-loader.xml:8(manvolnum) xml/cut-main.xml:8(manvolnum)
#: xml/cut-module-factory-utils.xml:8(manvolnum)
#: xml/cut-module-factory.xml:8(manvolnum)
#: xml/cut-multi-process.xml:8(manvolnum) xml/cut-pe-loader.xml:8(manvolnum)
#: xml/cut-pipeline.xml:8(manvolnum) xml/cut-process.xml:8(manvolnum)
#: xml/cut-report-factory-builder.xml:8(manvolnum)
#: xml/cut-report.xml:8(manvolnum) xml/cut-run-context.xml:8(manvolnum)
#: xml/cut-runner.xml:8(manvolnum) xml/cut-sequence-matcher.xml:8(manvolnum)
#: xml/cut-stream-factory-builder.xml:8(manvolnum)
#: xml/cut-stream-parser.xml:8(manvolnum)
#: xml/cut-stream-reader.xml:8(manvolnum) xml/cut-stream.xml:8(manvolnum)
#: xml/cut-test-data.xml:8(manvolnum) xml/cut-test-iterator.xml:8(manvolnum)
#: xml/cut-test-runner.xml:8(manvolnum)
#: xml/cut-test-utils-helper.xml:8(manvolnum)
#: xml/cut-test-utils.xml:8(manvolnum) xml/cut-types.xml:8(manvolnum)
#: xml/cut-ui-factory-builder.xml:8(manvolnum) xml/cut-ui.xml:8(manvolnum)
#: xml/cut-version.xml:8(manvolnum) xml/cutter.xml:8(manvolnum)
#: xml/gbsearcharray.xml:8(manvolnum)
#: xml/gcut-assertions-helper.xml:8(manvolnum)
#: xml/gcut-assertions.xml:8(manvolnum) xml/gcut-data-helper.xml:8(manvolnum)
#: xml/gcut-data.xml:8(manvolnum) xml/gcut-dynamic-data.xml:8(manvolnum)
#: xml/gcut-egg.xml:8(manvolnum) xml/gcut-enum.xml:8(manvolnum)
#: xml/gcut-error.xml:8(manvolnum) xml/gcut-hash-table.xml:8(manvolnum)
#: xml/gcut-inspect.xml:8(manvolnum) xml/gcut-io.xml:8(manvolnum)
#: xml/gcut-key-file.xml:8(manvolnum) xml/gcut-list.xml:8(manvolnum)
#: xml/gcut-main.xml:8(manvolnum) xml/gcut-object.xml:8(manvolnum)
#: xml/gcut-public.xml:8(manvolnum)
#: xml/gcut-string-io-channel.xml:8(manvolnum)
#: xml/gcut-test-utils.xml:8(manvolnum) xml/gcut-types.xml:8(manvolnum)
#: xml/gcut-value-equal.xml:8(manvolnum) xml/gcutter.xml:8(manvolnum)
#: xml/gdkcut-pixbuf-assertions-helper.xml:8(manvolnum)
#: xml/gdkcut-pixbuf-assertions.xml:8(manvolnum)
#: xml/gdkcut-pixbuf.xml:8(manvolnum) xml/gdkcutter-pixbuf.xml:8(manvolnum)
#: xml/gst-cutter-console-output.xml:8(manvolnum)
#: xml/gst-cutter-server.xml:8(manvolnum)
#: xml/gst-cutter-test-runner.xml:8(manvolnum)
#: xml/soupcut-assertions-helper.xml:8(manvolnum)
#: xml/soupcut-assertions.xml:8(manvolnum) xml/soupcut-client.xml:8(manvolnum)
#: xml/soupcut-server.xml:8(manvolnum) xml/soupcutter.xml:8(manvolnum)
msgid "3"
msgstr ""

#: xml/cut-analyzer.xml:9(refmiscinfo) xml/cut-assertions.xml:9(refmiscinfo)
#: xml/cut-backtrace-entry.xml:9(refmiscinfo)
#: xml/cut-cairo-chart-data.xml:9(refmiscinfo)
#: xml/cut-cairo-pie-chart.xml:9(refmiscinfo) xml/cut-cairo.xml:9(refmiscinfo)
#: xml/cut-contractor.xml:9(refmiscinfo)
#: xml/cut-crash-backtrace.xml:9(refmiscinfo) xml/cut-diff.xml:9(refmiscinfo)
#: xml/cut-elf-loader.xml:9(refmiscinfo)
#: xml/cut-experimental.xml:9(refmiscinfo)
#: xml/cut-factory-builder.xml:9(refmiscinfo)
#: xml/cut-features.xml:9(refmiscinfo)
#: xml/cut-file-stream-reader.xml:9(refmiscinfo)
#: xml/cut-helper.xml:9(refmiscinfo) xml/cut-iterated-test.xml:9(refmiscinfo)
#: xml/cut-listener-utils.xml:9(refmiscinfo)
#: xml/cut-listener.xml:9(refmiscinfo)
#: xml/cut-mach-o-loader.xml:9(refmiscinfo) xml/cut-main.xml:9(refmiscinfo)
#: xml/cut-module-factory-utils.xml:9(refmiscinfo)
#: xml/cut-module-factory.xml:9(refmiscinfo)
#: xml/cut-multi-process.xml:9(refmiscinfo)
#: xml/cut-pe-loader.xml:9(refmiscinfo) xml/cut-pipeline.xml:9(refmiscinfo)
#: xml/cut-process.xml:9(refmiscinfo)
#: xml/cut-report-factory-builder.xml:9(refmiscinfo)
#: xml/cut-report.xml:9(refmiscinfo) xml/cut-run-context.xml:9(refmiscinfo)
#: xml/cut-runner.xml:9(refmiscinfo)
#: xml/cut-sequence-matcher.xml:9(refmiscinfo)
#: xml/cut-stream-factory-builder.xml:9(refmiscinfo)
#: xml/cut-stream-parser.xml:9(refmiscinfo)
#: xml/cut-stream-reader.xml:9(refmiscinfo) xml/cut-stream.xml:9(refmiscinfo)
#: xml/cut-test-data.xml:9(refmiscinfo)
#: xml/cut-test-iterator.xml:9(refmiscinfo)
#: xml/cut-test-runner.xml:9(refmiscinfo)
#: xml/cut-test-utils-helper.xml:9(refmiscinfo)
#: xml/cut-test-utils.xml:9(refmiscinfo) xml/cut-types.xml:9(refmiscinfo)
#: xml/cut-ui-factory-builder.xml:9(refmiscinfo) xml/cut-ui.xml:9(refmiscinfo)
#: xml/cut-version.xml:9(refmiscinfo) xml/cutter.xml:9(refmiscinfo)
#: xml/gbsearcharray.xml:9(refmiscinfo)
#: xml/gcut-assertions-helper.xml:9(refmiscinfo)
#: xml/gcut-assertions.xml:9(refmiscinfo)
#: xml/gcut-data-helper.xml:9(refmiscinfo) xml/gcut-data.xml:9(refmiscinfo)
#: xml/gcut-dynamic-data.xml:9(refmiscinfo) xml/gcut-egg.xml:9(refmiscinfo)
#: xml/gcut-enum.xml:9(refmiscinfo) xml/gcut-error.xml:9(refmiscinfo)
#: xml/gcut-hash-table.xml:9(refmiscinfo) xml/gcut-inspect.xml:9(refmiscinfo)
#: xml/gcut-io.xml:9(refmiscinfo) xml/gcut-key-file.xml:9(refmiscinfo)
#: xml/gcut-list.xml:9(refmiscinfo) xml/gcut-main.xml:9(refmiscinfo)
#: xml/gcut-object.xml:9(refmiscinfo) xml/gcut-public.xml:9(refmiscinfo)
#: xml/gcut-string-io-channel.xml:9(refmiscinfo)
#: xml/gcut-test-utils.xml:9(refmiscinfo) xml/gcut-types.xml:9(refmiscinfo)
#: xml/gcut-value-equal.xml:9(refmiscinfo) xml/gcutter.xml:9(refmiscinfo)
#: xml/gdkcut-pixbuf-assertions-helper.xml:9(refmiscinfo)
#: xml/gdkcut-pixbuf-assertions.xml:9(refmiscinfo)
#: xml/gdkcut-pixbuf.xml:9(refmiscinfo)
#: xml/gdkcutter-pixbuf.xml:9(refmiscinfo)
#: xml/gst-cutter-console-output.xml:9(refmiscinfo)
#: xml/gst-cutter-server.xml:9(refmiscinfo)
#: xml/gst-cutter-test-runner.xml:9(refmiscinfo)
#: xml/soupcut-assertions-helper.xml:9(refmiscinfo)
#: xml/soupcut-assertions.xml:9(refmiscinfo)
#: xml/soupcut-client.xml:9(refmiscinfo) xml/soupcut-server.xml:9(refmiscinfo)
#: xml/soupcutter.xml:9(refmiscinfo)
msgid "CUTTER Library"
msgstr "Cutterライブラリ"

#: xml/cut-analyzer.xml:18(title) xml/cut-assertions.xml:18(title)
#: xml/cut-backtrace-entry.xml:18(title)
#: xml/cut-cairo-chart-data.xml:18(title)
#: xml/cut-cairo-pie-chart.xml:18(title) xml/cut-cairo.xml:18(title)
#: xml/cut-contractor.xml:18(title) xml/cut-crash-backtrace.xml:18(title)
#: xml/cut-diff.xml:18(title) xml/cut-elf-loader.xml:18(title)
#: xml/cut-experimental.xml:18(title) xml/cut-factory-builder.xml:18(title)
#: xml/cut-features.xml:18(title) xml/cut-file-stream-reader.xml:18(title)
#: xml/cut-helper.xml:19(title) xml/cut-iterated-test.xml:18(title)
#: xml/cut-listener-utils.xml:18(title) xml/cut-listener.xml:18(title)
#: xml/cut-mach-o-loader.xml:18(title) xml/cut-main.xml:18(title)
#: xml/cut-module-factory-utils.xml:18(title)
#: xml/cut-module-factory.xml:18(title) xml/cut-multi-process.xml:19(title)
#: xml/cut-pe-loader.xml:18(title) xml/cut-pipeline.xml:18(title)
#: xml/cut-process.xml:18(title) xml/cut-report-factory-builder.xml:18(title)
#: xml/cut-report.xml:18(title) xml/cut-run-context.xml:18(title)
#: xml/cut-runner.xml:18(title) xml/cut-sequence-matcher.xml:18(title)
#: xml/cut-stream-factory-builder.xml:18(title)
#: xml/cut-stream-parser.xml:18(title) xml/cut-stream-reader.xml:18(title)
#: xml/cut-stream.xml:18(title) xml/cut-test-data.xml:18(title)
#: xml/cut-test-iterator.xml:18(title) xml/cut-test-runner.xml:18(title)
#: xml/cut-test-utils-helper.xml:18(title) xml/cut-test-utils.xml:18(title)
#: xml/cut-types.xml:18(title) xml/cut-ui-factory-builder.xml:18(title)
#: xml/cut-ui.xml:18(title) xml/cut-version.xml:18(title)
#: xml/cutter.xml:18(title) xml/gbsearcharray.xml:18(title)
#: xml/gcut-assertions-helper.xml:18(title) xml/gcut-assertions.xml:19(title)
#: xml/gcut-data-helper.xml:18(title) xml/gcut-data.xml:19(title)
#: xml/gcut-dynamic-data.xml:18(title) xml/gcut-egg.xml:19(title)
#: xml/gcut-enum.xml:19(title) xml/gcut-error.xml:19(title)
#: xml/gcut-hash-table.xml:19(title) xml/gcut-inspect.xml:19(title)
#: xml/gcut-io.xml:18(title) xml/gcut-key-file.xml:18(title)
#: xml/gcut-list.xml:19(title) xml/gcut-main.xml:18(title)
#: xml/gcut-object.xml:19(title) xml/gcut-public.xml:18(title)
#: xml/gcut-string-io-channel.xml:18(title) xml/gcut-test-utils.xml:19(title)
#: xml/gcut-types.xml:18(title) xml/gcut-value-equal.xml:19(title)
#: xml/gcutter.xml:18(title) xml/gdkcut-pixbuf-assertions-helper.xml:18(title)
#: xml/gdkcut-pixbuf-assertions.xml:19(title) xml/gdkcut-pixbuf.xml:18(title)
#: xml/gdkcutter-pixbuf.xml:18(title)
#: xml/gst-cutter-console-output.xml:18(title)
#: xml/gst-cutter-server.xml:18(title)
#: xml/gst-cutter-test-runner.xml:18(title)
#: xml/soupcut-assertions-helper.xml:18(title)
#: xml/soupcut-assertions.xml:19(title) xml/soupcut-client.xml:18(title)
#: xml/soupcut-server.xml:18(title) xml/soupcutter.xml:18(title)
msgid "Synopsis"
msgstr "概要"

#: xml/cut-analyzer.xml:33(title) xml/cut-assertions.xml:144(title)
#: xml/cut-backtrace-entry.xml:33(title)
#: xml/cut-cairo-chart-data.xml:33(title)
#: xml/cut-cairo-pie-chart.xml:33(title) xml/cut-cairo.xml:33(title)
#: xml/cut-contractor.xml:33(title) xml/cut-crash-backtrace.xml:33(title)
#: xml/cut-diff.xml:33(title) xml/cut-elf-loader.xml:33(title)
#: xml/cut-experimental.xml:37(title) xml/cut-factory-builder.xml:33(title)
#: xml/cut-features.xml:35(title) xml/cut-file-stream-reader.xml:33(title)
#: xml/cut-helper.xml:44(title) xml/cut-iterated-test.xml:33(title)
#: xml/cut-listener-utils.xml:33(title) xml/cut-listener.xml:33(title)
#: xml/cut-mach-o-loader.xml:33(title) xml/cut-main.xml:33(title)
#: xml/cut-module-factory-utils.xml:33(title)
#: xml/cut-module-factory.xml:33(title) xml/cut-multi-process.xml:86(title)
#: xml/cut-pe-loader.xml:33(title) xml/cut-pipeline.xml:33(title)
#: xml/cut-process.xml:33(title) xml/cut-report-factory-builder.xml:33(title)
#: xml/cut-report.xml:33(title) xml/cut-run-context.xml:33(title)
#: xml/cut-runner.xml:33(title) xml/cut-sequence-matcher.xml:33(title)
#: xml/cut-stream-factory-builder.xml:33(title)
#: xml/cut-stream-parser.xml:33(title) xml/cut-stream-reader.xml:33(title)
#: xml/cut-stream.xml:33(title) xml/cut-test-data.xml:33(title)
#: xml/cut-test-iterator.xml:33(title) xml/cut-test-runner.xml:33(title)
#: xml/cut-test-utils-helper.xml:33(title) xml/cut-test-utils.xml:69(title)
#: xml/cut-types.xml:38(title) xml/cut-ui-factory-builder.xml:33(title)
#: xml/cut-ui.xml:33(title) xml/cut-version.xml:38(title)
#: xml/cutter.xml:49(title) xml/gbsearcharray.xml:33(title)
#: xml/gcut-assertions-helper.xml:140(title)
#: xml/gcut-assertions.xml:131(title) xml/gcut-data-helper.xml:57(title)
#: xml/gcut-data.xml:53(title) xml/gcut-dynamic-data.xml:76(title)
#: xml/gcut-egg.xml:96(title) xml/gcut-enum.xml:49(title)
#: xml/gcut-error.xml:37(title) xml/gcut-hash-table.xml:46(title)
#: xml/gcut-inspect.xml:58(title) xml/gcut-io.xml:34(title)
#: xml/gcut-key-file.xml:43(title) xml/gcut-list.xml:63(title)
#: xml/gcut-main.xml:37(title) xml/gcut-object.xml:41(title)
#: xml/gcut-public.xml:42(title) xml/gcut-string-io-channel.xml:54(title)
#: xml/gcut-test-utils.xml:55(title) xml/gcut-types.xml:38(title)
#: xml/gcut-value-equal.xml:39(title) xml/gcutter.xml:34(title)
#: xml/gdkcut-pixbuf-assertions-helper.xml:39(title)
#: xml/gdkcut-pixbuf-assertions.xml:37(title) xml/gdkcut-pixbuf.xml:46(title)
#: xml/gdkcutter-pixbuf.xml:34(title)
#: xml/gst-cutter-console-output.xml:33(title)
#: xml/gst-cutter-server.xml:33(title)
#: xml/gst-cutter-test-runner.xml:33(title)
#: xml/soupcut-assertions-helper.xml:56(title)
#: xml/soupcut-assertions.xml:45(title) xml/soupcut-client.xml:59(title)
#: xml/soupcut-server.xml:37(title) xml/soupcutter.xml:34(title)
msgid "Description"
msgstr "説明"

#: xml/cut-analyzer.xml:38(title) xml/cut-assertions.xml:160(title)
#: xml/cut-backtrace-entry.xml:38(title)
#: xml/cut-cairo-chart-data.xml:39(title)
#: xml/cut-cairo-pie-chart.xml:39(title) xml/cut-cairo.xml:39(title)
#: xml/cut-contractor.xml:38(title) xml/cut-crash-backtrace.xml:38(title)
#: xml/cut-diff.xml:38(title) xml/cut-elf-loader.xml:38(title)
#: xml/cut-experimental.xml:45(title) xml/cut-factory-builder.xml:38(title)
#: xml/cut-features.xml:41(title) xml/cut-file-stream-reader.xml:38(title)
#: xml/cut-helper.xml:121(title) xml/cut-iterated-test.xml:38(title)
#: xml/cut-listener-utils.xml:38(title) xml/cut-listener.xml:38(title)
#: xml/cut-mach-o-loader.xml:38(title) xml/cut-main.xml:38(title)
#: xml/cut-module-factory-utils.xml:38(title)
#: xml/cut-module-factory.xml:38(title) xml/cut-multi-process.xml:106(title)
#: xml/cut-pe-loader.xml:38(title) xml/cut-pipeline.xml:38(title)
#: xml/cut-process.xml:38(title) xml/cut-report-factory-builder.xml:38(title)
#: xml/cut-report.xml:38(title) xml/cut-run-context.xml:38(title)
#: xml/cut-runner.xml:38(title) xml/cut-sequence-matcher.xml:38(title)
#: xml/cut-stream-factory-builder.xml:38(title)
#: xml/cut-stream-parser.xml:38(title) xml/cut-stream-reader.xml:38(title)
#: xml/cut-stream.xml:38(title) xml/cut-test-data.xml:38(title)
#: xml/cut-test-iterator.xml:38(title) xml/cut-test-runner.xml:38(title)
#: xml/cut-test-utils-helper.xml:38(title) xml/cut-test-utils.xml:83(title)
#: xml/cut-types.xml:46(title) xml/cut-ui-factory-builder.xml:38(title)
#: xml/cut-ui.xml:38(title) xml/cut-version.xml:49(title)
#: xml/cutter.xml:153(title) xml/gbsearcharray.xml:39(title)
#: xml/gcut-assertions-helper.xml:146(title)
#: xml/gcut-assertions.xml:139(title) xml/gcut-data-helper.xml:63(title)
#: xml/gcut-data.xml:64(title) xml/gcut-dynamic-data.xml:82(title)
#: xml/gcut-egg.xml:171(title) xml/gcut-enum.xml:62(title)
#: xml/gcut-error.xml:50(title) xml/gcut-hash-table.xml:59(title)
#: xml/gcut-inspect.xml:68(title) xml/gcut-io.xml:40(title)
#: xml/gcut-key-file.xml:49(title) xml/gcut-list.xml:76(title)
#: xml/gcut-main.xml:43(title) xml/gcut-object.xml:54(title)
#: xml/gcut-public.xml:48(title) xml/gcut-string-io-channel.xml:60(title)
#: xml/gcut-test-utils.xml:69(title) xml/gcut-types.xml:46(title)
#: xml/gcut-value-equal.xml:52(title) xml/gcutter.xml:72(title)
#: xml/gdkcut-pixbuf-assertions-helper.xml:45(title)
#: xml/gdkcut-pixbuf-assertions.xml:45(title) xml/gdkcut-pixbuf.xml:52(title)
#: xml/gdkcutter-pixbuf.xml:74(title)
#: xml/gst-cutter-console-output.xml:39(title)
#: xml/gst-cutter-server.xml:39(title)
#: xml/gst-cutter-test-runner.xml:39(title)
#: xml/soupcut-assertions-helper.xml:62(title)
#: xml/soupcut-assertions.xml:53(title) xml/soupcut-client.xml:70(title)
#: xml/soupcut-server.xml:45(title) xml/soupcutter.xml:74(title)
msgid "Details"
msgstr "詳細"

#: xml/cut-assertions.xml:7(refentrytitle) xml/cut-assertions.xml:13(refname)
#: xml/cutter.xml:450(link)
msgid "Assertions"
msgstr "検証"

#: xml/cut-assertions.xml:14(refpurpose)
msgid "Checks that your program works as you expect."
msgstr "あなたのプログラムが期待通りに動作しているかを検証します。"

#: xml/cut-assertions.xml:21(link) xml/cut-assertions.xml:23(link)
#: xml/cut-assertions.xml:25(link) xml/cut-assertions.xml:27(link)
#: xml/cut-assertions.xml:29(link) xml/cut-assertions.xml:31(link)
#: xml/cut-assertions.xml:33(link) xml/cut-assertions.xml:35(link)
#: xml/cut-assertions.xml:37(link) xml/cut-assertions.xml:40(link)
#: xml/cut-assertions.xml:42(link) xml/cut-assertions.xml:45(link)
#: xml/cut-assertions.xml:47(link) xml/cut-assertions.xml:50(link)
#: xml/cut-assertions.xml:52(link) xml/cut-assertions.xml:56(link)
#: xml/cut-assertions.xml:59(link) xml/cut-assertions.xml:62(link)
#: xml/cut-assertions.xml:64(link) xml/cut-assertions.xml:67(link)
#: xml/cut-assertions.xml:70(link) xml/cut-assertions.xml:73(link)
#: xml/cut-assertions.xml:76(link) xml/cut-assertions.xml:78(link)
#: xml/cut-assertions.xml:81(link) xml/cut-assertions.xml:83(link)
#: xml/cut-assertions.xml:85(link) xml/cut-assertions.xml:88(link)
#: xml/cut-assertions.xml:98(link) xml/cut-assertions.xml:99(link)
#: xml/cut-assertions.xml:101(link) xml/cut-assertions.xml:103(link)
#: xml/cut-assertions.xml:105(link) xml/cut-assertions.xml:108(link)
#: xml/cut-assertions.xml:111(link) xml/cut-assertions.xml:112(link)
#: xml/cut-assertions.xml:114(link) xml/cut-assertions.xml:116(link)
#: xml/cut-assertions.xml:118(link) xml/cut-assertions.xml:120(link)
#: xml/cut-assertions.xml:121(link) xml/cut-assertions.xml:123(link)
#: xml/cut-assertions.xml:125(link) xml/cut-assertions.xml:127(link)
#: xml/cut-assertions.xml:129(link) xml/cut-assertions.xml:131(link)
#: xml/cut-helper.xml:22(link) xml/cut-helper.xml:23(link)
#: xml/cut-helper.xml:25(link) xml/cut-helper.xml:28(link)
#: xml/cut-helper.xml:29(link) xml/cut-multi-process.xml:26(link)
#: xml/cut-multi-process.xml:31(link) xml/cut-multi-process.xml:35(link)
#: xml/cut-multi-process.xml:39(link) xml/cut-multi-process.xml:42(link)
#: xml/cut-multi-process.xml:45(link) xml/cut-multi-process.xml:49(link)
#: xml/cut-multi-process.xml:54(link) xml/cut-multi-process.xml:59(link)
#: xml/cut-multi-process.xml:66(link) xml/cut-multi-process.xml:69(link)
#: xml/cut-multi-process.xml:72(link) xml/cut-test-utils.xml:21(link)
#: xml/cut-test-utils.xml:23(link) xml/cut-test-utils.xml:28(link)
#: xml/cut-test-utils.xml:42(link) xml/cut-test-utils.xml:48(link)
#: xml/cut-types.xml:21(link) xml/cut-types.xml:22(link)
#: xml/cutter.xml:21(link) xml/cutter.xml:22(link) xml/cutter.xml:23(link)
#: xml/cutter.xml:24(link) xml/cutter.xml:25(link) xml/cutter.xml:26(link)
#: xml/cutter.xml:32(link) xml/cutter.xml:34(link) xml/cutter.xml:36(link)
#: xml/gcut-assertions-helper.xml:21(link)
#: xml/gcut-assertions-helper.xml:25(link)
#: xml/gcut-assertions-helper.xml:29(link)
#: xml/gcut-assertions-helper.xml:37(link)
#: xml/gcut-assertions-helper.xml:41(link)
#: xml/gcut-assertions-helper.xml:45(link)
#: xml/gcut-assertions-helper.xml:50(link)
#: xml/gcut-assertions-helper.xml:56(link)
#: xml/gcut-assertions-helper.xml:62(link)
#: xml/gcut-assertions-helper.xml:68(link)
#: xml/gcut-assertions-helper.xml:77(link)
#: xml/gcut-assertions-helper.xml:82(link)
#: xml/gcut-assertions-helper.xml:84(link)
#: xml/gcut-assertions-helper.xml:88(link)
#: xml/gcut-assertions-helper.xml:90(link)
#: xml/gcut-assertions-helper.xml:94(link)
#: xml/gcut-assertions-helper.xml:100(link)
#: xml/gcut-assertions-helper.xml:106(link)
#: xml/gcut-assertions-helper.xml:112(link)
#: xml/gcut-assertions-helper.xml:116(link)
#: xml/gcut-assertions-helper.xml:120(link)
#: xml/gcut-assertions-helper.xml:124(link) xml/gcut-assertions.xml:22(link)
#: xml/gcut-assertions.xml:25(link) xml/gcut-assertions.xml:28(link)
#: xml/gcut-assertions.xml:31(link) xml/gcut-assertions.xml:34(link)
#: xml/gcut-assertions.xml:39(link) xml/gcut-assertions.xml:42(link)
#: xml/gcut-assertions.xml:45(link) xml/gcut-assertions.xml:48(link)
#: xml/gcut-assertions.xml:51(link) xml/gcut-assertions.xml:54(link)
#: xml/gcut-assertions.xml:57(link) xml/gcut-assertions.xml:62(link)
#: xml/gcut-assertions.xml:66(link) xml/gcut-assertions.xml:70(link)
#: xml/gcut-assertions.xml:76(link) xml/gcut-assertions.xml:80(link)
#: xml/gcut-assertions.xml:82(link) xml/gcut-assertions.xml:84(link)
#: xml/gcut-assertions.xml:87(link) xml/gcut-assertions.xml:89(link)
#: xml/gcut-assertions.xml:91(link) xml/gcut-assertions.xml:94(link)
#: xml/gcut-assertions.xml:98(link) xml/gcut-assertions.xml:102(link)
#: xml/gcut-assertions.xml:105(link) xml/gcut-assertions.xml:109(link)
#: xml/gcut-assertions.xml:112(link) xml/gcut-assertions.xml:115(link)
#: xml/gcut-assertions.xml:117(link) xml/gcut-data.xml:22(link)
#: xml/gcut-egg.xml:34(link) xml/gcut-egg.xml:37(link)
#: xml/gcut-egg.xml:43(link) xml/gcut-egg.xml:52(link)
#: xml/gcut-egg.xml:59(link) xml/gcut-inspect.xml:22(link)
#: xml/gcut-inspect.xml:25(link) xml/gcut-inspect.xml:28(link)
#: xml/gcut-inspect.xml:31(link) xml/gcut-inspect.xml:34(link)
#: xml/gcut-inspect.xml:37(link) xml/gcut-inspect.xml:40(link)
#: xml/gcut-inspect.xml:43(link) xml/gcut-main.xml:21(link)
#: xml/gcut-main.xml:22(link) xml/gcut-main.xml:23(link)
#: xml/gcut-main.xml:24(link) xml/gcut-string-io-channel.xml:23(link)
#: xml/gcut-string-io-channel.xml:26(link)
#: xml/gcut-string-io-channel.xml:30(link)
#: xml/gcut-string-io-channel.xml:34(link)
#: xml/gcut-string-io-channel.xml:39(link) xml/gcut-test-utils.xml:34(link)
#: xml/gcut-types.xml:21(link) xml/gcut-value-equal.xml:24(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:21(link)
#: xml/gdkcut-pixbuf-assertions.xml:22(link)
#: xml/soupcut-assertions-helper.xml:21(link)
#: xml/soupcut-assertions-helper.xml:26(link)
#: xml/soupcut-assertions-helper.xml:31(link)
#: xml/soupcut-assertions-helper.xml:34(link)
#: xml/soupcut-assertions-helper.xml:39(link)
#: xml/soupcut-assertions.xml:22(link) xml/soupcut-assertions.xml:25(link)
#: xml/soupcut-assertions.xml:28(link) xml/soupcut-assertions.xml:29(link)
#: xml/soupcut-assertions.xml:31(link) xml/soupcut-client.xml:23(link)
msgid "void"
msgstr ""

#: xml/cut-assertions.xml:33(link) xml/cut-assertions.xml:59(link)
#: xml/cut-assertions.xml:60(link) xml/cut-assertions.xml:62(link)
#: xml/cut-assertions.xml:63(link) xml/cut-assertions.xml:64(link)
#: xml/cut-assertions.xml:65(link) xml/cut-assertions.xml:67(link)
#: xml/cut-assertions.xml:68(link) xml/cut-assertions.xml:70(link)
#: xml/cut-assertions.xml:71(link) xml/cut-assertions.xml:73(link)
#: xml/cut-assertions.xml:74(link) xml/cut-assertions.xml:85(link)
#: xml/cut-assertions.xml:86(link) xml/cut-assertions.xml:89(link)
#: xml/cut-assertions.xml:90(link) xml/cut-assertions.xml:99(link)
#: xml/cut-assertions.xml:101(link) xml/cut-assertions.xml:103(link)
#: xml/cut-assertions.xml:105(link) xml/cut-assertions.xml:106(link)
#: xml/cut-assertions.xml:108(link) xml/cut-assertions.xml:109(link)
#: xml/cut-assertions.xml:115(link) xml/cut-assertions.xml:118(link)
#: xml/cut-assertions.xml:121(link) xml/cut-assertions.xml:123(link)
#: xml/cut-assertions.xml:125(link) xml/cut-assertions.xml:127(link)
#: xml/cut-assertions.xml:129(link) xml/cut-helper.xml:23(link)
#: xml/cut-helper.xml:25(link) xml/cut-helper.xml:26(link)
#: xml/cut-helper.xml:28(link) xml/cut-multi-process.xml:24(link)
#: xml/cut-multi-process.xml:30(link) xml/cut-multi-process.xml:32(link)
#: xml/cut-multi-process.xml:33(link) xml/cut-multi-process.xml:37(link)
#: xml/cut-multi-process.xml:44(link) xml/cut-multi-process.xml:46(link)
#: xml/cut-multi-process.xml:47(link) xml/cut-multi-process.xml:51(link)
#: xml/cut-multi-process.xml:52(link) xml/cut-multi-process.xml:56(link)
#: xml/cut-multi-process.xml:57(link) xml/cut-multi-process.xml:61(link)
#: xml/cut-test-utils.xml:24(link) xml/cut-test-utils.xml:25(link)
#: xml/cut-test-utils.xml:26(link) xml/cut-test-utils.xml:30(link)
#: xml/cut-test-utils.xml:32(link) xml/cut-test-utils.xml:33(link)
#: xml/cut-test-utils.xml:34(link) xml/cut-test-utils.xml:35(link)
#: xml/cut-test-utils.xml:36(link) xml/cut-test-utils.xml:37(link)
#: xml/cut-test-utils.xml:38(link) xml/cut-test-utils.xml:39(link)
#: xml/cut-test-utils.xml:40(link) xml/cut-test-utils.xml:41(link)
#: xml/cut-test-utils.xml:42(link) xml/cut-test-utils.xml:44(link)
#: xml/cut-test-utils.xml:46(link) xml/cut-test-utils.xml:48(link)
#: xml/cut-test-utils.xml:50(link) xml/cut-test-utils.xml:52(link)
#: xml/cut-test-utils.xml:53(link) xml/cutter.xml:32(link)
#: xml/cutter.xml:34(link) xml/gcut-assertions-helper.xml:114(link)
#: xml/gcut-assertions-helper.xml:115(link)
#: xml/gcut-assertions-helper.xml:118(link)
#: xml/gcut-assertions-helper.xml:119(link)
#: xml/gcut-assertions-helper.xml:122(link)
#: xml/gcut-assertions-helper.xml:123(link)
#: xml/gcut-assertions-helper.xml:126(link)
#: xml/gcut-assertions-helper.xml:127(link)
msgid "char"
msgstr ""

#: xml/cut-assertions.xml:37(link) xml/cut-assertions.xml:38(link)
#: xml/cut-assertions.xml:40(link) xml/cut-assertions.xml:41(link)
#: xml/cut-assertions.xml:42(link) xml/cut-assertions.xml:43(link)
#: xml/cut-assertions.xml:45(link) xml/cut-assertions.xml:46(link)
#: xml/cut-multi-process.xml:41(link) xml/cut-multi-process.xml:43(link)
msgid "int"
msgstr ""

#: xml/cut-assertions.xml:47(link) xml/cut-assertions.xml:48(link)
#: xml/cut-assertions.xml:50(link) xml/cut-assertions.xml:51(link)
#: xml/cut-assertions.xml:72(link) xml/cut-assertions.xml:75(link)
#: xml/cut-assertions.xml:77(link) xml/cut-assertions.xml:79(link)
#: xml/cut-assertions.xml:82(link) xml/cut-assertions.xml:84(link)
#: xml/cut-test-utils.xml:27(link) xml/cut-test-utils.xml:29(link)
msgid "size_t"
msgstr ""

#: xml/cut-assertions.xml:52(link) xml/cut-assertions.xml:53(link)
#: xml/cut-assertions.xml:54(link) xml/cut-assertions.xml:56(link)
#: xml/cut-assertions.xml:57(link) xml/cut-assertions.xml:58(link)
#: xml/cut-multi-process.xml:62(link) xml/cut-multi-process.xml:63(link)
#: xml/cut-test-utils.xml:54(link) xml/cut-test-utils.xml:55(link)
#: xml/cut-test-utils.xml:56(link)
msgid "double"
msgstr ""

#: xml/cut-assertions.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                          (<placeholder-3/> expression,\n"
"                                                         ...);\n"
"<placeholder-4/>                <placeholder-5/>                     (<placeholder-6/> expression,\n"
"                                                         ...);\n"
"<placeholder-7/>                <placeholder-8/>                    (<placeholder-9/> expression,\n"
"                                                         ...);\n"
"<placeholder-10/>                <placeholder-11/>            (<placeholder-12/> expected,\n"
"                                                         <placeholder-13/> actual);\n"
"<placeholder-14/>                <placeholder-15/>        (<placeholder-16/> expected,\n"
"                                                         <placeholder-17/> actual);\n"
"<placeholder-18/>                <placeholder-19/>                     (const <placeholder-20/> *expression,\n"
"                                                         ...);\n"
"<placeholder-21/>                <placeholder-22/>              (const <placeholder-23/> *string,\n"
"                                                         ...);\n"
"<placeholder-24/>                <placeholder-25/>                 (const <placeholder-26/> *expression,\n"
"                                                         ...);\n"
"<placeholder-27/>                <placeholder-28/>                (<placeholder-29/> expected,\n"
"                                                         <placeholder-30/> actual,\n"
"                                                         ...);\n"
"<placeholder-31/>                <placeholder-32/>            (<placeholder-33/> expected,\n"
"                                                         <placeholder-34/> actual);\n"
"<placeholder-35/>                <placeholder-36/>               (unsigned <placeholder-37/> expected,\n"
"                                                         unsigned <placeholder-38/> actual,\n"
"                                                         ...);\n"
"<placeholder-39/>                <placeholder-40/>           (unsigned <placeholder-41/> expected,\n"
"                                                         unsigned <placeholder-42/> actual);\n"
"<placeholder-43/>                <placeholder-44/>               (<placeholder-45/> expected,\n"
"                                                         <placeholder-46/> actual,\n"
"                                                         ...);\n"
"<placeholder-47/>                <placeholder-48/>           (<placeholder-49/> expected,\n"
"                                                         <placeholder-50/> actual);\n"
"<placeholder-51/>                <placeholder-52/>             (<placeholder-53/> expected,\n"
"                                                         <placeholder-54/> error,\n"
"                                                         <placeholder-55/> actual,\n"
"                                                         ...);\n"
"<placeholder-56/>                <placeholder-57/>         (<placeholder-58/> expected,\n"
"                                                         <placeholder-59/> error,\n"
"                                                         <placeholder-60/> actual);\n"
"<placeholder-61/>                <placeholder-62/>             (const <placeholder-63/> *expected,\n"
"                                                         const <placeholder-64/> *actual,\n"
"                                                         ...);\n"
"<placeholder-65/>                <placeholder-66/>         (const <placeholder-67/> *expected,\n"
"                                                         const <placeholder-68/> *actual);\n"
"<placeholder-69/>                <placeholder-70/>   (const <placeholder-71/> *expected,\n"
"                                                         const <placeholder-72/> *actual,\n"
"                                                         ...);\n"
"<placeholder-73/>                <placeholder-74/>     (const <placeholder-75/> *expected,\n"
"                                                         const <placeholder-76/> *actual,\n"
"                                                         ...);\n"
"<placeholder-77/>                <placeholder-78/>          (const <placeholder-79/> *expected,\n"
"                                                         const <placeholder-80/> *actual,\n"
"                                                         <placeholder-81/> length);\n"
"<placeholder-82/>                <placeholder-83/>      (const <placeholder-84/> *expected,\n"
"                                                         const <placeholder-85/> *actual,\n"
"                                                         <placeholder-86/> length);\n"
"<placeholder-87/>                <placeholder-88/>             (const <placeholder-89/> *expected,\n"
"                                                         <placeholder-90/> expected_size,\n"
"                                                         const <placeholder-91/> *actual,\n"
"                                                         <placeholder-92/> actual_size,\n"
"                                                         ...);\n"
"<placeholder-93/>                <placeholder-94/>         (const <placeholder-95/> *expected,\n"
"                                                         <placeholder-96/> expected_size,\n"
"                                                         const <placeholder-97/> *actual,\n"
"                                                         <placeholder-98/> actual_size);\n"
"<placeholder-99/>                <placeholder-100/>       (<placeholder-101/> **expected,\n"
"                                                         <placeholder-102/> **actual,\n"
"                                                         ...);\n"
"<placeholder-103/>                <placeholder-104/>\n"
"                                                        (<placeholder-105/> **expected,\n"
"                                                         <placeholder-106/> **actual,\n"
"                                                         ...);\n"
"#define             <placeholder-107/>                 (lhs, operator, rhs, ...)\n"
"#define             <placeholder-108/>             (lhs, operator, rhs, ...)\n"
"#define             <placeholder-109/>            (lhs, operator, rhs, ...)\n"
"#define             <placeholder-110/>            (lhs, operator, rhs, ...)\n"
"#define             <placeholder-111/>          (lhs, operator, rhs, ...)\n"
"#define             <placeholder-112/>                    (function, expected, actual, ...)\n"
"<placeholder-113/>                <placeholder-114/>                    (...);\n"
"<placeholder-115/>                <placeholder-116/>               (const <placeholder-117/> *path,\n"
"                                                         ...);\n"
"<placeholder-118/>                <placeholder-119/>               (const <placeholder-120/> *path,\n"
"                                                         ...);\n"
"<placeholder-121/>                <placeholder-122/>           (const <placeholder-123/> *path,\n"
"                                                         ...);\n"
"<placeholder-124/>                <placeholder-125/>                    (const <placeholder-126/> *pattern,\n"
"                                                         const <placeholder-127/> *actual,\n"
"                                                         ...);\n"
"<placeholder-128/>                <placeholder-129/>          (const <placeholder-130/> *pattern,\n"
"                                                         const <placeholder-131/> *actual,\n"
"                                                         ...);\n"
"<placeholder-132/>                <placeholder-133/>            (const <placeholder-134/> *expected,\n"
"                                                         const <placeholder-135/> *actual,\n"
"                                                         ...);\n"
"<placeholder-136/>                <placeholder-137/>\n"
"                                                        (const <placeholder-138/> *expected,\n"
"                                                         const <placeholder-139/> *path,\n"
"                                                         ...);\n"
"<placeholder-140/>                <placeholder-141/>                           (const <placeholder-142/> *format,\n"
"                                                         ...);\n"
"<placeholder-143/>                <placeholder-144/>                     (...);\n"
"<placeholder-145/>                <placeholder-146/>                            (const <placeholder-147/> *format,\n"
"                                                         ...);\n"
"<placeholder-148/>                <placeholder-149/>                            (const <placeholder-150/> *format,\n"
"                                                         ...);\n"
"<placeholder-151/>                <placeholder-152/>                         (const <placeholder-153/> *format,\n"
"                                                         ...);\n"
"<placeholder-154/>                <placeholder-155/>                          (const <placeholder-156/> *format,\n"
"                                                         ...);\n"
"<placeholder-157/>                <placeholder-158/>                            (const <placeholder-159/> *format,\n"
"                                                         ...);\n"
"<placeholder-160/>                <placeholder-161/>                          (void);\n"
msgstr ""

#: xml/cut-assertions.xml:145(para)
msgid ""
"To check that your program works as you expect, you use <link linkend=\"cut-"
"assert-XXX\"><function>cut_assert_XXX()</function></link> where you want to "
"check expected value is got."
msgstr ""
"あなたのプログラムが期待通りに動作しているかを検証するために、期待した値が得"
"られていることを検証したい箇所で<link linkend=\"cut-assert-XXX"
"\"><function>cut_assert_XXX()</function></link>を使います。"

#: xml/cut-assertions.xml:152(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal_int(3, 1 + 2);\n"
msgstr ""

#: xml/cut-assertions.xml:150(para) xml/cut-assertions.xml:221(para)
#: xml/cut-assertions.xml:246(para) xml/cut-assertions.xml:474(para)
#: xml/cut-assertions.xml:505(para) xml/cut-assertions.xml:581(para)
#: xml/cut-assertions.xml:612(para) xml/cut-assertions.xml:739(para)
#: xml/cut-assertions.xml:767(para) xml/cut-assertions.xml:795(para)
#: xml/cut-assertions.xml:823(para) xml/cut-assertions.xml:851(para)
#: xml/cut-assertions.xml:879(para) xml/cut-assertions.xml:907(para)
#: xml/cut-assertions.xml:929(para) xml/cut-assertions.xml:953(para)
#: xml/cut-assertions.xml:977(para) xml/cut-assertions.xml:1002(para)
#: xml/cut-assertions.xml:1103(para) xml/cut-assertions.xml:1192(para)
#: xml/cut-assertions.xml:1213(para) xml/cut-experimental.xml:52(para)
#: xml/cut-experimental.xml:78(para) xml/cut-experimental.xml:108(para)
#: xml/cut-experimental.xml:135(para) xml/cut-helper.xml:159(para)
#: xml/cut-helper.xml:289(para) xml/cut-helper.xml:367(para)
#: xml/cut-multi-process.xml:115(para) xml/cut-multi-process.xml:133(para)
#: xml/cutter.xml:218(para) xml/cutter.xml:317(para) xml/cutter.xml:363(para)
#: xml/gcut-assertions.xml:638(para) xml/gcut-assertions.xml:672(para)
#: xml/gcut-assertions.xml:712(para) xml/gcut-assertions.xml:743(para)
#: xml/gcut-data.xml:75(para) xml/gcut-data.xml:126(para)
#: xml/gcut-data.xml:139(para) xml/gcut-data.xml:152(para)
#: xml/gcut-data.xml:165(para) xml/gcut-data.xml:178(para)
#: xml/gcut-data.xml:191(para) xml/gcut-data.xml:205(para)
#: xml/gcut-data.xml:219(para) xml/gcut-egg.xml:121(para)
#: xml/gcut-hash-table.xml:70(para) xml/gcut-hash-table.xml:104(para)
#: xml/gcut-inspect.xml:77(para) xml/gcut-inspect.xml:102(para)
#: xml/gcut-inspect.xml:127(para) xml/gcut-inspect.xml:152(para)
#: xml/gcut-inspect.xml:177(para) xml/gcut-inspect.xml:202(para)
#: xml/gcut-inspect.xml:233(para) xml/gcut-inspect.xml:264(para)
#: xml/gcut-list.xml:86(para) xml/gcut-list.xml:117(para)
#: xml/gcut-value-equal.xml:79(para)
msgid "e.g.: <placeholder-1/>"
msgstr "例: <placeholder-1/>"

#: xml/cut-assertions.xml:162(title)
msgid "cut_assert ()"
msgstr "cut_assert ()"

#: xml/cut-assertions.xml:163(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert                          (<link linkend=\"cut-boolean\">cut_boolean</link> expression,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:165(para)
msgid ""
"Passes if <parameter>expression</parameter> is not 0 or <link linkend="
"\"NULL--CAPS\"><literal>NULL</literal></link>."
msgstr ""
"<parameter>expression</parameter>が0でも<link linkend=\"NULL--CAPS"
"\"><literal>NULL</literal></link>でもないとパスします。"

#: xml/cut-assertions.xml:169(term) xml/cut-assertions.xml:186(term)
#: xml/cut-assertions.xml:203(term) xml/cut-assertions.xml:270(term)
#: xml/cut-assertions.xml:304(term) xml/cut-helper.xml:257(term)
#: xml/cut-helper.xml:335(term) xml/cut-helper.xml:394(term)
msgid "<parameter>expression</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:170(simpara) xml/cut-assertions.xml:187(simpara)
#: xml/cut-assertions.xml:204(simpara) xml/cut-assertions.xml:271(simpara)
#: xml/cut-assertions.xml:305(simpara)
msgid "the expression to be checked."
msgstr "チェックする式。"

#: xml/cut-assertions.xml:172(term) xml/cut-assertions.xml:189(term)
#: xml/cut-assertions.xml:206(term) xml/cut-assertions.xml:273(term)
#: xml/cut-assertions.xml:290(term) xml/cut-assertions.xml:307(term)
#: xml/cut-assertions.xml:328(term) xml/cut-assertions.xml:364(term)
#: xml/cut-assertions.xml:400(term) xml/cut-assertions.xml:440(term)
#: xml/cut-assertions.xml:491(term) xml/cut-assertions.xml:542(term)
#: xml/cut-assertions.xml:565(term) xml/cut-assertions.xml:658(term)
#: xml/cut-assertions.xml:704(term) xml/cut-assertions.xml:727(term)
#: xml/cut-assertions.xml:755(term) xml/cut-assertions.xml:783(term)
#: xml/cut-assertions.xml:811(term) xml/cut-assertions.xml:839(term)
#: xml/cut-assertions.xml:867(term) xml/cut-assertions.xml:895(term)
#: xml/cut-assertions.xml:915(term) xml/cut-assertions.xml:940(term)
#: xml/cut-assertions.xml:964(term) xml/cut-assertions.xml:988(term)
#: xml/cut-assertions.xml:1016(term) xml/cut-assertions.xml:1038(term)
#: xml/cut-assertions.xml:1059(term) xml/cut-assertions.xml:1081(term)
#: xml/cut-assertions.xml:1096(term) xml/cut-assertions.xml:1116(term)
#: xml/cut-assertions.xml:1133(term) xml/cut-assertions.xml:1149(term)
#: xml/cut-assertions.xml:1166(term) xml/cut-assertions.xml:1181(term)
#: xml/cut-assertions.xml:1203(term) xml/cut-helper.xml:143(term)
#: xml/cut-test-utils.xml:200(term) xml/cut-test-utils.xml:309(term)
#: xml/cut-test-utils.xml:328(term) xml/cut-test-utils.xml:351(term)
#: xml/cut-test-utils.xml:372(term) xml/cut-test-utils.xml:388(term)
#: xml/cutter.xml:290(term) xml/cutter.xml:307(term) xml/cutter.xml:345(term)
#: xml/cutter.xml:416(term) xml/gcut-assertions-helper.xml:480(term)
#: xml/gcut-assertions.xml:155(term) xml/gcut-assertions.xml:177(term)
#: xml/gcut-assertions.xml:198(term) xml/gcut-assertions.xml:220(term)
#: xml/gcut-assertions.xml:270(term) xml/gcut-assertions.xml:292(term)
#: xml/gcut-assertions.xml:313(term) xml/gcut-assertions.xml:334(term)
#: xml/gcut-assertions.xml:356(term) xml/gcut-assertions.xml:378(term)
#: xml/gcut-assertions.xml:407(term) xml/gcut-assertions.xml:433(term)
#: xml/gcut-assertions.xml:459(term) xml/gcut-assertions.xml:515(term)
#: xml/gcut-assertions.xml:532(term) xml/gcut-assertions.xml:550(term)
#: xml/gcut-assertions.xml:571(term) xml/gcut-assertions.xml:588(term)
#: xml/gcut-assertions.xml:604(term) xml/gcut-assertions.xml:623(term)
#: xml/gcut-assertions.xml:657(term) xml/gcut-assertions.xml:696(term)
#: xml/gcut-assertions.xml:728(term) xml/gcut-assertions.xml:772(term)
#: xml/gcut-assertions.xml:793(term) xml/gcut-assertions.xml:814(term)
#: xml/gcut-data.xml:241(term) xml/gcut-dynamic-data.xml:130(term)
#: xml/gcut-egg.xml:249(term) xml/gcut-egg.xml:367(term)
#: xml/gcut-test-utils.xml:148(term) xml/gcut-test-utils.xml:183(term)
#: xml/gcut-test-utils.xml:200(term) xml/gcut-test-utils.xml:243(term)
#: xml/gcut-test-utils.xml:294(term) xml/soupcut-client.xml:140(term)
msgid "<parameter>...</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:173(simpara) xml/cut-assertions.xml:190(simpara)
#: xml/cut-assertions.xml:207(simpara) xml/cut-assertions.xml:274(simpara)
#: xml/cut-assertions.xml:291(simpara) xml/cut-assertions.xml:308(simpara)
#: xml/cut-assertions.xml:329(simpara) xml/cut-assertions.xml:365(simpara)
#: xml/cut-assertions.xml:401(simpara) xml/cut-assertions.xml:441(simpara)
#: xml/cut-assertions.xml:492(simpara) xml/cut-assertions.xml:543(simpara)
#: xml/cut-assertions.xml:566(simpara) xml/cut-assertions.xml:659(simpara)
#: xml/cut-assertions.xml:705(simpara) xml/cut-assertions.xml:728(simpara)
#: xml/cut-assertions.xml:756(simpara) xml/cut-assertions.xml:784(simpara)
#: xml/cut-assertions.xml:812(simpara) xml/cut-assertions.xml:840(simpara)
#: xml/cut-assertions.xml:868(simpara) xml/cut-assertions.xml:896(simpara)
#: xml/cut-assertions.xml:916(simpara) xml/cut-assertions.xml:941(simpara)
#: xml/cut-assertions.xml:965(simpara) xml/cut-assertions.xml:989(simpara)
#: xml/cut-assertions.xml:1017(simpara) xml/cut-assertions.xml:1039(simpara)
#: xml/cut-assertions.xml:1060(simpara) xml/cut-assertions.xml:1117(simpara)
#: xml/cut-helper.xml:144(simpara) xml/gcut-assertions.xml:156(simpara)
#: xml/gcut-assertions.xml:178(simpara) xml/gcut-assertions.xml:199(simpara)
#: xml/gcut-assertions.xml:221(simpara) xml/gcut-assertions.xml:271(simpara)
#: xml/gcut-assertions.xml:293(simpara) xml/gcut-assertions.xml:314(simpara)
#: xml/gcut-assertions.xml:335(simpara) xml/gcut-assertions.xml:357(simpara)
#: xml/gcut-assertions.xml:379(simpara) xml/gcut-assertions.xml:408(simpara)
#: xml/gcut-assertions.xml:434(simpara) xml/gcut-assertions.xml:460(simpara)
#: xml/gcut-assertions.xml:516(simpara) xml/gcut-assertions.xml:533(simpara)
#: xml/gcut-assertions.xml:551(simpara) xml/gcut-assertions.xml:572(simpara)
#: xml/gcut-assertions.xml:624(simpara) xml/gcut-assertions.xml:658(simpara)
#: xml/gcut-assertions.xml:697(simpara) xml/gcut-assertions.xml:729(simpara)
#: xml/gcut-assertions.xml:773(simpara) xml/gcut-assertions.xml:794(simpara)
#: xml/gcut-assertions.xml:815(simpara)
msgid ""
"optional format string, followed by parameters to insert into the format "
"string. (as with <link linkend=\"printf\"><function>printf()</function></"
"link>) This is deprecated since 0.1.6. Use <link linkend=\"cut-set-message"
"\"><function>cut_set_message()</function></link> instead."
msgstr ""
"省略可能な整形文字列。以降のパラメータが整形文字列に挿入されます。（<link "
"linkend=\"printf\"><function>printf()</function></link>と同じ。）このパラメー"
"タは0.1.6から非推奨となっています。代わりに<link linkend=\"cut-set-message"
"\"><function>cut_set_message()</function></link>を使ってください。"

#: xml/cut-assertions.xml:179(title)
msgid "cut_assert_true ()"
msgstr "cut_assert_true ()"

#: xml/cut-assertions.xml:180(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_true                     (<link linkend=\"cut-boolean\">cut_boolean</link> expression,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:182(para)
msgid ""
"Passes if <parameter>expression</parameter> is <link linkend=\"CUT-TRUE--CAPS"
"\"><literal>CUT_TRUE</literal></link> value (not 0 or <link linkend=\"NULL--"
"CAPS\"><literal>NULL</literal></link>)."
msgstr ""
"<parameter>expression</parameter>が<link linkend=\"CUT-TRUE--CAPS"
"\"><literal>CUT_TRUE</literal></link>のとき（0でも<link linkend=\"NULL--CAPS"
"\"><literal>NULL</literal></link>でもないとき）パスします。"

#: xml/cut-assertions.xml:194(para) xml/cut-assertions.xml:211(para)
#: xml/cut-assertions.xml:732(para) xml/cut-assertions.xml:945(para)
msgid "Since 0.9"
msgstr "0.9から"

#: xml/cut-assertions.xml:196(title)
msgid "cut_assert_false ()"
msgstr "cut_assert_false ()"

#: xml/cut-assertions.xml:197(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_false                    (<link linkend=\"cut-boolean\">cut_boolean</link> expression,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:199(para)
msgid ""
"Passes if <parameter>expression</parameter> is 0 or <link linkend=\"NULL--"
"CAPS\"><literal>NULL</literal></link>."
msgstr ""
"<parameter>expression</parameter>が0または<link linkend=\"NULL--CAPS"
"\"><literal>NULL</literal></link>のときパスします。"

#: xml/cut-assertions.xml:213(title)
msgid "cut_assert_equal_boolean ()"
msgstr ""

#: xml/cut-assertions.xml:214(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_boolean            (<link linkend=\"cut-boolean\">cut_boolean</link> expected,\n"
"                                                         <link linkend=\"cut-boolean\">cut_boolean</link> actual);"
msgstr ""

#: xml/cut-assertions.xml:216(para)
msgid ""
"Passes if both of <parameter>expected</parameter> and <parameter>actual</"
"parameter> are <link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></"
"link> value or both of <parameter>expected</parameter> and "
"<parameter>actual</parameter> are <link linkend=\"CUT-FALSE--CAPS"
"\"><literal>CUT_FALSE</literal></link> value."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>が両方とも"
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link>の値か、両"
"方とも<link linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></link>の"
"値のときパスします。"

#: xml/cut-assertions.xml:223(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal_boolean(CUT_TRUE, CUT_TRUE);   -&gt; Pass\n"
"cut_assert_equal_boolean(CUT_FALSE, CUT_FALSE); -&gt; Pass\n"
"cut_assert_equal_boolean(CUT_TRUE, CUT_FALSE);  -&gt; Fail\n"
msgstr ""
"\n"
"cut_assert_equal_boolean(CUT_TRUE, CUT_TRUE);   -&gt; パス\n"
"cut_assert_equal_boolean(CUT_FALSE, CUT_FALSE); -&gt; パス\n"
"cut_assert_equal_boolean(CUT_TRUE, CUT_FALSE);  -&gt; 失敗\n"

#: xml/cut-assertions.xml:230(term) xml/cut-assertions.xml:255(term)
#: xml/cut-assertions.xml:322(term) xml/cut-assertions.xml:342(term)
#: xml/cut-assertions.xml:358(term) xml/cut-assertions.xml:378(term)
#: xml/cut-assertions.xml:394(term) xml/cut-assertions.xml:414(term)
#: xml/cut-assertions.xml:431(term) xml/cut-assertions.xml:455(term)
#: xml/cut-assertions.xml:485(term) xml/cut-assertions.xml:516(term)
#: xml/cut-assertions.xml:536(term) xml/cut-assertions.xml:559(term)
#: xml/cut-assertions.xml:593(term) xml/cut-assertions.xml:624(term)
#: xml/cut-assertions.xml:646(term) xml/cut-assertions.xml:675(term)
#: xml/cut-assertions.xml:698(term) xml/cut-assertions.xml:721(term)
#: xml/cut-assertions.xml:889(term) xml/cut-assertions.xml:1053(term)
#: xml/cut-assertions.xml:1075(term) xml/gcut-assertions-helper.xml:155(term)
#: xml/gcut-assertions-helper.xml:176(term)
#: xml/gcut-assertions-helper.xml:201(term)
#: xml/gcut-assertions-helper.xml:234(term)
#: xml/gcut-assertions-helper.xml:255(term)
#: xml/gcut-assertions-helper.xml:277(term)
#: xml/gcut-assertions-helper.xml:303(term)
#: xml/gcut-assertions-helper.xml:332(term)
#: xml/gcut-assertions-helper.xml:358(term)
#: xml/gcut-assertions-helper.xml:387(term)
#: xml/gcut-assertions-helper.xml:424(term)
#: xml/gcut-assertions-helper.xml:458(term)
#: xml/gcut-assertions-helper.xml:492(term)
#: xml/gcut-assertions-helper.xml:518(term)
#: xml/gcut-assertions-helper.xml:547(term)
#: xml/gcut-assertions-helper.xml:573(term)
#: xml/gcut-assertions-helper.xml:600(term)
#: xml/gcut-assertions-helper.xml:621(term)
#: xml/gcut-assertions-helper.xml:642(term)
#: xml/gcut-assertions-helper.xml:663(term) xml/gcut-assertions.xml:149(term)
#: xml/gcut-assertions.xml:171(term) xml/gcut-assertions.xml:192(term)
#: xml/gcut-assertions.xml:214(term) xml/gcut-assertions.xml:237(term)
#: xml/gcut-assertions.xml:264(term) xml/gcut-assertions.xml:286(term)
#: xml/gcut-assertions.xml:307(term) xml/gcut-assertions.xml:328(term)
#: xml/gcut-assertions.xml:350(term) xml/gcut-assertions.xml:372(term)
#: xml/gcut-assertions.xml:397(term) xml/gcut-assertions.xml:427(term)
#: xml/gcut-assertions.xml:453(term) xml/gcut-assertions.xml:477(term)
#: xml/gcut-assertions.xml:509(term) xml/gcut-assertions.xml:565(term)
#: xml/gcut-assertions.xml:617(term) xml/gcut-assertions.xml:651(term)
#: xml/gcut-assertions.xml:690(term) xml/gcut-assertions.xml:722(term)
#: xml/gcut-assertions.xml:763(term) xml/gcut-assertions.xml:787(term)
#: xml/gcut-assertions.xml:808(term) xml/gcut-assertions.xml:828(term)
#: xml/gcut-assertions.xml:843(term)
#: xml/gdkcut-pixbuf-assertions-helper.xml:56(term)
#: xml/gdkcut-pixbuf-assertions.xml:65(term)
#: xml/soupcut-assertions-helper.xml:72(term)
#: xml/soupcut-assertions-helper.xml:94(term)
#: xml/soupcut-assertions-helper.xml:130(term)
#: xml/soupcut-assertions.xml:63(term) xml/soupcut-assertions.xml:80(term)
#: xml/soupcut-assertions.xml:106(term)
msgid "<parameter>expected</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:231(simpara) xml/cut-assertions.xml:256(simpara)
msgid "the expected boolean."
msgstr "期待する真偽値。"

#: xml/cut-assertions.xml:233(term) xml/cut-assertions.xml:258(term)
#: xml/cut-assertions.xml:325(term) xml/cut-assertions.xml:345(term)
#: xml/cut-assertions.xml:361(term) xml/cut-assertions.xml:381(term)
#: xml/cut-assertions.xml:397(term) xml/cut-assertions.xml:417(term)
#: xml/cut-assertions.xml:437(term) xml/cut-assertions.xml:461(term)
#: xml/cut-assertions.xml:488(term) xml/cut-assertions.xml:519(term)
#: xml/cut-assertions.xml:539(term) xml/cut-assertions.xml:562(term)
#: xml/cut-assertions.xml:596(term) xml/cut-assertions.xml:627(term)
#: xml/cut-assertions.xml:652(term) xml/cut-assertions.xml:681(term)
#: xml/cut-assertions.xml:701(term) xml/cut-assertions.xml:724(term)
#: xml/cut-assertions.xml:892(term) xml/cut-assertions.xml:1013(term)
#: xml/cut-assertions.xml:1035(term) xml/cut-assertions.xml:1056(term)
#: xml/gcut-assertions-helper.xml:158(term)
#: xml/gcut-assertions-helper.xml:179(term)
#: xml/gcut-assertions-helper.xml:204(term)
#: xml/gcut-assertions-helper.xml:237(term)
#: xml/gcut-assertions-helper.xml:258(term)
#: xml/gcut-assertions-helper.xml:280(term)
#: xml/gcut-assertions-helper.xml:306(term)
#: xml/gcut-assertions-helper.xml:335(term)
#: xml/gcut-assertions-helper.xml:361(term)
#: xml/gcut-assertions-helper.xml:390(term)
#: xml/gcut-assertions-helper.xml:427(term)
#: xml/gcut-assertions-helper.xml:461(term)
#: xml/gcut-assertions-helper.xml:495(term)
#: xml/gcut-assertions-helper.xml:521(term)
#: xml/gcut-assertions-helper.xml:550(term)
#: xml/gcut-assertions-helper.xml:576(term)
#: xml/gcut-assertions-helper.xml:603(term)
#: xml/gcut-assertions-helper.xml:624(term)
#: xml/gcut-assertions-helper.xml:645(term)
#: xml/gcut-assertions-helper.xml:666(term) xml/gcut-assertions.xml:152(term)
#: xml/gcut-assertions.xml:174(term) xml/gcut-assertions.xml:195(term)
#: xml/gcut-assertions.xml:217(term) xml/gcut-assertions.xml:240(term)
#: xml/gcut-assertions.xml:267(term) xml/gcut-assertions.xml:289(term)
#: xml/gcut-assertions.xml:310(term) xml/gcut-assertions.xml:331(term)
#: xml/gcut-assertions.xml:353(term) xml/gcut-assertions.xml:375(term)
#: xml/gcut-assertions.xml:400(term) xml/gcut-assertions.xml:430(term)
#: xml/gcut-assertions.xml:456(term) xml/gcut-assertions.xml:480(term)
#: xml/gcut-assertions.xml:512(term) xml/gcut-assertions.xml:568(term)
#: xml/gcut-assertions.xml:620(term) xml/gcut-assertions.xml:654(term)
#: xml/gcut-assertions.xml:693(term) xml/gcut-assertions.xml:725(term)
#: xml/gcut-assertions.xml:766(term) xml/gcut-assertions.xml:790(term)
#: xml/gcut-assertions.xml:811(term) xml/gcut-assertions.xml:831(term)
#: xml/gcut-assertions.xml:846(term)
#: xml/gdkcut-pixbuf-assertions-helper.xml:59(term)
#: xml/gdkcut-pixbuf-assertions.xml:68(term)
msgid "<parameter>actual</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:234(simpara) xml/cut-assertions.xml:259(simpara)
msgid "the actual boolean."
msgstr "実際の真偽値。"

#: xml/cut-assertions.xml:236(para) xml/cut-assertions.xml:261(para)
#: xml/cut-assertions.xml:348(para) xml/cut-assertions.xml:384(para)
#: xml/cut-assertions.xml:420(para) xml/cut-assertions.xml:464(para)
#: xml/cut-assertions.xml:522(para) xml/cut-assertions.xml:602(para)
#: xml/cut-assertions.xml:633(para) xml/cut-assertions.xml:687(para)
#: xml/cut-test-utils.xml:394(para) xml/cut-version.xml:101(para)
#: xml/gcut-assertions.xml:849(para) xml/gcut-data.xml:396(para)
#: xml/gcut-types.xml:76(para) xml/gcut-types.xml:88(para)
msgid "Since 1.0.7"
msgstr "1.0.7から"

#: xml/cut-assertions.xml:238(title)
msgid "cut_assert_not_equal_boolean ()"
msgstr ""

#: xml/cut-assertions.xml:239(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_not_equal_boolean        (<link linkend=\"cut-boolean\">cut_boolean</link> expected,\n"
"                                                         <link linkend=\"cut-boolean\">cut_boolean</link> actual);"
msgstr ""

#: xml/cut-assertions.xml:241(para)
msgid ""
"Passes if <parameter>expected</parameter> is <link linkend=\"CUT-TRUE--CAPS"
"\"><literal>CUT_TRUE</literal></link> value but <parameter>actual</"
"parameter> is <link linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</"
"literal></link> value or <parameter>expected</parameter> is <link linkend="
"\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></link> value but "
"<parameter>actual</parameter> is <link linkend=\"CUT-TRUE--CAPS"
"\"><literal>CUT_TRUE</literal></link> value."
msgstr ""
"<parameter>expected</parameter>が<link linkend=\"CUT-TRUE--CAPS"
"\"><literal>CUT_TRUE</literal></link>の値だが<parameter>actual</parameter>は"
"<link linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></link>の値のと"
"き、または、<parameter>expected</parameter>が<link linkend=\"CUT-FALSE--CAPS"
"\"><literal>CUT_FALSE</literal></link>の値だが<parameter>actual</parameter>は"
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link>の値のとき"
"にパスします。"

#: xml/cut-assertions.xml:248(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_not_equal_boolean(CUT_TRUE, CUT_TRUE);   -&gt; Fail\n"
"cut_assert_not_equal_boolean(CUT_FALSE, CUT_FALSE); -&gt; Fail\n"
"cut_assert_not_equal_boolean(CUT_TRUE, CUT_FALSE);  -&gt; Pass\n"
msgstr ""
"\n"
"cut_assert_not_equal_boolean(CUT_TRUE, CUT_TRUE);   -&gt; 失敗\n"
"cut_assert_not_equal_boolean(CUT_FALSE, CUT_FALSE); -&gt; 失敗\n"
"cut_assert_not_equal_boolean(CUT_TRUE, CUT_FALSE);  -&gt; パス\n"

#: xml/cut-assertions.xml:263(title)
msgid "cut_assert_null ()"
msgstr ""

#: xml/cut-assertions.xml:264(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_null                     (const <link linkend=\"void\">void</link> *expression,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:266(para)
msgid ""
"Passes if <parameter>expression</parameter> is <link linkend=\"NULL--CAPS"
"\"><literal>NULL</literal></link>."
msgstr ""
"<parameter>expression</parameter>が<link linkend=\"NULL--CAPS"
"\"><literal>NULL</literal></link>のときパスします。"

#: xml/cut-assertions.xml:280(title)
msgid "cut_assert_null_string ()"
msgstr "cut_assert_null_string ()"

#: xml/cut-assertions.xml:281(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_null_string              (const <link linkend=\"char\">char</link> *string,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:283(para)
msgid ""
"Passes if <parameter>string</parameter> is <link linkend=\"NULL--CAPS"
"\"><literal>NULL</literal></link>."
msgstr ""
"<parameter>string</parameter>が<link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>のときパスします。"

#: xml/cut-assertions.xml:287(term) xml/cut-test-utils.xml:126(term)
#: xml/cut-test-utils.xml:140(term) xml/cut-test-utils.xml:158(term)
#: xml/gcut-inspect.xml:84(term) xml/gcut-inspect.xml:109(term)
#: xml/gcut-inspect.xml:134(term) xml/gcut-inspect.xml:159(term)
#: xml/gcut-inspect.xml:184(term) xml/gcut-inspect.xml:215(term)
#: xml/gcut-inspect.xml:246(term) xml/gcut-inspect.xml:272(term)
#: xml/gcut-types.xml:59(term)
msgid "<parameter>string</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:288(simpara)
msgid "the string to be checked."
msgstr "チェックする文字列。"

#: xml/cut-assertions.xml:295(para) xml/cut-assertions.xml:547(para)
msgid "Since 0.3"
msgstr "0.3から"

#: xml/cut-assertions.xml:297(title)
msgid "cut_assert_not_null ()"
msgstr "cut_assert_not_null ()"

#: xml/cut-assertions.xml:298(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_not_null                 (const <link linkend=\"void\">void</link> *expression,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:300(para)
msgid ""
"Passes if <parameter>expression</parameter> is not <link linkend=\"NULL--CAPS"
"\"><literal>NULL</literal></link>."
msgstr ""
"<parameter>expression</parameter>が<link linkend=\"NULL--CAPS"
"\"><literal>NULL</literal></link>以外のときパスします。"

#: xml/cut-assertions.xml:314(title)
msgid "cut_assert_equal_int ()"
msgstr "cut_assert_equal_int ()"

#: xml/cut-assertions.xml:315(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_int                (<link linkend=\"int\">int</link> expected,\n"
"                                                         <link linkend=\"int\">int</link> actual,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:318(para) xml/cut-assertions.xml:354(para)
#: xml/cut-assertions.xml:390(para) xml/cut-assertions.xml:1049(para)
#: xml/gcut-assertions.xml:145(para) xml/gcut-assertions.xml:167(para)
#: xml/gcut-assertions.xml:188(para) xml/gcut-assertions.xml:210(para)
#: xml/gcut-assertions.xml:260(para) xml/gcut-assertions.xml:282(para)
#: xml/gcut-assertions.xml:303(para) xml/gcut-assertions.xml:324(para)
#: xml/gcut-assertions.xml:346(para) xml/gcut-assertions.xml:473(para)
#: xml/gcut-assertions.xml:505(para) xml/gcut-assertions.xml:561(para)
#: xml/gcut-assertions.xml:613(para) xml/gcut-assertions.xml:635(para)
#: xml/gcut-assertions.xml:669(para) xml/gcut-assertions.xml:783(para)
#: xml/gcut-assertions.xml:804(para) xml/gcut-assertions.xml:824(para)
msgid ""
"Passes if <parameter>expected</parameter> == <parameter>actual</parameter>."
msgstr ""
"<parameter>expected</parameter> == <parameter>actual</parameter>が成り立つと"
"きパスします。"

#: xml/cut-assertions.xml:323(simpara) xml/cut-assertions.xml:343(simpara)
msgid "an expected integer value."
msgstr "期待する整数の値。"

#: xml/cut-assertions.xml:326(simpara) xml/cut-assertions.xml:346(simpara)
msgid "an actual integer value."
msgstr "実際の整数の値。"

#: xml/cut-assertions.xml:335(title)
msgid "cut_assert_not_equal_int ()"
msgstr ""

#: xml/cut-assertions.xml:336(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_not_equal_int            (<link linkend=\"int\">int</link> expected,\n"
"                                                         <link linkend=\"int\">int</link> actual);"
msgstr ""

#: xml/cut-assertions.xml:338(para) xml/cut-assertions.xml:374(para)
#: xml/cut-assertions.xml:410(para) xml/gcut-assertions.xml:839(para)
msgid ""
"Passes if <parameter>expected</parameter> != <parameter>actual</parameter>."
msgstr ""
"<parameter>expected</parameter> != <parameter>actual</parameter>が成り立つと"
"きパスします。"

#: xml/cut-assertions.xml:350(title)
msgid "cut_assert_equal_uint ()"
msgstr ""

#: xml/cut-assertions.xml:351(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_uint               (unsigned <link linkend=\"int\">int</link> expected,\n"
"                                                         unsigned <link linkend=\"int\">int</link> actual,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:359(simpara) xml/cut-assertions.xml:379(simpara)
msgid "an expected unsigned integer value."
msgstr "期待する符号無し整数の値。"

#: xml/cut-assertions.xml:362(simpara) xml/cut-assertions.xml:382(simpara)
msgid "an actual unsigned integer value."
msgstr "実際の符号無し符号整数の値。"

#: xml/cut-assertions.xml:371(title)
msgid "cut_assert_not_equal_uint ()"
msgstr ""

#: xml/cut-assertions.xml:372(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_not_equal_uint           (unsigned <link linkend=\"int\">int</link> expected,\n"
"                                                         unsigned <link linkend=\"int\">int</link> actual);"
msgstr ""

#: xml/cut-assertions.xml:386(title)
msgid "cut_assert_equal_size ()"
msgstr ""

#: xml/cut-assertions.xml:387(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_size               (<link linkend=\"size-t\">size_t</link> expected,\n"
"                                                         <link linkend=\"size-t\">size_t</link> actual,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:395(simpara) xml/cut-assertions.xml:415(simpara)
msgid "an expected size_t value."
msgstr "期待するsize_tの値。"

#: xml/cut-assertions.xml:398(simpara) xml/cut-assertions.xml:418(simpara)
msgid "an actual size_t value."
msgstr "実際のsize_tの値。"

#: xml/cut-assertions.xml:405(para) xml/cut-assertions.xml:1234(para)
#: xml/cut-helper.xml:244(para) xml/cut-helper.xml:260(para)
#: xml/cut-helper.xml:271(para) xml/cut-test-utils.xml:259(para)
#: xml/cutter.xml:172(para) xml/cutter.xml:193(para) xml/cutter.xml:202(para)
#: xml/cutter.xml:211(para) xml/cutter.xml:419(para) xml/cutter.xml:434(para)
#: xml/cutter.xml:442(para) xml/gcut-assertions.xml:254(para)
#: xml/gcut-assertions.xml:498(para) xml/gcut-assertions.xml:834(para)
#: xml/gcut-data.xml:247(para) xml/gcut-data.xml:265(para)
#: xml/gcut-data.xml:283(para) xml/gcut-data.xml:302(para)
#: xml/gcut-data.xml:320(para) xml/gcut-data.xml:339(para)
#: xml/gcut-data.xml:358(para) xml/gcut-data.xml:377(para)
#: xml/gcut-egg.xml:229(para) xml/gcut-egg.xml:255(para)
#: xml/gcut-egg.xml:273(para) xml/gcut-egg.xml:292(para)
#: xml/gcut-egg.xml:307(para) xml/gcut-egg.xml:322(para)
#: xml/gcut-egg.xml:337(para) xml/gcut-egg.xml:351(para)
#: xml/gcut-egg.xml:371(para) xml/gcut-egg.xml:388(para)
#: xml/gcut-egg.xml:406(para) xml/gcut-egg.xml:418(para)
#: xml/gcut-egg.xml:444(para) xml/gcut-egg.xml:460(para)
#: xml/gcut-egg.xml:488(para) xml/gcut-egg.xml:503(para)
#: xml/gcut-egg.xml:519(para) xml/gcut-egg.xml:535(para)
#: xml/gcut-egg.xml:551(para) xml/gcut-egg.xml:568(para)
#: xml/gcut-egg.xml:586(para) xml/gcut-egg.xml:615(para)
#: xml/gcut-egg.xml:644(para) xml/gcut-egg.xml:672(para)
#: xml/gcut-egg.xml:693(para) xml/gcut-enum.xml:71(para)
#: xml/gcut-enum.xml:102(para) xml/gcut-enum.xml:146(para)
#: xml/gcut-enum.xml:191(para) xml/gcut-enum.xml:211(para)
#: xml/gcut-inspect.xml:93(para) xml/gcut-inspect.xml:118(para)
#: xml/gcut-inspect.xml:143(para) xml/gcut-inspect.xml:168(para)
#: xml/gcut-inspect.xml:193(para) xml/gcut-inspect.xml:224(para)
#: xml/gcut-inspect.xml:255(para) xml/gcut-inspect.xml:281(para)
#: xml/gcut-list.xml:156(para) xml/gcut-list.xml:171(para)
#: xml/gcut-list.xml:191(para) xml/gcut-list.xml:206(para)
#: xml/gcut-list.xml:226(para) xml/gcut-list.xml:241(para)
#: xml/gcut-list.xml:256(para) xml/gcut-list.xml:276(para)
#: xml/gcut-list.xml:296(para) xml/gcut-test-utils.xml:170(para)
#: xml/gcut-test-utils.xml:219(para) xml/gcut-types.xml:68(para)
#: xml/gcutter.xml:80(para) xml/gdkcutter-pixbuf.xml:82(para)
msgid "Since 1.0.6"
msgstr "1.0.6から"

#: xml/cut-assertions.xml:407(title)
msgid "cut_assert_not_equal_size ()"
msgstr ""

#: xml/cut-assertions.xml:408(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_not_equal_size           (<link linkend=\"size-t\">size_t</link> expected,\n"
"                                                         <link linkend=\"size-t\">size_t</link> actual);"
msgstr ""

#: xml/cut-assertions.xml:422(title)
msgid "cut_assert_equal_double ()"
msgstr "cut_assert_equal_double ()"

#: xml/cut-assertions.xml:423(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_double             (<link linkend=\"double\">double</link> expected,\n"
"                                                         <link linkend=\"double\">double</link> error,\n"
"                                                         <link linkend=\"double\">double</link> actual,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:427(para)
msgid ""
"Passes if (<parameter>expected</parameter> - <parameter>error</parameter>) "
"&lt;= <parameter>actual</parameter> &lt;= (<parameter>expected</parameter> + "
"<parameter>error</parameter>)."
msgstr ""
"(<parameter>expected</parameter> - <parameter>error</parameter>) &lt;= "
"<parameter>actual</parameter> &lt;= (<parameter>expected</parameter> + "
"<parameter>error</parameter>)が成り立つときパスします。"

#: xml/cut-assertions.xml:432(simpara) xml/cut-assertions.xml:456(simpara)
msgid "an expected float value."
msgstr "期待する浮動小数点数。"

#: xml/cut-assertions.xml:434(term) xml/cut-assertions.xml:458(term)
#: xml/cut-test-utils.xml:430(term) xml/gcut-assertions-helper.xml:443(term)
#: xml/gcut-assertions.xml:529(term) xml/gcut-assertions.xml:547(term)
#: xml/gcut-dynamic-data.xml:190(term) xml/gcut-dynamic-data.xml:209(term)
#: xml/gcut-dynamic-data.xml:228(term) xml/gcut-dynamic-data.xml:247(term)
#: xml/gcut-dynamic-data.xml:266(term) xml/gcut-dynamic-data.xml:285(term)
#: xml/gcut-dynamic-data.xml:304(term) xml/gcut-dynamic-data.xml:323(term)
#: xml/gcut-egg.xml:400(term) xml/gcut-egg.xml:438(term)
#: xml/gcut-egg.xml:481(term) xml/gcut-egg.xml:610(term)
#: xml/gcut-enum.xml:140(term) xml/gcut-enum.xml:185(term)
#: xml/gcut-enum.xml:204(term) xml/gcut-error.xml:78(term)
#: xml/gcut-key-file.xml:71(term) xml/gcut-key-file.xml:98(term)
#: xml/gcut-public.xml:73(term) xml/gcut-test-utils.xml:92(term)
#: xml/gdkcut-pixbuf.xml:127(term)
msgid "<parameter>error</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:435(simpara) xml/cut-assertions.xml:459(simpara)
msgid "a float value that specifies error range."
msgstr "誤差範囲を示す浮動小数点数。"

#: xml/cut-assertions.xml:438(simpara) xml/cut-assertions.xml:462(simpara)
msgid "an actual float value."
msgstr "実際の浮動小数点数。"

#: xml/cut-assertions.xml:447(title)
msgid "cut_assert_not_equal_double ()"
msgstr ""

#: xml/cut-assertions.xml:448(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_not_equal_double         (<link linkend=\"double\">double</link> expected,\n"
"                                                         <link linkend=\"double\">double</link> error,\n"
"                                                         <link linkend=\"double\">double</link> actual);"
msgstr ""

#: xml/cut-assertions.xml:451(para)
msgid ""
"Passes if <parameter>actual</parameter> &lt; (<parameter>expected</"
"parameter> - <parameter>error</parameter>) &amp;&amp; (<parameter>expected</"
"parameter> + <parameter>error</parameter>) &lt; <parameter>actual</"
"parameter>."
msgstr ""
"<parameter>actual</parameter> &lt; (<parameter>expected</parameter> - "
"<parameter>error</parameter>) &amp;&amp; (<parameter>expected</parameter> + "
"<parameter>error</parameter>) &lt; <parameter>actual</parameter>が成り立つと"
"きパスします。"

#: xml/cut-assertions.xml:466(title)
msgid "cut_assert_equal_string ()"
msgstr ""

#: xml/cut-assertions.xml:467(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_string             (const <link linkend=\"char\">char</link> *expected,\n"
"                                                         const <link linkend=\"char\">char</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:470(para) xml/cut-assertions.xml:528(para)
#: xml/cut-assertions.xml:554(para)
msgid ""
"Passes if both <parameter>expected</parameter> and <parameter>actual</"
"parameter> are <link linkend=\"NULL--CAPS\"><literal>NULL</literal></link> "
"or strcmp(<parameter>expected</parameter>, <parameter>actual</parameter>) == "
"0."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>がどちらとも"
"<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>、あるいはstrcmp"
"(<parameter>expected</parameter>, <parameter>actual</parameter>) == 0が成り立"
"つときにパスします。"

#: xml/cut-assertions.xml:476(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal_string(\"abc\", \"abc\"); -&gt; Pass\n"
"cut_assert_equal_string(NULL, NULL);   -&gt; Pass\n"
"cut_assert_equal_string(\"abc\", \"ABC\"); -&gt; Fail\n"
"cut_assert_equal_string(\"abc\", NULL);  -&gt; Fail\n"
"cut_assert_equal_string(NULL, \"abc\");  -&gt; Fail\n"
msgstr ""
"\n"
"cut_assert_equal_string(\"abc\", \"abc\"); -&gt; パス\n"
"cut_assert_equal_string(NULL, NULL);   -&gt; パス\n"
"cut_assert_equal_string(\"abc\", \"ABC\"); -&gt; 失敗\n"
"cut_assert_equal_string(\"abc\", NULL);  -&gt; 失敗\n"
"cut_assert_equal_string(NULL, \"abc\");  -&gt; 失敗\n"

#: xml/cut-assertions.xml:486(simpara) xml/cut-assertions.xml:517(simpara)
#: xml/cut-assertions.xml:537(simpara) xml/cut-assertions.xml:560(simpara)
#: xml/cut-assertions.xml:594(simpara) xml/cut-assertions.xml:625(simpara)
msgid "an expected string value."
msgstr "期待する文字列。"

#: xml/cut-assertions.xml:489(simpara) xml/cut-assertions.xml:520(simpara)
#: xml/cut-assertions.xml:563(simpara) xml/cut-assertions.xml:597(simpara)
#: xml/cut-assertions.xml:628(simpara)
msgid "an actual string value."
msgstr "実際の文字列の値。"

#: xml/cut-assertions.xml:498(title)
msgid "cut_assert_not_equal_string ()"
msgstr ""

#: xml/cut-assertions.xml:499(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_not_equal_string         (const <link linkend=\"char\">char</link> *expected,\n"
"                                                         const <link linkend=\"char\">char</link> *actual);"
msgstr ""

#: xml/cut-assertions.xml:501(para)
msgid ""
"Passes if one of <parameter>expected</parameter> and <parameter>actual</"
"parameter> is <link linkend=\"NULL--CAPS\"><literal>NULL</literal></link> or "
"strcmp(<parameter>expected</parameter>, <parameter>actual</parameter>) != 0."
msgstr ""
"<parameter>expected</parameter>か<parameter>actual</parameter>のどちらかが"
"<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>のとき、または、"
"strcmp(<parameter>expected</parameter>, <parameter>actual</parameter>) != 0の"
"ときパスします。"

#: xml/cut-assertions.xml:507(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal_string(\"abc\", \"ABC\"); -&gt; Pass\n"
"cut_assert_equal_string(\"abc\", NULL);  -&gt; Pass\n"
"cut_assert_equal_string(NULL, \"abc\");  -&gt; Pass\n"
"cut_assert_equal_string(\"abc\", \"abc\"); -&gt; Fail\n"
"cut_assert_equal_string(NULL, NULL);   -&gt; Fail\n"
msgstr ""
"\n"
"cut_assert_equal_string(\"abc\", \"ABC\"); -&gt; パス\n"
"cut_assert_equal_string(\"abc\", NULL);  -&gt; パス\n"
"cut_assert_equal_string(NULL, \"abc\");  -&gt; パス\n"
"cut_assert_equal_string(\"abc\", \"abc\"); -&gt; 失敗\n"
"cut_assert_equal_string(NULL, NULL);   -&gt; 失敗\n"

#: xml/cut-assertions.xml:524(title)
msgid "cut_assert_equal_string_with_free ()"
msgstr ""

#: xml/cut-assertions.xml:525(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_string_with_free   (const <link linkend=\"char\">char</link> *expected,\n"
"                                                         const <link linkend=\"char\">char</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:532(para)
msgid ""
"See also <link linkend=\"cut-assert-equal-string"
"\"><function>cut_assert_equal_string()</function></link> for examples."
msgstr ""
"使用例は<link linkend=\"cut-assert-equal-string"
"\"><function>cut_assert_equal_string()</function></link>を見てください。"

#: xml/cut-assertions.xml:540(simpara)
msgid "an actual string value that is freed."
msgstr "実際の文字列の値。（チェック後に開放される）"

#: xml/cut-assertions.xml:549(title)
msgid "cut_assert_equal_string_or_null ()"
msgstr ""

#: xml/cut-assertions.xml:550(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_string_or_null     (const <link linkend=\"char\">char</link> *expected,\n"
"                                                         const <link linkend=\"char\">char</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:553(para)
msgid ""
"<literal>cut_assert_equal_string_or_null</literal> has been deprecated since "
"version 0.3 and should not be used in newly-written code. Use <link linkend="
"\"cut-assert-equal-string\"><function>cut_assert_equal_string()</function></"
"link> instead."
msgstr ""
"<literal>cut_assert_equal_string_or_null</literal>はバージョン0.3から非推奨に"
"なりました。新しく書くコードでは使わないでください。代わりに<link linkend="
"\"cut-assert-equal-string\"><function>cut_assert_equal_string()</function></"
"link>を使ってください。"

#: xml/cut-assertions.xml:572(title)
msgid "cut_assert_equal_substring ()"
msgstr ""

#: xml/cut-assertions.xml:573(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_substring          (const <link linkend=\"char\">char</link> *expected,\n"
"                                                         const <link linkend=\"char\">char</link> *actual,\n"
"                                                         <link linkend=\"size-t\">size_t</link> length);"
msgstr ""

#: xml/cut-assertions.xml:576(para)
msgid ""
"Passes if (1) both <parameter>expected</parameter> and <parameter>actual</"
"parameter> are <link linkend=\"NULL--CAPS\"><literal>NULL</literal></link> "
"and <parameter>length</parameter> == 1 or (2) strncmp(<parameter>expected</"
"parameter>, <parameter>actual</parameter>, <parameter>length</parameter>) == "
"0."
msgstr ""
"(1)<parameter>expected</parameter>と<parameter>actual</parameter>が両方とも"
"<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>で"
"<parameter>length</parameter> == 1が成り立つとき、または、(2) strncmp"
"(<parameter>expected</parameter>, <parameter>actual</parameter>, "
"<parameter>length</parameter>) == 0が成り立つときパスします。"

#: xml/cut-assertions.xml:583(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal_substring(\"abcdef\", \"abcDEF\", 3); -&gt; Pass\n"
"cut_assert_equal_substring(NULL, NULL, 0);         -&gt; Pass\n"
"cut_assert_equal_substring(NULL, NULL, 3);         -&gt; Fail\n"
"cut_assert_equal_substring(\"abc\", \"ABC\", 3);       -&gt; Fail\n"
"cut_assert_equal_substring(\"abc\", NULL, 3);        -&gt; Fail\n"
"cut_assert_equal_substring(NULL, \"abc\", 3);        -&gt; Fail\n"
msgstr ""
"\n"
"cut_assert_equal_substring(\"abcdef\", \"abcDEF\", 3); -&gt; パス\n"
"cut_assert_equal_substring(NULL, NULL, 0);         -&gt; パス\n"
"cut_assert_equal_substring(NULL, NULL, 3);         -&gt; 失敗\n"
"cut_assert_equal_substring(\"abc\", \"ABC\", 3);       -&gt; 失敗\n"
"cut_assert_equal_substring(\"abc\", NULL, 3);        -&gt; 失敗\n"
"cut_assert_equal_substring(NULL, \"abc\", 3);        -&gt; 失敗\n"

#: xml/cut-assertions.xml:599(term) xml/cut-assertions.xml:630(term)
msgid "<parameter>length</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:600(simpara) xml/cut-assertions.xml:631(simpara)
msgid "compared string length."
msgstr ""

#: xml/cut-assertions.xml:604(title)
msgid "cut_assert_not_equal_substring ()"
msgstr ""

#: xml/cut-assertions.xml:605(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_not_equal_substring      (const <link linkend=\"char\">char</link> *expected,\n"
"                                                         const <link linkend=\"char\">char</link> *actual,\n"
"                                                         <link linkend=\"size-t\">size_t</link> length);"
msgstr ""

#: xml/cut-assertions.xml:608(para)
msgid ""
"Passes if (1) one of <parameter>expected</parameter> and <parameter>actual</"
"parameter> is <link linkend=\"NULL--CAPS\"><literal>NULL</literal></link> or "
"(2) strncmp(<parameter>expected</parameter>, <parameter>actual</parameter>, "
"<parameter>length</parameter>) != 0."
msgstr ""
"(1) <parameter>expected</parameter>と<parameter>actual</parameter>のどちらか"
"が<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>、または、(2) "
"strncmp(<parameter>expected</parameter>, <parameter>actual</parameter>, "
"<parameter>length</parameter>) != 0が成り立つときパスします。"

#: xml/cut-assertions.xml:614(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_not_equal_substring(\"abc\", \"ABC\", 3);       -&gt; Pass\n"
"cut_assert_not_equal_substring(\"abc\", NULL, 3);        -&gt; Pass\n"
"cut_assert_not_equal_substring(NULL, \"abc\", 3);        -&gt; Pass\n"
"cut_assert_not_equal_substring(\"abcdef\", \"abcDEF\", 3); -&gt; Fail\n"
"cut_assert_not_equal_substring(NULL, NULL, 0);         -&gt; Fail\n"
"cut_assert_not_equal_substring(NULL, NULL, 3);         -&gt; Fail\n"
msgstr ""
"\n"
"cut_assert_not_equal_substring(\"abc\", \"ABC\", 3);       -&gt; パス\n"
"cut_assert_not_equal_substring(\"abc\", NULL, 3);        -&gt; パス\n"
"cut_assert_not_equal_substring(NULL, \"abc\", 3);        -&gt; パス\n"
"cut_assert_not_equal_substring(\"abcdef\", \"abcDEF\", 3); -&gt; 失敗\n"
"cut_assert_not_equal_substring(NULL, NULL, 0);         -&gt; 失敗\n"
"cut_assert_not_equal_substring(NULL, NULL, 3);         -&gt; 失敗\n"

#: xml/cut-assertions.xml:635(title)
msgid "cut_assert_equal_memory ()"
msgstr ""

#: xml/cut-assertions.xml:636(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_memory             (const <link linkend=\"void\">void</link> *expected,\n"
"                                                         <link linkend=\"size-t\">size_t</link> expected_size,\n"
"                                                         const <link linkend=\"void\">void</link> *actual,\n"
"                                                         <link linkend=\"size-t\">size_t</link> actual_size,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:641(para)
msgid ""
"Passes if <parameter>expected_size</parameter> == <parameter>actual_size</"
"parameter> and memcmp(<parameter>expected</parameter>, <parameter>actual</"
"parameter>, <parameter>expected_size</parameter>) == 0."
msgstr ""
"<parameter>expected_size</parameter> == <parameter>actual_size</parameter>が"
"成り立ち、かつ、memcmp(<parameter>expected</parameter>, <parameter>actual</"
"parameter>, <parameter>expected_size</parameter>) == 0が成り立つときにパスし"
"ます。"

#: xml/cut-assertions.xml:647(simpara) xml/cut-assertions.xml:676(simpara)
msgid "an expected data."
msgstr "期待するデータ。"

#: xml/cut-assertions.xml:649(term) xml/cut-assertions.xml:678(term)
msgid "<parameter>expected_size</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:650(simpara) xml/cut-assertions.xml:679(simpara)
msgid "a size of <parameter>expected</parameter>."
msgstr "<parameter>expected</parameter>のサイズ。"

#: xml/cut-assertions.xml:653(simpara) xml/cut-assertions.xml:682(simpara)
msgid "an actual data."
msgstr "実際のデータ。"

#: xml/cut-assertions.xml:655(term) xml/cut-assertions.xml:684(term)
msgid "<parameter>actual_size</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:656(simpara) xml/cut-assertions.xml:685(simpara)
msgid "a size of <parameter>actual</parameter>."
msgstr "<parameter>actual</parameter>のサイズ。"

#: xml/cut-assertions.xml:665(title)
msgid "cut_assert_not_equal_memory ()"
msgstr ""

#: xml/cut-assertions.xml:666(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_not_equal_memory         (const <link linkend=\"void\">void</link> *expected,\n"
"                                                         <link linkend=\"size-t\">size_t</link> expected_size,\n"
"                                                         const <link linkend=\"void\">void</link> *actual,\n"
"                                                         <link linkend=\"size-t\">size_t</link> actual_size);"
msgstr ""

#: xml/cut-assertions.xml:670(para)
msgid ""
"Passes if <parameter>expected_size</parameter> != <parameter>actual_size</"
"parameter> or memcmp(<parameter>expected</parameter>, <parameter>actual</"
"parameter>, <parameter>expected_size</parameter>) != 0."
msgstr ""
"<parameter>expected_size</parameter> != <parameter>actual_size</parameter>ま"
"たはmemcmp(<parameter>expected</parameter>, <parameter>actual</parameter>, "
"<parameter>expected_size</parameter>) != 0が成り立つときパスします。"

#: xml/cut-assertions.xml:689(title)
msgid "cut_assert_equal_string_array ()"
msgstr ""

#: xml/cut-assertions.xml:690(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_string_array       (<link linkend=\"char\">char</link> **expected,\n"
"                                                         <link linkend=\"char\">char</link> **actual,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:693(para) xml/cut-assertions.xml:716(para)
msgid ""
"Passes if both <parameter>expected</parameter> and <parameter>actual</"
"parameter> are not <link linkend=\"NULL--CAPS\"><literal>NULL</literal></"
"link> and have same content (<link linkend=\"strcmp\"><function>strcmp()</"
"function></link> == 0) strings."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>がどちらとも"
"<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>ではなく、どちらも"
"同じ内容の文字列(<link linkend=\"strcmp\"><function>strcmp()</function></"
"link> == 0)を持つときにパスします。"

#: xml/cut-assertions.xml:699(simpara) xml/cut-assertions.xml:722(simpara)
msgid ""
"an expected <link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>-"
"terminated array of strings."
msgstr ""
"期待する文字列の配列。配列は<link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>終端。"

#: xml/cut-assertions.xml:702(simpara)
msgid ""
"an actual <link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>-"
"terminated array of strings."
msgstr ""
"実際の文字列の配列。配列は<link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>終端。"

#: xml/cut-assertions.xml:711(title)
msgid "cut_assert_equal_string_array_with_free ()"
msgstr "cut_assert_equal_string_array_with_free ()"

#: xml/cut-assertions.xml:712(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_string_array_with_free\n"
"                                                        (<link linkend=\"char\">char</link> **expected,\n"
"                                                         <link linkend=\"char\">char</link> **actual,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:725(simpara)
msgid ""
"an actual <link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>-"
"terminated array of strings that are freed."
msgstr ""
"実際の文字列の配列。配列は<link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>終端。（チェック後に開放される）"

#: xml/cut-assertions.xml:734(title)
msgid "cut_assert_operator()"
msgstr ""

#: xml/cut-assertions.xml:735(programlisting)
#, no-wrap
msgid "#define             cut_assert_operator(lhs, operator, rhs, ...)"
msgstr ""

#: xml/cut-assertions.xml:736(para) xml/cut-assertions.xml:764(para)
#: xml/cut-assertions.xml:792(para) xml/cut-assertions.xml:820(para)
#: xml/cut-assertions.xml:848(para)
msgid ""
"Passes if (<parameter>lhs</parameter> <parameter>operator</parameter> "
"<parameter>rhs</parameter>) is TRUE."
msgstr ""
"(<parameter>lhs</parameter> <parameter>operator</parameter> <parameter>rhs</"
"parameter>)が真のときにパスします。"

#: xml/cut-assertions.xml:741(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_operator(1, &lt;, 2) -&gt; (1 &lt; 2);\n"
msgstr ""

#: xml/cut-assertions.xml:746(term) xml/cut-assertions.xml:774(term)
#: xml/cut-assertions.xml:802(term) xml/cut-assertions.xml:830(term)
#: xml/cut-assertions.xml:858(term)
msgid "<parameter>lhs</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:747(simpara)
msgid "a left hand side value."
msgstr "左辺値。"

#: xml/cut-assertions.xml:749(term) xml/cut-assertions.xml:777(term)
#: xml/cut-assertions.xml:805(term) xml/cut-assertions.xml:833(term)
#: xml/cut-assertions.xml:861(term)
msgid "<parameter>operator</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:750(simpara) xml/cut-assertions.xml:778(simpara)
#: xml/cut-assertions.xml:806(simpara) xml/cut-assertions.xml:834(simpara)
#: xml/cut-assertions.xml:862(simpara)
msgid "a binary operator."
msgstr "二項演算子。"

#: xml/cut-assertions.xml:752(term) xml/cut-assertions.xml:780(term)
#: xml/cut-assertions.xml:808(term) xml/cut-assertions.xml:836(term)
#: xml/cut-assertions.xml:864(term)
msgid "<parameter>rhs</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:753(simpara)
msgid "a right hand side value."
msgstr "右辺値。"

#: xml/cut-assertions.xml:762(title)
msgid "cut_assert_operator_int()"
msgstr ""

#: xml/cut-assertions.xml:763(programlisting)
#, no-wrap
msgid "#define             cut_assert_operator_int(lhs, operator, rhs, ...)"
msgstr ""

#: xml/cut-assertions.xml:769(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_operator_int(1, &lt;, 2) -&gt; (1 &lt; 2);\n"
msgstr ""

#: xml/cut-assertions.xml:775(simpara)
msgid "a left hand side integer value."
msgstr "左辺の整数の値。"

#: xml/cut-assertions.xml:781(simpara)
msgid "a right hand side integer value."
msgstr "右辺の整数の値。"

#: xml/cut-assertions.xml:790(title)
msgid "cut_assert_operator_uint()"
msgstr ""

#: xml/cut-assertions.xml:791(programlisting)
#, no-wrap
msgid "#define             cut_assert_operator_uint(lhs, operator, rhs, ...)"
msgstr ""

#: xml/cut-assertions.xml:797(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_operator_uint(1, &lt;, 2) -&gt; (1 &lt; 2);\n"
msgstr ""

#: xml/cut-assertions.xml:803(simpara)
msgid "a left hand side unsigned integer value."
msgstr "左辺の符号無し整数の値。"

#: xml/cut-assertions.xml:809(simpara)
msgid "a right hand side unsigned integer value."
msgstr "右辺の符号無し整数の値。"

#: xml/cut-assertions.xml:816(para) xml/cut-assertions.xml:844(para)
#: xml/cut-assertions.xml:872(para) xml/cut-helper.xml:129(para)
#: xml/cut-helper.xml:148(para) xml/cut-helper.xml:183(para)
#: xml/cut-helper.xml:338(para) xml/cut-helper.xml:400(para)
#: xml/cut-multi-process.xml:351(para) xml/cut-multi-process.xml:369(para)
#: xml/cut-test-utils.xml:102(para) xml/cut-test-utils.xml:117(para)
#: xml/cut-test-utils.xml:146(para) xml/cut-test-utils.xml:167(para)
#: xml/cut-test-utils.xml:187(para) xml/cut-test-utils.xml:414(para)
#: xml/cut-test-utils.xml:437(para) xml/gcut-assertions.xml:383(para)
#: xml/gcut-assertions.xml:412(para) xml/gcut-assertions.xml:438(para)
#: xml/gcut-assertions.xml:464(para) xml/gcut-assertions.xml:576(para)
#: xml/gcut-assertions.xml:662(para) xml/gcut-assertions.xml:701(para)
#: xml/gcut-assertions.xml:733(para) xml/gcut-assertions.xml:777(para)
#: xml/gcut-assertions.xml:798(para) xml/gcut-assertions.xml:819(para)
#: xml/gcut-enum.xml:121(para) xml/gcut-enum.xml:165(para)
#: xml/gcut-error.xml:69(para) xml/gcut-error.xml:84(para)
#: xml/gcut-hash-table.xml:91(para) xml/gcut-hash-table.xml:126(para)
#: xml/gcut-hash-table.xml:147(para) xml/gcut-hash-table.xml:164(para)
#: xml/gcut-list.xml:106(para) xml/gcut-list.xml:136(para)
#: xml/gcut-list.xml:312(para) xml/gcut-list.xml:325(para)
#: xml/gcut-list.xml:341(para) xml/gcut-list.xml:354(para)
#: xml/gcut-list.xml:370(para) xml/gcut-list.xml:383(para)
#: xml/gcut-list.xml:396(para) xml/gcut-list.xml:413(para)
#: xml/gcut-list.xml:430(para) xml/gcut-object.xml:80(para)
#: xml/gcut-object.xml:95(para) xml/gcut-object.xml:118(para)
#: xml/gcut-test-utils.xml:190(para) xml/gcut-test-utils.xml:279(para)
#: xml/gcut-test-utils.xml:303(para) xml/gcut-value-equal.xml:73(para)
#: xml/gcut-value-equal.xml:100(para)
#: xml/gdkcut-pixbuf-assertions.xml:74(para)
msgid "Since 1.0.5"
msgstr "1.0.5から"

#: xml/cut-assertions.xml:818(title)
msgid "cut_assert_operator_size()"
msgstr ""

#: xml/cut-assertions.xml:819(programlisting)
#, no-wrap
msgid "#define             cut_assert_operator_size(lhs, operator, rhs, ...)"
msgstr ""

#: xml/cut-assertions.xml:825(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_operator_size(1, &lt;, 2) -&gt; (1 &lt; 2);\n"
msgstr ""

#: xml/cut-assertions.xml:831(simpara)
msgid "a left hand side size_t value."
msgstr "左辺のsize_tの値。"

#: xml/cut-assertions.xml:837(simpara)
msgid "a right hand side size_t value."
msgstr "右辺のsize_tの値。"

#: xml/cut-assertions.xml:846(title)
msgid "cut_assert_operator_double()"
msgstr ""

#: xml/cut-assertions.xml:847(programlisting)
#, no-wrap
msgid "#define             cut_assert_operator_double(lhs, operator, rhs, ...)"
msgstr ""

#: xml/cut-assertions.xml:853(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_operator_double(1.1, &lt;, 2.2) -&gt; (1.1 &lt; 2.2);\n"
msgstr ""

#: xml/cut-assertions.xml:859(simpara)
msgid "a left hand side double value."
msgstr "左辺の浮動小数点値。"

#: xml/cut-assertions.xml:865(simpara)
msgid "a right hand side double value."
msgstr "右辺の浮動小数点値。"

#: xml/cut-assertions.xml:874(title)
msgid "cut_assert_equal()"
msgstr ""

#: xml/cut-assertions.xml:875(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal(function, expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:876(para)
msgid ""
"Passes if <parameter>function</parameter>(<parameter>expected</parameter>, "
"<parameter>actual</parameter>) returns <link linkend=\"CUT-TRUE--CAPS"
"\"><literal>CUT_TRUE</literal></link>."
msgstr ""
"<parameter>function</parameter>(<parameter>expected</parameter>, "
"<parameter>actual</parameter>)が<link linkend=\"CUT-TRUE--CAPS"
"\"><literal>CUT_TRUE</literal></link>を返すときパスします。"

#: xml/cut-assertions.xml:881(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal(!strcmp, \"abc\", \"abc\"); -&gt; Pass\n"
msgstr ""
"\n"
"cut_assert_equal(!strcmp, \"abc\", \"abc\"); -&gt; パス\n"

#: xml/cut-assertions.xml:886(term)
msgid "<parameter>function</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:887(simpara)
msgid ""
"a function that compares <parameter>actual</parameter> with "
"<parameter>expected</parameter>."
msgstr ""
"<parameter>actual</parameter>と<parameter>expected</parameter>を比較する関"
"数。"

#: xml/cut-assertions.xml:890(simpara) xml/gcut-assertions.xml:829(simpara)
#: xml/gcut-assertions.xml:844(simpara)
msgid "an expected value."
msgstr "期待値。"

#: xml/cut-assertions.xml:893(simpara) xml/gcut-assertions.xml:832(simpara)
#: xml/gcut-assertions.xml:847(simpara)
msgid "an actual value."
msgstr "実測値。"

#: xml/cut-assertions.xml:902(title)
msgid "cut_assert_errno ()"
msgstr "cut_assert_errno ()"

#: xml/cut-assertions.xml:903(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_assert_errno                    (...);"
msgstr ""

#: xml/cut-assertions.xml:904(para)
msgid "Passes if errno is 0."
msgstr "errnoが0だとパスします。"

#: xml/cut-assertions.xml:909(programlisting)
#, no-wrap
msgid ""
"\n"
"count = write(stdout, buffer, strlen(buffer));\n"
"cut_assert_errno(\"Failed to write\");            -&gt; Pass when count != -1\n"
msgstr ""
"\n"
"count = write(stdout, buffer, strlen(buffer));\n"
"cut_assert_errno(\"Failed to write\");            -&gt; count != -1のときパス\n"

#: xml/cut-assertions.xml:920(para) xml/cut-assertions.xml:1206(para)
#: xml/cut-experimental.xml:71(para) xml/cut-experimental.xml:101(para)
#: xml/cut-experimental.xml:128(para) xml/cut-experimental.xml:155(para)
#: xml/gcut-assertions.xml:297(para) xml/gcut-assertions.xml:361(para)
msgid "Since 0.8"
msgstr "0.8から"

#: xml/cut-assertions.xml:922(title)
msgid "cut_assert_file_exist ()"
msgstr "cut_assert_file_exist ()"

#: xml/cut-assertions.xml:923(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_file_exist               (const <link linkend=\"char\">char</link> *path,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:925(para)
msgid ""
"<literal>cut_assert_file_exist</literal> has been deprecated since version "
"1.0.2 and should not be used in newly-written code. Use <link linkend=\"cut-"
"assert-path-exist\"><function>cut_assert_path_exist()</function></link> "
"instead."
msgstr ""
"<literal>cut_assert_file_exist</literal>はバージョン1.0.2から非推奨になりまし"
"た。新しく書くコードでは使わないでください。代わりに<link linkend=\"cut-"
"assert-path-exist\"><function>cut_assert_path_exist()</function></link>を使っ"
"てください。"

#: xml/cut-assertions.xml:926(para) xml/cut-assertions.xml:950(para)
msgid ""
"Passes if <parameter>path</parameter> exists. It may or may not be a regular "
"file."
msgstr ""
"<parameter>path</parameter>が存在するときにパスします。普通のファイルかもしれ"
"ませんし、そうでないかもしれません。（例えばシンボリックリンクやディレクトリ"
"など）"

#: xml/cut-assertions.xml:931(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_file_exist(\"/tmp\");             -&gt; Pass on many environment\n"
"cut_assert_file_exist(\"/non-existent\");    -&gt; Fail\n"
msgstr ""
"\n"
"cut_assert_file_exist(\"/tmp\");             -&gt; 多くの環境ではパス\n"
"cut_assert_file_exist(\"/non-existent\");    -&gt; 失敗\n"

#: xml/cut-assertions.xml:937(term) xml/cut-assertions.xml:961(term)
#: xml/cut-assertions.xml:985(term) xml/cut-assertions.xml:1078(term)
#: xml/cut-test-utils.xml:306(term) xml/cut-test-utils.xml:325(term)
#: xml/cut-test-utils.xml:348(term) xml/cut-test-utils.xml:369(term)
#: xml/cut-test-utils.xml:385(term) xml/gcut-assertions-helper.xml:477(term)
#: xml/gcut-assertions.xml:585(term) xml/gcut-assertions.xml:601(term)
#: xml/soupcut-server.xml:86(term)
msgid "<parameter>path</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:938(simpara) xml/cut-assertions.xml:962(simpara)
#: xml/cut-assertions.xml:986(simpara)
msgid "the path to test."
msgstr "テストするパス。"

#: xml/cut-assertions.xml:947(title)
msgid "cut_assert_path_exist ()"
msgstr "cut_assert_path_exist ()"

#: xml/cut-assertions.xml:948(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_path_exist               (const <link linkend=\"char\">char</link> *path,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:955(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_path_exist(\"/tmp\");             -&gt; Pass on many environment\n"
"cut_assert_path_exist(\"/non-existent\");    -&gt; Fail\n"
msgstr ""
"\n"
"cut_assert_path_exist(\"/tmp\");             -&gt; 多くの環境ではパス\n"
"cut_assert_path_exist(\"/non-existent\");    -&gt; 失敗\n"

#: xml/cut-assertions.xml:969(para) xml/cut-assertions.xml:993(para)
#: xml/cut-assertions.xml:1084(para) xml/cut-assertions.xml:1121(para)
#: xml/cut-test-utils.xml:313(para) xml/cut-test-utils.xml:336(para)
#: xml/cut-test-utils.xml:359(para) xml/cut-test-utils.xml:376(para)
#: xml/gcut-assertions.xml:607(para)
msgid "Since 1.0.2"
msgstr "1.0.2から"

#: xml/cut-assertions.xml:971(title)
msgid "cut_assert_path_not_exist ()"
msgstr "cut_assert_path_not_exist ()"

#: xml/cut-assertions.xml:972(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_path_not_exist           (const <link linkend=\"char\">char</link> *path,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:974(para)
msgid "Passes if <parameter>path</parameter> doesn't exist."
msgstr "<parameter>path</parameter>が存在しないとパスします。"

#: xml/cut-assertions.xml:979(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_path_not_exist(\"/non-existent\");    -&gt; Pass on many environment\n"
"cut_assert_path_not_exist(\"/tmp\");             -&gt; Fail\n"
msgstr ""
"\n"
"cut_assert_path_not_exist(\"/non-existent\");    -&gt; 多くの環境ではパス\n"
"cut_assert_path_not_exist(\"/tmp\");             -&gt; 失敗\n"

#: xml/cut-assertions.xml:995(title)
msgid "cut_assert_match ()"
msgstr "cut_assert_match ()"

#: xml/cut-assertions.xml:996(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_match                    (const <link linkend=\"char\">char</link> *pattern,\n"
"                                                         const <link linkend=\"char\">char</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:999(para)
msgid ""
"Passes if <parameter>pattern</parameter> matches <parameter>string</"
"parameter>."
msgstr ""
"<parameter>pattern</parameter>が<parameter>string</parameter>にマッチしたとき"
"パスします。"

#: xml/cut-assertions.xml:1004(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_match(\"^abc\", \"abc\");            -&gt; Pass\n"
"cut_assert_match(\"^abc\", \" abc\");           -&gt; Fail\n"
msgstr ""
"\n"
"cut_assert_match(\"^abc\", \"abc\");            -&gt; パス\n"
"cut_assert_match(\"^abc\", \" abc\");           -&gt; 失敗\n"

#: xml/cut-assertions.xml:1010(term) xml/cut-assertions.xml:1032(term)
#: xml/cut-test-utils.xml:250(term)
#: xml/soupcut-assertions-helper.xml:152(term)
#: xml/soupcut-assertions.xml:122(term)
msgid "<parameter>pattern</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:1011(simpara)
#: xml/soupcut-assertions.xml:123(simpara)
msgid "the regular expression pattern."
msgstr "正規表現。"

#: xml/cut-assertions.xml:1014(simpara)
msgid "the string to be matched."
msgstr "マッチされる文字列。"

#: xml/cut-assertions.xml:1021(para) xml/cut-assertions.xml:1043(para)
#: xml/cut-assertions.xml:1064(para) xml/gcut-assertions.xml:555(para)
msgid "Since 1.0"
msgstr "1.0から"

#: xml/cut-assertions.xml:1023(title)
msgid "cut_assert_match_with_free ()"
msgstr "cut_assert_match_with_free ()"

#: xml/cut-assertions.xml:1024(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_match_with_free          (const <link linkend=\"char\">char</link> *pattern,\n"
"                                                         const <link linkend=\"char\">char</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:1027(para)
msgid ""
"Passes if <parameter>pattern</parameter> matches <parameter>string</"
"parameter>. See <link linkend=\"cut-assert-match\"><function>cut_assert_match"
"()</function></link> for detail."
msgstr ""
"<parameter>pattern</parameter>が<parameter>string</parameter>にマッチしたとき"
"パスします。詳細は<link linkend=\\\"cut-assert-match\\"
"\"><function>cut_assert_match()</function></link>を見てください。"

#: xml/cut-assertions.xml:1033(simpara)
msgid "the regular expression as string."
msgstr "正規表現。（文字列で指定）"

#: xml/cut-assertions.xml:1036(simpara)
msgid "the string to be matched that is freed."
msgstr "マッチされる文字列。（チェック後に開放される）"

#: xml/cut-assertions.xml:1045(title)
msgid "cut_assert_equal_pointer ()"
msgstr "cut_assert_equal_pointer ()"

#: xml/cut-assertions.xml:1046(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_pointer            (const <link linkend=\"void\">void</link> *expected,\n"
"                                                         const <link linkend=\"void\">void</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:1054(simpara)
msgid "an expected pointer."
msgstr "期待するポインタ。"

#: xml/cut-assertions.xml:1057(simpara)
msgid "an actual pointer."
msgstr "実際のポインタ。"

#: xml/cut-assertions.xml:1066(title)
msgid "cut_assert_equal_fixture_data_string ()"
msgstr "cut_assert_equal_fixture_data_string ()"

#: xml/cut-assertions.xml:1067(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_fixture_data_string\n"
"                                                        (const <link linkend=\"char\">char</link> *expected,\n"
"                                                         const <link linkend=\"void\">void</link> *path,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:1071(para)
msgid ""
"Passes if <parameter>expected</parameter> == cut_get_fixture_data_string"
"(<parameter>path</parameter>, ...)."
msgstr ""
"<parameter>expected</parameter> == cut_get_fixture_data_string"
"(<parameter>path</parameter>, ...)が成り立つときパスします。"

#: xml/cut-assertions.xml:1076(simpara)
msgid "an expected string."
msgstr "期待する文字列。"

#: xml/cut-assertions.xml:1079(simpara) xml/cut-test-utils.xml:326(simpara)
#: xml/cut-test-utils.xml:349(simpara)
msgid "a first element of the path to the fixture data."
msgstr "フィクスチャデータのパスの最初の要素。"

#: xml/cut-assertions.xml:1082(simpara) xml/cut-test-utils.xml:389(simpara)
msgid ""
"remaining elements in path. <link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link> terminated."
msgstr ""
"パスの残りの要素。<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>"
"終端。"

#: xml/cut-assertions.xml:1086(title)
msgid "cut_error ()"
msgstr ""

#: xml/cut-assertions.xml:1087(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_error                           (const <link linkend=\"char\">char</link> *format,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:1089(para)
msgid "Raises an error with message."
msgstr "メッセージ付きでエラーを発生させます。"

#: xml/cut-assertions.xml:1093(term) xml/cut-assertions.xml:1130(term)
#: xml/cut-assertions.xml:1146(term) xml/cut-assertions.xml:1163(term)
#: xml/cut-assertions.xml:1178(term) xml/cut-assertions.xml:1200(term)
#: xml/cut-test-utils.xml:197(term) xml/cutter.xml:413(term)
#: xml/cutter.xml:428(term)
msgid "<parameter>format</parameter> :"
msgstr ""

#: xml/cut-assertions.xml:1094(simpara) xml/cut-assertions.xml:1131(simpara)
#: xml/cut-assertions.xml:1147(simpara) xml/cut-assertions.xml:1164(simpara)
#: xml/cut-assertions.xml:1179(simpara) xml/cut-assertions.xml:1201(simpara)
#: xml/cut-test-utils.xml:198(simpara) xml/cutter.xml:414(simpara)
#: xml/cutter.xml:429(simpara)
msgid ""
"the message format. See the <link linkend=\"printf\"><function>printf()</"
"function></link> documentation."
msgstr ""
"整形文字列。<link linkend=\"printf\"><function>printf()</function></link>のド"
"キュメントを見てください。"

#: xml/cut-assertions.xml:1097(simpara) xml/cut-assertions.xml:1134(simpara)
#: xml/cut-assertions.xml:1150(simpara) xml/cut-assertions.xml:1167(simpara)
#: xml/cut-assertions.xml:1182(simpara) xml/cut-assertions.xml:1204(simpara)
#: xml/cut-test-utils.xml:201(simpara) xml/cutter.xml:417(simpara)
#: xml/cutter.xml:432(simpara)
msgid "the parameters to insert into the format string."
msgstr "整形文字列に挿入されるパラメータ。"

#: xml/cut-assertions.xml:1101(title)
msgid "cut_error_errno ()"
msgstr "cut_error_errno ()"

#: xml/cut-assertions.xml:1102(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_error_errno                     (...);"
msgstr ""

#: xml/cut-assertions.xml:1105(programlisting)
#, no-wrap
msgid ""
"\n"
"void\n"
"setup (void)\n"
"{\n"
"    mkdir(\"tmp\", 0700);\n"
"    cut_error_errno(\"Failed to make tmp directory\");\n"
"      -&gt; Error when tmp directory isn't made successfully.\n"
"}\n"
msgstr ""

#: xml/cut-assertions.xml:1123(title)
msgid "cut_fail ()"
msgstr ""

#: xml/cut-assertions.xml:1124(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_fail                            (const <link linkend=\"char\">char</link> *format,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:1126(para)
msgid "Raises a failure with message."
msgstr "メッセージ付きでテストを失敗させます。"

#: xml/cut-assertions.xml:1138(title)
msgid "cut_pend ()"
msgstr ""

#: xml/cut-assertions.xml:1139(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_pend                            (const <link linkend=\"char\">char</link> *format,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:1141(para) xml/cut-assertions.xml:1158(para)
msgid "Marks the test is pending with message. The test is stopped."
msgstr ""
"メッセージ付きでこのテストが未解決であると印を付けます。テストはここで中断し"
"ます。"

#: xml/cut-assertions.xml:1154(title)
msgid "cut_pending ()"
msgstr ""

#: xml/cut-assertions.xml:1155(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_pending                         (const <link linkend=\"char\">char</link> *format,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:1157(para)
msgid ""
"<literal>cut_pending</literal> has been deprecated since version 0.4 and "
"should not be used in newly-written code. Use <link linkend=\"cut-pend"
"\"><function>cut_pend()</function></link> instead."
msgstr ""
"<literal>cut_pending</literal>はバージョン0.4から非推奨になりました。新しく書"
"くコードでは使わないでください。代わりに<link linkend=\"cut-pend"
"\"><function>cut_pend()</function></link>を使ってください。"

#: xml/cut-assertions.xml:1171(title)
msgid "cut_notify ()"
msgstr ""

#: xml/cut-assertions.xml:1172(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_notify                          (const <link linkend=\"char\">char</link> *format,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:1174(para)
msgid "Leaves a notification message. The test is continued."
msgstr "通知用のメッセージを残します。テストは続行します。"

#: xml/cut-assertions.xml:1186(title)
msgid "cut_omit ()"
msgstr ""

#: xml/cut-assertions.xml:1187(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_omit                            (const <link linkend=\"char\">char</link> *format,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-assertions.xml:1189(para)
msgid "Omit the test."
msgstr "このテストを省略します。"

#: xml/cut-assertions.xml:1194(programlisting)
#, no-wrap
msgid ""
"\n"
"if (version &lt; 2.0)\n"
"  cut_omit(\"Require &gt;= 2.0\");\n"
msgstr ""

#: xml/cut-assertions.xml:1208(title)
msgid "cut_return ()"
msgstr "cut_return ()"

#: xml/cut-assertions.xml:1209(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_return                          (void);"
msgstr ""

#: xml/cut-assertions.xml:1210(para)
msgid "Finish the test."
msgstr "このテストを終了します。"

#: xml/cut-assertions.xml:1215(programlisting)
#, no-wrap
msgid ""
"\n"
"static void\n"
"sub_xxx (void)\n"
"{\n"
"  some_assertions();\n"
"  if (no_need_more_test)\n"
"    cut_return();\n"
"  some_assertions();\n"
"}\n"
"\n"
"void\n"
"test_xxx (void)\n"
"{\n"
"   some_assertions();\n"
"   cut_trace(sub_xxx());\n"
"   some_assertions();\n"
"}\n"
msgstr ""

#: xml/cut-backtrace-entry.xml:7(refentrytitle)
#: xml/cut-backtrace-entry.xml:13(refname)
msgid "CutBacktraceEntry"
msgstr ""

#: xml/cut-cairo-chart-data.xml:7(refentrytitle)
#: xml/cut-cairo-chart-data.xml:13(refname)
msgid "CutCairoChartData"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:7(refentrytitle)
#: xml/cut-cairo-pie-chart.xml:13(refname)
msgid "CutCairoPieChart"
msgstr ""

#: xml/cut-cairo.xml:7(refentrytitle) xml/cut-cairo.xml:13(refname)
msgid "cut-cairo"
msgstr ""

#: xml/cut-contractor.xml:7(refentrytitle) xml/cut-contractor.xml:13(refname)
msgid "CutContractor"
msgstr ""

#: xml/cut-crash-backtrace.xml:7(refentrytitle)
#: xml/cut-crash-backtrace.xml:13(refname)
msgid "cut-crash-backtrace"
msgstr ""

#: xml/cut-diff.xml:7(refentrytitle) xml/cut-diff.xml:13(refname)
msgid "CutDiffer"
msgstr ""

#: xml/cut-elf-loader.xml:7(refentrytitle) xml/cut-elf-loader.xml:13(refname)
msgid "CutELFLoader"
msgstr ""

#: xml/cut-experimental.xml:7(refentrytitle)
#: xml/cut-experimental.xml:13(refname)
msgid "Experimental"
msgstr "実験"

#: xml/cut-experimental.xml:14(refpurpose)
msgid "Experimental API."
msgstr "実験的なAPI"

#: xml/cut-experimental.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>                            ()\n"
"#define             <placeholder-2/>                    (pid, usec_timeout)\n"
"#define             <placeholder-3/>         (pid)\n"
"#define             <placeholder-4/>         (pid)\n"
msgstr ""

#: xml/cut-experimental.xml:38(para)
msgid "This API may be changed in the future."
msgstr "将来、このAPIは変更されるかもしれません。"

#: xml/cut-experimental.xml:47(title)
msgid "cut_fork()"
msgstr ""

#: xml/cut-experimental.xml:48(programlisting)
#, no-wrap
msgid "#define             cut_fork()"
msgstr ""

#: xml/cut-experimental.xml:49(para)
msgid "Makes child process."
msgstr "子プロセスを生成します。"

#: xml/cut-experimental.xml:54(programlisting)
#, no-wrap
msgid ""
"\n"
"int pid;\n"
"pid = cut_fork();\n"
"cut_assert_errno();\n"
"\n"
"if (pid == 0) {\n"
"  do_something_for_child_process();\n"
"  _exit(EXIT_SUCCESS);\n"
"}\n"
"\n"
"do_something_for_parent_process();\n"
msgstr ""

#: xml/cut-experimental.xml:68(term) xml/cut-multi-process.xml:163(term)
#: xml/cut-multi-process.xml:177(term) xml/cut-multi-process.xml:205(term)
#: xml/cut-multi-process.xml:221(term) xml/cut-multi-process.xml:236(term)
#: xml/cut-multi-process.xml:251(term) xml/cut-multi-process.xml:283(term)
#: xml/cut-multi-process.xml:315(term) xml/cut-multi-process.xml:347(term)
#: xml/cut-multi-process.xml:381(term) xml/cut-multi-process.xml:414(term)
#: xml/cut-multi-process.xml:449(term) xml/cut-multi-process.xml:481(term)
#: xml/cut-multi-process.xml:512(term) xml/cut-multi-process.xml:526(term)
#: xml/cut-multi-process.xml:540(term) xml/cut-multi-process.xml:557(term)
#: xml/cut-multi-process.xml:591(term) xml/cut-multi-process.xml:621(term)
#: xml/cut-multi-process.xml:650(term) xml/cut-test-utils.xml:99(term)
#: xml/cut-test-utils.xml:114(term) xml/cut-test-utils.xml:129(term)
#: xml/cut-test-utils.xml:143(term) xml/cut-test-utils.xml:164(term)
#: xml/cut-test-utils.xml:184(term) xml/cut-test-utils.xml:203(term)
#: xml/cut-test-utils.xml:217(term) xml/cut-test-utils.xml:234(term)
#: xml/cut-test-utils.xml:256(term) xml/cut-test-utils.xml:279(term)
#: xml/cut-test-utils.xml:294(term) xml/cut-test-utils.xml:332(term)
#: xml/cut-test-utils.xml:355(term) xml/cut-test-utils.xml:391(term)
#: xml/cut-test-utils.xml:410(term) xml/cut-test-utils.xml:433(term)
#: xml/cutter.xml:388(term) xml/gcut-data-helper.xml:80(term)
#: xml/gcut-data-helper.xml:99(term) xml/gcut-data-helper.xml:118(term)
#: xml/gcut-data-helper.xml:137(term) xml/gcut-data-helper.xml:156(term)
#: xml/gcut-data-helper.xml:175(term) xml/gcut-data-helper.xml:194(term)
#: xml/gcut-data-helper.xml:213(term) xml/gcut-data.xml:262(term)
#: xml/gcut-data.xml:280(term) xml/gcut-data.xml:299(term)
#: xml/gcut-data.xml:317(term) xml/gcut-data.xml:336(term)
#: xml/gcut-data.xml:355(term) xml/gcut-data.xml:374(term)
#: xml/gcut-data.xml:393(term) xml/gcut-dynamic-data.xml:118(term)
#: xml/gcut-dynamic-data.xml:133(term) xml/gcut-dynamic-data.xml:148(term)
#: xml/gcut-dynamic-data.xml:159(term) xml/gcut-dynamic-data.xml:174(term)
#: xml/gcut-dynamic-data.xml:193(term) xml/gcut-dynamic-data.xml:212(term)
#: xml/gcut-dynamic-data.xml:231(term) xml/gcut-dynamic-data.xml:250(term)
#: xml/gcut-dynamic-data.xml:269(term) xml/gcut-dynamic-data.xml:288(term)
#: xml/gcut-dynamic-data.xml:307(term) xml/gcut-dynamic-data.xml:326(term)
#: xml/gcut-egg.xml:235(term) xml/gcut-egg.xml:252(term)
#: xml/gcut-egg.xml:270(term) xml/gcut-egg.xml:289(term)
#: xml/gcut-egg.xml:304(term) xml/gcut-egg.xml:319(term)
#: xml/gcut-egg.xml:348(term) xml/gcut-egg.xml:382(term)
#: xml/gcut-egg.xml:403(term) xml/gcut-egg.xml:441(term)
#: xml/gcut-egg.xml:456(term) xml/gcut-egg.xml:484(term)
#: xml/gcut-egg.xml:515(term) xml/gcut-egg.xml:531(term)
#: xml/gcut-egg.xml:547(term) xml/gcut-egg.xml:564(term)
#: xml/gcut-enum.xml:77(term) xml/gcut-enum.xml:118(term)
#: xml/gcut-enum.xml:143(term) xml/gcut-enum.xml:162(term)
#: xml/gcut-enum.xml:188(term) xml/gcut-enum.xml:207(term)
#: xml/gcut-error.xml:65(term) xml/gcut-error.xml:81(term)
#: xml/gcut-hash-table.xml:86(term) xml/gcut-hash-table.xml:123(term)
#: xml/gcut-hash-table.xml:143(term) xml/gcut-hash-table.xml:161(term)
#: xml/gcut-hash-table.xml:177(term) xml/gcut-io.xml:49(term)
#: xml/gcut-key-file.xml:74(term) xml/gcut-key-file.xml:101(term)
#: xml/gcut-list.xml:102(term) xml/gcut-list.xml:133(term)
#: xml/gcut-list.xml:152(term) xml/gcut-list.xml:168(term)
#: xml/gcut-list.xml:187(term) xml/gcut-list.xml:203(term)
#: xml/gcut-list.xml:222(term) xml/gcut-list.xml:238(term)
#: xml/gcut-list.xml:253(term) xml/gcut-list.xml:273(term)
#: xml/gcut-list.xml:293(term) xml/gcut-object.xml:76(term)
#: xml/gcut-object.xml:92(term) xml/gcut-object.xml:115(term)
#: xml/gcut-public.xml:61(term) xml/gcut-public.xml:76(term)
#: xml/gcut-public.xml:95(term) xml/gcut-public.xml:110(term)
#: xml/gcut-string-io-channel.xml:69(term)
#: xml/gcut-string-io-channel.xml:80(term)
#: xml/gcut-string-io-channel.xml:101(term)
#: xml/gcut-string-io-channel.xml:126(term)
#: xml/gcut-string-io-channel.xml:151(term)
#: xml/gcut-string-io-channel.xml:177(term) xml/gcut-test-utils.xml:80(term)
#: xml/gcut-test-utils.xml:95(term) xml/gcut-test-utils.xml:116(term)
#: xml/gcut-test-utils.xml:132(term) xml/gcut-test-utils.xml:151(term)
#: xml/gcut-test-utils.xml:166(term) xml/gcut-test-utils.xml:186(term)
#: xml/gcut-test-utils.xml:215(term) xml/gcut-test-utils.xml:249(term)
#: xml/gcut-test-utils.xml:274(term) xml/gcut-test-utils.xml:299(term)
#: xml/gcut-types.xml:85(term) xml/gcut-value-equal.xml:69(term)
#: xml/gdkcut-pixbuf.xml:65(term) xml/gdkcut-pixbuf.xml:84(term)
#: xml/gdkcut-pixbuf.xml:103(term) xml/gdkcut-pixbuf.xml:130(term)
#: xml/soupcut-client.xml:83(term) xml/soupcut-client.xml:116(term)
#: xml/soupcut-client.xml:143(term) xml/soupcut-client.xml:157(term)
#: xml/soupcut-client.xml:171(term) xml/soupcut-client.xml:185(term)
#: xml/soupcut-server.xml:56(term) xml/soupcut-server.xml:71(term)
#: xml/soupcut-server.xml:89(term)
msgid "<emphasis>Returns</emphasis> :"
msgstr "<emphasis>戻り値</emphasis> :"

#: xml/cut-experimental.xml:68(simpara) xml/cut-experimental.xml:126(simpara)
#: xml/cut-experimental.xml:153(simpara)
msgid "Process ID."
msgstr "プロセスID。"

#: xml/cut-experimental.xml:73(title)
msgid "cut_wait_process()"
msgstr ""

#: xml/cut-experimental.xml:74(programlisting)
#, no-wrap
msgid "#define             cut_wait_process(pid, usec_timeout)"
msgstr ""

#: xml/cut-experimental.xml:75(para)
msgid "Waits a process specified by <parameter>pid</parameter>."
msgstr "<parameter>pid</parameter>で指定されたプロセスの終了を待ちます。"

#: xml/cut-experimental.xml:80(programlisting)
#, no-wrap
msgid ""
"\n"
"int pid;\n"
"pid = cut_fork();\n"
"cut_assert_errno();\n"
"\n"
"if (pid == 0) {\n"
"  do_something_for_child_process();\n"
"  _exit(EXIT_SUCCESS);\n"
"}\n"
"\n"
"do_something_for_parent_process();\n"
"cut_assert_equal_int(EXIT_SUCCESS, cut_wait_process(pid, 100));\n"
msgstr ""

#: xml/cut-experimental.xml:95(term) xml/cut-experimental.xml:125(term)
#: xml/cut-experimental.xml:152(term)
msgid "<parameter>pid</parameter> :"
msgstr ""

#: xml/cut-experimental.xml:96(simpara)
msgid "Process ID to wait."
msgstr "終了を待つプロセスのID。"

#: xml/cut-experimental.xml:98(term)
msgid "<parameter>usec_timeout</parameter> :"
msgstr ""

#: xml/cut-experimental.xml:99(simpara)
msgid "Timeout in usec."
msgstr "タイムアウトする時間。100万分の1秒単位で指定。"

#: xml/cut-experimental.xml:103(title)
msgid "cut_fork_get_stdout_message()"
msgstr ""

#: xml/cut-experimental.xml:104(programlisting)
#, no-wrap
msgid "#define             cut_fork_get_stdout_message(pid)"
msgstr ""

#: xml/cut-experimental.xml:105(para) xml/cut-experimental.xml:132(para)
msgid "Reads a message from a process specified by <parameter>pid</parameter>."
msgstr ""
"<parameter>pid</parameter>で指定されたプロセスからメッセージを読みます。"

#: xml/cut-experimental.xml:110(programlisting)
#, no-wrap
msgid ""
"\n"
"int pid;\n"
"pid = cut_fork();\n"
"cut_assert_errno();\n"
"\n"
"if (pid == 0) {\n"
"  g_print(\"I'm a child.\");\n"
"  _exit(EXIT_SUCCESS);\n"
"}\n"
"\n"
"cut_assert_equal_string(\"I'm a child.\", cut_fork_get_stdout_message(pid));\n"
"cut_assert_equal_int(EXIT_SUCCESS, cut_wait_process(pid, 100));\n"
msgstr ""

#: xml/cut-experimental.xml:130(title)
msgid "cut_fork_get_stderr_message()"
msgstr ""

#: xml/cut-experimental.xml:131(programlisting)
#, no-wrap
msgid "#define             cut_fork_get_stderr_message(pid)"
msgstr ""

#: xml/cut-experimental.xml:137(programlisting)
#, no-wrap
msgid ""
"\n"
"int pid;\n"
"pid = cut_fork();\n"
"cut_assert_errno();\n"
"\n"
"if (pid == 0) {\n"
"  g_print(\"I'm a child.\");\n"
"  _exit(EXIT_SUCCESS);\n"
"}\n"
"\n"
"cut_assert_equal_string(\"I'm a child.\", cut_fork_get_stderr_message(pid));\n"
"cut_assert_equal_int(EXIT_SUCCESS, cut_wait_process(pid, 100));\n"
msgstr ""

#: xml/cut-factory-builder.xml:7(refentrytitle)
#: xml/cut-factory-builder.xml:13(refname)
msgid "CutFactoryBuilder"
msgstr ""

#: xml/cut-features.xml:7(refentrytitle) xml/cut-features.xml:13(refname)
msgid "cut-features"
msgstr ""

#: xml/cut-features.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
"#define             <placeholder-2/>\n"
msgstr ""

#: xml/cut-features.xml:44(programlisting)
#, no-wrap
msgid "#define CUT_SUPPORT_GLIB 1\n"
msgstr ""

#: xml/cut-features.xml:50(programlisting)
#, no-wrap
msgid "#define CUT_SUPPORT_GDK_PIXBUF 1\n"
msgstr ""

#: xml/cut-file-stream-reader.xml:7(refentrytitle)
#: xml/cut-file-stream-reader.xml:13(refname)
msgid "CutFileStreamReader"
msgstr ""

#: xml/cut-helper.xml:7(refentrytitle) xml/cut-helper.xml:13(refname)
msgid "Assertion writing helper"
msgstr "検証作成の補助"

#: xml/cut-helper.xml:14(refpurpose)
msgid "Symbols in this section help you writing your own assertions."
msgstr "このセクションにあるシンボルは独自検証を作成することを補助します。"

#: xml/cut-helper.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                       (void);\n"
"<placeholder-3/>                <placeholder-4/>                       (const <placeholder-5/> *system_message,\n"
"                                                         ...);\n"
"<placeholder-6/>                <placeholder-7/>               (const <placeholder-8/> *system_message,\n"
"                                                         const <placeholder-9/> *user_message_format);\n"
"#define             <placeholder-10/>\n"
"<placeholder-11/>                <placeholder-12/>                  (const <placeholder-13/> *expression);\n"
"<placeholder-14/>                <placeholder-15/>                   (void);\n"
"#define             <placeholder-16/>                           (expression)\n"
"#define             <placeholder-17/>      (expression, info_expression)\n"
msgstr ""

#: xml/cut-helper.xml:45(para)
msgid ""
"You will need to write your own assertions for writing easy to read test. "
"Symbols in this section help you writing your own assertions."
msgstr ""
"読みやすいテストを書くために独自の検証を作成する必要があるでしょう。このセク"
"ションのシンボルは独自の検証を作成を補助します。"

#: xml/cut-helper.xml:50(para)
msgid "e.g.:"
msgstr "例:"

#: xml/cut-helper.xml:55(programlisting)
#, no-wrap
msgid ""
"\n"
"#ifndef __MY_ASSERTIONS_H__\n"
"#define __MY_ASSERTIONS_H__\n"
"\n"
"#include &lt;cutter.h&gt;\n"
"\n"
"#ifdef __cplusplus\n"
"extern \"C\" {\n"
"#endif\n"
"\n"
"#define my_assert_equal_int(expected, actual)                    \\\n"
"    cut_trace_with_info_expression(                              \\\n"
"        my_assert_equal_int_helper((expected), (actual),         \\\n"
"                                   # expected, # actual),        \\\n"
"        my_assert_equal_int(expected, actual, __VA_ARGS__))\n"
"\n"
"void my_assert_equal_int_help (long expected,\n"
"                               long actual,\n"
"                               const char *expression_expected,\n"
"                               const char *expression_actual);\n"
"\n"
"#ifdef __cplusplus\n"
"}\n"
"#endif\n"
"\n"
"#endif\n"
msgstr ""

#: xml/cut-helper.xml:53(para)
msgid "my-assertions.h: <placeholder-1/>"
msgstr ""

#: xml/cut-helper.xml:85(programlisting)
#, no-wrap
msgid ""
"\n"
"#include \"my-assertions.h\"\n"
"\n"
"void\n"
"my_assert_equal_int_helper (long expected,\n"
"                            long actual,\n"
"                            const char *expression_expected,\n"
"                            const char *expression_actual)\n"
"{\n"
"    if (expected == actual) {\n"
"        cut_test_pass();\n"
"    } else {\n"
"        cut_test_fail(cut_take_printf(\"&lt;%s == %s&gt;\\n\"\n"
"                                      \"expected: &lt;%ld&gt;\\n\"\n"
"                                      \"  actual: &lt;%ld&gt;\",\n"
"                                      expression_expected,\n"
"                                      expression_actual,\n"
"                                      expected, actual));\n"
"    }\n"
"}\n"
msgstr ""

#: xml/cut-helper.xml:83(para)
msgid "my-assertions.c: <placeholder-1/>"
msgstr ""

#: xml/cut-helper.xml:109(programlisting)
#, no-wrap
msgid ""
"\n"
"AM_CFLAGS = $(CUTTER_CFLAGS)\n"
"LIBS = $(CUTTER_LIBS)\n"
"noinst_LTLIBRARIES = libmy-assertions.la\n"
"libmy_assertions_la_SOURCES = my-assertions.c my-assertions.h\n"
"AM_LDFLAGS = -module -rpath $(libdir) -avoid-version -no-undefined\n"
msgstr ""

#: xml/cut-helper.xml:107(para) xml/gcutter.xml:59(para)
#: xml/gdkcutter-pixbuf.xml:61(para) xml/soupcutter.xml:61(para)
msgid "Makefile.am: <placeholder-1/>"
msgstr ""

#: xml/cut-helper.xml:123(title)
msgid "cut_test_pass ()"
msgstr ""

#: xml/cut-helper.xml:124(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_test_pass                       (void);"
msgstr ""

#: xml/cut-helper.xml:125(para)
msgid ""
"Call <link linkend=\"cut-test-pass\"><function>cut_test_pass()</function></"
"link> if an assertion is passed. <link linkend=\"cut-test-pass"
"\"><function>cut_test_pass()</function></link> counts up n-assertions."
msgstr ""
"検証をパスしたら<link linkend=\"cut-test-pass\"><function>cut_test_pass()</"
"function></link>を呼んでください。<link linkend=\"cut-test-pass"
"\"><function>cut_test_pass()</function></link>は検証数を増やします。"

#: xml/cut-helper.xml:131(title)
msgid "cut_test_fail ()"
msgstr ""

#: xml/cut-helper.xml:132(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_test_fail                       (const <link linkend=\"char\">char</link> *system_message,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-helper.xml:134(para)
msgid ""
"Call <link linkend=\"cut-test-fail\"><function>cut_test_fail()</function></"
"link> if an assertion is failed. <link linkend=\"cut-test-fail"
"\"><function>cut_test_fail()</function></link> counts up n-failures and "
"terminate the current test."
msgstr ""
"検証が失敗したら<link linkend=\"cut-test-fail\"><function>cut_test_fail()</"
"function></link>を呼んでください。<link linkend=\"cut-test-fail"
"\"><function>cut_test_fail()</function></link>は失敗数を増やし、現在のテスト"
"を中断します。"

#: xml/cut-helper.xml:140(term) xml/cut-helper.xml:176(term)
msgid "<parameter>system_message</parameter> :"
msgstr ""

#: xml/cut-helper.xml:141(simpara) xml/cut-helper.xml:177(simpara)
msgid "a failure message from testing system."
msgstr "テストフレームワーク指定の失敗メッセージ。"

#: xml/cut-helper.xml:150(title)
msgid "cut_test_fail_va_list ()"
msgstr ""

#: xml/cut-helper.xml:151(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_test_fail_va_list               (const <link linkend=\"char\">char</link> *system_message,\n"
"                                                         const <link linkend=\"char\">char</link> *user_message_format);"
msgstr ""

#: xml/cut-helper.xml:153(para)
msgid ""
"<literal>cut_test_fail_va_list</literal> has been deprecated since version "
"1.0.6 and should not be used in newly-written code. Use <link linkend=\"cut-"
"test-fail\"><function>cut_test_fail()</function></link> instead."
msgstr ""
"<literal>cut_test_fail_va_list</literal>はバージョン1.0.6から非推奨になりまし"
"た。新しく書くコードでは使わないで下さい。代わりに<link linkend=\"cut-test-"
"fail\"><function>cut_test_fail()</function></link>を使ってください。"

#: xml/cut-helper.xml:154(para)
msgid ""
"See <link linkend=\"cut-test-fail\"><function>cut_test_fail()</function></"
"link> for <link linkend=\"cut-test-fail-va-list"
"\"><function>cut_test_fail_va_list()</function></link>'s behavior. "
"<parameter>user_message_format</parameter> is the prior variable of variable "
"length arguments."
msgstr ""
"<link linkend=\"cut-test-fail-va-list\"><function>cut_test_fail_va_list()</"
"function></link>の動作については<link linkend=\"cut-test-fail"
"\"><function>cut_test_fail()</function></link>を見てください。"
"<parameter>user_message_format</parameter>は可変長引数の1つ前の引数です。"

#: xml/cut-helper.xml:161(programlisting)
#, no-wrap
msgid ""
"\n"
"void\n"
"my_assert(cut_boolean result,\n"
"          const gchar *user_message_format,\n"
"          ...)\n"
"{\n"
"    if (result) {\n"
"        cut_test_pass();\n"
"    } else {\n"
"        cut_test_fail_va_list(\"Fail!\", user_message_format);\n"
"    }\n"
"}\n"
msgstr ""

#: xml/cut-helper.xml:180(term)
msgid "<parameter>user_message_format</parameter> :"
msgstr ""

#: xml/cut-helper.xml:181(simpara)
msgid "a failure message from user."
msgstr "ユーザ指定の失敗メッセージ。"

#: xml/cut-helper.xml:186(programlisting)
#, no-wrap
msgid "#  define CUT_RELATIVE_PATH NULL\n"
msgstr ""

#: xml/cut-helper.xml:188(para)
msgid ""
"Define this macro in a source code or build option (e.g. -DCUT_RELATIVE_PATH="
"\\\"\"sub/dir/\"\\\") if the source code is built as shared library and used "
"it as helper library of your test. If this path isn't set, you can't get "
"correct path from <link linkend=\"cut-trace\"><function>cut_trace()</"
"function></link> and <link linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link>."
msgstr ""
"もし、テスト用の補助ライブラリを共有ライブラリとして使っている場合は、補助ラ"
"イブラリのソースコード中またはビルドオプション（例: -DCUT_RELATIVE_PATH=\\"
"\"\"sub/dir/\"\\\"）でこのマクロを定義してください。もし、このパスが設定され"
"ていない場合は<link linkend=\"cut-trace\"><function>cut_trace()</function></"
"link>と<link linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link>で正しいパスが"
"得られません。"

#: xml/cut-helper.xml:196(para)
msgid "Here is an example structure for explain:"
msgstr "説明用のディレクト構成例です。"

#: xml/cut-helper.xml:200(programlisting)
#, no-wrap
msgid ""
"\n"
"--- core-lib/ --- XXX.c # Your core library\n"
" |             +- ...\n"
" |             +- YYY.c\n"
" +- util-lib/ --- AAA.c # Your utility library\n"
" |             +- ...\n"
" |             +- BBB.c\n"
" |\n"
" +- test/ --- core/ --- test-XXX.c # Tests for your core library\n"
"           |         +- ...\n"
"           |         +- test-YYY.c\n"
"           +- util/ --- test-AAA.c # Tests for your utility library\n"
"           |         +- ...\n"
"           |         +- test-BBB.c\n"
"           +- lib/  --- my-assertions.c # Your library of tests.\n"
"                     +- my-assertions.h # This library will be used\n"
"                     |                  # as shared library of your\n"
"                     |                  # tests (test/core/test-*.so\n"
"                     |                  # and test/util/test-*.so)\n"
"                     +- ...\n"
"\n"
"  % cutter --source-directory=test test\n"
msgstr ""
"\n"
"--- core-lib/ --- XXX.c # コアライブラリ\n"
" |             +- ...\n"
" |             +- YYY.c\n"
" +- util-lib/ --- AAA.c # 便利ライブラリ\n"
" |             +- ...\n"
" |             +- BBB.c\n"
" |\n"
" +- test/ --- core/ --- test-XXX.c # コアライブラリのテスト\n"
"           |         +- ...\n"
"           |         +- test-YYY.c\n"
"           +- util/ --- test-AAA.c # 便利ライブラリのテスト\n"
"           |         +- ...\n"
"           |         +- test-BBB.c\n"
"           +- lib/  --- my-assertions.c # テスト用補助ライブラリ\n"
"                     +- my-assertions.h # テスト中（\n"
"                     |                  # test/core/test-*.soと\n"
"                     |                  # test/util/test-*.soの中）\n"
"                     |                  # で共有ライブラリとして使われる\n"
"                     +- ...\n"
"\n"
"  % cutter --source-directory=test test\n"

#: xml/cut-helper.xml:224(para)
msgid ""
"In the above example structure, you need to define <link linkend=\"CUT-"
"RELATIVE-PATH--CAPS\"><literal>CUT_RELATIVE_PATH</literal></link> as \"lib\" "
"in test/lib/my-assertions.c because my-assertions.c is in lib/ directory "
"from source directory \"test\" specified by command line option --source-"
"directory."
msgstr ""
"上記の構成例では、test/lib/my-assertions.cでは<link linkend=\"CUT-RELATIVE-"
"PATH--CAPS\"><literal>CUT_RELATIVE_PATH</literal></link>を\"lib\"と定義しなけ"
"ればいけません。これは、--source-directoryコマンドラインオプションで指定した"
"\"test\"ソースディレクトリからみてlib/ディレクトリにmy-assertions.cがあるから"
"です。"

#: xml/cut-helper.xml:231(para)
msgid "Here are example code and build option:"
msgstr "コードとビルドオプションの例です。"

#: xml/cut-helper.xml:235(programlisting)
#, no-wrap
msgid ""
"\n"
"test/lib/my-assertions.c:\n"
"  #define CUT_RELATIVE_PATH \"lib\"\n"
"  #include &lt;cutter.h&gt;\n"
"\n"
"build option:\n"
"  % gcc -DCUT_RELATIVE_PATH=\"\\\"lib\\\"\" ...\n"
msgstr ""

#: xml/cut-helper.xml:246(title)
msgid "cut_push_backtrace ()"
msgstr "cut_push_backtrace ()"

#: xml/cut-helper.xml:247(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_push_backtrace                  (const <link linkend=\"char\">char</link> *expression);"
msgstr ""

#: xml/cut-helper.xml:248(para)
msgid ""
"Pushes <parameter>expression</parameter> and the current source place to the "
"backtrace stack."
msgstr ""
"<parameter>expression</parameter>と現在のソースの場所をバックトレーススタック"
"にプッシュします。"

#: xml/cut-helper.xml:252(para) xml/cut-helper.xml:267(para)
msgid ""
"Normally, you don't need to use it directory. <link linkend=\"cut-trace"
"\"><function>cut_trace()</function></link> is enough."
msgstr ""
"通常は直接使う必要はありません。<link linkend=\"cut-trace"
"\"><function>cut_trace()</function></link>で十分です。"

#: xml/cut-helper.xml:258(simpara) xml/cut-helper.xml:336(simpara)
#: xml/cut-helper.xml:395(simpara)
msgid "an expression to be traced."
msgstr "呼び出されたことを記録される式。"

#: xml/cut-helper.xml:262(title)
msgid "cut_pop_backtrace ()"
msgstr ""

#: xml/cut-helper.xml:263(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_pop_backtrace                   (void);"
msgstr ""

#: xml/cut-helper.xml:264(para)
msgid "Pops a backtrace from the backtrace stack."
msgstr "バックトレーススタックからバックトレースをポップします。"

#: xml/cut-helper.xml:273(title)
msgid "cut_trace()"
msgstr ""

#: xml/cut-helper.xml:274(programlisting)
#, no-wrap
msgid "#define             cut_trace(expression)"
msgstr ""

#: xml/cut-helper.xml:275(para)
msgid ""
"Mark the current file, line, function and <parameter>expression</parameter> "
"and show it when assertion is failed in <parameter>expression</parameter>. "
"Most of <parameter>expression</parameter> will be function call."
msgstr ""
"現在のファイル名、行番号、関数名、<parameter>expression</parameter>を記憶し、"
"<parameter>expression</parameter>内で検証が失敗した場合に表示します。"
"<parameter>expression</parameter>の多くは関数呼び出しになるでしょう。"

#: xml/cut-helper.xml:280(para)
msgid ""
"Note that you can't get return value of <parameter>expression</parameter>."
msgstr ""
"<parameter>expression</parameter>の戻り値を取得できないことに注意してくださ"
"い。"

#: xml/cut-helper.xml:283(para)
msgid ""
"Here is an example of <link linkend=\"cut-trace\"><function>cut_trace()</"
"function></link>. If cut_assert_not_null(object) is failed, you will get a "
"backtrace that contains two line; cut_assert_not_null(object) and "
"create_my_object(\"my-name\")."
msgstr ""
"<link linkend=\"cut-trace\"><function>cut_trace()</function></link>は以下の通"
"りです。もし、cut_assert_not_null(object)が失敗したら、バックトレースには2行"
"含まれます。cut_assert_not_null(object)とcreate_my_object(\"my-name\")です。"

#: xml/cut-helper.xml:291(programlisting)
#, no-wrap
msgid ""
"\n"
"static MyObject *object;\n"
"\n"
"static void\n"
"create_my_object(const char *name)\n"
"{\n"
"    object = my_object_new(name);\n"
"    cut_assert_not_null(object);\n"
"}\n"
"\n"
"void\n"
"test_my_object_name(void)\n"
"{\n"
"    cut_trace(create_my_object(\"my-name\"));\n"
"    cut_assert_equal_string(\"my-name\",\n"
"                            my_object_get_name(object));\n"
"}\n"
msgstr ""

#: xml/cut-helper.xml:312(programlisting)
#, no-wrap
msgid ""
"\n"
"static MyObject *object;\n"
"\n"
"static void\n"
"create_my_object_helper(const char *name)\n"
"{\n"
"    object = my_object_new(name);\n"
"    cut_assert_not_null(object);\n"
"}\n"
"\n"
"#define create_my_object(...)                        \\\n"
"    cut_trace(create_my_object_helper(__VA_ARGS__))\n"
"\n"
"void\n"
"test_my_object_name(void)\n"
"{\n"
"    create_my_object(\"my-name\");\n"
"    cut_assert_equal_string(\"my-name\",\n"
"                            my_object_get_name(object));\n"
"}\n"
msgstr ""

#: xml/cut-helper.xml:310(para)
msgid ""
"You will use <link linkend=\"cut-trace\"><function>cut_trace()</function></"
"link> with macro for test readability: <placeholder-1/>"
msgstr ""
"テストを読みやすくするために<link linkend=\"cut-trace\"><function>cut_trace()"
"</function></link>を使ったマクロを書くかもしれません: <placeholder-1/>"

#: xml/cut-helper.xml:340(title)
msgid "cut_trace_with_info_expression()"
msgstr ""

#: xml/cut-helper.xml:341(programlisting)
#, no-wrap
msgid "#define             cut_trace_with_info_expression(expression, info_expression)"
msgstr ""

#: xml/cut-helper.xml:342(para)
msgid ""
"It's difference between <link linkend=\"cut-trace\"><function>cut_trace()</"
"function></link> and <link linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link> that traced "
"expression is the same expression as <parameter>expression</parameter> or "
"not. <link linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link> is useful "
"when you want to hide some information in <parameter>expression</parameter> "
"for backtrace readability."
msgstr ""
"<link linkend=\"cut-trace\"><function>cut_trace()</function></link>と<link "
"linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link>の違いは記録さ"
"れる式が<parameter>expression</parameter>と同じかどうかです。<link linkend="
"\"cut-trace-with-info-expression\"><function>cut_trace_with_info_expression()"
"</function></link>はバックトレースの読みやすさのために<parameter>expression</"
"parameter>から情報を隠したいときに便利です。"

#: xml/cut-helper.xml:356(para)
msgid "cut_assert_not_null(object)"
msgstr ""

#: xml/cut-helper.xml:357(para)
msgid "create_my_object(\"my-name\") not create_my_object_helper(\"my-name\")"
msgstr ""
"create_my_object_helper(\"my-name\")ではなくcreate_my_object(\"my-name\")"

#: xml/cut-helper.xml:350(para)
msgid ""
"Here is an example of <link linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link>. If "
"cut_assert_not_null(object) is failed, you will get a backtrace that "
"contains two line: <placeholder-1/> If you use <link linkend=\"cut-trace"
"\"><function>cut_trace()</function></link> instead of <link linkend=\"cut-"
"trace-with-info-expression\"><function>cut_trace_with_info_expression()</"
"function></link>, you will get create_my_object_helper(\"my-name\"). You may "
"be confused about 'Where is create_my_object_helper(\"my-name\") from? <link "
"linkend=\"test-my-object-name\"><function>test_my_object_name()</function></"
"link> uses create_my_object(\"my-name\") but does not use "
"create_my_object_helper(\"my-name\").'."
msgstr ""
"<link linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link>の例です。"
"cut_assert_not_null(object)が失敗すると以下の2行を含んだバックトレースが得ら"
"れます:<placeholder-1/>もし、<link linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link>ではなく<link "
"linkend=\"cut-trace\"><function>cut_trace()</function></link>を使った場合は"
"create_my_object_helper(\"my-name\")になります。もし、create_my_object_helper"
"(\"my-name\")が得られたら以下のように混乱してしまうかもしれません。"
"「create_my_object_helper(\"my-name\")はどこからきたんだ？<link linkend="
"\"test-my-object-name\"><function>test_my_object_name()</function></link>は"
"create_my_object(\"my-name\")は使っているけど、create_my_object_helper(\"my-"
"name\")は使っていないぞ。」"

#: xml/cut-helper.xml:369(programlisting)
#, no-wrap
msgid ""
"\n"
"static MyObject *object;\n"
"\n"
"static void\n"
"create_my_object_helper(const char *name)\n"
"{\n"
"    object = my_object_new(name);\n"
"    cut_assert_not_null(object);\n"
"}\n"
"\n"
"#define create_my_object(...)                        \\\n"
"    cut_trace_with_info_expression(                  \\\n"
"        create_my_object_helper(__VA_ARGS__),        \\\n"
"        create_my_object(__VA_ARGS__))\n"
"\n"
"void\n"
"test_my_object_name(void)\n"
"{\n"
"    create_my_object(\"my-name\");\n"
"    cut_assert_equal_string(\"my-name\",\n"
"                            my_object_get_name(object));\n"
"}\n"
msgstr ""

#: xml/cut-helper.xml:397(term)
msgid "<parameter>info_expression</parameter> :"
msgstr ""

#: xml/cut-helper.xml:398(simpara)
msgid "a traced expression."
msgstr "呼び出されたと記録される式。"

#: xml/cut-iterated-test.xml:7(refentrytitle)
#: xml/cut-iterated-test.xml:13(refname)
msgid "CutIteratedTest"
msgstr ""

#: xml/cut-listener-utils.xml:7(refentrytitle)
#: xml/cut-listener-utils.xml:13(refname)
msgid "cut-listener-utils"
msgstr ""

#: xml/cut-listener.xml:7(refentrytitle) xml/cut-listener.xml:13(refname)
msgid "CutListener"
msgstr ""

#: xml/cut-mach-o-loader.xml:7(refentrytitle)
#: xml/cut-mach-o-loader.xml:13(refname)
msgid "CutMachOLoader"
msgstr ""

#: xml/cut-main.xml:7(refentrytitle) xml/cut-main.xml:13(refname)
msgid "cut-main"
msgstr ""

#: xml/cut-module-factory-utils.xml:7(refentrytitle)
#: xml/cut-module-factory-utils.xml:13(refname)
msgid "cut-module-factory-utils"
msgstr ""

#: xml/cut-module-factory.xml:7(refentrytitle)
#: xml/cut-module-factory.xml:13(refname)
msgid "CutModuleFactory"
msgstr ""

#: xml/cut-multi-process.xml:7(refentrytitle)
#: xml/cut-multi-process.xml:13(refname)
msgid "Multi Process"
msgstr "マルチプロセス"

#: xml/cut-multi-process.xml:14(refpurpose)
msgid "Utilities to run your tests on multi processes."
msgstr "マルチプロセスでテストを走らせるためのユーティリティ。"

#: xml/cut-multi-process.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"                    <placeholder-2/>;\n"
"<placeholder-3/> *     <placeholder-4/>            (const <placeholder-5/> *test_directory);\n"
"<placeholder-6/>         <placeholder-7/>                 (<placeholder-8/> *sub_process);\n"
"<placeholder-9/>                <placeholder-10/>           (<placeholder-11/> *sub_process);\n"
"<placeholder-12/>         <placeholder-13/>                (<placeholder-14/> *sub_process);\n"
"<placeholder-15/>         <placeholder-16/>          (<placeholder-17/> *sub_process);\n"
"<placeholder-18/>         <placeholder-19/>          (<placeholder-20/> *sub_process);\n"
"const <placeholder-21/> *        <placeholder-22/>  (<placeholder-23/> *sub_process);\n"
"<placeholder-24/>                <placeholder-25/>  (<placeholder-26/> *sub_process,\n"
"                                                         const <placeholder-27/> *test_directory);\n"
"const <placeholder-28/> *        <placeholder-29/>\n"
"                                                        (<placeholder-30/> *sub_process);\n"
"<placeholder-31/>                <placeholder-32/>\n"
"                                                        (<placeholder-33/> *sub_process,\n"
"                                                         const <placeholder-34/> *source_directory);\n"
"<placeholder-35/>         <placeholder-36/>    (<placeholder-37/> *sub_process);\n"
"<placeholder-38/>                <placeholder-39/>    (<placeholder-40/> *sub_process,\n"
"                                                         <placeholder-41/> multi_thread);\n"
"<placeholder-42/>                 <placeholder-43/>     (<placeholder-44/> *sub_process);\n"
"<placeholder-45/>                <placeholder-46/>     (<placeholder-47/> *sub_process,\n"
"                                                         <placeholder-48/> max_threads);\n"
"const <placeholder-49/> **       <placeholder-50/>   (<placeholder-51/> *sub_process);\n"
"<placeholder-52/>                <placeholder-53/>   (<placeholder-54/> *sub_process,\n"
"                                                         const <placeholder-55/> **files);\n"
"const <placeholder-56/> **       <placeholder-57/>\n"
"                                                        (<placeholder-58/> *sub_process);\n"
"<placeholder-59/>                <placeholder-60/>\n"
"                                                        (<placeholder-61/> *sub_process,\n"
"                                                         const <placeholder-62/> **directories);\n"
"const <placeholder-63/> **       <placeholder-64/>\n"
"                                                        (<placeholder-65/> *sub_process);\n"
"<placeholder-66/>                <placeholder-67/>\n"
"                                                        (<placeholder-68/> *sub_process,\n"
"                                                         const <placeholder-69/> **names);\n"
"const <placeholder-70/> **       <placeholder-71/>\n"
"                                                        (<placeholder-72/> *sub_process);\n"
"<placeholder-73/>                <placeholder-74/>\n"
"                                                        (<placeholder-75/> *sub_process,\n"
"                                                         const <placeholder-76/> **names);\n"
"<placeholder-77/>              <placeholder-78/>         (<placeholder-79/> *sub_process);\n"
"<placeholder-80/>              <placeholder-81/>   (<placeholder-82/> *sub_process);\n"
"<placeholder-83/>         <placeholder-84/>          (<placeholder-85/> *sub_process);\n"
"<placeholder-86/>         <placeholder-87/>  (<placeholder-88/> *sub_process);\n"
"<placeholder-89/>                <placeholder-90/>  (<placeholder-91/> *sub_process,\n"
"                                                         <placeholder-92/> fatal_failures);\n"
"<placeholder-93/> * <placeholder-94/>     (void);\n"
"<placeholder-95/>                <placeholder-96/>           (<placeholder-97/> *group,\n"
"                                                         <placeholder-98/> *sub_process);\n"
"<placeholder-99/>         <placeholder-100/>           (<placeholder-101/> *group);\n"
"<placeholder-102/>                <placeholder-103/>     (<placeholder-104/> *group);\n"
"<placeholder-105/>         <placeholder-106/>          (<placeholder-107/> *group);\n"
msgstr ""

#: xml/cut-multi-process.xml:87(para)
msgid ""
"If your test target supports multi-process and/or multi-thread, you need to "
"test them. You can use <link linkend=\"CutSubProcess\"><type>CutSubProcess</"
"type></link> and <link linkend=\"CutSubProcessGroup"
"\"><type>CutSubProcessGroup</type></link> to do it."
msgstr ""
"もしテスト対象のソフトウェアがマルチプロセスやマルチスレッドでの使用をサポー"
"トしているなら、それらの機能をテストする必要があります。そのようなテストため"
"に、<link linkend=\"CutSubProcess\"><type>CutSubProcess</type></link>と<link "
"linkend=\"CutSubProcessGroup\"><type>CutSubProcessGroup</type></link>を使うこ"
"とができます。"

#: xml/cut-multi-process.xml:92(para)
msgid ""
"<link linkend=\"CutSubProcess\"><type>CutSubProcess</type></link> runs your "
"test on another process and forwards results of it to a test on your main "
"process. You will get results of test on another process as results of test "
"on your main process."
msgstr ""
"<link linkend=\"CutSubProcess\"><type>CutSubProcess</type></link>はテストを別"
"のプロセスで走らせ、その結果をメインプロセスに転送します。このため、別のプロ"
"セス上でのテスト結果もメインプロセス上でのテスト結果と同じように見えます。"

#: xml/cut-multi-process.xml:98(para)
msgid ""
"<link linkend=\"CutSubProcessGroup\"><type>CutSubProcessGroup</type></link> "
"is a convenience object to run some <link linkend=\"CutSubProcess"
"\"><type>CutSubProcess</type></link>."
msgstr ""
"<link linkend=\"CutSubProcessGroup\"><type>CutSubProcessGroup</type></link>は"
"いくつかの<link linkend=\"CutSubProcess\"><type>CutSubProcess</type></link>を"
"まとめて実行するための便利オブジェクトです。"

#: xml/cut-multi-process.xml:109(programlisting)
#, no-wrap
msgid "typedef struct _CutSubProcess CutSubProcess;"
msgstr ""

#: xml/cut-multi-process.xml:110(para)
msgid ""
"An object to represent sub cutter process. It contains sub cutter process's "
"parameters and results of sub cutter process."
msgstr ""
"サブcutterプロセスを表現するオブジェクトです。サブcutterプロセスのパラメタと"
"テスト結果を持っています。"

#: xml/cut-multi-process.xml:117(programlisting)
#, no-wrap
msgid ""
"\n"
"CutSubProcess *sub_process;\n"
"\n"
"sub_process = cut_take_new_sub_process(\"test-dir\");\n"
"cut_sub_process_set_multi_thread(sub_process, TRUE);\n"
"cut_assert_true(cut_sub_process_run(sub_process));\n"
msgstr ""

#: xml/cut-multi-process.xml:125(para) xml/cut-multi-process.xml:150(para)
#: xml/cut-multi-process.xml:166(para) xml/cut-multi-process.xml:181(para)
#: xml/cut-multi-process.xml:193(para) xml/cut-multi-process.xml:209(para)
#: xml/cut-multi-process.xml:225(para) xml/cut-multi-process.xml:240(para)
#: xml/cut-multi-process.xml:254(para) xml/cut-multi-process.xml:271(para)
#: xml/cut-multi-process.xml:286(para) xml/cut-multi-process.xml:304(para)
#: xml/cut-multi-process.xml:319(para) xml/cut-multi-process.xml:335(para)
#: xml/cut-multi-process.xml:384(para) xml/cut-multi-process.xml:401(para)
#: xml/cut-multi-process.xml:418(para) xml/cut-multi-process.xml:437(para)
#: xml/cut-multi-process.xml:452(para) xml/cut-multi-process.xml:469(para)
#: xml/cut-multi-process.xml:484(para) xml/cut-multi-process.xml:501(para)
#: xml/cut-multi-process.xml:515(para) xml/cut-multi-process.xml:529(para)
#: xml/cut-multi-process.xml:544(para) xml/cut-multi-process.xml:561(para)
#: xml/cut-multi-process.xml:582(para) xml/cut-multi-process.xml:594(para)
#: xml/cut-multi-process.xml:609(para) xml/cut-multi-process.xml:625(para)
#: xml/cut-multi-process.xml:638(para) xml/cut-multi-process.xml:654(para)
#: xml/cutter.xml:350(para) xml/cutter.xml:391(para) xml/cutter.xml:404(para)
#: xml/gcut-assertions.xml:520(para) xml/gcut-assertions.xml:628(para)
#: xml/gcut-test-utils.xml:136(para) xml/gcut-test-utils.xml:254(para)
msgid "Since 1.0.4"
msgstr "1.0.4から"

#: xml/cut-multi-process.xml:128(programlisting)
#, no-wrap
msgid "typedef struct _CutSubProcessGroup CutSubProcessGroup;"
msgstr ""

#: xml/cut-multi-process.xml:129(para)
msgid "An object to run sub cutter processes. This is just for convenience."
msgstr ""
"サブcutterプロセスを実行するオブジェクトです。このオブジェクトは便利にテスト"
"を書くために導入されています。"

#: xml/cut-multi-process.xml:135(programlisting)
#, no-wrap
msgid ""
"\n"
"CutSubProcess *sub_process1, *sub_process2, *sub_process3;\n"
"CutSubProcessGroup *group;\n"
"\n"
"sub_process1 = cut_take_new_sub_process(\"test-dir1\");\n"
"sub_process2 = cut_take_new_sub_process(\"test-dir2\");\n"
"sub_process3 = cut_take_new_sub_process(\"test-dir3\");\n"
"\n"
"group = cut_take_new_sub_process_group();\n"
"cut_sub_process_group_add(group, sub_process1);\n"
"cut_sub_process_group_add(group, sub_process2);\n"
"cut_sub_process_group_add(group, sub_process3);\n"
"cut_assert_true(cut_sub_process_group_run(group));\n"
msgstr ""

#: xml/cut-multi-process.xml:152(title)
msgid "cut_take_new_sub_process ()"
msgstr ""

#: xml/cut-multi-process.xml:153(programlisting)
#, no-wrap
msgid "<link linkend=\"CutSubProcess\">CutSubProcess</link> *     cut_take_new_sub_process            (const <link linkend=\"char\">char</link> *test_directory);"
msgstr ""

#: xml/cut-multi-process.xml:154(para)
msgid ""
"Creates sub cutter process that runs tests under <parameter>test_directory</"
"parameter> and returns it. A created sub process is owned by Cutter."
msgstr ""
"<parameter>test_directory</parameter>以下のテストを実行するサブcutterプロセス"
"を作り、それを返します。返されたサブcutterプロセスの所有者はCutterです。"

#: xml/cut-multi-process.xml:160(term) xml/cut-multi-process.xml:268(term)
msgid "<parameter>test_directory</parameter> :"
msgstr ""

#: xml/cut-multi-process.xml:161(simpara)
msgid "a directory includes sub process test."
msgstr "サブcutterプロセスのテストがあるディレクトリ。"

#: xml/cut-multi-process.xml:163(simpara)
#: xml/cut-multi-process.xml:175(simpara)
#: xml/cut-multi-process.xml:191(simpara)
#: xml/cut-multi-process.xml:203(simpara)
#: xml/cut-multi-process.xml:219(simpara)
#: xml/cut-multi-process.xml:234(simpara)
#: xml/cut-multi-process.xml:249(simpara)
#: xml/cut-multi-process.xml:266(simpara)
#: xml/cut-multi-process.xml:281(simpara)
#: xml/cut-multi-process.xml:299(simpara)
#: xml/cut-multi-process.xml:313(simpara)
#: xml/cut-multi-process.xml:330(simpara)
#: xml/cut-multi-process.xml:345(simpara)
#: xml/cut-multi-process.xml:363(simpara)
#: xml/cut-multi-process.xml:379(simpara)
#: xml/cut-multi-process.xml:395(simpara)
#: xml/cut-multi-process.xml:412(simpara)
#: xml/cut-multi-process.xml:431(simpara)
#: xml/cut-multi-process.xml:447(simpara)
#: xml/cut-multi-process.xml:464(simpara)
#: xml/cut-multi-process.xml:479(simpara)
#: xml/cut-multi-process.xml:496(simpara)
#: xml/cut-multi-process.xml:510(simpara)
#: xml/cut-multi-process.xml:524(simpara)
#: xml/cut-multi-process.xml:538(simpara)
#: xml/cut-multi-process.xml:555(simpara)
#: xml/cut-multi-process.xml:577(simpara)
#: xml/cut-multi-process.xml:607(simpara)
msgid "a <link linkend=\"CutSubProcess\"><type>CutSubProcess</type></link>."
msgstr ""
"<link linkend=\"CutSubProcess\"><type>CutSubProcess</type></link>オブジェク"
"ト。"

#: xml/cut-multi-process.xml:168(title)
msgid "cut_sub_process_run ()"
msgstr ""

#: xml/cut-multi-process.xml:169(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_run                 (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:170(para)
msgid "Runs sub cutter process."
msgstr "サブcutterプロセスを実行します。"

#: xml/cut-multi-process.xml:174(term) xml/cut-multi-process.xml:190(term)
#: xml/cut-multi-process.xml:202(term) xml/cut-multi-process.xml:218(term)
#: xml/cut-multi-process.xml:233(term) xml/cut-multi-process.xml:248(term)
#: xml/cut-multi-process.xml:265(term) xml/cut-multi-process.xml:280(term)
#: xml/cut-multi-process.xml:298(term) xml/cut-multi-process.xml:312(term)
#: xml/cut-multi-process.xml:329(term) xml/cut-multi-process.xml:344(term)
#: xml/cut-multi-process.xml:362(term) xml/cut-multi-process.xml:378(term)
#: xml/cut-multi-process.xml:394(term) xml/cut-multi-process.xml:411(term)
#: xml/cut-multi-process.xml:430(term) xml/cut-multi-process.xml:446(term)
#: xml/cut-multi-process.xml:463(term) xml/cut-multi-process.xml:478(term)
#: xml/cut-multi-process.xml:495(term) xml/cut-multi-process.xml:509(term)
#: xml/cut-multi-process.xml:523(term) xml/cut-multi-process.xml:537(term)
#: xml/cut-multi-process.xml:554(term) xml/cut-multi-process.xml:576(term)
#: xml/cut-multi-process.xml:606(term)
msgid "<parameter>sub_process</parameter> :"
msgstr ""

#: xml/cut-multi-process.xml:177(simpara)
#: xml/cut-multi-process.xml:205(simpara)
#: xml/cut-multi-process.xml:221(simpara)
msgid ""
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link> if "
"<parameter>sub_process</parameter> is completed successfully, <link linkend="
"\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></link> otherwise."
msgstr ""
"もし、<parameter>sub_process</parameter>が正常に終了した場合は<link linkend="
"\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link>、そうでない場合は<link "
"linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></link>。"

#: xml/cut-multi-process.xml:183(title)
msgid "cut_sub_process_run_async ()"
msgstr ""

#: xml/cut-multi-process.xml:184(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_sub_process_run_async           (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:185(para)
msgid ""
"Runs sub cutter process asynchronously. The result of "
"<parameter>sub_process</parameter> can be gotten by <link linkend=\"cut-sub-"
"process-wait\"><function>cut_sub_process_wait()</function></link>."
msgstr ""
"非同期でサブcutterコマンドを実行します。<parameter>sub_process</parameter>の"
"結果は<link linkend=\"cut-sub-process-wait\"><function>cut_sub_process_wait()"
"</function></link>で取得できます。"

#: xml/cut-multi-process.xml:195(title)
msgid "cut_sub_process_wait ()"
msgstr ""

#: xml/cut-multi-process.xml:196(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_wait                (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:197(para)
msgid ""
"Waits for sub cutter process that is ran asynchronously to complete and "
"returns the result."
msgstr "非同期で実行されたサブcutterプロセスの終了を待ち、結果を返します。"

#: xml/cut-multi-process.xml:211(title)
msgid "cut_sub_process_is_success ()"
msgstr ""

#: xml/cut-multi-process.xml:212(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_is_success          (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:213(para)
msgid ""
"Returns whether <parameter>sub_process</parameter> is completed successfully "
"or not."
msgstr "<parameter>sub_process</parameter>が正常に終了したかどうかを返します。"

#: xml/cut-multi-process.xml:227(title)
msgid "cut_sub_process_is_running ()"
msgstr ""

#: xml/cut-multi-process.xml:228(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_is_running          (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:229(para)
msgid "Returns whether <parameter>sub_process</parameter> is running or not."
msgstr "<parameter>sub_process</parameter>が実行中かどうかを返します。"

#: xml/cut-multi-process.xml:236(simpara)
msgid ""
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link> if "
"<parameter>sub_process</parameter> is running, <link linkend=\"CUT-FALSE--"
"CAPS\"><literal>CUT_FALSE</literal></link> otherwise."
msgstr ""
"<parameter>sub_process</parameter>が実行中の場合は<link linkend=\"CUT-TRUE--"
"CAPS\"><literal>CUT_TRUE</literal></link>、そうでない場合は<link linkend="
"\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></link>。"

#: xml/cut-multi-process.xml:242(title)
msgid "cut_sub_process_get_test_directory ()"
msgstr ""

#: xml/cut-multi-process.xml:243(programlisting)
#, no-wrap
msgid "const <link linkend=\"char\">char</link> *        cut_sub_process_get_test_directory  (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:244(para)
msgid "Returns a test directory that has tests to be ran."
msgstr "実行対象のテストがあるディレクトリを返します。"

#: xml/cut-multi-process.xml:251(simpara)
#: xml/cut-multi-process.xml:269(simpara)
msgid "a test directory."
msgstr "テストディレクトリ"

#: xml/cut-multi-process.xml:256(title)
msgid "cut_sub_process_set_test_directory ()"
msgstr ""

#: xml/cut-multi-process.xml:257(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_test_directory  (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         const <link linkend=\"char\">char</link> *test_directory);"
msgstr ""

#: xml/cut-multi-process.xml:259(para)
msgid ""
"Sets <parameter>test_directory</parameter> as a test directory that has "
"tests to be ran. This is same as TEST_DIRECTORY required command line "
"argument."
msgstr ""
"実行対象のテストがあるディレクトリとして<parameter>test_directory</parameter>"
"を指定します。これは必須のコマンドライン引数であるTEST_DIRECTORYと同じ意味を"
"持ちます。"

#: xml/cut-multi-process.xml:273(title)
msgid "cut_sub_process_get_source_directory ()"
msgstr ""

#: xml/cut-multi-process.xml:274(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link> *        cut_sub_process_get_source_directory\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:276(para)
msgid "Returns a source directory that has source files."
msgstr "ソースファイルがあるディレクトリを返します。"

#: xml/cut-multi-process.xml:283(simpara)
#: xml/cut-multi-process.xml:302(simpara)
msgid "a source directory."
msgstr "ソースディレクトリ。"

#: xml/cut-multi-process.xml:288(title)
msgid "cut_sub_process_set_source_directory ()"
msgstr ""

#: xml/cut-multi-process.xml:289(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_source_directory\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         const <link linkend=\"char\">char</link> *source_directory);"
msgstr ""

#: xml/cut-multi-process.xml:292(para)
msgid ""
"Sets <parameter>source_directory</parameter> as a source directory that has "
"source files. This is same as --source-directory command line option."
msgstr ""
"ソースファイルがあるディレクトリとして<parameter>source_directory</parameter>"
"を指定します。これは--source-directoryコマンドラインオプションと同じ意味を持"
"ちます。"

#: xml/cut-multi-process.xml:301(term)
msgid "<parameter>source_directory</parameter> :"
msgstr ""

#: xml/cut-multi-process.xml:306(title)
msgid "cut_sub_process_get_multi_thread ()"
msgstr ""

#: xml/cut-multi-process.xml:307(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_get_multi_thread    (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:308(para)
msgid ""
"Returns whether <parameter>sub_process</parameter> is ran in multi-thread "
"mode."
msgstr ""
"<parameter>sub_process</parameter>をマルチスレッドモードで実行するかどうかを"
"返します。"

#: xml/cut-multi-process.xml:315(simpara)
msgid ""
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link> if "
"<parameter>sub_process</parameter> is ran in multi-thread mode, <link "
"linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></link> otherwise."
msgstr ""
"<parameter>sub_process</parameter>がマルチスレッドモードで実行されるなら"
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link>、そうでな"
"ければ<link linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></link>。"

#: xml/cut-multi-process.xml:321(title)
msgid "cut_sub_process_set_multi_thread ()"
msgstr ""

#: xml/cut-multi-process.xml:322(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_multi_thread    (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         <link linkend=\"cut-boolean\">cut_boolean</link> multi_thread);"
msgstr ""

#: xml/cut-multi-process.xml:324(para)
msgid ""
"Sets whether <parameter>sub_process</parameter> is ran in multi-thread mode "
"or not. This is same as --multi-thread command line option."
msgstr ""
"<parameter>sub_process</parameter>がマルチスレッドモードで実行されるかどうか"
"を指定します。これは--multi-threadコマンドラインオプションと同じ意味を持ちま"
"す。"

#: xml/cut-multi-process.xml:332(term)
msgid "<parameter>multi_thread</parameter> :"
msgstr ""

#: xml/cut-multi-process.xml:333(simpara)
msgid ""
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link> to be "
"ran in multi-thread mode."
msgstr ""
"マルチスレッドモードで実行するなら<link linkend=\"CUT-TRUE--CAPS"
"\"><literal>CUT_TRUE</literal></link>。"

#: xml/cut-multi-process.xml:337(title)
msgid "cut_sub_process_get_max_threads ()"
msgstr ""

#: xml/cut-multi-process.xml:338(programlisting)
#, no-wrap
msgid "<link linkend=\"int\">int</link>                 cut_sub_process_get_max_threads     (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:339(para)
msgid ""
"Returns how many threads are used concurrently at a maximum in "
"<parameter>sub_process</parameter>."
msgstr ""
"<parameter>sub_process</parameter>中で同時に動く最大スレッド数を返します。"

#: xml/cut-multi-process.xml:347(simpara)
msgid ""
"max number of threads used concurrently at a maximum in "
"<parameter>sub_process</parameter>."
msgstr "<parameter>sub_process</parameter>中で同時に動く最大スレッド数。"

#: xml/cut-multi-process.xml:353(title)
msgid "cut_sub_process_set_max_threads ()"
msgstr ""

#: xml/cut-multi-process.xml:354(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_max_threads     (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         <link linkend=\"int\">int</link> max_threads);"
msgstr ""

#: xml/cut-multi-process.xml:356(para)
msgid ""
"Sets how many threads are used concurrently at a maximum in "
"<parameter>sub_process</parameter>. -1 means no limit. This is same as --max-"
"threads command line option."
msgstr ""
"<parameter>sub_process</parameter>中で同時に動く最大スレッド数を設定します。-"
"1は制限がないことを意味します。これは--max-threadsコマンドラインオプションと"
"同じ意味を持ちます。"

#: xml/cut-multi-process.xml:365(term)
msgid "<parameter>max_threads</parameter> :"
msgstr ""

#: xml/cut-multi-process.xml:366(simpara)
msgid "max number of threads used concurrently at a maximum."
msgstr "同時に動く最大スレッド数。"

#: xml/cut-multi-process.xml:371(title)
msgid "cut_sub_process_get_exclude_files ()"
msgstr ""

#: xml/cut-multi-process.xml:372(programlisting)
#, no-wrap
msgid "const <link linkend=\"char\">char</link> **       cut_sub_process_get_exclude_files   (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:373(para)
msgid "Returns file names that are excluded from target test files."
msgstr "テスト対象ファイルから除外されるファイル名を返します。"

#: xml/cut-multi-process.xml:381(simpara)
#: xml/cut-multi-process.xml:398(simpara)
msgid "file names that are excluded from target test files."
msgstr "テスト対象ファイルから除外されるファイル名。"

#: xml/cut-multi-process.xml:386(title)
msgid "cut_sub_process_set_exclude_files ()"
msgstr ""

#: xml/cut-multi-process.xml:387(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_exclude_files   (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         const <link linkend=\"char\">char</link> **files);"
msgstr ""

#: xml/cut-multi-process.xml:389(para)
msgid ""
"Sets file names that are excluded from target test files. This is same as --"
"exclude-file command line option."
msgstr ""
"テスト対象から除外されるファイル名を指定します。これは--exclude-fileコマンド"
"ラインオプションと同じ意味を持ちます。"

#: xml/cut-multi-process.xml:397(term)
msgid "<parameter>files</parameter> :"
msgstr ""

#: xml/cut-multi-process.xml:403(title)
msgid "cut_sub_process_get_exclude_directories ()"
msgstr ""

#: xml/cut-multi-process.xml:404(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link> **       cut_sub_process_get_exclude_directories\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:406(para)
msgid "Returns directory names that are excluded from target test directories."
msgstr "テスト対象ディレクトリから除外されるディレクトリ名を返します。"

#: xml/cut-multi-process.xml:414(simpara)
#: xml/cut-multi-process.xml:434(simpara)
msgid "directory names that are excluded from target test directories."
msgstr "テスト対象ディレクトリから除外されるディレクトリ名。"

#: xml/cut-multi-process.xml:420(title)
msgid "cut_sub_process_set_exclude_directories ()"
msgstr ""

#: xml/cut-multi-process.xml:421(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_exclude_directories\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         const <link linkend=\"char\">char</link> **directories);"
msgstr ""

#: xml/cut-multi-process.xml:424(para)
msgid ""
"Sets directory names that are excluded from target test directories. This is "
"same as --exclude-directory command line option."
msgstr ""
"テスト対象ディレクトリから除外されるディレクトリ名を指定します。これは--"
"exclude-directoryコマンドラインオプションと同じ意味を持ちます。"

#: xml/cut-multi-process.xml:433(term)
msgid "<parameter>directories</parameter> :"
msgstr ""

#: xml/cut-multi-process.xml:439(title)
msgid "cut_sub_process_get_target_test_case_names ()"
msgstr ""

#: xml/cut-multi-process.xml:440(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link> **       cut_sub_process_get_target_test_case_names\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:442(para)
msgid "Returns test case names that are ran."
msgstr "実行されるテストケース名を返します。"

#: xml/cut-multi-process.xml:449(simpara)
#: xml/cut-multi-process.xml:467(simpara)
msgid "test case names that are ran."
msgstr "実行されるテストケース名。"

#: xml/cut-multi-process.xml:454(title)
msgid "cut_sub_process_set_target_test_case_names ()"
msgstr ""

#: xml/cut-multi-process.xml:455(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_target_test_case_names\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         const <link linkend=\"char\">char</link> **names);"
msgstr ""

#: xml/cut-multi-process.xml:458(para)
msgid ""
"Sets test case names that are ran. This is same as --test-case command line "
"option."
msgstr ""
"実行されるテストケース名を指定します。これは--test-caseコマンドラインオプショ"
"ンと同じ意味を持ちます。"

#: xml/cut-multi-process.xml:466(term) xml/cut-multi-process.xml:498(term)
msgid "<parameter>names</parameter> :"
msgstr ""

#: xml/cut-multi-process.xml:471(title)
msgid "cut_sub_process_get_target_test_names ()"
msgstr ""

#: xml/cut-multi-process.xml:472(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link> **       cut_sub_process_get_target_test_names\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:474(para)
msgid "Returns test names that are ran."
msgstr "実行されるテスト名を返します。"

#: xml/cut-multi-process.xml:481(simpara)
#: xml/cut-multi-process.xml:499(simpara)
msgid "test names that are ran."
msgstr "実行されるテスト名。"

#: xml/cut-multi-process.xml:486(title)
msgid "cut_sub_process_set_target_test_names ()"
msgstr ""

#: xml/cut-multi-process.xml:487(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_target_test_names\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         const <link linkend=\"char\">char</link> **names);"
msgstr ""

#: xml/cut-multi-process.xml:490(para)
msgid ""
"Sets test names that are ran. This is same as --test command line option."
msgstr ""
"実行されるテスト名を指定します。これは--testコマンドラインオプションと同じ意"
"味を持ちます。"

#: xml/cut-multi-process.xml:503(title)
msgid "cut_sub_process_get_elapsed ()"
msgstr ""

#: xml/cut-multi-process.xml:504(programlisting)
#, no-wrap
msgid "<link linkend=\"double\">double</link>              cut_sub_process_get_elapsed         (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:505(para)
msgid "Gets the time while <parameter>sub_process</parameter> was running."
msgstr "<parameter>sub_process</parameter>を実行していた間の時間を取得します。"

#: xml/cut-multi-process.xml:512(simpara)
msgid "the time while <parameter>sub_process</parameter> was running."
msgstr "<parameter>sub_process</parameter>を実行していた間の時間。"

#: xml/cut-multi-process.xml:517(title)
msgid "cut_sub_process_get_total_elapsed ()"
msgstr ""

#: xml/cut-multi-process.xml:518(programlisting)
#, no-wrap
msgid "<link linkend=\"double\">double</link>              cut_sub_process_get_total_elapsed   (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:519(para)
msgid "Gets the sum of times that are used by each test."
msgstr "各テストで使われた時間の合計を返します。"

#: xml/cut-multi-process.xml:526(simpara)
msgid "the sum of times that are used by each test."
msgstr "各テストで使われた時間の合計。"

#: xml/cut-multi-process.xml:531(title)
msgid "cut_sub_process_is_crashed ()"
msgstr ""

#: xml/cut-multi-process.xml:532(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_is_crashed          (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:533(para)
msgid "Returns whether <parameter>sub_process</parameter> was crashed or not."
msgstr "<parameter>sub_process</parameter>が異常終了したかどうかを返します。"

#: xml/cut-multi-process.xml:540(simpara)
msgid ""
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link> if "
"<parameter>sub_process</parameter> was crashed, <link linkend=\"CUT-FALSE--"
"CAPS\"><literal>CUT_FALSE</literal></link> otherwise."
msgstr ""
"<parameter>sub_process</parameter>が異常終了したときは<link linkend=\"CUT-"
"TRUE--CAPS\"><literal>CUT_TRUE</literal></link>、そうでない場合は<link "
"linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></link>。"

#: xml/cut-multi-process.xml:546(title)
msgid "cut_sub_process_get_fatal_failures ()"
msgstr ""

#: xml/cut-multi-process.xml:547(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_get_fatal_failures  (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:548(para)
msgid ""
"Returns whether <parameter>sub_process</parameter> is ran in fatal-failures "
"mode. See <link linkend=\"cut-sub-process-set-fatal-failures"
"\"><function>cut_sub_process_set_fatal_failures()</function></link> more "
"details of fatal-failures mode."
msgstr ""
"<parameter>sub_process</parameter>が「失敗は致命的」モードで動くかどうかを返"
"します。「失敗は致命的」モードの詳細は<link linkend=\"cut-sub-process-set-"
"fatal-failures\"><function>cut_sub_process_set_fatal_failures()</function></"
"link>を見てください。"

#: xml/cut-multi-process.xml:557(simpara)
msgid ""
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link> if "
"<parameter>sub_process</parameter> is ran in fatal-failures mode, <link "
"linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></link> otherwise."
msgstr ""
"<parameter>sub_process</parameter>が「失敗は致命的」モードで実行されるなら"
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link>、そうでな"
"ければ<link linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></link>。"

#: xml/cut-multi-process.xml:563(title)
msgid "cut_sub_process_set_fatal_failures ()"
msgstr ""

#: xml/cut-multi-process.xml:564(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_fatal_failures  (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         <link linkend=\"cut-boolean\">cut_boolean</link> fatal_failures);"
msgstr ""

#: xml/cut-multi-process.xml:566(para)
msgid ""
"Sets whether <parameter>sub_process</parameter> is ran in fatal-failures "
"mode or not. In this mode, all failures are treated as fatal problems. It "
"means that test is aborted on failure. On some environments, breakpoint is "
"set."
msgstr ""
"<parameter>sub_process</parameter>が「失敗は致命的」モードで実行されるかどう"
"かを設定します。このモードではすべての失敗は致命的な問題として扱われます。つ"
"まり、失敗時にテストが異常終了します。いくつかの環境ではブレークポイントが設"
"定されます。"

#: xml/cut-multi-process.xml:572(para)
msgid "This is same as --fatal-failures command line option."
msgstr "--fatal-failuresコマンドラインオプションと同じ意味を持ちます。"

#: xml/cut-multi-process.xml:579(term)
msgid "<parameter>fatal_failures</parameter> :"
msgstr ""

#: xml/cut-multi-process.xml:580(simpara)
msgid ""
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link> to be "
"ran in fatal-failures mode."
msgstr ""
"「失敗は致命的」モードで実行するなら<link linkend=\"CUT-TRUE--CAPS"
"\"><literal>CUT_TRUE</literal></link>。"

#: xml/cut-multi-process.xml:584(title)
msgid "cut_take_new_sub_process_group ()"
msgstr ""

#: xml/cut-multi-process.xml:585(programlisting)
#, no-wrap
msgid "<link linkend=\"CutSubProcessGroup\">CutSubProcessGroup</link> * cut_take_new_sub_process_group     (void);"
msgstr ""

#: xml/cut-multi-process.xml:586(para)
msgid ""
"Creates a group of sub cutter process. A created group is owned by Cutter."
msgstr ""
"サブcuterプロセスのグループを作ります。作られたグループの所有者はCutterです。"

#: xml/cut-multi-process.xml:591(simpara)
#: xml/cut-multi-process.xml:604(simpara)
#: xml/cut-multi-process.xml:619(simpara)
#: xml/cut-multi-process.xml:636(simpara)
#: xml/cut-multi-process.xml:648(simpara)
msgid ""
"a <link linkend=\"CutSubProcessGroup\"><type>CutSubProcessGroup</type></"
"link>."
msgstr ""
"<link linkend=\"CutSubProcessGroup\"><type>CutSubProcessGroup</type></link>オ"
"ブジェクト。"

#: xml/cut-multi-process.xml:596(title)
msgid "cut_sub_process_group_add ()"
msgstr ""

#: xml/cut-multi-process.xml:597(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_group_add           (<link linkend=\"CutSubProcessGroup\">CutSubProcessGroup</link> *group,\n"
"                                                         <link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:599(para)
msgid ""
"Adds <parameter>sub_process</parameter> to <parameter>group</parameter>."
msgstr ""
"<parameter>sub_process</parameter>を<parameter>group</parameter>に追加しま"
"す。"

#: xml/cut-multi-process.xml:603(term) xml/cut-multi-process.xml:618(term)
#: xml/cut-multi-process.xml:635(term) xml/cut-multi-process.xml:647(term)
msgid "<parameter>group</parameter> :"
msgstr ""

#: xml/cut-multi-process.xml:611(title)
msgid "cut_sub_process_group_run ()"
msgstr ""

#: xml/cut-multi-process.xml:612(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_group_run           (<link linkend=\"CutSubProcessGroup\">CutSubProcessGroup</link> *group);"
msgstr ""

#: xml/cut-multi-process.xml:613(para)
msgid ""
"Runs all sub cutter processes of <parameter>group</parameter> and returns "
"the result of them."
msgstr ""
"<parameter>group</parameter>内のすべてのサブcutterプロセスを実行し、その結果"
"を返します。"

#: xml/cut-multi-process.xml:621(simpara)
#: xml/cut-multi-process.xml:650(simpara)
msgid ""
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link> if all "
"sub cutter processes of <parameter>group</parameter> are completed "
"successfully, <link linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</"
"literal></link> otherwise."
msgstr ""
"<parameter>group</parameter>内のすべてのサブcutterプロセスが正常終了したら"
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link>、そうでな"
"い場合は<link linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></"
"link>。"

#: xml/cut-multi-process.xml:627(title)
msgid "cut_sub_process_group_run_async ()"
msgstr ""

#: xml/cut-multi-process.xml:628(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_sub_process_group_run_async     (<link linkend=\"CutSubProcessGroup\">CutSubProcessGroup</link> *group);"
msgstr ""

#: xml/cut-multi-process.xml:629(para)
msgid ""
"Runs all sub cutter processes of <parameter>group</parameter> "
"asynchronously. The result of them can be gotten by <link linkend=\"cut-sub-"
"process-group-wait\"><function>cut_sub_process_group_wait()</function></"
"link>."
msgstr ""
"<parameter>group</parameter>内のすべてのサブcutterプロセスを非同期で実行しま"
"す。実行結果は<link linkend=\"cut-sub-process-group-wait"
"\"><function>cut_sub_process_group_wait()</function></link>で取得できます。"

#: xml/cut-multi-process.xml:640(title)
msgid "cut_sub_process_group_wait ()"
msgstr ""

#: xml/cut-multi-process.xml:641(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_group_wait          (<link linkend=\"CutSubProcessGroup\">CutSubProcessGroup</link> *group);"
msgstr ""

#: xml/cut-multi-process.xml:642(para)
msgid ""
"Waits for all sub cutter processes of <parameter>group</parameter> that are "
"ran asynchronously to complete and returns the result."
msgstr ""
"<parameter>group</parameter>内の非同期で実行されたすべてのサブcutterプロセス"
"の終了を待ち、終了結果を返します。"

#: xml/cut-pe-loader.xml:7(refentrytitle) xml/cut-pe-loader.xml:13(refname)
msgid "CutPELoader"
msgstr ""

#: xml/cut-pipeline.xml:7(refentrytitle) xml/cut-pipeline.xml:13(refname)
msgid "CutPipeline"
msgstr ""

#: xml/cut-process.xml:7(refentrytitle) xml/cut-process.xml:13(refname)
msgid "CutProcess"
msgstr ""

#: xml/cut-report-factory-builder.xml:7(refentrytitle)
#: xml/cut-report-factory-builder.xml:13(refname)
msgid "CutReportFactoryBuilder"
msgstr ""

#: xml/cut-report.xml:7(refentrytitle) xml/cut-report.xml:13(refname)
msgid "CutReport"
msgstr ""

#: xml/cut-run-context.xml:7(refentrytitle)
#: xml/cut-run-context.xml:13(refname)
msgid "CutRunContext"
msgstr ""

#: xml/cut-runner.xml:7(refentrytitle) xml/cut-runner.xml:13(refname)
msgid "cut-runner"
msgstr ""

#: xml/cut-sequence-matcher.xml:7(refentrytitle)
#: xml/cut-sequence-matcher.xml:13(refname)
msgid "CutSequenceMatcher"
msgstr ""

#: xml/cut-stream-factory-builder.xml:7(refentrytitle)
#: xml/cut-stream-factory-builder.xml:13(refname)
msgid "CutStreamFactoryBuilder"
msgstr ""

#: xml/cut-stream-parser.xml:7(refentrytitle)
#: xml/cut-stream-parser.xml:13(refname)
msgid "CutStreamParser"
msgstr ""

#: xml/cut-stream-reader.xml:7(refentrytitle)
#: xml/cut-stream-reader.xml:13(refname)
msgid "CutStreamReader"
msgstr ""

#: xml/cut-stream.xml:7(refentrytitle) xml/cut-stream.xml:13(refname)
msgid "CutStream"
msgstr ""

#: xml/cut-test-data.xml:7(refentrytitle) xml/cut-test-data.xml:13(refname)
msgid "CutTestData"
msgstr ""

#: xml/cut-test-iterator.xml:7(refentrytitle)
#: xml/cut-test-iterator.xml:13(refname)
msgid "CutTestIterator"
msgstr ""

#: xml/cut-test-runner.xml:7(refentrytitle)
#: xml/cut-test-runner.xml:13(refname)
msgid "CutTestRunner"
msgstr ""

#: xml/cut-test-utils-helper.xml:7(refentrytitle)
#: xml/cut-test-utils-helper.xml:13(refname)
msgid "cut-test-utils-helper"
msgstr ""

#: xml/cut-test-utils.xml:7(refentrytitle) xml/cut-test-utils.xml:13(refname)
msgid "Test Utilities"
msgstr "テストユーティリティ"

#: xml/cut-test-utils.xml:14(refpurpose)
msgid "Utilities to write tests more easily."
msgstr "テストをもっと簡単に書くためのユーティリティ。"

#: xml/cut-test-utils.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/> *              <placeholder-2/>                            (<placeholder-3/> *object,\n"
"                                                         <placeholder-4/> destroy_function);\n"
"const <placeholder-5/> *        <placeholder-6/>                     (<placeholder-7/> *memory);\n"
"const <placeholder-8/> *        <placeholder-9/>                     (<placeholder-10/> *string);\n"
"const <placeholder-11/> *        <placeholder-12/>                     (const <placeholder-13/> *string);\n"
"const <placeholder-14/> *        <placeholder-15/>                    (const <placeholder-16/> *string,\n"
"                                                         <placeholder-17/> size);\n"
"const <placeholder-18/> *        <placeholder-19/>                     (const <placeholder-20/> *memory,\n"
"                                                         <placeholder-21/> size);\n"
"const <placeholder-22/> *        <placeholder-23/>                     (const <placeholder-24/> *format,\n"
"                                                         ...);\n"
"<placeholder-25/> **             <placeholder-26/>               (<placeholder-27/> **strings);\n"
"const <placeholder-28/> *        <placeholder-29/>                       (const <placeholder-30/> *from,\n"
"                                                         const <placeholder-31/> *to);\n"
"const <placeholder-32/> *        <placeholder-33/>                    (const <placeholder-34/> *target,\n"
"                                                         const <placeholder-35/> *pattern,\n"
"                                                         const <placeholder-36/> *replacement);\n"
"const <placeholder-37/> *        <placeholder-38/>                     (const <placeholder-39/> *message,\n"
"                                                         const <placeholder-40/> *from,\n"
"                                                         const <placeholder-41/> *to);\n"
"const <placeholder-42/> *        <placeholder-43/>            (const <placeholder-44/> **strings);\n"
"<placeholder-45/>                <placeholder-46/>            (const <placeholder-47/> *path,\n"
"                                                         ...);\n"
"<placeholder-48/> *              <placeholder-49/>         (const <placeholder-50/> *path,\n"
"                                                         ...);\n"
"const <placeholder-51/> *        <placeholder-52/>         (const <placeholder-53/> *path,\n"
"                                                         ...);\n"
"<placeholder-54/>                <placeholder-55/>                     (const <placeholder-56/> *path,\n"
"                                                         ...);\n"
"const <placeholder-57/> *        <placeholder-58/>                      (const <placeholder-59/> *path,\n"
"                                                         ...);\n"
"<placeholder-60/>         <placeholder-61/>                    (const <placeholder-62/> *string1,\n"
"                                                         const <placeholder-63/> *string2);\n"
"<placeholder-64/>         <placeholder-65/>                    (<placeholder-66/> double1,\n"
"                                                         <placeholder-67/> double2,\n"
"                                                         <placeholder-68/> error);\n"
msgstr ""

#: xml/cut-test-utils.xml:70(para) xml/gcut-test-utils.xml:56(para)
msgid ""
"To write tests, you need to write codes that set up/tear down test "
"environment, prepare expected and actual values and so on. Cutter provides "
"test utilities to you write your tests more easily."
msgstr ""
"テストを書くためには、テスト環境を前処理・後処理するコードや、検証する結果を"
"準備するコードなどたくさんのコードを書く必要があります。Cutterはもっと簡単に"
"テストを書くためにユーティリティを提供します。"

#: xml/cut-test-utils.xml:76(para)
msgid "The utilities work without GLib support."
msgstr "このユーティリティはGLibサポート無しでも使えます。"

#: xml/cut-test-utils.xml:85(title)
msgid "cut_take ()"
msgstr ""

#: xml/cut-test-utils.xml:86(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link> *              cut_take                            (<link linkend=\"void\">void</link> *object,\n"
"                                                         <link linkend=\"CutDestroyFunction\">CutDestroyFunction</link> destroy_function);"
msgstr ""

#: xml/cut-test-utils.xml:88(para)
msgid ""
"Passes ownership of <parameter>object</parameter> to Cutter and returns "
"<parameter>object</parameter> itself. <parameter>object</parameter> is "
"destroyed by <parameter>destroy_func</parameter>."
msgstr ""
"<parameter>object</parameter>の所有権をCutterに渡し、<parameter>object</"
"parameter>自身を返します。<parameter>object</parameter>は"
"<parameter>destroy_func</parameter>を用いて破棄されます。"

#: xml/cut-test-utils.xml:93(term) xml/gcut-object.xml:89(term)
#: xml/gcut-object.xml:106(term) xml/gcut-public.xml:58(term)
#: xml/gcut-test-utils.xml:77(term)
msgid "<parameter>object</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:94(simpara)
msgid "the object to be owned by Cutter."
msgstr "Cutterが所有権をもつことになるオブジェクト。"

#: xml/cut-test-utils.xml:96(term) xml/gcut-test-utils.xml:112(term)
msgid "<parameter>destroy_function</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:97(simpara)
msgid "the destroy function for the object."
msgstr "オブジェクト用の破棄関数。"

#: xml/cut-test-utils.xml:99(simpara)
msgid "<parameter>object</parameter> owned by Cutter. Don't free it."
msgstr "Cutterが所有する<parameter>object</parameter>。解放しないで下さい。"

#: xml/cut-test-utils.xml:104(title)
msgid "cut_take_memory ()"
msgstr "cut_take_memory ()"

#: xml/cut-test-utils.xml:105(programlisting)
#, no-wrap
msgid "const <link linkend=\"void\">void</link> *        cut_take_memory                     (<link linkend=\"void\">void</link> *memory);"
msgstr ""

#: xml/cut-test-utils.xml:106(para)
msgid ""
"Passes ownership of <parameter>memory</parameter> to Cutter and returns "
"<parameter>memory</parameter> itself. <parameter>memory</parameter> is "
"destroyed by <link linkend=\"free\"><function>free()</function></link>."
msgstr ""
"<parameter>memory</parameter>の所有権をCutterに渡し、<parameter>memory</"
"parameter>自身を返します。<parameter>memory</parameter>は<link linkend=\"free"
"\"><function>free()</function></link>で破棄されます。"

#: xml/cut-test-utils.xml:111(term) xml/cut-test-utils.xml:178(term)
msgid "<parameter>memory</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:112(simpara)
msgid "the memory to be owned by Cutter."
msgstr "Cutterが所有権を持つことになるメモリ。"

#: xml/cut-test-utils.xml:114(simpara)
msgid "<parameter>memory</parameter> owned by Cutter. Don't free it."
msgstr "Cutterが所有する<parameter>memory</parameter>。解放しないで下さい。"

#: xml/cut-test-utils.xml:119(title)
msgid "cut_take_string ()"
msgstr "cut_take_string ()"

#: xml/cut-test-utils.xml:120(programlisting)
#, no-wrap
msgid "const <link linkend=\"char\">char</link> *        cut_take_string                     (<link linkend=\"char\">char</link> *string);"
msgstr ""

#: xml/cut-test-utils.xml:121(para)
msgid ""
"Passes ownership of <parameter>string</parameter> to Cutter and returns "
"<parameter>string</parameter> itself."
msgstr ""
"<parameter>string</parameter>の所有権をCutterに渡し、<parameter>string</"
"parameter>それ自身を返します。"

#: xml/cut-test-utils.xml:127(simpara)
msgid "the string to be owned by Cutter."
msgstr "Cutterが所有権を持つことになる文字列。"

#: xml/cut-test-utils.xml:129(simpara)
msgid "<parameter>string</parameter> owned by Cutter. Don't free it."
msgstr "Cutterが所有する<parameter>string</parameter>。解放しないで下さい。"

#: xml/cut-test-utils.xml:133(title)
msgid "cut_take_strdup ()"
msgstr "cut_take_strdup ()"

#: xml/cut-test-utils.xml:134(programlisting)
#, no-wrap
msgid "const <link linkend=\"char\">char</link> *        cut_take_strdup                     (const <link linkend=\"char\">char</link> *string);"
msgstr ""

#: xml/cut-test-utils.xml:135(para)
msgid ""
"Duplicates <parameter>string</parameter>, passes ownership of the duplicated "
"string to Cutter and returns the duplicated string."
msgstr ""
"<parameter>string</parameter>を複製し、その所有権をCutterに渡し、複製されたメ"
"モリを返します。"

#: xml/cut-test-utils.xml:141(simpara) xml/cut-test-utils.xml:159(simpara)
msgid "the string to be duplicated."
msgstr "複製される文字列。"

#: xml/cut-test-utils.xml:143(simpara) xml/cut-test-utils.xml:164(simpara)
msgid "a duplicated string owned by Cutter. Don't free it."
msgstr "Cutterが所有する複製された文字列。解放しないで下さい。"

#: xml/cut-test-utils.xml:148(title)
msgid "cut_take_strndup ()"
msgstr "cut_take_strndup ()"

#: xml/cut-test-utils.xml:149(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link> *        cut_take_strndup                    (const <link linkend=\"char\">char</link> *string,\n"
"                                                         <link linkend=\"size-t\">size_t</link> size);"
msgstr ""

#: xml/cut-test-utils.xml:151(para)
msgid ""
"Duplicates the first <parameter>size</parameter> bytes of <parameter>string</"
"parameter>, passes ownership of the duplicated string to Cutter and returns "
"the duplicated string. The duplicated string is always <link linkend=\"NULL--"
"CAPS\"><literal>NULL</literal></link>-terminated."
msgstr ""
"<parameter>string</parameter>の先頭<parameter>size</parameter>バイトを複製"
"し、その所有権ををCutterに渡し、複製された文字列を返します。複製された文字列"
"は常に<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>終端していま"
"す。"

#: xml/cut-test-utils.xml:161(term) xml/cut-test-utils.xml:181(term)
#: xml/gcut-egg.xml:435(term) xml/gcut-egg.xml:639(term)
#: xml/gcut-egg.xml:667(term)
msgid "<parameter>size</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:162(simpara) xml/cut-test-utils.xml:182(simpara)
msgid "the number of bytes to duplicate."
msgstr "複製するバイト数。"

#: xml/cut-test-utils.xml:169(title)
msgid "cut_take_memdup ()"
msgstr "cut_take_memdup ()"

#: xml/cut-test-utils.xml:170(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"void\">void</link> *        cut_take_memdup                     (const <link linkend=\"void\">void</link> *memory,\n"
"                                                         <link linkend=\"size-t\">size_t</link> size);"
msgstr ""

#: xml/cut-test-utils.xml:172(para)
msgid ""
"Duplicates <parameter>size</parameter> bytes of <parameter>memory</"
"parameter>, passes ownership of the duplicated memory to Cutter and returns "
"the duplicated memory."
msgstr ""
"<parameter>memory</parameter>の<parameter>size</parameter>バイトを複製し、そ"
"の所有権をCutterに渡し、複製されたメモリを返します。"

#: xml/cut-test-utils.xml:179(simpara)
msgid "the memory to be duplicated."
msgstr "複製されるメモリ。"

#: xml/cut-test-utils.xml:184(simpara)
msgid "a duplicated memory owned by Cutter. Don't free it."
msgstr "Cutterが所有する複製されたメモリ。解放しないで下さい。"

#: xml/cut-test-utils.xml:189(title)
msgid "cut_take_printf ()"
msgstr ""

#: xml/cut-test-utils.xml:190(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link> *        cut_take_printf                     (const <link linkend=\"char\">char</link> *format,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-test-utils.xml:192(para)
msgid ""
"Formats a string like <link linkend=\"printf\"><function>printf()</"
"function></link> but the formatted string is owned by Cutter."
msgstr ""
"<link linkend=\"printf\"><function>printf()</function></link>のように文字列を"
"整形しますが、整形された文字列はCutterが所有します。"

#: xml/cut-test-utils.xml:203(simpara)
msgid "a formatted string owned by Cutter. Don't free it."
msgstr "Cutterが所有する整形された文字列。解放しないで下さい。"

#: xml/cut-test-utils.xml:207(title)
msgid "cut_take_string_array ()"
msgstr ""

#: xml/cut-test-utils.xml:208(programlisting)
#, no-wrap
msgid "<link linkend=\"char\">char</link> **             cut_take_string_array               (<link linkend=\"char\">char</link> **strings);"
msgstr ""

#: xml/cut-test-utils.xml:209(para)
msgid ""
"Passes ownership of the array of strings to Cutter and returns "
"<parameter>strings</parameter> itself."
msgstr ""
"配列の所有権をCutterに渡し、<parameter>strings</parameter>それ自身を返しま"
"す。"

#: xml/cut-test-utils.xml:214(term) xml/cut-test-utils.xml:291(term)
#: xml/gcut-test-utils.xml:163(term) xml/gcut-test-utils.xml:212(term)
msgid "<parameter>strings</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:215(simpara)
msgid "the array of strings to be owned by Cutter."
msgstr "Cutterが所有権を持つことになる文字列の配列。"

#: xml/cut-test-utils.xml:217(simpara)
msgid "<parameter>strings</parameter> owned by Cutter. Don't free it."
msgstr "Cutterが所有する<parameter>strings</parameter>。解放しないで下さい。"

#: xml/cut-test-utils.xml:221(title)
msgid "cut_take_diff ()"
msgstr "cut_take_diff ()"

#: xml/cut-test-utils.xml:222(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link> *        cut_take_diff                       (const <link linkend=\"char\">char</link> *from,\n"
"                                                         const <link linkend=\"char\">char</link> *to);"
msgstr ""

#: xml/cut-test-utils.xml:224(para)
msgid ""
"Computes diff between <parameter>from</parameter> and <parameter>to</"
"parameter> that is owned by Cutter."
msgstr ""
"<parameter>from</parameter>と<parameter>to</parameter>のdiffを計算します。"
"diffの所有者はCutterです。"

#: xml/cut-test-utils.xml:228(term) xml/cut-test-utils.xml:273(term)
msgid "<parameter>from</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:229(simpara) xml/cut-test-utils.xml:274(simpara)
msgid "the original string."
msgstr "元の文字列。"

#: xml/cut-test-utils.xml:231(term) xml/cut-test-utils.xml:276(term)
msgid "<parameter>to</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:232(simpara) xml/cut-test-utils.xml:277(simpara)
msgid "the modified string."
msgstr "修正された文字列。"

#: xml/cut-test-utils.xml:234(simpara)
msgid ""
"a diff between <parameter>from</parameter> and <parameter>to</parameter> "
"owned by Cutter. Don't free it."
msgstr ""
"Cutterが所有する<parameter>from</parameter>と<parameter>to</parameter>の"
"diff。開放しないでください。"

#: xml/cut-test-utils.xml:238(title)
msgid "cut_take_replace ()"
msgstr "cut_take_replace ()"

#: xml/cut-test-utils.xml:239(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link> *        cut_take_replace                    (const <link linkend=\"char\">char</link> *target,\n"
"                                                         const <link linkend=\"char\">char</link> *pattern,\n"
"                                                         const <link linkend=\"char\">char</link> *replacement);"
msgstr ""

#: xml/cut-test-utils.xml:242(para)
msgid ""
"Replaces all occurrences of the <parameter>pattern</parameter> with the "
"<parameter>replacement</parameter> in the <parameter>target</parameter> "
"string."
msgstr ""
"<parameter>target</parameter>文字列中で、<parameter>pattern</parameter>にマッ"
"チする部分を<parameter>replacement</parameter>で置き換えます。"

#: xml/cut-test-utils.xml:247(term)
msgid "<parameter>target</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:248(simpara)
msgid "the replace target string."
msgstr "置換対象の文字列。"

#: xml/cut-test-utils.xml:251(simpara)
msgid "the regular expression pattern as string."
msgstr "正規表現パターン。（文字列で指定）"

#: xml/cut-test-utils.xml:253(term)
msgid "<parameter>replacement</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:254(simpara)
msgid "text to replace each match with"
msgstr "マッチした部分を置き換える文字列。"

#: xml/cut-test-utils.xml:256(simpara)
msgid "a replaced string owned by Cutter. Don't free it."
msgstr "Cutterが所有する複製された文字列。解放しないで下さい。"

#: xml/cut-test-utils.xml:261(title)
msgid "cut_append_diff ()"
msgstr "cut_append_diff ()"

#: xml/cut-test-utils.xml:262(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link> *        cut_append_diff                     (const <link linkend=\"char\">char</link> *message,\n"
"                                                         const <link linkend=\"char\">char</link> *from,\n"
"                                                         const <link linkend=\"char\">char</link> *to);"
msgstr ""

#: xml/cut-test-utils.xml:265(para)
msgid ""
"Computes diff between <parameter>from</parameter> and <parameter>to</"
"parameter> and append the diff to <parameter>message</parameter>. Returned "
"string is owned by Cutter."
msgstr ""
"<parameter>from</parameter>と<parameter>to</parameter>のdiffを計算し、その"
"diffを<parameter>message</parameter>に追加します。戻り値の文字列の所有者は"
"Cutterです。"

#: xml/cut-test-utils.xml:270(term) xml/soupcut-assertions-helper.xml:75(term)
#: xml/soupcut-assertions.xml:66(term) xml/soupcut-client.xml:113(term)
msgid "<parameter>message</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:271(simpara)
msgid "the string to be appended diff."
msgstr "diffが追加される文字列。"

#: xml/cut-test-utils.xml:279(simpara)
msgid ""
"<parameter>message</parameter> with diff between <parameter>from</parameter> "
"and <parameter>to</parameter> or same as <parameter>message</parameter> if "
"the diff not interested. Don't free it."
msgstr ""
"<parameter>from</parameter>と<parameter>to</parameter>間のdiff付きの"
"<parameter>message</parameter>。必要なさそうなdiffであれば"
"<parameter>message</parameter>と同じ。開放しないでください。"

#: xml/cut-test-utils.xml:283(para) xml/cutter.xml:297(para)
#: xml/gcut-assertions.xml:160(para) xml/gcut-assertions.xml:203(para)
#: xml/gcut-assertions.xml:275(para) xml/gcut-assertions.xml:318(para)
#: xml/gcut-assertions.xml:339(para) xml/gcut-assertions.xml:537(para)
#: xml/gcut-assertions.xml:591(para) xml/gcut-test-utils.xml:83(para)
#: xml/gcut-test-utils.xml:99(para) xml/gcut-test-utils.xml:120(para)
#: xml/gcut-test-utils.xml:155(para) xml/gcut-test-utils.xml:230(para)
msgid "Since 1.0.3"
msgstr "1.0.3から"

#: xml/cut-test-utils.xml:285(title)
msgid "cut_inspect_string_array ()"
msgstr "cut_inspect_string_array ()"

#: xml/cut-test-utils.xml:286(programlisting)
#, no-wrap
msgid "const <link linkend=\"char\">char</link> *        cut_inspect_string_array            (const <link linkend=\"char\">char</link> **strings);"
msgstr ""

#: xml/cut-test-utils.xml:287(para)
msgid ""
"Formats <parameter>strings</parameter> as human readable string that is "
"owned by Cutter."
msgstr ""
"<parameter>strings</parameter>を人が読みやすい文字列に整形します。整形された"
"文字列の所有者はCutterです。"

#: xml/cut-test-utils.xml:292(simpara)
msgid "the array of strings to be inspected."
msgstr "整形される文字列の配列。"

#: xml/cut-test-utils.xml:294(simpara)
msgid "a inspected string owned by Cutter. Don't free it."
msgstr "Cutterが所有する整形された文字列。解放しないで下さい。"

#: xml/cut-test-utils.xml:298(title)
msgid "cut_set_fixture_data_dir ()"
msgstr ""

#: xml/cut-test-utils.xml:299(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_set_fixture_data_dir            (const <link linkend=\"char\">char</link> *path,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-test-utils.xml:301(para)
msgid ""
"Set fixture data directory that is used by <link linkend=\"cut-get-fixture-"
"data-string\"><function>cut_get_fixture_data_string()</function></link> and "
"so on."
msgstr ""
"<link linkend=\"cut-get-fixture-data-string"
"\"><function>cut_get_fixture_data_string()</function></link>などで使われる"
"フィクスチャデータのディレクトリを指定します。"

#: xml/cut-test-utils.xml:307(simpara)
msgid "a first element of the path to the fixture data directory."
msgstr "フィクスチャデータディレクトリのパスの最初の要素。"

#: xml/cut-test-utils.xml:310(simpara) xml/cut-test-utils.xml:329(simpara)
#: xml/cut-test-utils.xml:352(simpara) xml/cut-test-utils.xml:373(simpara)
msgid ""
"remaining elements in path. <link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>-terminate is required since 1.0.7."
msgstr ""
"パスの残りの要素。1.0.7から<link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>終端が必須となりました。"

#: xml/cut-test-utils.xml:315(title)
msgid "cut_build_fixture_data_path ()"
msgstr ""

#: xml/cut-test-utils.xml:316(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"char\">char</link> *              cut_build_fixture_data_path         (const <link linkend=\"char\">char</link> *path,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-test-utils.xml:318(para)
msgid ""
"Builds a path to the fixture data. If <parameter>path</parameter> is "
"relative path, the path is handled as a relative path from a directory that "
"is specified by <link linkend=\"cut-set-fixture-data-dir"
"\"><function>cut_set_fixture_data_dir()</function></link> or the current "
"directory."
msgstr ""
"フィクスチャデータへのパスを生成します。もし、<parameter>path</parameter>が相"
"対パスなら、パスは<link linkend=\"cut-set-fixture-data-dir"
"\"><function>cut_set_fixture_data_dir()</function></link>で指定したディレクト"
"リか、現在のディレクトリからの相対パスとして処理されます。"

#: xml/cut-test-utils.xml:332(simpara)
msgid "a path to the fixture data. It should be freed when no longer needed."
msgstr ""
"フィクスチャデータのパス。返された文字列が必要なくなったときは開放してくださ"
"い。"

#: xml/cut-test-utils.xml:338(title)
msgid "cut_get_fixture_data_string ()"
msgstr "cut_get_fixture_data_string ()"

#: xml/cut-test-utils.xml:339(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link> *        cut_get_fixture_data_string         (const <link linkend=\"char\">char</link> *path,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-test-utils.xml:341(para)
msgid ""
"Reads the fixture data at \"<parameter>path</parameter>/...\" and returns it "
"as a string that is owned by Cutter. The description of <link linkend=\"cut-"
"build-fixture-data-path\"><function>cut_build_fixture_data_path()</"
"function></link> shows how the fixture data path is determined."
msgstr ""
"\"<parameter>path</parameter>/...\"にあるフィクスチャデータを読み込み、文字列"
"として返します。文字列はCutterが所持します。<link linkend=\"cut-build-"
"fixture-data-path\"><function>cut_build_fixture_data_path()</function></link>"
"の説明にはフィクスチャデータのパスがどのように決定されるかが書かれています。"

#: xml/cut-test-utils.xml:355(simpara)
msgid "a content of the fixture data as string. Don't free it."
msgstr "フィクスチャデータの内容。開放しないください。"

#: xml/cut-test-utils.xml:361(title)
msgid "cut_remove_path ()"
msgstr "cut_remove_path ()"

#: xml/cut-test-utils.xml:362(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_remove_path                     (const <link linkend=\"char\">char</link> *path,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-test-utils.xml:364(para)
msgid ""
"Removes <parameter>path</parameter> and it's children recursively. It "
"doesn't report any errors."
msgstr ""
"<parameter>path</parameter>と、その下にあるパスを再帰的に削除します。いかなる"
"エラーも報告しません。"

#: xml/cut-test-utils.xml:370(simpara) xml/cut-test-utils.xml:386(simpara)
msgid "a first element of the path to be removed."
msgstr "削除するパスの最初の要素。"

#: xml/cut-test-utils.xml:378(title)
msgid "cut_build_path ()"
msgstr ""

#: xml/cut-test-utils.xml:379(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link> *        cut_build_path                      (const <link linkend=\"char\">char</link> *path,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-test-utils.xml:381(para)
msgid ""
"Builds path from <parameter>path</parameter> and the following elements."
msgstr "<parameter>path</parameter>と続く要素を使ってパスを作ります。"

#: xml/cut-test-utils.xml:391(simpara)
msgid "built path owned by Cutter. Don't free it."
msgstr "Cutterが所有する作成したパス。解放しないで下さい。"

#: xml/cut-test-utils.xml:396(title)
msgid "cut_equal_string ()"
msgstr ""

#: xml/cut-test-utils.xml:397(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"cut-boolean\">cut_boolean</link>         cut_equal_string                    (const <link linkend=\"char\">char</link> *string1,\n"
"                                                         const <link linkend=\"char\">char</link> *string2);"
msgstr ""

#: xml/cut-test-utils.xml:399(para)
msgid ""
"Compare <parameter>string1</parameter> to <parameter>string2</parameter>. "
"<parameter>string1</parameter> and/or <parameter>string2</parameter> maybe "
"<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>."
msgstr ""
"<parameter>string1</parameter>と<parameter>string2</parameter>を比較します。"
"<parameter>string1</parameter>あるいは<parameter>string2</parameter>、または"
"両方が<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>でもかまいま"
"せん。"

#: xml/cut-test-utils.xml:404(term)
msgid "<parameter>string1</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:405(simpara) xml/cut-test-utils.xml:408(simpara)
msgid "a string."
msgstr "文字列。"

#: xml/cut-test-utils.xml:407(term)
msgid "<parameter>string2</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:410(simpara)
msgid ""
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link> if both "
"<parameter>string1</parameter> and <parameter>string2</parameter> are <link "
"linkend=\"NULL--CAPS\"><literal>NULL</literal></link> or have the same "
"contents; <link linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></"
"link> otherwise."
msgstr ""
"<parameter>string1</parameter>と<parameter>string2</parameter>が両方<link "
"linkend=\"NULL--CAPS\"><literal>NULL</literal></link>、あるいは同じ内容の場合"
"は<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link>、そうで"
"ない場合は<link linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></"
"link>。"

#: xml/cut-test-utils.xml:416(title)
msgid "cut_equal_double ()"
msgstr ""

#: xml/cut-test-utils.xml:417(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"cut-boolean\">cut_boolean</link>         cut_equal_double                    (<link linkend=\"double\">double</link> double1,\n"
"                                                         <link linkend=\"double\">double</link> double2,\n"
"                                                         <link linkend=\"double\">double</link> error);"
msgstr ""

#: xml/cut-test-utils.xml:420(para)
msgid ""
"Compare <parameter>double1</parameter> to <parameter>double2</parameter> "
"with <parameter>error</parameter> range."
msgstr ""
"<parameter>double1</parameter>と<parameter>double2</parameter>を誤差範囲"
"<parameter>error</parameter>で比較します。"

#: xml/cut-test-utils.xml:424(term)
msgid "<parameter>double1</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:425(simpara) xml/cut-test-utils.xml:428(simpara)
msgid "a double value."
msgstr "浮動小数点値。"

#: xml/cut-test-utils.xml:427(term)
msgid "<parameter>double2</parameter> :"
msgstr ""

#: xml/cut-test-utils.xml:431(simpara)
msgid "a double value that specifies error range."
msgstr "誤差範囲を示す浮動小数点数。"

#: xml/cut-test-utils.xml:433(simpara)
msgid ""
"<link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link> if |"
"<parameter>double1</parameter> - <parameter>double2</parameter>| &lt;= "
"<parameter>error</parameter>; <link linkend=\"CUT-FALSE--CAPS"
"\"><literal>CUT_FALSE</literal></link> otherwise."
msgstr ""
"|<parameter>double1</parameter> - <parameter>double2</parameter>| &lt;= "
"<parameter>error</parameter>なら<link linkend=\"CUT-TRUE--CAPS"
"\"><literal>CUT_TRUE</literal></link>、そうでなければ<link linkend=\"CUT-"
"FALSE--CAPS\"><literal>CUT_FALSE</literal></link>。"

#: xml/cut-types.xml:7(refentrytitle) xml/cut-types.xml:13(refname)
msgid "Types"
msgstr "型"

#: xml/cut-types.xml:14(refpurpose)
msgid "Types that is used in test."
msgstr "テストで使う型です。"

#: xml/cut-types.xml:21(link)
msgid "*CutDestroyFunction"
msgstr ""

#: xml/cut-types.xml:22(link)
msgid "*CutCallbackFunction"
msgstr ""

#: xml/cut-types.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                (<placeholder-2/>)               (<placeholder-3/> *data);\n"
"<placeholder-4/>                (<placeholder-5/>)              (void);\n"
"typedef             <placeholder-6/>;\n"
"#define             <placeholder-7/>\n"
"#define             <placeholder-8/>\n"
msgstr ""

#: xml/cut-types.xml:39(para)
msgid "There are some types to be used in test."
msgstr "テストで使う型がいくつかあります。"

#: xml/cut-types.xml:48(title)
msgid "CutDestroyFunction ()"
msgstr ""

#: xml/cut-types.xml:49(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                (*CutDestroyFunction)               (<link linkend=\"void\">void</link> *data);"
msgstr ""

#: xml/cut-types.xml:50(para)
msgid ""
"Specifies the type of function which is called when a data element is "
"destroyed. It is passed the pointer to the data element and should free any "
"memory and resources allocated for it."
msgstr ""
"データが破棄されるときに呼ばれる関数の型です。データのポインタを受け取り、そ"
"のデータ用に割り当てられたメモリとリソースを開放します。"

#: xml/cut-types.xml:57(term) xml/gcut-data-helper.xml:71(term)
#: xml/gcut-data-helper.xml:90(term) xml/gcut-data-helper.xml:109(term)
#: xml/gcut-data-helper.xml:128(term) xml/gcut-data-helper.xml:147(term)
#: xml/gcut-data-helper.xml:166(term) xml/gcut-data-helper.xml:185(term)
#: xml/gcut-data-helper.xml:204(term) xml/gcut-data.xml:256(term)
#: xml/gcut-data.xml:274(term) xml/gcut-data.xml:293(term)
#: xml/gcut-data.xml:311(term) xml/gcut-data.xml:330(term)
#: xml/gcut-data.xml:349(term) xml/gcut-data.xml:368(term)
#: xml/gcut-data.xml:387(term) xml/gcut-dynamic-data.xml:156(term)
#: xml/gcut-dynamic-data.xml:184(term) xml/gcut-dynamic-data.xml:203(term)
#: xml/gcut-dynamic-data.xml:222(term) xml/gcut-dynamic-data.xml:241(term)
#: xml/gcut-dynamic-data.xml:260(term) xml/gcut-dynamic-data.xml:279(term)
#: xml/gcut-dynamic-data.xml:298(term) xml/gcut-dynamic-data.xml:317(term)
#: xml/gcut-inspect.xml:87(term) xml/gcut-inspect.xml:112(term)
#: xml/gcut-inspect.xml:137(term) xml/gcut-inspect.xml:162(term)
#: xml/gcut-inspect.xml:187(term) xml/gcut-inspect.xml:218(term)
#: xml/gcut-inspect.xml:249(term) xml/gcut-inspect.xml:275(term)
#: xml/gcut-types.xml:62(term)
msgid "<parameter>data</parameter> :"
msgstr ""

#: xml/cut-types.xml:58(simpara)
msgid "the data element to be destroyed."
msgstr "破棄するデータ。"

#: xml/cut-types.xml:62(title)
msgid "CutCallbackFunction ()"
msgstr ""

#: xml/cut-types.xml:63(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                (*CutCallbackFunction)              (void);"
msgstr ""

#: xml/cut-types.xml:68(programlisting)
#, no-wrap
msgid "typedef int cut_boolean;\n"
msgstr ""

#: xml/cut-types.xml:70(para)
msgid ""
"A standard boolean type. Variables of this type should only contain the "
"value <link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link> or "
"<link linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></link>."
msgstr ""
"標準的な真偽値型。この型の値は<link linkend=\"CUT-TRUE--CAPS"
"\"><literal>CUT_TRUE</literal></link>と<link linkend=\"CUT-FALSE--CAPS"
"\"><literal>CUT_FALSE</literal></link>だけです。"

#: xml/cut-types.xml:77(programlisting)
#, no-wrap
msgid "#define CUT_TRUE\n"
msgstr ""

#: xml/cut-types.xml:79(para)
msgid ""
"Defines the <link linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></"
"link> value for the <link linkend=\"cut-boolean\"><type>cut_boolean</type></"
"link> type."
msgstr ""
"<link linkend=\"cut-boolean\"><type>cut_boolean</type></link>型のために<link "
"linkend=\"CUT-TRUE--CAPS\"><literal>CUT_TRUE</literal></link>を定義します。"

#: xml/cut-types.xml:85(programlisting)
#, no-wrap
msgid "#define CUT_FALSE\n"
msgstr ""

#: xml/cut-types.xml:87(para)
msgid ""
"Defines the <link linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></"
"link> value for the <link linkend=\"cut-boolean\"><type>cut_boolean</type></"
"link> type."
msgstr ""
"<link linkend=\"cut-boolean\"><type>cut_boolean</type></link>型のために<link "
"linkend=\"CUT-FALSE--CAPS\"><literal>CUT_FALSE</literal></link>を定義します。"

#: xml/cut-ui-factory-builder.xml:7(refentrytitle)
#: xml/cut-ui-factory-builder.xml:13(refname)
msgid "CutUIFactoryBuilder"
msgstr ""

#: xml/cut-ui.xml:7(refentrytitle) xml/cut-ui.xml:13(refname)
msgid "CutUI"
msgstr ""

#: xml/cut-version.xml:7(refentrytitle) xml/cut-version.xml:13(refname)
msgid "Version Information"
msgstr "バージョン情報"

#: xml/cut-version.xml:14(refpurpose)
msgid "Variables and macros to check the Cutter version"
msgstr "Cutterのバージョンをチェックするためのマクロ"

#: xml/cut-version.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
"#define             <placeholder-2/>\n"
"#define             <placeholder-3/>\n"
"#define             <placeholder-4/>\n"
"#define             <placeholder-5/>                (major, minor, micro)\n"
msgstr ""

#: xml/cut-version.xml:39(para)
msgid ""
"Cutter provides version information, primarily useful in configure checks "
"for builds that have a configure script. Tests will not typically use the "
"features described here."
msgstr ""
"Cutterはビルド時の設定で便利なようにバージョン情報を提供します。通常のテスト"
"ではここで説明する機能は使わないでしょう。"

#: xml/cut-version.xml:52(programlisting)
#, no-wrap
msgid "#define CUTTER_VERSION_MAJOR 1\n"
msgstr ""

#: xml/cut-version.xml:54(para)
msgid "The major version number of the Cutter."
msgstr "Cutterのメジャーバージョン。"

#: xml/cut-version.xml:60(programlisting)
#, no-wrap
msgid "#define CUTTER_VERSION_MINOR 0\n"
msgstr ""

#: xml/cut-version.xml:62(para)
msgid "The minor version number of the Cutter."
msgstr "Cutterのマイナーバージョン。"

#: xml/cut-version.xml:68(programlisting)
#, no-wrap
msgid "#define CUTTER_VERSION_MICRO 8\n"
msgstr ""

#: xml/cut-version.xml:70(para)
msgid "The micro version number of the Cutter."
msgstr "Cutterのマイクロバージョン。"

#: xml/cut-version.xml:76(programlisting)
#, no-wrap
msgid "#define CUTTER_VERSION_STRING \"1.0.8\"\n"
msgstr ""

#: xml/cut-version.xml:78(para)
msgid ""
"The version number string of the Cutter with \"#{MAJOR}.#{MINOR}.#{MICRO}\" "
"format."
msgstr ""
"\"#{メジャーバージョン}.#{マイナーバージョン}.#{マイクロバージョン}\"という書"
"式のCutterのバージョン文字列。"

#: xml/cut-version.xml:84(title)
msgid "CUTTER_CHECK_VERSION()"
msgstr ""

#: xml/cut-version.xml:85(programlisting)
#, no-wrap
msgid "#define             CUTTER_CHECK_VERSION(major, minor, micro)"
msgstr ""

#: xml/cut-version.xml:86(para)
msgid ""
"Checks the version of the Cutter. Returns true if the version of the Cutter "
"header files is the same as or newer than the passed-in version."
msgstr ""
"Cutterのバージョンをチェックします。Cutterのヘッダファイルのバージョンと同じ"
"かそれより新しいバージョンを渡すと真を返します。"

#: xml/cut-version.xml:92(term)
msgid "<parameter>major</parameter> :"
msgstr ""

#: xml/cut-version.xml:93(simpara)
msgid "the major version number."
msgstr "メジャーバージョン番号。"

#: xml/cut-version.xml:95(term)
msgid "<parameter>minor</parameter> :"
msgstr ""

#: xml/cut-version.xml:96(simpara)
msgid "the minor version number."
msgstr "マイナーバージョン番号。"

#: xml/cut-version.xml:98(term)
msgid "<parameter>micro</parameter> :"
msgstr ""

#: xml/cut-version.xml:99(simpara)
msgid "the micro version number."
msgstr "マイクロバージョン番号。"

#: xml/cutter.xml:7(refentrytitle) xml/cutter.xml:13(refname)
msgid "Cutter"
msgstr ""

#: xml/cutter.xml:14(refpurpose)
msgid "A Unit Testing Framework for C."
msgstr "C言語用単体テストフレームワーク"

#: xml/cutter.xml:35(link) xml/gcut-dynamic-data.xml:29(link)
#: xml/gcut-egg.xml:29(link) xml/gcut-test-utils.xml:39(link)
msgid "va_list"
msgstr ""

#: xml/cutter.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                               (void);\n"
"<placeholder-3/>                <placeholder-4/>                           (void);\n"
"<placeholder-5/>                <placeholder-6/>                            (void);\n"
"<placeholder-7/>                <placeholder-8/>                        (void);\n"
"<placeholder-9/>                <placeholder-10/>                         (void);\n"
"<placeholder-11/>                <placeholder-12/>                        (void);\n"
"#define             <placeholder-13/>                        (first_data_name, ...)\n"
"#define             <placeholder-14/> (context, ...)\n"
"#define             <placeholder-15/>                  (first_attribute_name, ...)\n"
"#define             <placeholder-16/>        ()\n"
"#define             <placeholder-17/>        (test_context)\n"
"<placeholder-18/>                <placeholder-19/>                     (const <placeholder-20/> *format,\n"
"                                                         ...);\n"
"<placeholder-21/>                <placeholder-22/>             (const <placeholder-23/> *format,\n"
"                                                         <placeholder-24/> args);\n"
"<placeholder-25/>                <placeholder-26/>                    (void);\n"
msgstr ""

#: xml/cutter.xml:60(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;cutter.h&gt;\n"
"#include \"my-stack.h\"\n"
"\n"
"void\n"
"test_my_stack (void)\n"
"{\n"
"    MyStack *stack = my_stack_new();\n"
"\n"
"    cut_assert_not_null(stack);\n"
"    cut_assert(my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(0, my_stack_get_size(stack));\n"
"\n"
"    my_stack_push(stack, 10);\n"
"    cut_assert(!my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(1, my_stack_get_size(stack));\n"
"\n"
"    my_stack_push(stack, 20);\n"
"    cut_assert_equal_int(2, my_stack_get_size(stack));\n"
"\n"
"    cut_assert_equal(20, my_stack_pop(stack));\n"
"    cut_assert(!my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(1, my_stack_get_size(stack));\n"
"\n"
"    cut_assert_equal(10, my_stack_pop(stack));\n"
"    cut_assert(my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(0, my_stack_get_size(stack));\n"
"}\n"
msgstr ""

#: xml/cutter.xml:54(para)
msgid ""
"Easy to use. Cutter doesn't introduce any magic macros like "
"CUTTER_DEFINE_TEST_START and CUTTER_DEFINE_TEST_END into your test program. "
"You can write your test program like normal program. You only use <link "
"linkend=\"cut-assert-XXX\"><function>cut_assert_XXX()</function></link> to "
"check that your program works as you expect. <placeholder-1/>"
msgstr ""
"簡単に使えます。Cutterではテストプログラム中にCUTTER_DEFINE_TEST_STARTや"
"CUTTER_DEFINE_TEST_ENDなどといった不思議なマクロを使う必要がありません。通常"
"のプログラムと同じようにテストプログラムを書くことができます。ただし、プログ"
"ラムが期待した通り動作していることを検証するために<link linkend=\"cut-assert-"
"XXX\"><function>cut_assert_XXX()</function></link>を使う必要があります。"
"<placeholder-1/>"

#: xml/cutter.xml:94(programlisting)
#, no-wrap
msgid ""
"\n"
"...........................................................\n"
"\n"
"Finished in 0.213021 seconds\n"
"\n"
"59 test(s), 246 assertion(s), 0 failure(s), 0 error(s), 0 pending(s), 0 notification(s)\n"
msgstr ""

#: xml/cutter.xml:90(para)
msgid ""
"Simple but useful output. Cutter works quietly if tests are running without "
"any problems by default. The following is an output of self test: "
"<placeholder-1/> Cutter just outputs \".\" for a passed test and a summary "
"at the end. Cutter doesn't output each test name, how many assertions are "
"used for a test and so because we don't need the information on success."
msgstr ""
"簡素ですが有用な情報を出力をします。Cutterはデフォルトではテストが問題なく動"
"いているときは静かに動きます。以下は、Cutter自身のテストの出力です。"
"<placeholder-1/>Cutterはテストが1つパスしたことを示すためには「.」だけを出力"
"し、最後にテスト結果の要約を出力します。Cutterは各テストの名前や何個検証した"
"かなどの情報は表示しません。これは、テスト成功時にはこれらの情報は必要ないか"
"らです。"

#: xml/cutter.xml:107(programlisting)
#, no-wrap
msgid ""
"\n"
".....................F.....................................\n"
"\n"
"1) Failure: test_error\n"
"&lt;\"Strange\" == cut_test_result_get_test_name(result)&gt;\n"
"expected: &lt;Strange!!!&gt;\n"
" but was: &lt;dummy-error-test&gt;\n"
"test/test-cut-assertions.c:240: cut_assert_test_result()\n"
"\n"
"Finished in 0.223657 seconds\n"
"\n"
"59 test(s), 242 assertion(s), 1 failure(s), 0 error(s), 0 pending(s), 0 notification(s)\n"
msgstr ""

#: xml/cutter.xml:122(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal_string(\"Strange!!!\", cut_test_result_get_test_name(result));\n"
msgstr ""

#: xml/cutter.xml:105(para)
msgid ""
"Cutter outputs many information on failure: <placeholder-1/> The above "
"result is happened because I add a strange expected staring in Cutter's self "
"test: <placeholder-2/> The strange assertion is written in the 240th line in "
"test/test-cut-assertions.c and the line is in the <link linkend=\"cut-assert-"
"test-result\"><function>cut_assert_test_result()</function></link> function. "
"The function is called in test_error test. We expected "
"cut_test_result_get_test_name(result) should return \"Strange!!!\" but got "
"\"dummy-error-name\". We can get the above information from Cutter output. "
"This will help your debug."
msgstr ""
"Cutterは失敗時にはたくさんの情報を出力します。<placeholder-1/>上記の結果は"
"Cutterの自己テストにおかしな期待値を追加したために起きています。<placeholder-"
"2/>おかしな検証はtest/test-cut-assertions.cの240行目に書かれていて、その行は"
"<link linkend=\"cut-assert-test-result\"><function>cut_assert_test_result()</"
"function></link>関数内にあります。この関数はtest_errorテストから呼び出されて"
"います。cut_test_result_get_test_name(result)が\"Strange!!!\"を返すことを期待"
"していますが、実際は\"dummy-error-name\"が返ってきています。このような情報を"
"上記のCutterの出力から得ることができます。これはデバッグの手助けになるでしょ"
"う。"

#: xml/cutter.xml:133(para)
msgid ""
"Cutter's output format is pragmatic. ' but was:' is indented and aligned "
"with the above 'expected:'. This helps that you find difference between "
"expected value and actual value by your eyes easily. The problem line is "
"formated as 'FILENAME:LINE: FUNCTION' to integrate Emacs. In Emacs's "
"compilation-mode, if the format is appeared in *compilation* buffer, we can "
"jump to FILENAME at LINE with next-error command. (C-x `) This helps that "
"you find the problem line rapidly."
msgstr ""
"Cutterの出力形式は実用的です。' but was:'はその上の'expected:'と並ぶようにイ"
"ンデントされています。これは期待値と実測値をパッと見て簡単に比較できるように"
"するためです。問題のあった行は「ファイル名:行: 関数」というように整形されてい"
"ます。これはEmacsと連携するためです。Emacsのcompilation-modeではこの形式が"
"*compilation*バッファに表れると、next-errorコマンド(C-x `)で「ファイル名」の"
"「行」へジャンプすることができます。これは問題行を素早く見つける手助けをしま"
"す。"

#: xml/cutter.xml:143(para)
msgid "Cutter supports not only easy test writing but also easy debugging."
msgstr ""
"Cutterは簡単にテストを書くことを支援するだけではなく、簡単にデバッグをできる"
"ことも支援します。"

#: xml/cutter.xml:50(para)
msgid ""
"Cutter is a Unit Testing Framework for C and has the following features: "
"<placeholder-1/>"
msgstr ""
"Cutterは以下のような特徴をもったC言語用の単体テストフレームワークです。"
"<placeholder-1/>"

#: xml/cutter.xml:155(title)
msgid "setup ()"
msgstr ""

#: xml/cutter.xml:156(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                setup                               (void);"
msgstr ""

#: xml/cutter.xml:157(para)
msgid ""
"<literal>setup</literal> has been deprecated since version 1.0.7 and should "
"not be used in newly-written code. Use <link linkend=\"cut-setup"
"\"><function>cut_setup()</function></link> instead."
msgstr ""
"<literal>setup</literal>はバージョン1.0.7から非推奨になりました。新しく書く"
"コードでは使わないでください。代わりに<link linkend=\"cut-setup"
"\"><function>cut_setup()</function></link>を使ってください。"

#: xml/cutter.xml:158(para)
msgid ""
"If you define <link linkend=\"setup\"><function>setup()</function></link> in "
"your test program, cutter will call your <link linkend=\"setup"
"\"><function>setup()</function></link> before each your test is run. If you "
"define <link linkend=\"cut-setup\"><function>cut_setup()</function></link>, "
"<link linkend=\"setup\"><function>setup()</function></link> is ignored."
msgstr ""
"テストプログラム中で<link linkend=\"setup\"><function>setup()</function></"
"link>を定義していたら、cutterは各テストが実行される前に定義された<link "
"linkend=\"setup\"><function>setup()</function></link>を呼びだします。<link "
"linkend=\"cut_setup\"><function>cut_setup()</function></link>が定義されていた"
"場合は、<link linkend=\"setup\"><function>setup()</function></link>は無視され"
"ます。"

#: xml/cutter.xml:165(title)
msgid "cut_setup ()"
msgstr ""

#: xml/cutter.xml:166(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_setup                           (void);"
msgstr ""

#: xml/cutter.xml:167(para)
msgid ""
"If you define <link linkend=\"cut-setup\"><function>cut_setup()</function></"
"link> in your test program, cutter will call your <link linkend=\"cut-setup"
"\"><function>cut_setup()</function></link> before each your test is run. "
"<link linkend=\"cut-setup\"><function>cut_setup()</function></link> has "
"priority over <link linkend=\"setup\"><function>setup()</function></link>."
msgstr ""
"テストプログラム中で<link linkend=\"cut_setup\"><function>cut_setup()</"
"function></link>を定義していたら、cutterは各テストが実行される前に定義された"
"<link linkend=\"cut_setup\"><function>cut_setup()</function></link>を呼びだし"
"ます。<link linkend=\"cut-setup\"><function>cut_setup()</function></link>と"
"<link linkend=\"setup\"><function>setup()</function></link>が定義されていた場"
"合は<link linkend=\"cut-setup\"><function>cut_setup()</function></link>だけが"
"使われます。"

#: xml/cutter.xml:174(title)
msgid "teardown ()"
msgstr ""

#: xml/cutter.xml:175(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                teardown                            (void);"
msgstr ""

#: xml/cutter.xml:176(para)
msgid ""
"<literal>teardown</literal> has been deprecated since version 1.0.7 and "
"should not be used in newly-written code. Use <link linkend=\"cut-teardown"
"\"><function>cut_teardown()</function></link> instead."
msgstr ""
"<literal>teardown</literal>はバージョン1.0.7から非推奨になりました。新しく書"
"くコードでは使わないでください。代わりに<link linkend=\"cut-teardown"
"\"><function>cut_teardown()</function></link>を使ってください。"

#: xml/cutter.xml:177(para)
msgid ""
"If you define <link linkend=\"teardown\"><function>teardown()</function></"
"link> in your test program, cutter will call your <link linkend=\"teardown"
"\"><function>teardown()</function></link> after each your test is run even "
"if a test is failed. If you define <link linkend=\"cut-teardown"
"\"><function>cut_teardown()</function></link>, <link linkend=\"teardown"
"\"><function>teardown()</function></link> is ignored."
msgstr ""
"テストプログラム中で<link linkend=\"teardown\"><function>teardown()</"
"function></link>を定義していたら、cutterは各テストの後に、たとえテストが失敗"
"していた時でも、<link linkend=\"teardown\"><function>teardown()</function></"
"link>を呼びだします。<link linkend=\"cut-teardown\"><function>cut_teardown()"
"</function></link>が定義されていた場合は、<link linkend=\"teardown"
"\"><function>teardown()</function></link>は無視されます。"

#: xml/cutter.xml:185(title)
msgid "cut_teardown ()"
msgstr ""

#: xml/cutter.xml:186(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_teardown                        (void);"
msgstr ""

#: xml/cutter.xml:187(para)
msgid ""
"If you define <link linkend=\"cut-teardown\"><function>cut_teardown()</"
"function></link> in your test program, cutter will call your <link linkend="
"\"cut-teardown\"><function>cut_teardown()</function></link> after each your "
"test is run even if a test is failed. <link linkend=\"cut-teardown"
"\"><function>cut_teardown()</function></link> has priority over <link "
"linkend=\"teardown\"><function>teardown()</function></link>."
msgstr ""
"テストプログラム中で<link linkend=\"cut-teardown\"><function>cut_teardown()</"
"function></link>を定義していたら、cutterは各テストの後に、たとえテストが失敗"
"していた時でも、<link linkend=\"cut-teardown\"><function>cut_teardown()</"
"function></link>を呼びだします。<link linkend=\"cut-teardown"
"\"><function>cut_teardown()</function></link>と<link linkend=\"teardown"
"\"><function>teardown()</function></link>が定義されていた場合は<link linkend="
"\"cut-teardown\"><function>cut_teardown()</function></link>だけが使われます。"

#: xml/cutter.xml:195(title)
msgid "cut_startup ()"
msgstr ""

#: xml/cutter.xml:196(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_startup                         (void);"
msgstr ""

#: xml/cutter.xml:197(para)
msgid ""
"If you define <link linkend=\"cut-startup\"><function>cut_startup()</"
"function></link> in your test program, cutter will call your <link linkend="
"\"cut-startup\"><function>cut_startup()</function></link> before each your "
"test case is run. <link linkend=\"cut-startup\"><function>cut_startup()</"
"function></link> has priority over <link linkend=\"startup"
"\"><function>startup()</function></link>."
msgstr ""
"テストプログラム中で<link linkend=\"cut-startup\"><function>cut_startup()</"
"function></link>を定義していたら、cutterは各テストケースが実行される前に定義"
"された<link linkend=\"cut-startup\"><function>cut_startup()</function></link>"
"を呼びだします。<link linkend=\"cut-startup\"><function>cut_startup()</"
"function></link>と<link linkend=\"startup\"><function>startup()</function></"
"link>が定義されていた場合は<link linkend=\"cut-startup"
"\"><function>cut_startup()</function></link>だけが使われます。"

#: xml/cutter.xml:204(title)
msgid "cut_shutdown ()"
msgstr ""

#: xml/cutter.xml:205(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_shutdown                        (void);"
msgstr ""

#: xml/cutter.xml:206(para)
msgid ""
"If you define <link linkend=\"shutdown\"><function>shutdown()</function></"
"link> in your test program, cutter will call your <link linkend=\"shutdown"
"\"><function>shutdown()</function></link> after each your test case is run. "
"<link linkend=\"cut-shutdown\"><function>cut_shutdown()</function></link> "
"has priority over <link linkend=\"shutdown\"><function>shutdown()</"
"function></link>."
msgstr ""
"テストプログラム中で<link linkend=\"shutdown\"><function>shutdown()</"
"function></link>を定義していたら、cutterは各テストケースが実行された後に定義"
"された<link linkend=\"shutdown\"><function>shutdown()</function></link>を呼び"
"だします。<link linkend=\"cut-shutdown\"><function>cut_shutdown()</"
"function></link>と<link linkend=\"shutdown\"><function>shutdown()</"
"function></link>が定義されていた場合は<link linkend=\"cut-shutdown"
"\"><function>cut_shutdown()</function></link>だけが使われます。"

#: xml/cutter.xml:213(title)
msgid "cut_add_data()"
msgstr ""

#: xml/cutter.xml:214(programlisting)
#, no-wrap
msgid "#define             cut_add_data(first_data_name, ...)"
msgstr ""

#: xml/cutter.xml:215(para)
msgid "Adds data to use data driven test."
msgstr "データ駆動テストで使うデータを追加します。"

#: xml/cutter.xml:220(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;cutter.h&gt;\n"
"\n"
"void data_translate (void);\n"
"void test_translate (const void *data);\n"
"\n"
"static const char*\n"
"translate (int input)\n"
"{\n"
"   switch(input) {\n"
"   case 1:\n"
"       return \"first\";\n"
"   case 111:\n"
"       return \"a hundred eleven\";\n"
"   default:\n"
"       return \"unsupported\";\n"
"   }\n"
"}\n"
"\n"
"typedef struct _TranslateTestData\n"
"{\n"
"    char *translated;\n"
"    int input;\n"
"} TranslateTestData;\n"
"\n"
"static TranslateTestData *\n"
"translate_test_data_new (char *translated, int input)\n"
"{\n"
"    TranslateTestData *data;\n"
"\n"
"    data = malloc(sizeof(TranslateTestData));\n"
"    data-&gt;translated = strdup(translated);\n"
"    data-&gt;input = input;\n"
"\n"
"    return data;\n"
"}\n"
"\n"
"static void\n"
"translate_test_data_free (TranslateTestData *data)\n"
"{\n"
"    free(data-&gt;translated);\n"
"    free(data);\n"
"}\n"
"\n"
"void\n"
"data_translate(void)\n"
"{\n"
"    cut_add_data(\"simple data\",\n"
"                 translate_test_data_new(\"first\", 1),\n"
"                 translate_test_data_free,\n"
"                 \"complex data\",\n"
"                 translate_test_data_new(\"a hundred eleven\", 111),\n"
"                 translate_test_data_free,\n"
"                 NULL);\n"
"}\n"
"\n"
"void\n"
"test_translate(const void *data)\n"
"{\n"
"     const TranslateTestData *test_data = data;\n"
"\n"
"     cut_assert_equal_string(test_data-&gt;translated,\n"
"                             translate(test_data-&gt;input));\n"
"}\n"
msgstr ""

#: xml/cutter.xml:287(term)
msgid "<parameter>first_data_name</parameter> :"
msgstr ""

#: xml/cutter.xml:288(simpara)
msgid "The first data name."
msgstr "最初のデータ名。"

#: xml/cutter.xml:291(simpara)
msgid ""
"The data and destroy function of the first data, followed optionally by more "
"name/data/destroy_function(<link linkend=\"CutDestroyFunction"
"\"><type>CutDestroyFunction</type></link>) triples. The variable arguments "
"should be terminated by <link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link> since 1.0.6."
msgstr ""
"最初のデータとデータ破棄関数。続けて任意の数の「名前・データ・データ破棄関数"
"(<link linkend=\"CutDestroyFunction\"><type>CutDestroyFunction</type></"
"link>)」の三つ組を指定します。1.0.6から可変長の引数は<link linkend=\"NULL--"
"CAPS\"><literal>NULL</literal></link>終端しなければいけなくなりました。"

#: xml/cutter.xml:299(title)
msgid "cut_add_data_backward_compatibility()"
msgstr ""

#: xml/cutter.xml:300(programlisting)
#, no-wrap
msgid "#define             cut_add_data_backward_compatibility(context, ...)"
msgstr ""

#: xml/cutter.xml:301(para)
msgid ""
"<literal>cut_add_data_backward_compatibility</literal> is deprecated and "
"should not be used in newly-written code."
msgstr ""
"<literal>cut_add_data_backward_compatibility</literal>は非推奨です。新しい"
"コードでは使わないでください。"

#: xml/cutter.xml:304(term) xml/gcut-public.xml:55(term)
#: xml/gcut-public.xml:70(term) xml/gcut-public.xml:86(term)
#: xml/gcut-public.xml:104(term) xml/soupcut-server.xml:68(term)
msgid "<parameter>context</parameter> :"
msgstr ""

#: xml/cutter.xml:312(title)
msgid "cut_set_attributes()"
msgstr ""

#: xml/cutter.xml:313(programlisting)
#, no-wrap
msgid "#define             cut_set_attributes(first_attribute_name, ...)"
msgstr ""

#: xml/cutter.xml:314(para)
msgid "Sets attributes of the test."
msgstr "テストの属性を設定します。"

#: xml/cutter.xml:319(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;cutter.h&gt;\n"
"\n"
"void attributes_repeat (void);\n"
"void test_repeat (void);\n"
"\n"
"void\n"
"attributes_repeat(void)\n"
"{\n"
"    cut_set_attributes(\"description\", \"a test for repeat function\",\n"
"                       \"bug\", \"111\",\n"
"                       \"priority\", \"high\",\n"
"                       NULL);\n"
"}\n"
"\n"
"void\n"
"test_repeat(void)\n"
"{\n"
"     cut_assert_equal_string_with_free(\"XXX\", repeat(\"X\", 3));\n"
"}\n"
msgstr ""

#: xml/cutter.xml:342(term)
msgid "<parameter>first_attribute_name</parameter> :"
msgstr ""

#: xml/cutter.xml:343(simpara)
msgid "The first attribute name."
msgstr "最初の属性名。"

#: xml/cutter.xml:346(simpara)
msgid ""
"The value of the first attribute, followed optionally by more name/value "
"pairs. <link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>-terminate "
"is required since 1.0.7."
msgstr ""
"最初の属性値です。その後に任意個数の名前と値のペアが続きます。1.0.7から<link "
"linkend=\"NULL--CAPS\"><literal>NULL</literal></link>終端が必須になりました。"

#: xml/cutter.xml:352(title)
msgid "cut_get_current_test_context()"
msgstr ""

#: xml/cutter.xml:353(programlisting)
#, no-wrap
msgid "#define             cut_get_current_test_context()"
msgstr ""

#: xml/cutter.xml:354(para)
msgid ""
"Returns the current test context. The current test context is a thread local "
"object. It means that you don't need to care this if you don't create a new "
"thread in your test. This is only needed to care if you create a new thread. "
"You need to pass the current test context in your test thread to the current "
"test context in a created thread."
msgstr ""
"現在のテストコンテキストを返します。「現在のテストコンテキスト」はスレッド"
"ローカルなオブジェクトです。もしテストの中で新しいスレッドを作らない場合はテ"
"ストコンテキストを気にする必要はありません。新しいスレッドを作る場合だけ必要"
"になります。テストのスレッドが持っている「現在のテストコンテキスト」を新しく"
"作ったスレッドに渡す必要がありません。"

#: xml/cutter.xml:365(programlisting)
#, no-wrap
msgid ""
"\n"
"int\n"
"your_thread_function(void *data)\n"
"{\n"
"    CutTestContext *test_context = data;\n"
"    cut_set_current_test_context(test_context);\n"
"    ...\n"
"}\n"
"\n"
"void\n"
"run_your_thread(void)\n"
"{\n"
"    int result;\n"
"    pthread_t your_thread;\n"
"\n"
"    result = pthread_create(&amp;your_thread, NULL,\n"
"                            your_thread_function,\n"
"                            cut_get_current_test_context());\n"
"    ...\n"
"}\n"
msgstr ""

#: xml/cutter.xml:388(simpara)
msgid "a <link linkend=\"CutTestContext\"><type>CutTestContext</type></link>."
msgstr ""
"<link linkend=\"CutTestContext\"><type>CutTestContext</type></link>オブジェク"
"ト。"

#: xml/cutter.xml:393(title)
msgid "cut_set_current_test_context()"
msgstr ""

#: xml/cutter.xml:394(programlisting)
#, no-wrap
msgid "#define             cut_set_current_test_context(test_context)"
msgstr ""

#: xml/cutter.xml:395(para)
msgid ""
"Set <parameter>test_context</parameter> as the current test context. See "
"<link linkend=\"cut-get-current-test-context"
"\"><function>cut_get_current_test_context()</function></link> for more "
"details."
msgstr ""
"現在のテストコンテキストを<parameter>test_context</parameter>にします。詳細は"
"<link linkend=\"cut-get-current-test-context"
"\"><function>cut_get_current_test_context()</function></link>を見てください。"

#: xml/cutter.xml:400(term)
msgid "<parameter>test_context</parameter> :"
msgstr ""

#: xml/cutter.xml:401(simpara)
msgid ""
"the <link linkend=\"CutTestContext\"><type>CutTestContext</type></link> to "
"be the current test context."
msgstr ""
"現在のテストコンテキストになる<link linkend=\"CutTestContext"
"\"><type>CutTestContext</type></link>。"

#: xml/cutter.xml:406(title)
msgid "cut_set_message ()"
msgstr ""

#: xml/cutter.xml:407(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_set_message                     (const <link linkend=\"char\">char</link> *format,\n"
"                                                         ...);"
msgstr ""

#: xml/cutter.xml:409(para) xml/cutter.xml:424(para)
msgid "Sets a message to be used by the next assertion."
msgstr "次の検証で使われるメッセージです。"

#: xml/cutter.xml:421(title)
msgid "cut_set_message_va_list ()"
msgstr ""

#: xml/cutter.xml:422(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_set_message_va_list             (const <link linkend=\"char\">char</link> *format,\n"
"                                                         <link linkend=\"va-list\">va_list</link> args);"
msgstr ""

#: xml/cutter.xml:431(term) xml/gcut-dynamic-data.xml:145(term)
#: xml/gcut-egg.xml:267(term) xml/gcut-test-utils.xml:268(term)
msgid "<parameter>args</parameter> :"
msgstr ""

#: xml/cutter.xml:436(title)
msgid "cut_keep_message ()"
msgstr ""

#: xml/cutter.xml:437(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_keep_message                    (void);"
msgstr ""

#: xml/cutter.xml:438(para)
msgid ""
"Keeps the current message set by <link linkend=\"cut-set-message"
"\"><function>cut_set_message()</function></link> or <link linkend=\"cut-set-"
"message-va-list\"><function>cut_set_message_va_list()</function></link> "
"after the next assertion."
msgstr ""
"<link linkend=\"cut-set-message\"><function>cut_set_message()</function></"
"link>または<link linkend=\"cut-set-message-va-list"
"\"><function>cut_set_message_va_list()</function></link>で設定した現在のメッ"
"セージを次の検証の後でも維持します。"

#: xml/cutter.xml:449(title) xml/gcutter.xml:87(title)
#: xml/gdkcutter-pixbuf.xml:89(title) xml/soupcut-client.xml:202(title)
#: xml/soupcut-server.xml:99(title) xml/soupcutter.xml:89(title)
msgid "See Also"
msgstr "参考"

#: xml/gbsearcharray.xml:7(refentrytitle) xml/gbsearcharray.xml:13(refname)
msgid "gbsearcharray"
msgstr ""

#: xml/gcut-assertions-helper.xml:7(refentrytitle)
#: xml/gcut-assertions-helper.xml:13(refname)
msgid "gcut-assertions-helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:21(link)
#: xml/gcut-assertions-helper.xml:22(link)
#: xml/gcut-assertions-helper.xml:50(link)
#: xml/gcut-assertions-helper.xml:56(link)
#: xml/gcut-assertions-helper.xml:94(link)
#: xml/gcut-assertions-helper.xml:100(link) xml/gcut-assertions.xml:22(link)
#: xml/gcut-assertions.xml:23(link) xml/gcut-assertions.xml:25(link)
#: xml/gcut-assertions.xml:26(link) xml/gcut-assertions.xml:62(link)
#: xml/gcut-assertions.xml:66(link) xml/gcut-assertions.xml:94(link)
#: xml/gcut-assertions.xml:98(link) xml/gcut-data-helper.xml:30(link)
#: xml/gcut-data.xml:31(link) xml/gcut-dynamic-data.xml:42(link)
#: xml/gcut-enum.xml:25(link) xml/gcut-enum.xml:27(link)
#: xml/gcut-enum.xml:30(link) xml/gcut-enum.xml:32(link)
#: xml/gcut-enum.xml:35(link) xml/gcut-key-file.xml:24(link)
#: xml/gcut-key-file.xml:29(link) xml/gcut-list.xml:38(link)
#: xml/gcut-list.xml:40(link) xml/gcut-types.xml:25(link)
#: xml/gcut-value-equal.xml:24(link) xml/gcut-value-equal.xml:25(link)
msgid "GType"
msgstr ""

#: xml/gcut-assertions-helper.xml:23(link)
#: xml/gcut-assertions-helper.xml:24(link)
#: xml/gcut-assertions-helper.xml:27(link)
#: xml/gcut-assertions-helper.xml:28(link)
#: xml/gcut-assertions-helper.xml:34(link)
#: xml/gcut-assertions-helper.xml:35(link)
#: xml/gcut-assertions-helper.xml:36(link)
#: xml/gcut-assertions-helper.xml:39(link)
#: xml/gcut-assertions-helper.xml:40(link)
#: xml/gcut-assertions-helper.xml:43(link)
#: xml/gcut-assertions-helper.xml:44(link)
#: xml/gcut-assertions-helper.xml:48(link)
#: xml/gcut-assertions-helper.xml:49(link)
#: xml/gcut-assertions-helper.xml:53(link)
#: xml/gcut-assertions-helper.xml:54(link)
#: xml/gcut-assertions-helper.xml:55(link)
#: xml/gcut-assertions-helper.xml:59(link)
#: xml/gcut-assertions-helper.xml:60(link)
#: xml/gcut-assertions-helper.xml:61(link)
#: xml/gcut-assertions-helper.xml:66(link)
#: xml/gcut-assertions-helper.xml:67(link)
#: xml/gcut-assertions-helper.xml:74(link)
#: xml/gcut-assertions-helper.xml:75(link)
#: xml/gcut-assertions-helper.xml:76(link)
#: xml/gcut-assertions-helper.xml:80(link)
#: xml/gcut-assertions-helper.xml:81(link)
#: xml/gcut-assertions-helper.xml:83(link)
#: xml/gcut-assertions-helper.xml:86(link)
#: xml/gcut-assertions-helper.xml:87(link)
#: xml/gcut-assertions-helper.xml:88(link)
#: xml/gcut-assertions-helper.xml:92(link)
#: xml/gcut-assertions-helper.xml:93(link)
#: xml/gcut-assertions-helper.xml:97(link)
#: xml/gcut-assertions-helper.xml:98(link)
#: xml/gcut-assertions-helper.xml:99(link)
#: xml/gcut-assertions-helper.xml:103(link)
#: xml/gcut-assertions-helper.xml:104(link)
#: xml/gcut-assertions-helper.xml:105(link)
#: xml/gcut-assertions-helper.xml:109(link)
#: xml/gcut-assertions-helper.xml:110(link)
#: xml/gcut-assertions-helper.xml:111(link) xml/gcut-assertions.xml:87(link)
#: xml/gcut-assertions.xml:89(link) xml/gcut-data-helper.xml:21(link)
#: xml/gcut-data-helper.xml:22(link) xml/gcut-data-helper.xml:25(link)
#: xml/gcut-data-helper.xml:28(link) xml/gcut-data-helper.xml:31(link)
#: xml/gcut-data-helper.xml:34(link) xml/gcut-data-helper.xml:37(link)
#: xml/gcut-data-helper.xml:40(link) xml/gcut-data-helper.xml:43(link)
#: xml/gcut-data.xml:22(link) xml/gcut-data.xml:23(link)
#: xml/gcut-data.xml:25(link) xml/gcut-data.xml:26(link)
#: xml/gcut-data.xml:28(link) xml/gcut-data.xml:30(link)
#: xml/gcut-data.xml:32(link) xml/gcut-data.xml:34(link)
#: xml/gcut-data.xml:36(link) xml/gcut-data.xml:38(link)
#: xml/gcut-data.xml:40(link) xml/gcut-dynamic-data.xml:26(link)
#: xml/gcut-dynamic-data.xml:28(link) xml/gcut-dynamic-data.xml:30(link)
#: xml/gcut-dynamic-data.xml:33(link) xml/gcut-dynamic-data.xml:34(link)
#: xml/gcut-dynamic-data.xml:37(link) xml/gcut-dynamic-data.xml:40(link)
#: xml/gcut-dynamic-data.xml:43(link) xml/gcut-dynamic-data.xml:46(link)
#: xml/gcut-dynamic-data.xml:49(link) xml/gcut-dynamic-data.xml:52(link)
#: xml/gcut-dynamic-data.xml:55(link) xml/gcut-egg.xml:26(link)
#: xml/gcut-egg.xml:28(link) xml/gcut-egg.xml:31(link)
#: xml/gcut-egg.xml:32(link) xml/gcut-egg.xml:38(link)
#: xml/gcut-egg.xml:40(link) xml/gcut-egg.xml:45(link)
#: xml/gcut-enum.xml:25(link) xml/gcut-enum.xml:28(link)
#: xml/gcut-enum.xml:30(link) xml/gcut-enum.xml:33(link)
#: xml/gcut-error.xml:24(link) xml/gcut-hash-table.xml:25(link)
#: xml/gcut-hash-table.xml:31(link) xml/gcut-io.xml:21(link)
#: xml/gcut-key-file.xml:22(link) xml/gcut-key-file.xml:23(link)
#: xml/gcut-key-file.xml:27(link) xml/gcut-key-file.xml:28(link)
#: xml/gcut-list.xml:25(link) xml/gcut-list.xml:30(link)
#: xml/gcut-list.xml:33(link) xml/gcut-list.xml:36(link)
#: xml/gcut-list.xml:37(link) xml/gcut-list.xml:38(link)
#: xml/gcut-list.xml:40(link) xml/gcut-object.xml:25(link)
#: xml/gcut-object.xml:26(link) xml/gcut-string-io-channel.xml:21(link)
#: xml/gcut-test-utils.xml:27(link) xml/gcut-test-utils.xml:29(link)
#: xml/gcut-test-utils.xml:30(link) xml/gcut-test-utils.xml:33(link)
#: xml/gcut-test-utils.xml:35(link) xml/gcut-test-utils.xml:38(link)
#: xml/gcut-test-utils.xml:41(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:24(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:25(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:26(link)
#: xml/gdkcut-pixbuf.xml:29(link) xml/gdkcut-pixbuf.xml:32(link)
#: xml/soupcut-assertions-helper.xml:22(link)
#: xml/soupcut-assertions-helper.xml:24(link)
#: xml/soupcut-assertions-helper.xml:25(link)
#: xml/soupcut-assertions-helper.xml:27(link)
#: xml/soupcut-assertions-helper.xml:29(link)
#: xml/soupcut-assertions-helper.xml:30(link)
#: xml/soupcut-assertions-helper.xml:33(link)
#: xml/soupcut-assertions-helper.xml:35(link)
#: xml/soupcut-assertions-helper.xml:37(link)
#: xml/soupcut-assertions-helper.xml:38(link)
#: xml/soupcut-assertions-helper.xml:40(link)
#: xml/soupcut-assertions-helper.xml:42(link)
#: xml/soupcut-assertions-helper.xml:43(link)
#: xml/soupcut-assertions.xml:23(link) xml/soupcut-assertions.xml:26(link)
#: xml/soupcut-assertions.xml:29(link) xml/soupcut-assertions.xml:31(link)
#: xml/soupcut-client.xml:24(link) xml/soupcut-client.xml:28(link)
#: xml/soupcut-client.xml:29(link) xml/soupcut-server.xml:23(link)
#: xml/soupcut-server.xml:24(link)
msgid "gchar"
msgstr ""

#: xml/gcut-assertions-helper.xml:25(link)
#: xml/gcut-assertions-helper.xml:26(link) xml/gcut-assertions.xml:28(link)
#: xml/gcut-assertions.xml:29(link) xml/gcut-assertions.xml:31(link)
#: xml/gcut-assertions.xml:32(link) xml/gcut-value-equal.xml:15(type)
#: xml/gcut-value-equal.xml:22(link) xml/gcut-value-equal.xml:23(link)
msgid "GValue"
msgstr ""

#: xml/gcut-assertions-helper.xml:29(link)
#: xml/gcut-assertions-helper.xml:30(link)
#: xml/gcut-assertions-helper.xml:37(link)
#: xml/gcut-assertions-helper.xml:38(link)
#: xml/gcut-assertions-helper.xml:41(link)
#: xml/gcut-assertions-helper.xml:42(link)
#: xml/gcut-assertions-helper.xml:46(link)
#: xml/gcut-assertions-helper.xml:47(link)
#: xml/gcut-assertions-helper.xml:51(link)
#: xml/gcut-assertions-helper.xml:52(link)
#: xml/gcut-assertions-helper.xml:57(link)
#: xml/gcut-assertions-helper.xml:58(link)
#: xml/gcut-assertions-helper.xml:63(link)
#: xml/gcut-assertions-helper.xml:64(link) xml/gcut-assertions.xml:34(link)
#: xml/gcut-assertions.xml:35(link) xml/gcut-assertions.xml:39(link)
#: xml/gcut-assertions.xml:40(link) xml/gcut-assertions.xml:42(link)
#: xml/gcut-assertions.xml:43(link) xml/gcut-assertions.xml:45(link)
#: xml/gcut-assertions.xml:46(link) xml/gcut-assertions.xml:48(link)
#: xml/gcut-assertions.xml:49(link) xml/gcut-assertions.xml:51(link)
#: xml/gcut-assertions.xml:52(link) xml/gcut-assertions.xml:54(link)
#: xml/gcut-assertions.xml:55(link) xml/gcut-assertions.xml:58(link)
#: xml/gcut-assertions.xml:59(link) xml/gcut-assertions.xml:63(link)
#: xml/gcut-assertions.xml:64(link) xml/gcut-assertions.xml:67(link)
#: xml/gcut-assertions.xml:68(link) xml/gcut-list.xml:15(type)
#: xml/gcut-list.xml:22(link) xml/gcut-list.xml:23(link)
#: xml/gcut-list.xml:25(link) xml/gcut-list.xml:28(link)
#: xml/gcut-list.xml:29(link) xml/gcut-list.xml:30(link)
#: xml/gcut-list.xml:31(link) xml/gcut-list.xml:32(link)
#: xml/gcut-list.xml:33(link) xml/gcut-list.xml:34(link)
#: xml/gcut-list.xml:35(link) xml/gcut-list.xml:36(link)
#: xml/gcut-list.xml:37(link) xml/gcut-list.xml:39(link)
#: xml/gcut-list.xml:41(link) xml/gcut-public.xml:25(link)
#: xml/gcut-public.xml:26(link) xml/gcut-test-utils.xml:24(link)
#: xml/gcut-test-utils.xml:27(link) xml/gcut-test-utils.xml:29(link)
#: xml/gcut-test-utils.xml:30(link) xml/gcut-test-utils.xml:33(link)
#: xml/gcut-test-utils.xml:34(link)
msgid "GList"
msgstr ""

#: xml/gcut-assertions-helper.xml:31(link)
#: xml/gcut-assertions-helper.xml:65(link)
#: xml/gcut-assertions-helper.xml:70(link)
#: xml/gcut-assertions-helper.xml:108(link) xml/gcut-assertions.xml:36(link)
#: xml/gcut-assertions.xml:60(link) xml/gcut-assertions.xml:72(link)
#: xml/gcut-assertions.xml:107(link) xml/gcut-hash-table.xml:24(link)
#: xml/gcut-list.xml:24(link) xml/gcut-object.xml:24(link)
#: xml/gcut-value-equal.xml:26(link)
msgid "GEqualFunc"
msgstr ""

#: xml/gcut-assertions-helper.xml:33(link)
#: xml/gcut-assertions-helper.xml:73(link) xml/gcut-assertions.xml:38(link)
#: xml/gcut-assertions.xml:75(link) xml/gcut-egg.xml:80(link)
#: xml/gcut-hash-table.xml:28(link) xml/gcut-inspect.xml:24(link)
#: xml/gcut-inspect.xml:27(link) xml/gcut-inspect.xml:30(link)
#: xml/gcut-inspect.xml:33(link) xml/gcut-inspect.xml:36(link)
#: xml/gcut-inspect.xml:39(link) xml/gcut-inspect.xml:42(link)
#: xml/gcut-inspect.xml:45(link) xml/gcut-list.xml:27(link)
#: xml/gcut-object.xml:28(link) xml/gcut-types.xml:23(link)
msgid "gpointer"
msgstr ""

#: xml/gcut-assertions-helper.xml:68(link)
#: xml/gcut-assertions-helper.xml:69(link)
#: xml/gcut-assertions-helper.xml:78(link)
#: xml/gcut-assertions-helper.xml:79(link) xml/gcut-assertions.xml:70(link)
#: xml/gcut-assertions.xml:71(link) xml/gcut-assertions.xml:77(link)
#: xml/gcut-assertions.xml:78(link) xml/gcut-hash-table.xml:15(type)
#: xml/gcut-hash-table.xml:22(link) xml/gcut-hash-table.xml:23(link)
#: xml/gcut-hash-table.xml:25(link) xml/gcut-hash-table.xml:29(link)
#: xml/gcut-hash-table.xml:30(link) xml/gcut-hash-table.xml:32(link)
#: xml/gcut-hash-table.xml:33(link) xml/gcut-public.xml:28(link)
#: xml/gcut-public.xml:29(link) xml/gcut-test-utils.xml:26(link)
#: xml/gcut-test-utils.xml:35(link) xml/gcut-test-utils.xml:37(link)
#: xml/gcut-test-utils.xml:40(link)
msgid "GHashTable"
msgstr ""

#: xml/gcut-assertions-helper.xml:82(link)
#: xml/gcut-assertions-helper.xml:84(link)
#: xml/gcut-assertions-helper.xml:85(link) xml/gcut-assertions.xml:80(link)
#: xml/gcut-assertions.xml:82(link) xml/gcut-assertions.xml:84(link)
#: xml/gcut-assertions.xml:85(link) xml/gcut-dynamic-data.xml:35(link)
#: xml/gcut-dynamic-data.xml:38(link) xml/gcut-dynamic-data.xml:41(link)
#: xml/gcut-dynamic-data.xml:44(link) xml/gcut-dynamic-data.xml:47(link)
#: xml/gcut-dynamic-data.xml:50(link) xml/gcut-dynamic-data.xml:53(link)
#: xml/gcut-dynamic-data.xml:56(link) xml/gcut-egg.xml:42(link)
#: xml/gcut-egg.xml:47(link) xml/gcut-egg.xml:51(link)
#: xml/gcut-enum.xml:29(link) xml/gcut-enum.xml:34(link)
#: xml/gcut-enum.xml:36(link) xml/gcut-error.xml:15(type)
#: xml/gcut-error.xml:22(link) xml/gcut-error.xml:23(link)
#: xml/gcut-error.xml:24(link) xml/gcut-key-file.xml:25(link)
#: xml/gcut-key-file.xml:30(link) xml/gcut-public.xml:23(link)
#: xml/gcut-public.xml:24(link) xml/gcut-test-utils.xml:23(link)
#: xml/gdkcut-pixbuf.xml:33(link)
msgid "GError"
msgstr ""

#: xml/gcut-assertions-helper.xml:90(link)
#: xml/gcut-assertions-helper.xml:91(link) xml/gcut-assertions.xml:91(link)
#: xml/gcut-assertions.xml:92(link)
msgid "GTimeVal"
msgstr ""

#: xml/gcut-assertions-helper.xml:95(link)
#: xml/gcut-assertions-helper.xml:96(link)
#: xml/gcut-assertions-helper.xml:101(link)
#: xml/gcut-assertions-helper.xml:102(link) xml/gcut-assertions.xml:95(link)
#: xml/gcut-assertions.xml:96(link) xml/gcut-data-helper.xml:24(link)
#: xml/gcut-data-helper.xml:36(link) xml/gcut-data.xml:27(link)
#: xml/gcut-data.xml:35(link) xml/gcut-dynamic-data.xml:36(link)
#: xml/gcut-dynamic-data.xml:48(link) xml/gcut-egg.xml:30(link)
#: xml/gcut-egg.xml:49(link) xml/gcut-egg.xml:53(link)
#: xml/gcut-enum.xml:26(link) xml/gcut-enum.xml:27(link)
#: xml/gcut-key-file.xml:21(link)
msgid "gint"
msgstr ""

#: xml/gcut-assertions-helper.xml:106(link)
#: xml/gcut-assertions-helper.xml:107(link) xml/gcut-assertions.xml:102(link)
#: xml/gcut-assertions.xml:103(link) xml/gcut-assertions.xml:105(link)
#: xml/gcut-assertions.xml:106(link) xml/gcut-dynamic-data.xml:63(link)
#: xml/gcut-egg.xml:68(link) xml/gcut-object.xml:15(type)
#: xml/gcut-object.xml:22(link) xml/gcut-object.xml:23(link)
#: xml/gcut-object.xml:25(link) xml/gcut-object.xml:26(link)
#: xml/gcut-public.xml:21(link) xml/gcut-public.xml:22(link)
#: xml/gcut-test-utils.xml:22(link) xml/soupcut-client.xml:40(link)
msgid "GObject"
msgstr ""

#: xml/gcut-assertions-helper.xml:112(link)
#: xml/gcut-assertions-helper.xml:113(link) xml/gcut-assertions.xml:109(link)
#: xml/gcut-assertions.xml:110(link)
msgid "gint64"
msgstr ""

#: xml/gcut-assertions-helper.xml:116(link)
#: xml/gcut-assertions-helper.xml:117(link) xml/gcut-assertions.xml:112(link)
#: xml/gcut-assertions.xml:113(link)
msgid "guint64"
msgstr ""

#: xml/gcut-assertions-helper.xml:120(link)
#: xml/gcut-assertions-helper.xml:121(link)
#: xml/gcut-assertions-helper.xml:124(link)
#: xml/gcut-assertions-helper.xml:125(link) xml/gcut-assertions.xml:115(link)
#: xml/gcut-assertions.xml:116(link) xml/gcut-assertions.xml:117(link)
#: xml/gcut-assertions.xml:118(link) xml/gcut-egg.xml:48(link)
msgid "GPid"
msgstr ""

#: xml/gcut-assertions-helper.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>       (<placeholder-3/> expected,\n"
"                                                         <placeholder-4/> actual,\n"
"                                                         const <placeholder-5/> *expression_expected,\n"
"                                                         const <placeholder-6/> *expression_actual);\n"
"<placeholder-7/>                <placeholder-8/>      (<placeholder-9/> *expected,\n"
"                                                         <placeholder-10/> *actual,\n"
"                                                         const <placeholder-11/> *expression_expected,\n"
"                                                         const <placeholder-12/> *expression_actual);\n"
"<placeholder-13/>                <placeholder-14/>       (const <placeholder-15/> *expected,\n"
"                                                         const <placeholder-16/> *actual,\n"
"                                                         <placeholder-17/> equal_function,\n"
"                                                         <placeholder-18/> inspect_function,\n"
"                                                         <placeholder-19/> inspect_user_data,\n"
"                                                         const <placeholder-20/> *expression_expected,\n"
"                                                         const <placeholder-21/> *expression_actual,\n"
"                                                         const <placeholder-22/> *expression_equal_function);\n"
"<placeholder-23/>                <placeholder-24/>   (const <placeholder-25/> *expected,\n"
"                                                         const <placeholder-26/> *actual,\n"
"                                                         const <placeholder-27/> *expression_expected,\n"
"                                                         const <placeholder-28/> *expression_actual);\n"
"<placeholder-29/>                <placeholder-30/>  (const <placeholder-31/> *expected,\n"
"                                                         const <placeholder-32/> *actual,\n"
"                                                         const <placeholder-33/> *expression_expected,\n"
"                                                         const <placeholder-34/> *expression_actual);\n"
"<placeholder-35/>                <placeholder-36/>\n"
"                                                        (const <placeholder-37/> *expected,\n"
"                                                         const <placeholder-38/> *actual,\n"
"                                                         const <placeholder-39/> *expression_expected,\n"
"                                                         const <placeholder-40/> *expression_actual);\n"
"<placeholder-41/>                <placeholder-42/>  (<placeholder-43/> type,\n"
"                                                         const <placeholder-44/> *expected,\n"
"                                                         const <placeholder-45/> *actual,\n"
"                                                         const <placeholder-46/> *expression_type,\n"
"                                                         const <placeholder-47/> *expression_expected,\n"
"                                                         const <placeholder-48/> *expression_actual);\n"
"<placeholder-49/>                <placeholder-50/> (<placeholder-51/> type,\n"
"                                                         const <placeholder-52/> *expected,\n"
"                                                         const <placeholder-53/> *actual,\n"
"                                                         const <placeholder-54/> *expression_type,\n"
"                                                         const <placeholder-55/> *expression_expected,\n"
"                                                         const <placeholder-56/> *expression_actual);\n"
"<placeholder-57/>                <placeholder-58/>\n"
"                                                        (const <placeholder-59/> *expected,\n"
"                                                         const <placeholder-60/> *actual,\n"
"                                                         <placeholder-61/> equal_function,\n"
"                                                         const <placeholder-62/> *expression_expected,\n"
"                                                         const <placeholder-63/> *expression_actual);\n"
"<placeholder-64/>                <placeholder-65/> (<placeholder-66/> *expected,\n"
"                                                         <placeholder-67/> *actual,\n"
"                                                         <placeholder-68/> equal_function,\n"
"                                                         <placeholder-69/> key_inspect_function,\n"
"                                                         <placeholder-70/> value_inspect_function,\n"
"                                                         <placeholder-71/> inspect_user_data,\n"
"                                                         const <placeholder-72/> *expression_expected,\n"
"                                                         const <placeholder-73/> *expression_actual,\n"
"                                                         const <placeholder-74/> *expression_equal_function);\n"
"<placeholder-75/>                <placeholder-76/>\n"
"                                                        (<placeholder-77/> *expected,\n"
"                                                         <placeholder-78/> *actual,\n"
"                                                         const <placeholder-79/> *expression_expected,\n"
"                                                         const <placeholder-80/> *expression_actual);\n"
"<placeholder-81/>                <placeholder-82/>            (<placeholder-83/> *error,\n"
"                                                         const <placeholder-84/> *expression_error);\n"
"<placeholder-85/>                <placeholder-86/>      (const <placeholder-87/> *expected,\n"
"                                                         const <placeholder-88/> *actual,\n"
"                                                         const <placeholder-89/> *expression_expected,\n"
"                                                         const <placeholder-90/> *expression_actual);\n"
"<placeholder-91/>                <placeholder-92/>      (const <placeholder-93/> *path,\n"
"                                                         ...);\n"
"<placeholder-94/>                <placeholder-95/>   (<placeholder-96/> *expected,\n"
"                                                         <placeholder-97/> *actual,\n"
"                                                         const <placeholder-98/> *expression_expected,\n"
"                                                         const <placeholder-99/> *actual_expected);\n"
"<placeholder-100/>                <placeholder-101/>       (<placeholder-102/> enum_type,\n"
"                                                         <placeholder-103/> expected,\n"
"                                                         <placeholder-104/> actual,\n"
"                                                         const <placeholder-105/> *expression_enum_type,\n"
"                                                         const <placeholder-106/> *expression_expected,\n"
"                                                         const <placeholder-107/> *expression_actual);\n"
"<placeholder-108/>                <placeholder-109/>      (<placeholder-110/> flags_type,\n"
"                                                         <placeholder-111/> expected,\n"
"                                                         <placeholder-112/> actual,\n"
"                                                         const <placeholder-113/> *expression_flags_type,\n"
"                                                         const <placeholder-114/> *expression_expected,\n"
"                                                         const <placeholder-115/> *expression_actual);\n"
"<placeholder-116/>                <placeholder-117/>     (<placeholder-118/> *expected,\n"
"                                                         <placeholder-119/> *actual,\n"
"                                                         <placeholder-120/> equal_function,\n"
"                                                         const <placeholder-121/> *expression_expected,\n"
"                                                         const <placeholder-122/> *expression_actual,\n"
"                                                         const <placeholder-123/> *expression_equal_function);\n"
"<placeholder-124/>                <placeholder-125/>      (<placeholder-126/> expected,\n"
"                                                         <placeholder-127/> actual,\n"
"                                                         const <placeholder-128/> *expression_expected,\n"
"                                                         const <placeholder-129/> *expression_actual);\n"
"<placeholder-130/>                <placeholder-131/>     (<placeholder-132/> expected,\n"
"                                                         <placeholder-133/> actual,\n"
"                                                         const <placeholder-134/> *expression_expected,\n"
"                                                         const <placeholder-135/> *expression_actual);\n"
"<placeholder-136/>                <placeholder-137/>        (<placeholder-138/> expected,\n"
"                                                         <placeholder-139/> actual,\n"
"                                                         const <placeholder-140/> *expression_expected,\n"
"                                                         const <placeholder-141/> *expression_actual);\n"
"<placeholder-142/>                <placeholder-143/>    (<placeholder-144/> expected,\n"
"                                                         <placeholder-145/> actual,\n"
"                                                         const <placeholder-146/> *expression_expected,\n"
"                                                         const <placeholder-147/> *expression_actual);\n"
msgstr ""

#: xml/gcut-assertions-helper.xml:148(title)
msgid "gcut_assert_equal_type_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:149(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_type_helper       (<link linkend=\"GType\">GType</link> expected,\n"
"                                                         <link linkend=\"GType\">GType</link> actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:161(term)
#: xml/gcut-assertions-helper.xml:182(term)
#: xml/gcut-assertions-helper.xml:216(term)
#: xml/gcut-assertions-helper.xml:240(term)
#: xml/gcut-assertions-helper.xml:261(term)
#: xml/gcut-assertions-helper.xml:283(term)
#: xml/gcut-assertions-helper.xml:312(term)
#: xml/gcut-assertions-helper.xml:341(term)
#: xml/gcut-assertions-helper.xml:367(term)
#: xml/gcut-assertions-helper.xml:405(term)
#: xml/gcut-assertions-helper.xml:430(term)
#: xml/gcut-assertions-helper.xml:464(term)
#: xml/gcut-assertions-helper.xml:498(term)
#: xml/gcut-assertions-helper.xml:527(term)
#: xml/gcut-assertions-helper.xml:556(term)
#: xml/gcut-assertions-helper.xml:582(term)
#: xml/gcut-assertions-helper.xml:606(term)
#: xml/gcut-assertions-helper.xml:627(term)
#: xml/gcut-assertions-helper.xml:648(term)
#: xml/gcut-assertions-helper.xml:669(term)
#: xml/gdkcut-pixbuf-assertions-helper.xml:65(term)
#: xml/soupcut-assertions-helper.xml:78(term)
#: xml/soupcut-assertions-helper.xml:100(term)
#: xml/soupcut-assertions-helper.xml:136(term)
msgid "<parameter>expression_expected</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:164(term)
#: xml/gcut-assertions-helper.xml:185(term)
#: xml/gcut-assertions-helper.xml:219(term)
#: xml/gcut-assertions-helper.xml:243(term)
#: xml/gcut-assertions-helper.xml:264(term)
#: xml/gcut-assertions-helper.xml:286(term)
#: xml/gcut-assertions-helper.xml:315(term)
#: xml/gcut-assertions-helper.xml:344(term)
#: xml/gcut-assertions-helper.xml:370(term)
#: xml/gcut-assertions-helper.xml:408(term)
#: xml/gcut-assertions-helper.xml:433(term)
#: xml/gcut-assertions-helper.xml:467(term)
#: xml/gcut-assertions-helper.xml:530(term)
#: xml/gcut-assertions-helper.xml:559(term)
#: xml/gcut-assertions-helper.xml:585(term)
#: xml/gcut-assertions-helper.xml:609(term)
#: xml/gcut-assertions-helper.xml:630(term)
#: xml/gcut-assertions-helper.xml:651(term)
#: xml/gcut-assertions-helper.xml:672(term)
#: xml/gdkcut-pixbuf-assertions-helper.xml:68(term)
msgid "<parameter>expression_actual</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:169(title)
msgid "gcut_assert_equal_value_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:170(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_value_helper      (<link linkend=\"GValue\">GValue</link> *expected,\n"
"                                                         <link linkend=\"GValue\">GValue</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:190(title)
msgid "gcut_assert_equal_list_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:191(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_helper       (const <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         const <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_function,\n"
"                                                         <link linkend=\"GCutInspectFunction\">GCutInspectFunction</link> inspect_function,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> inspect_user_data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_equal_function);"
msgstr ""

#: xml/gcut-assertions-helper.xml:207(term)
#: xml/gcut-assertions-helper.xml:364(term)
#: xml/gcut-assertions-helper.xml:393(term)
#: xml/gcut-assertions-helper.xml:579(term) xml/gcut-assertions.xml:243(term)
#: xml/gcut-assertions.xml:403(term) xml/gcut-assertions.xml:483(term)
#: xml/gcut-assertions.xml:769(term)
msgid "<parameter>equal_function</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:210(term) xml/gcut-assertions.xml:247(term)
msgid "<parameter>inspect_function</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:213(term)
#: xml/gcut-assertions-helper.xml:402(term) xml/gcut-assertions.xml:251(term)
#: xml/gcut-assertions.xml:495(term)
msgid "<parameter>inspect_user_data</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:222(term)
#: xml/gcut-assertions-helper.xml:411(term)
#: xml/gcut-assertions-helper.xml:588(term)
msgid "<parameter>expression_equal_function</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:227(title)
msgid "gcut_assert_equal_list_int_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:228(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_int_helper   (const <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         const <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:248(title)
msgid "gcut_assert_equal_list_uint_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:249(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_uint_helper  (const <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         const <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:269(title)
msgid "gcut_assert_equal_list_string_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:270(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_string_helper\n"
"                                                        (const <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         const <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:291(title)
msgid "gcut_assert_equal_list_enum_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:292(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_enum_helper  (<link linkend=\"GType\">GType</link> type,\n"
"                                                         const <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         const <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:300(term)
#: xml/gcut-assertions-helper.xml:329(term) xml/gcut-assertions.xml:424(term)
#: xml/gcut-assertions.xml:450(term) xml/gcut-list.xml:267(term)
#: xml/gcut-list.xml:287(term) xml/gcut-list.xml:410(term)
#: xml/gcut-list.xml:427(term)
msgid "<parameter>type</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:309(term)
#: xml/gcut-assertions-helper.xml:338(term)
msgid "<parameter>expression_type</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:320(title)
msgid "gcut_assert_equal_list_flags_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:321(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_flags_helper (<link linkend=\"GType\">GType</link> type,\n"
"                                                         const <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         const <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:349(title)
msgid "gcut_assert_equal_list_object_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:350(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_object_helper\n"
"                                                        (const <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         const <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_function,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:375(title)
msgid "gcut_assert_equal_hash_table_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:376(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_hash_table_helper (<link linkend=\"GHashTable\">GHashTable</link> *expected,\n"
"                                                         <link linkend=\"GHashTable\">GHashTable</link> *actual,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_function,\n"
"                                                         <link linkend=\"GCutInspectFunction\">GCutInspectFunction</link> key_inspect_function,\n"
"                                                         <link linkend=\"GCutInspectFunction\">GCutInspectFunction</link> value_inspect_function,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> inspect_user_data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_equal_function);"
msgstr ""

#: xml/gcut-assertions-helper.xml:396(term) xml/gcut-assertions.xml:487(term)
msgid "<parameter>key_inspect_function</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:399(term) xml/gcut-assertions.xml:491(term)
msgid "<parameter>value_inspect_function</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:416(title)
msgid "gcut_assert_equal_hash_table_string_string_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:417(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_hash_table_string_string_helper\n"
"                                                        (<link linkend=\"GHashTable\">GHashTable</link> *expected,\n"
"                                                         <link linkend=\"GHashTable\">GHashTable</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:438(title)
msgid "gcut_assert_error_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:439(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_error_helper            (<link linkend=\"GError\">GError</link> *error,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_error);"
msgstr ""

#: xml/gcut-assertions-helper.xml:446(term)
msgid "<parameter>expression_error</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:451(title)
msgid "gcut_assert_equal_error_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:452(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_error_helper      (const <link linkend=\"GError\">GError</link> *expected,\n"
"                                                         const <link linkend=\"GError\">GError</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:472(title)
msgid "gcut_assert_remove_path_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:473(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_remove_path_helper      (const <link linkend=\"gchar\">gchar</link> *path,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:485(title)
msgid "gcut_assert_equal_time_val_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:486(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_time_val_helper   (<link linkend=\"GTimeVal\">GTimeVal</link> *expected,\n"
"                                                         <link linkend=\"GTimeVal\">GTimeVal</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *actual_expected);"
msgstr ""

#: xml/gcut-assertions-helper.xml:501(term)
msgid "<parameter>actual_expected</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:506(title)
msgid "gcut_assert_equal_enum_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:507(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_enum_helper       (<link linkend=\"GType\">GType</link> enum_type,\n"
"                                                         <link linkend=\"gint\">gint</link> expected,\n"
"                                                         <link linkend=\"gint\">gint</link> actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_enum_type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:515(term) xml/gcut-assertions.xml:648(term)
#: xml/gcut-enum.xml:112(term) xml/gcut-enum.xml:134(term)
#: xml/gcut-key-file.xml:68(term)
msgid "<parameter>enum_type</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:524(term)
msgid "<parameter>expression_enum_type</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:535(title)
msgid "gcut_assert_equal_flags_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:536(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_flags_helper      (<link linkend=\"GType\">GType</link> flags_type,\n"
"                                                         <link linkend=\"gint\">gint</link> expected,\n"
"                                                         <link linkend=\"gint\">gint</link> actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_flags_type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:544(term) xml/gcut-assertions.xml:687(term)
#: xml/gcut-enum.xml:156(term) xml/gcut-enum.xml:179(term)
#: xml/gcut-enum.xml:201(term) xml/gcut-key-file.xml:95(term)
msgid "<parameter>flags_type</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:553(term)
msgid "<parameter>expression_flags_type</parameter> :"
msgstr ""

#: xml/gcut-assertions-helper.xml:564(title)
msgid "gcut_assert_equal_object_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:565(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_object_helper     (<link linkend=\"GObject\">GObject</link> *expected,\n"
"                                                         <link linkend=\"GObject\">GObject</link> *actual,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_function,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_equal_function);"
msgstr ""

#: xml/gcut-assertions-helper.xml:593(title)
msgid "gcut_assert_equal_int64_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:594(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_int64_helper      (<link linkend=\"gint64\">gint64</link> expected,\n"
"                                                         <link linkend=\"gint64\">gint64</link> actual,\n"
"                                                         const <link linkend=\"char\">char</link> *expression_expected,\n"
"                                                         const <link linkend=\"char\">char</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:614(title)
msgid "gcut_assert_equal_uint64_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:615(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_uint64_helper     (<link linkend=\"guint64\">guint64</link> expected,\n"
"                                                         <link linkend=\"guint64\">guint64</link> actual,\n"
"                                                         const <link linkend=\"char\">char</link> *expression_expected,\n"
"                                                         const <link linkend=\"char\">char</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:635(title)
msgid "gcut_assert_equal_pid_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:636(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_pid_helper        (<link linkend=\"GPid\">GPid</link> expected,\n"
"                                                         <link linkend=\"GPid\">GPid</link> actual,\n"
"                                                         const <link linkend=\"char\">char</link> *expression_expected,\n"
"                                                         const <link linkend=\"char\">char</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions-helper.xml:656(title)
msgid "gcut_assert_not_equal_pid_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:657(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_not_equal_pid_helper    (<link linkend=\"GPid\">GPid</link> expected,\n"
"                                                         <link linkend=\"GPid\">GPid</link> actual,\n"
"                                                         const <link linkend=\"char\">char</link> *expression_expected,\n"
"                                                         const <link linkend=\"char\">char</link> *expression_actual);"
msgstr ""

#: xml/gcut-assertions.xml:7(refentrytitle)
#: xml/gcut-assertions.xml:13(refname) xml/gcutter.xml:89(link)
msgid "Assertions with GLib support"
msgstr "GLibサポート付きの検証"

#: xml/gcut-assertions.xml:14(refpurpose)
msgid "Checks that your program works as you expect with GLib support."
msgstr ""
"GLibサポート付きであなたのプログラムが期待通りに動作しているかを検証します。"

#: xml/gcut-assertions.xml:99(link) xml/gcut-assertions.xml:100(link)
#: xml/gcut-data-helper.xml:27(link) xml/gcut-data-helper.xml:33(link)
#: xml/gcut-data.xml:29(link) xml/gcut-data.xml:33(link)
#: xml/gcut-dynamic-data.xml:39(link) xml/gcut-dynamic-data.xml:45(link)
#: xml/gcut-egg.xml:50(link) xml/gcut-egg.xml:57(link)
#: xml/gcut-egg.xml:61(link) xml/gcut-enum.xml:31(link)
#: xml/gcut-enum.xml:32(link) xml/gcut-enum.xml:35(link)
#: xml/gcut-key-file.xml:26(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:23(link)
#: xml/gdkcut-pixbuf-assertions.xml:24(link) xml/gdkcut-pixbuf.xml:25(link)
#: xml/gdkcut-pixbuf.xml:28(link) xml/gdkcut-pixbuf.xml:31(link)
#: xml/soupcut-client.xml:25(link) xml/soupcut-client.xml:27(link)
#: xml/soupcut-client.xml:31(link)
msgid "guint"
msgstr ""

#: xml/gcut-assertions.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>              (<placeholder-3/> expected,\n"
"                                                         <placeholder-4/> actual,\n"
"                                                         ...);\n"
"<placeholder-5/>                <placeholder-6/>             (<placeholder-7/> expected,\n"
"                                                         <placeholder-8/> actual,\n"
"                                                         ...);\n"
"<placeholder-9/>                <placeholder-10/>             (<placeholder-11/> *expected,\n"
"                                                         <placeholder-12/> *actual,\n"
"                                                         ...);\n"
"<placeholder-13/>                <placeholder-14/>            (<placeholder-15/> *expected,\n"
"                                                         <placeholder-16/> *actual,\n"
"                                                         ...);\n"
"<placeholder-17/>                <placeholder-18/>              (<placeholder-19/> *expected,\n"
"                                                         <placeholder-20/> *actual,\n"
"                                                         <placeholder-21/> equal_function,\n"
"                                                         <placeholder-22/> inspect_function,\n"
"                                                         <placeholder-23/> inspect_user_data);\n"
"<placeholder-24/>                <placeholder-25/>          (<placeholder-26/> *expected,\n"
"                                                         <placeholder-27/> *actual,\n"
"                                                         ...);\n"
"<placeholder-28/>                <placeholder-29/>         (<placeholder-30/> *expected,\n"
"                                                         <placeholder-31/> *actual,\n"
"                                                         ...);\n"
"<placeholder-32/>                <placeholder-33/>         (<placeholder-34/> *expected,\n"
"                                                         <placeholder-35/> *actual,\n"
"                                                         ...);\n"
"<placeholder-36/>                <placeholder-37/>       (<placeholder-38/> *expected,\n"
"                                                         <placeholder-39/> *actual,\n"
"                                                         ...);\n"
"<placeholder-40/>                <placeholder-41/>      (<placeholder-42/> *expected,\n"
"                                                         <placeholder-43/> *actual,\n"
"                                                         ...);\n"
"<placeholder-44/>                <placeholder-45/>       (<placeholder-46/> *expected,\n"
"                                                         <placeholder-47/> *actual,\n"
"                                                         ...);\n"
"<placeholder-48/>                <placeholder-49/>\n"
"                                                        (<placeholder-50/> *expected,\n"
"                                                         <placeholder-51/> *actual,\n"
"                                                         <placeholder-52/> equal_function,\n"
"                                                         ...);\n"
"<placeholder-53/>                <placeholder-54/>         (<placeholder-55/> type,\n"
"                                                         <placeholder-56/> *expected,\n"
"                                                         <placeholder-57/> *actual,\n"
"                                                         ...);\n"
"<placeholder-58/>                <placeholder-59/>        (<placeholder-60/> type,\n"
"                                                         <placeholder-61/> *expected,\n"
"                                                         <placeholder-62/> *actual,\n"
"                                                         ...);\n"
"<placeholder-63/>                <placeholder-64/>        (<placeholder-65/> *expected,\n"
"                                                         <placeholder-66/> *actual,\n"
"                                                         <placeholder-67/> equal_function,\n"
"                                                         <placeholder-68/> key_inspect_function,\n"
"                                                         <placeholder-69/> value_inspect_function,\n"
"                                                         <placeholder-70/> inspect_user_data);\n"
"<placeholder-71/>                <placeholder-72/>\n"
"                                                        (<placeholder-73/> *expected,\n"
"                                                         <placeholder-74/> *actual,\n"
"                                                         ...);\n"
"<placeholder-75/>                <placeholder-76/>                   (<placeholder-77/> *error,\n"
"                                                         ...);\n"
"<placeholder-78/>                <placeholder-79/>                  (<placeholder-80/> *error,\n"
"                                                         ...);\n"
"<placeholder-81/>                <placeholder-82/>             (<placeholder-83/> *expected,\n"
"                                                         <placeholder-84/> *actual,\n"
"                                                         ...);\n"
"<placeholder-85/>                <placeholder-86/>             (const <placeholder-87/> *path,\n"
"                                                         ...);\n"
"<placeholder-88/>                <placeholder-89/>              (const <placeholder-90/> *path,\n"
"                                                         ...);\n"
"<placeholder-91/>                <placeholder-92/>          (<placeholder-93/> expected,\n"
"                                                         <placeholder-94/> actual,\n"
"                                                         ...);\n"
"<placeholder-95/>                <placeholder-96/>              (<placeholder-97/> enum_type,\n"
"                                                         <placeholder-98/> expected,\n"
"                                                         <placeholder-99/> actual,\n"
"                                                         ...);\n"
"<placeholder-100/>                <placeholder-101/>             (<placeholder-102/> flags_type,\n"
"                                                         <placeholder-103/> expected,\n"
"                                                         <placeholder-104/> actual,\n"
"                                                         ...);\n"
"<placeholder-105/>                <placeholder-106/>            (<placeholder-107/> *expected,\n"
"                                                         <placeholder-108/> *actual,\n"
"                                                         ...);\n"
"<placeholder-109/>                <placeholder-110/>     (<placeholder-111/> *expected,\n"
"                                                         <placeholder-112/> *actual,\n"
"                                                         <placeholder-113/> equal_function,\n"
"                                                         ...);\n"
"<placeholder-114/>                <placeholder-115/>             (<placeholder-116/> expected,\n"
"                                                         <placeholder-117/> actual,\n"
"                                                         ...);\n"
"<placeholder-118/>                <placeholder-119/>            (<placeholder-120/> expected,\n"
"                                                         <placeholder-121/> actual,\n"
"                                                         ...);\n"
"<placeholder-122/>                <placeholder-123/>               (<placeholder-124/> expected,\n"
"                                                         <placeholder-125/> actual);\n"
"<placeholder-126/>                <placeholder-127/>           (<placeholder-128/> expected,\n"
"                                                         <placeholder-129/> actual);\n"
msgstr ""

#: xml/gcut-assertions.xml:141(title)
msgid "gcut_assert_equal_type ()"
msgstr ""

#: xml/gcut-assertions.xml:142(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_type              (<link linkend=\"GType\">GType</link> expected,\n"
"                                                         <link linkend=\"GType\">GType</link> actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:150(simpara) xml/gcut-assertions.xml:172(simpara)
msgid "an expected GType."
msgstr "期待するGType。"

#: xml/gcut-assertions.xml:153(simpara) xml/gcut-assertions.xml:175(simpara)
msgid "an actual GType."
msgstr "実際のGType。"

#: xml/gcut-assertions.xml:162(title)
msgid "cut_assert_equal_g_type ()"
msgstr ""

#: xml/gcut-assertions.xml:163(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_g_type             (<link linkend=\"GType\">GType</link> expected,\n"
"                                                         <link linkend=\"GType\">GType</link> actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:166(para)
msgid ""
"<literal>cut_assert_equal_g_type</literal> has been deprecated since version "
"1.0.3 and should not be used in newly-written code. Use <link linkend=\"gcut-"
"assert-equal-type\"><function>gcut_assert_equal_type()</function></link> "
"instead."
msgstr ""
"<literal>cut_assert_equal_g_type</literal>はバージョン1.0.3から非推奨になりま"
"した。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"assert-equal-type\"><function>gcut_assert_equal_type()</function></link>を"
"使ってください。"

#: xml/gcut-assertions.xml:184(title)
msgid "gcut_assert_equal_value ()"
msgstr ""

#: xml/gcut-assertions.xml:185(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_value             (<link linkend=\"GValue\">GValue</link> *expected,\n"
"                                                         <link linkend=\"GValue\">GValue</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:193(simpara) xml/gcut-assertions.xml:215(simpara)
msgid "an expected GValue *."
msgstr "期待するGValue *。"

#: xml/gcut-assertions.xml:196(simpara) xml/gcut-assertions.xml:218(simpara)
msgid "an actual GValue *."
msgstr "実際のGValue *。"

#: xml/gcut-assertions.xml:205(title)
msgid "cut_assert_equal_g_value ()"
msgstr ""

#: xml/gcut-assertions.xml:206(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_g_value            (<link linkend=\"GValue\">GValue</link> *expected,\n"
"                                                         <link linkend=\"GValue\">GValue</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:209(para)
msgid ""
"<literal>cut_assert_equal_g_value</literal> has been deprecated since "
"version 1.0.3 and should not be used in newly-written code. Use <link "
"linkend=\"gcut-assert-equal-value\"><function>gcut_assert_equal_value()</"
"function></link> instead."
msgstr ""
"<literal>cut_assert_equal_g_value</literal>はバージョン1.0.3から非推奨になり"
"ました。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"assert-equal-value\"><function>gcut_assert_equal_value()</function></link>を"
"使ってください。"

#: xml/gcut-assertions.xml:227(title)
msgid "gcut_assert_equal_list ()"
msgstr ""

#: xml/gcut-assertions.xml:228(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list              (<link linkend=\"GList\">GList</link> *expected,\n"
"                                                         <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_function,\n"
"                                                         <link linkend=\"GCutInspectFunction\">GCutInspectFunction</link> inspect_function,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> inspect_user_data);"
msgstr ""

#: xml/gcut-assertions.xml:233(para) xml/gcut-assertions.xml:740(para)
msgid ""
"Passes if <parameter>equal_function</parameter>(<parameter>expected</"
"parameter>, <parameter>actual</parameter>) == <link linkend=\"CUT-TRUE--CAPS"
"\"><literal>CUT_TRUE</literal></link>."
msgstr ""
"<parameter>equal_function</parameter>(<parameter>expected</parameter>, "
"<parameter>actual</parameter>) == <link linkend=\"CUT-TRUE--CAPS"
"\"><literal>CUT_TRUE</literal></link>のときパスします。"

#: xml/gcut-assertions.xml:238(simpara)
msgid "an expected list."
msgstr "期待するリスト。"

#: xml/gcut-assertions.xml:241(simpara)
msgid "an actual list."
msgstr "実際のリスト。"

#: xml/gcut-assertions.xml:244(simpara)
msgid ""
"a function that compares each elements of <parameter>expected</parameter> "
"and <parameter>actual</parameter> list."
msgstr ""
"<parameter>expected</parameter>リストと<parameter>actual</parameter>リストの"
"各要素を比較する関数。"

#: xml/gcut-assertions.xml:248(simpara)
msgid ""
"a function that inspected <parameter>expected</parameter> and "
"<parameter>actual</parameter> list."
msgstr ""
"<parameter>expected</parameter>リストと<parameter>actual</parameter>リスとの"
"詳細を示す関数。"

#: xml/gcut-assertions.xml:252(simpara) xml/gcut-assertions.xml:496(simpara)
msgid "a data to be passed to <parameter>inspect_function</parameter>."
msgstr "<parameter>inspect_function</parameter>に渡されるデータ。"

#: xml/gcut-assertions.xml:256(title)
msgid "gcut_assert_equal_list_int ()"
msgstr ""

#: xml/gcut-assertions.xml:257(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_int          (<link linkend=\"GList\">GList</link> *expected,\n"
"                                                         <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:265(simpara) xml/gcut-assertions.xml:287(simpara)
msgid "an expected GList * of integer."
msgstr "期待する整数のリスト。（GList *）"

#: xml/gcut-assertions.xml:268(simpara) xml/gcut-assertions.xml:290(simpara)
msgid "an actual GList * of integer."
msgstr "実際の整数のリスト。（GList *）"

#: xml/gcut-assertions.xml:277(title)
msgid "cut_assert_equal_g_list_int ()"
msgstr ""

#: xml/gcut-assertions.xml:278(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_g_list_int         (<link linkend=\"GList\">GList</link> *expected,\n"
"                                                         <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:281(para)
msgid ""
"<literal>cut_assert_equal_g_list_int</literal> has been deprecated since "
"version 1.0.3 and should not be used in newly-written code. Use <link "
"linkend=\"gcut-assert-equal-list-int\"><function>gcut_assert_equal_list_int()"
"</function></link> instead."
msgstr ""
"<literal>cut_assert_equal_g_string_list_int</literal>はバージョン1.0.3から非"
"推奨になりました。新しく書くコードでは使わないでください。代わりに<link "
"linkend=\"gcut-assert-equal-list-int\"><function>gcut_assert_equal_list_int()"
"</function></link>を使ってください。"

#: xml/gcut-assertions.xml:299(title)
msgid "gcut_assert_equal_list_uint ()"
msgstr ""

#: xml/gcut-assertions.xml:300(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_uint         (<link linkend=\"GList\">GList</link> *expected,\n"
"                                                         <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:308(simpara)
msgid "an expected GList * of unsigned integer."
msgstr "期待する符号無し整数のリスト。（GList *）"

#: xml/gcut-assertions.xml:311(simpara)
msgid "an actual GList * of unsigned integer."
msgstr "実際の符号無し整数のリスト。（GList *）"

#: xml/gcut-assertions.xml:320(title)
msgid "gcut_assert_equal_list_string ()"
msgstr ""

#: xml/gcut-assertions.xml:321(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_string       (<link linkend=\"GList\">GList</link> *expected,\n"
"                                                         <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:329(simpara) xml/gcut-assertions.xml:351(simpara)
msgid "an expected GList * of string."
msgstr "期待する文字列のリスト。（GList *）"

#: xml/gcut-assertions.xml:332(simpara) xml/gcut-assertions.xml:354(simpara)
msgid "an actual GList * of string."
msgstr "実際の文字列のリスト。（GList *）"

#: xml/gcut-assertions.xml:341(title)
msgid "cut_assert_equal_g_list_string ()"
msgstr ""

#: xml/gcut-assertions.xml:342(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_equal_g_list_string      (<link linkend=\"GList\">GList</link> *expected,\n"
"                                                         <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:345(para)
msgid ""
"<literal>cut_assert_equal_g_list_string</literal> has been deprecated since "
"version 1.0.3 and should not be used in newly-written code. Use <link "
"linkend=\"gcut-assert-equal-list-string"
"\"><function>gcut_assert_equal_list_string()</function></link> instead."
msgstr ""
"<literal>cut_assert_equal_g_list_string</literal>はバージョン1.0.3から非推奨"
"になりました。新しく書くコードでは使わないでください。代わりに<link linkend="
"\"gcut-assert-equal-list-string\"><function>gcut_assert_equal_list_string()</"
"function></link>を使ってください。"

#: xml/gcut-assertions.xml:363(title)
msgid "gcut_assert_equal_list_object ()"
msgstr ""

#: xml/gcut-assertions.xml:364(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_object       (<link linkend=\"GList\">GList</link> *expected,\n"
"                                                         <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:367(para)
msgid ""
"Passes if <parameter>expected</parameter> and <parameter>actual</parameter> "
"has same GObject * in same order."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>が同じGObject *"
"を同じ順番で持っているときパスします。"

#: xml/gcut-assertions.xml:373(simpara) xml/gcut-assertions.xml:398(simpara)
msgid "an expected GList * of GObject *."
msgstr "期待するGObject *のリスト。（GList *）"

#: xml/gcut-assertions.xml:376(simpara) xml/gcut-assertions.xml:401(simpara)
msgid "an actual GList * of GObject *."
msgstr "実際のGObject *のリスト。（GList *）"

#: xml/gcut-assertions.xml:385(title)
msgid "gcut_assert_equal_list_object_custom ()"
msgstr ""

#: xml/gcut-assertions.xml:386(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_object_custom\n"
"                                                        (<link linkend=\"GList\">GList</link> *expected,\n"
"                                                         <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_function,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:391(para)
msgid ""
"Passes if <parameter>expected</parameter> and <parameter>actual</parameter> "
"has same GObject * in same order. Each comparison of GObject * uses "
"<parameter>equal_function</parameter>."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>が同じGObject *"
"を同じ順序で持っているときパスします。それぞれのGObjet *の比較には"
"<parameter>equal_function</parameter>を使います。"

#: xml/gcut-assertions.xml:404(simpara)
msgid ""
"a function that compares two GObject *. (<link linkend=\"GEqualFunc"
"\"><type>GEqualFunc</type></link>)"
msgstr ""
"二つのGObject *を比較する関数。(<link linkend=\"GEqualFunc"
"\"><type>GEqualFunc</type></link>)"

#: xml/gcut-assertions.xml:414(title)
msgid "gcut_assert_equal_list_enum ()"
msgstr ""

#: xml/gcut-assertions.xml:415(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_enum         (<link linkend=\"GType\">GType</link> type,\n"
"                                                         <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:419(para)
msgid ""
"Passes if <parameter>expected</parameter> and <parameter>actual</parameter> "
"has same enum values in same order."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>が同じ列挙値を"
"同じ順序で持っているときパスします。"

#: xml/gcut-assertions.xml:425(simpara) xml/gcut-assertions.xml:649(simpara)
msgid "a GEnum type."
msgstr "GEnumの型。"

#: xml/gcut-assertions.xml:428(simpara)
msgid "an expected GList * of enum value."
msgstr "期待する列挙値のリスト。（GList *）"

#: xml/gcut-assertions.xml:431(simpara)
msgid "an actual GList * of enum value."
msgstr "実際の列挙値のリスト。（GList *）"

#: xml/gcut-assertions.xml:440(title)
msgid "gcut_assert_equal_list_flags ()"
msgstr ""

#: xml/gcut-assertions.xml:441(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_flags        (<link linkend=\"GType\">GType</link> type,\n"
"                                                         <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:445(para)
msgid ""
"Passes if <parameter>expected</parameter> and <parameter>actual</parameter> "
"has same flags values in same order."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>が同じフラグ値"
"を同じ順序で持っているときパスします。"

#: xml/gcut-assertions.xml:451(simpara) xml/gcut-assertions.xml:688(simpara)
msgid "a GFlags type."
msgstr "GFlagsの型。"

#: xml/gcut-assertions.xml:454(simpara)
msgid "an expected GList * of flags value."
msgstr "期待するフラグ値のリスト。（GList *）"

#: xml/gcut-assertions.xml:457(simpara)
msgid "an actual GList * of flags value."
msgstr "実際のフラグ値のリスト。（GList *）"

#: xml/gcut-assertions.xml:466(title)
msgid "gcut_assert_equal_hash_table ()"
msgstr ""

#: xml/gcut-assertions.xml:467(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_hash_table        (<link linkend=\"GHashTable\">GHashTable</link> *expected,\n"
"                                                         <link linkend=\"GHashTable\">GHashTable</link> *actual,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_function,\n"
"                                                         <link linkend=\"GCutInspectFunction\">GCutInspectFunction</link> key_inspect_function,\n"
"                                                         <link linkend=\"GCutInspectFunction\">GCutInspectFunction</link> value_inspect_function,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> inspect_user_data);"
msgstr ""

#: xml/gcut-assertions.xml:478(simpara) xml/gcut-assertions.xml:510(simpara)
msgid ""
"an expected <link linkend=\"GHashTable\"><type>GHashTable</type></link> of "
"string."
msgstr ""
"期待する文字列の<link linkend=\"GHashTable\"><type>GHashTable</type></link>。"

#: xml/gcut-assertions.xml:481(simpara) xml/gcut-assertions.xml:513(simpara)
msgid ""
"an actual <link linkend=\"GHashTable\"><type>GHashTable</type></link> of "
"string."
msgstr ""
"実際の文字列の<link linkend=\"GHashTable\"><type>GHashTable</type></link>。"

#: xml/gcut-assertions.xml:484(simpara)
msgid ""
"a function that compares each values of <parameter>expected</parameter> and "
"<parameter>actual</parameter> hash table."
msgstr ""
"<parameter>expected</parameter>ハッシュテーブルと<parameter>actual</"
"parameter>ハッシュテーブルのそれぞれの値を比較する関数。"

#: xml/gcut-assertions.xml:488(simpara)
msgid ""
"a function that inspected a key of <parameter>expected</parameter> and "
"<parameter>actual</parameter> hash table."
msgstr ""
"<parameter>expected</parameter>ハッシュテーブルと<parameter>actual</"
"parameter>ハッシュテーブルのそれぞれのキーの詳細を示す関数。"

#: xml/gcut-assertions.xml:492(simpara)
msgid ""
"a function that inspected a value of <parameter>expected</parameter> and "
"<parameter>actual</parameter> hash table."
msgstr ""
"<parameter>expected</parameter>ハッシュテーブルと<parameter>actual</"
"parameter>ハッシュテーブルのそれぞれの値の詳細を示す関数。"

#: xml/gcut-assertions.xml:500(title)
msgid "gcut_assert_equal_hash_table_string_string ()"
msgstr ""

#: xml/gcut-assertions.xml:501(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_hash_table_string_string\n"
"                                                        (<link linkend=\"GHashTable\">GHashTable</link> *expected,\n"
"                                                         <link linkend=\"GHashTable\">GHashTable</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:522(title)
msgid "gcut_assert_error ()"
msgstr ""

#: xml/gcut-assertions.xml:523(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_error                   (<link linkend=\"GError\">GError</link> *error,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:525(para) xml/gcut-assertions.xml:543(para)
msgid ""
"Passes if <parameter>error</parameter> == <link linkend=\"NULL--CAPS"
"\"><literal>NULL</literal></link>."
msgstr ""
"<parameter>error</parameter> == <link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>のときパスします。"

#: xml/gcut-assertions.xml:530(simpara) xml/gcut-assertions.xml:548(simpara)
msgid "a target GError *."
msgstr "検証対象のGError *。"

#: xml/gcut-assertions.xml:539(title)
msgid "cut_assert_g_error ()"
msgstr ""

#: xml/gcut-assertions.xml:540(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_g_error                  (<link linkend=\"GError\">GError</link> *error,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:542(para)
msgid ""
"<literal>cut_assert_g_error</literal> has been deprecated since version "
"1.0.3 and should not be used in newly-written code. Use <link linkend=\"gcut-"
"assert-error\"><function>gcut_assert_error()</function></link> instead."
msgstr ""
"<literal>cut_assert_g_error</literal>はバージョン1.0.3から非推奨になりまし"
"た。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"assert-error\"><function>gcut_assert_error()</function></link>を使ってくださ"
"い。"

#: xml/gcut-assertions.xml:557(title)
msgid "gcut_assert_equal_error ()"
msgstr ""

#: xml/gcut-assertions.xml:558(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_error             (<link linkend=\"GError\">GError</link> *expected,\n"
"                                                         <link linkend=\"GError\">GError</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:566(simpara)
msgid "an expected GError *."
msgstr "期待するGError *。"

#: xml/gcut-assertions.xml:569(simpara)
msgid "an actual GError *."
msgstr "実際のGError *。"

#: xml/gcut-assertions.xml:578(title)
msgid "gcut_assert_remove_path ()"
msgstr ""

#: xml/gcut-assertions.xml:579(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_remove_path             (const <link linkend=\"gchar\">gchar</link> *path,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:581(para) xml/gcut-assertions.xml:597(para)
msgid ""
"Passes if cut_utils_build_path(<parameter>path</parameter>, ...) is removed "
"successfully."
msgstr ""
"cut_utils_build_path(<parameter>path</parameter>, ...)の削除に成功するとパス"
"します。"

#: xml/gcut-assertions.xml:586(simpara) xml/gcut-assertions.xml:602(simpara)
msgid "a first element of the path to the removed path."
msgstr "削除するパスの最初の要素。"

#: xml/gcut-assertions.xml:589(simpara) xml/gcut-assertions.xml:605(simpara)
msgid "remaining elements in path. NULL terminated."
msgstr "パスの残りの要素。NULL終端。"

#: xml/gcut-assertions.xml:593(title)
msgid "cut_assert_remove_path ()"
msgstr ""

#: xml/gcut-assertions.xml:594(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_remove_path              (const <link linkend=\"gchar\">gchar</link> *path,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:596(para)
msgid ""
"<literal>cut_assert_remove_path</literal> has been deprecated since version "
"1.0.3 and should not be used in newly-written code. Use <link linkend=\"gcut-"
"assert-remove-path\"><function>gcut_assert_remove_path()</function></link> "
"instead."
msgstr ""
"<literal>cut_assert_remove_path</literal>はバージョン1.0.3から非推奨になりま"
"した。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"assert-remove-path\"><function>gcut_assert_remove_path()</function></link>を"
"使ってください。"

#: xml/gcut-assertions.xml:609(title)
msgid "gcut_assert_equal_time_val ()"
msgstr ""

#: xml/gcut-assertions.xml:610(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_time_val          (<link linkend=\"GTimeVal\">GTimeVal</link> expected,\n"
"                                                         <link linkend=\"GTimeVal\">GTimeVal</link> actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:618(simpara)
msgid "an expected GTimeVal."
msgstr "期待するGTimeVal。"

#: xml/gcut-assertions.xml:621(simpara)
msgid "an actual GTimeVal."
msgstr "実際のGTimeVal。"

#: xml/gcut-assertions.xml:630(title)
msgid "gcut_assert_equal_enum ()"
msgstr ""

#: xml/gcut-assertions.xml:631(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_enum              (<link linkend=\"GType\">GType</link> enum_type,\n"
"                                                         <link linkend=\"gint\">gint</link> expected,\n"
"                                                         <link linkend=\"gint\">gint</link> actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:640(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_assert_equal_enum(GTK_TYPE_DIRECTION_TYPE,\n"
"                          GTK_DIR_LEFT, GTK_DIR_LEFT); -&gt; Pass\n"
"gcut_assert_equal_enum(GTK_TYPE_DIRECTION_TYPE,\n"
"                          GTK_DIR_DOWN, GTK_DIR_LEFT); -&gt; Fail\n"
msgstr ""
"\n"
"gcut_assert_equal_enum(GTK_TYPE_DIRECTION_TYPE,\n"
"                          GTK_DIR_LEFT, GTK_DIR_LEFT); -&gt; パス\n"
"gcut_assert_equal_enum(GTK_TYPE_DIRECTION_TYPE,\n"
"                          GTK_DIR_DOWN, GTK_DIR_LEFT); -&gt; 失敗\n"

#: xml/gcut-assertions.xml:652(simpara)
msgid "an expected enum value."
msgstr "期待する列挙値。"

#: xml/gcut-assertions.xml:655(simpara)
msgid "an actual enum value."
msgstr "実際の列挙値。"

#: xml/gcut-assertions.xml:664(title)
msgid "gcut_assert_equal_flags ()"
msgstr ""

#: xml/gcut-assertions.xml:665(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_flags             (<link linkend=\"GType\">GType</link> flags_type,\n"
"                                                         <link linkend=\"guint\">guint</link> expected,\n"
"                                                         <link linkend=\"guint\">guint</link> actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:674(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_assert_equal_flags(GTK_TYPE_DIALOG_FLAGS,\n"
"                        GTK_DIALOG_DESTROY_MODAL |\n"
"                          GTK_DIALOG_DESTROY_WITH_PARENT,\n"
"                        GTK_DIALOG_DESTROY_MODAL |\n"
"                          GTK_DIALOG_DESTROY_WITH_PARENT); -&gt; Pass\n"
"gcut_assert_equal_flags(GTK_TYPE_DIALOG_FLAGS,\n"
"                        GTK_DIALOG_DESTROY_MODAL |\n"
"                          GTK_DIALOG_DESTROY_WITH_PARENT,\n"
"                        GTK_DIALOG_DESTROY_MODAL); -&gt; Fail\n"
msgstr ""
"\n"
"gcut_assert_equal_flags(GTK_TYPE_DIALOG_FLAGS,\n"
"                        GTK_DIALOG_DESTROY_MODAL |\n"
"                          GTK_DIALOG_DESTROY_WITH_PARENT,\n"
"                        GTK_DIALOG_DESTROY_MODAL |\n"
"                          GTK_DIALOG_DESTROY_WITH_PARENT); -&gt; パス\n"
"gcut_assert_equal_flags(GTK_TYPE_DIALOG_FLAGS,\n"
"                        GTK_DIALOG_DESTROY_MODAL |\n"
"                          GTK_DIALOG_DESTROY_WITH_PARENT,\n"
"                        GTK_DIALOG_DESTROY_MODAL); -&gt; 失敗\n"

#: xml/gcut-assertions.xml:691(simpara)
msgid "an expected flags value."
msgstr "期待するフラグ値。"

#: xml/gcut-assertions.xml:694(simpara)
msgid "an actual flags value."
msgstr "実際の列挙値。"

#: xml/gcut-assertions.xml:703(title)
msgid "gcut_assert_equal_object ()"
msgstr ""

#: xml/gcut-assertions.xml:704(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_object            (<link linkend=\"GObject\">GObject</link> *expected,\n"
"                                                         <link linkend=\"GObject\">GObject</link> *actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:707(para)
msgid ""
"Passes if <parameter>expected</parameter> == <parameter>actual</parameter>. "
"See <link linkend=\"gcut-assert-equal-object-custom"
"\"><function>gcut_assert_equal_object_custom()</function></link> when you "
"need to customize equality check."
msgstr ""
"<parameter>expected</parameter> == <parameter>actual</parameter>のときパスし"
"ます。等価条件を変更する必要がある場合は<link linkend=\"gcut-assert-equal-"
"object-custom\"><function>gcut_assert_equal_object_custom()</function></link>"
"見てください。"

#: xml/gcut-assertions.xml:714(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_assert_equal_object(object, object);   -&gt; Pass\n"
"gcut_assert_equal_object(object1, object2); -&gt; Fail\n"
"gcut_assert_equal_object(NULL, NULL);       -&gt; Pass\n"
"gcut_assert_equal_object(object1, NULL);    -&gt; Fail\n"
msgstr ""
"\n"
"gcut_assert_equal_object(object, object);   -&gt; パス\n"
"gcut_assert_equal_object(object1, object2); -&gt; 失敗\n"
"gcut_assert_equal_object(NULL, NULL);       -&gt; パス\n"
"gcut_assert_equal_object(object1, NULL);    -&gt; 失敗\n"

#: xml/gcut-assertions.xml:723(simpara) xml/gcut-assertions.xml:764(simpara)
msgid ""
"an expected object. (<link linkend=\"GObject\"><type>GObject</type></link> *)"
msgstr ""
"期待するオブジェクト。（<link linkend=\"GObject\"><type>GObject</type></"
"link> *）"

#: xml/gcut-assertions.xml:726(simpara) xml/gcut-assertions.xml:767(simpara)
msgid ""
"an actual object. (<link linkend=\"GObject\"><type>GObject</type></link> *)"
msgstr ""
"実際のオブジェクト。（<link linkend=\"GObject\"><type>GObject</type></link> "
"*）"

#: xml/gcut-assertions.xml:735(title)
msgid "gcut_assert_equal_object_custom ()"
msgstr ""

#: xml/gcut-assertions.xml:736(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_object_custom     (<link linkend=\"GObject\">GObject</link> *expected,\n"
"                                                         <link linkend=\"GObject\">GObject</link> *actual,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_function,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:745(programlisting)
#, no-wrap
msgid ""
"\n"
"static gboolean\n"
"equal_name (gconstpointer data1, gconstpointer data2)\n"
"{\n"
"    return g_str_equal(my_object_get_name(MY_OBJECT(data1)),\n"
"                       my_object_get_name(MY_OBJECT(data2)));\n"
"}\n"
"\n"
"gcut_assert_equal_object_custom(object, object, equal_name);   -&gt; Pass\n"
"gcut_assert_equal_object_custom(same_name_object1,\n"
"                                same_name_object2,\n"
"                                equal_name);                   -&gt; Pass\n"
"gcut_assert_equal_object_custom(different_name_object1,\n"
"                                different_name_object2,\n"
"                                equal_name);                   -&gt; Fail\n"
msgstr ""
"\n"
"static gboolean\n"
"equal_name (gconstpointer data1, gconstpointer data2)\n"
"{\n"
"    return g_str_equal(my_object_get_name(MY_OBJECT(data1)),\n"
"                       my_object_get_name(MY_OBJECT(data2)));\n"
"}\n"
"\n"
"gcut_assert_equal_object_custom(object, object, equal_name);   -&gt; パス\n"
"gcut_assert_equal_object_custom(same_name_object1,\n"
"                                same_name_object2,\n"
"                                equal_name);                   -&gt; パス\n"
"gcut_assert_equal_object_custom(different_name_object1,\n"
"                                different_name_object2,\n"
"                                equal_name);                   -&gt; 失敗\n"

#: xml/gcut-assertions.xml:770(simpara)
msgid ""
"a function that compare two object. (<link linkend=\"GEqualFunc"
"\"><type>GEqualFunc</type></link>)"
msgstr ""
"二つのオブジェクトを比較する関数。（<link linkend=\"GEqualFunc"
"\"><type>GEqualFunc</type></link>）"

#: xml/gcut-assertions.xml:779(title)
msgid "gcut_assert_equal_int64 ()"
msgstr ""

#: xml/gcut-assertions.xml:780(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_int64             (<link linkend=\"gint64\">gint64</link> expected,\n"
"                                                         <link linkend=\"gint64\">gint64</link> actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:788(simpara)
msgid "an expected 64 bit integer value. (gint64)"
msgstr "期待する64bit整数の値。（gint64）"

#: xml/gcut-assertions.xml:791(simpara)
msgid "an actual 64 bit integer value. (gint64)"
msgstr "実際の64bit整数の値。（gint64）"

#: xml/gcut-assertions.xml:800(title)
msgid "gcut_assert_equal_uint64 ()"
msgstr ""

#: xml/gcut-assertions.xml:801(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_uint64            (<link linkend=\"guint64\">guint64</link> expected,\n"
"                                                         <link linkend=\"guint64\">guint64</link> actual,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:809(simpara)
msgid "an expected unsigned integer value. (guint64)"
msgstr "期待する64bit符号無し整数の値。（guint64）"

#: xml/gcut-assertions.xml:812(simpara)
msgid "an actual unsigned integer value. (guint64)"
msgstr "実際の64bit符号無し符号整数の値。（guint64）"

#: xml/gcut-assertions.xml:821(title)
msgid "gcut_assert_equal_pid ()"
msgstr ""

#: xml/gcut-assertions.xml:822(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_pid               (<link linkend=\"GPid\">GPid</link> expected,\n"
"                                                         <link linkend=\"GPid\">GPid</link> actual);"
msgstr ""

#: xml/gcut-assertions.xml:836(title)
msgid "gcut_assert_not_equal_pid ()"
msgstr ""

#: xml/gcut-assertions.xml:837(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_not_equal_pid           (<link linkend=\"GPid\">GPid</link> expected,\n"
"                                                         <link linkend=\"GPid\">GPid</link> actual);"
msgstr ""

#: xml/gcut-data-helper.xml:7(refentrytitle)
#: xml/gcut-data-helper.xml:13(refname)
msgid "gcut-data-helper"
msgstr ""

#: xml/gcut-data-helper.xml:21(link) xml/gcut-data-helper.xml:24(link)
#: xml/gcut-data-helper.xml:27(link) xml/gcut-data-helper.xml:30(link)
#: xml/gcut-data-helper.xml:33(link) xml/gcut-data-helper.xml:36(link)
#: xml/gcut-data-helper.xml:39(link) xml/gcut-data-helper.xml:42(link)
#: xml/gcut-data.xml:25(link) xml/gcut-data.xml:27(link)
#: xml/gcut-data.xml:29(link) xml/gcut-data.xml:31(link)
#: xml/gcut-data.xml:33(link) xml/gcut-data.xml:35(link)
#: xml/gcut-data.xml:37(link) xml/gcut-data.xml:39(link)
#: xml/gcut-dynamic-data.xml:51(link) xml/gcut-dynamic-data.xml:54(link)
#: xml/gcut-inspect.xml:23(link) xml/gcut-inspect.xml:26(link)
#: xml/gcut-inspect.xml:29(link) xml/gcut-inspect.xml:32(link)
#: xml/gcut-inspect.xml:35(link) xml/gcut-inspect.xml:38(link)
#: xml/gcut-inspect.xml:41(link) xml/gcut-inspect.xml:44(link)
#: xml/gcut-types.xml:22(link)
msgid "gconstpointer"
msgstr ""

#: xml/gcut-data-helper.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"const <placeholder-1/> *       <placeholder-2/>         (<placeholder-3/> data,\n"
"                                                         const <placeholder-4/> *field_name,\n"
"                                                         <placeholder-5/> callback);\n"
"<placeholder-6/>                <placeholder-7/>            (<placeholder-8/> data,\n"
"                                                         const <placeholder-9/> *field_name,\n"
"                                                         <placeholder-10/> callback);\n"
"<placeholder-11/>               <placeholder-12/>           (<placeholder-13/> data,\n"
"                                                         const <placeholder-14/> *field_name,\n"
"                                                         <placeholder-15/> callback);\n"
"<placeholder-16/>               <placeholder-17/>           (<placeholder-18/> data,\n"
"                                                         const <placeholder-19/> *field_name,\n"
"                                                         <placeholder-20/> callback);\n"
"<placeholder-21/>               <placeholder-22/>          (<placeholder-23/> data,\n"
"                                                         const <placeholder-24/> *field_name,\n"
"                                                         <placeholder-25/> callback);\n"
"<placeholder-26/>                <placeholder-27/>           (<placeholder-28/> data,\n"
"                                                         const <placeholder-29/> *field_name,\n"
"                                                         <placeholder-30/> callback);\n"
"<placeholder-31/>       <placeholder-32/>        (<placeholder-33/> data,\n"
"                                                         const <placeholder-34/> *field_name,\n"
"                                                         <placeholder-35/> callback);\n"
"<placeholder-36/>       <placeholder-37/>          (<placeholder-38/> data,\n"
"                                                         const <placeholder-39/> *field_name,\n"
"                                                         <placeholder-40/> callback);\n"
msgstr ""

#: xml/gcut-data-helper.xml:65(title)
msgid "gcut_data_get_string_helper ()"
msgstr ""

#: xml/gcut-data-helper.xml:66(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link> *       gcut_data_get_string_helper         (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"CutCallbackFunction\">CutCallbackFunction</link> callback);"
msgstr ""

#: xml/gcut-data-helper.xml:74(term) xml/gcut-data-helper.xml:93(term)
#: xml/gcut-data-helper.xml:112(term) xml/gcut-data-helper.xml:131(term)
#: xml/gcut-data-helper.xml:150(term) xml/gcut-data-helper.xml:169(term)
#: xml/gcut-data-helper.xml:188(term) xml/gcut-data-helper.xml:207(term)
#: xml/gcut-data.xml:259(term) xml/gcut-data.xml:277(term)
#: xml/gcut-data.xml:296(term) xml/gcut-data.xml:314(term)
#: xml/gcut-data.xml:333(term) xml/gcut-data.xml:352(term)
#: xml/gcut-data.xml:371(term) xml/gcut-data.xml:390(term)
#: xml/gcut-dynamic-data.xml:187(term) xml/gcut-dynamic-data.xml:206(term)
#: xml/gcut-dynamic-data.xml:225(term) xml/gcut-dynamic-data.xml:244(term)
#: xml/gcut-dynamic-data.xml:263(term) xml/gcut-dynamic-data.xml:282(term)
#: xml/gcut-dynamic-data.xml:301(term) xml/gcut-dynamic-data.xml:320(term)
msgid "<parameter>field_name</parameter> :"
msgstr ""

#: xml/gcut-data-helper.xml:77(term) xml/gcut-data-helper.xml:96(term)
#: xml/gcut-data-helper.xml:115(term) xml/gcut-data-helper.xml:134(term)
#: xml/gcut-data-helper.xml:153(term) xml/gcut-data-helper.xml:172(term)
#: xml/gcut-data-helper.xml:191(term) xml/gcut-data-helper.xml:210(term)
msgid "<parameter>callback</parameter> :"
msgstr ""

#: xml/gcut-data-helper.xml:84(title)
msgid "gcut_data_get_int_helper ()"
msgstr ""

#: xml/gcut-data-helper.xml:85(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gint\">gint</link>                gcut_data_get_int_helper            (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"CutCallbackFunction\">CutCallbackFunction</link> callback);"
msgstr ""

#: xml/gcut-data-helper.xml:103(title)
msgid "gcut_data_get_uint_helper ()"
msgstr ""

#: xml/gcut-data-helper.xml:104(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"guint\">guint</link>               gcut_data_get_uint_helper           (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"CutCallbackFunction\">CutCallbackFunction</link> callback);"
msgstr ""

#: xml/gcut-data-helper.xml:122(title)
msgid "gcut_data_get_type_helper ()"
msgstr ""

#: xml/gcut-data-helper.xml:123(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GType\">GType</link>               gcut_data_get_type_helper           (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"CutCallbackFunction\">CutCallbackFunction</link> callback);"
msgstr ""

#: xml/gcut-data-helper.xml:141(title)
msgid "gcut_data_get_flags_helper ()"
msgstr ""

#: xml/gcut-data-helper.xml:142(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"guint\">guint</link>               gcut_data_get_flags_helper          (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"CutCallbackFunction\">CutCallbackFunction</link> callback);"
msgstr ""

#: xml/gcut-data-helper.xml:160(title)
msgid "gcut_data_get_enum_helper ()"
msgstr ""

#: xml/gcut-data-helper.xml:161(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gint\">gint</link>                gcut_data_get_enum_helper           (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"CutCallbackFunction\">CutCallbackFunction</link> callback);"
msgstr ""

#: xml/gcut-data-helper.xml:179(title)
msgid "gcut_data_get_pointer_helper ()"
msgstr ""

#: xml/gcut-data-helper.xml:180(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gconstpointer\">gconstpointer</link>       gcut_data_get_pointer_helper        (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"CutCallbackFunction\">CutCallbackFunction</link> callback);"
msgstr ""

#: xml/gcut-data-helper.xml:198(title)
msgid "gcut_data_get_boxed_helper ()"
msgstr ""

#: xml/gcut-data-helper.xml:199(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gconstpointer\">gconstpointer</link>       gcut_data_get_boxed_helper          (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"CutCallbackFunction\">CutCallbackFunction</link> callback);"
msgstr ""

#: xml/gcut-data.xml:7(refentrytitle) xml/gcut-data.xml:13(refname)
msgid "Convenience test data API"
msgstr "便利なテストデータ用API"

#: xml/gcut-data.xml:14(refpurpose)
msgid "API to create test data without structure definition."
msgstr "構造体定義なしでテストデータを作成するためのAPI。"

#: xml/gcut-data.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                      (const <placeholder-3/> *name,\n"
"                                                         const <placeholder-4/> *first_field_name,\n"
"                                                         ...);\n"
"const <placeholder-5/> *       <placeholder-6/>                (<placeholder-7/> data,\n"
"                                                         const <placeholder-8/> *field_name);\n"
"<placeholder-9/>                <placeholder-10/>                   (<placeholder-11/> data,\n"
"                                                         const <placeholder-12/> *field_name);\n"
"<placeholder-13/>               <placeholder-14/>                  (<placeholder-15/> data,\n"
"                                                         const <placeholder-16/> *field_name);\n"
"<placeholder-17/>               <placeholder-18/>                  (<placeholder-19/> data,\n"
"                                                         const <placeholder-20/> *field_name);\n"
"<placeholder-21/>               <placeholder-22/>                 (<placeholder-23/> data,\n"
"                                                         const <placeholder-24/> *field_name);\n"
"<placeholder-25/>                <placeholder-26/>                  (<placeholder-27/> data,\n"
"                                                         const <placeholder-28/> *field_name);\n"
"<placeholder-29/>       <placeholder-30/>               (<placeholder-31/> data,\n"
"                                                         const <placeholder-32/> *field_name);\n"
"<placeholder-33/>       <placeholder-34/>                 (<placeholder-35/> data,\n"
"                                                         const <placeholder-36/> *field_name);\n"
msgstr ""

#: xml/gcut-data.xml:54(para)
msgid ""
"<link linkend=\"cut-add-data\"><function>cut_add_data()</function></link> "
"requires custom data type for complex test data. But it's not easy to write. "
"<link linkend=\"gcut-add-datum\"><function>gcut_add_datum()</function></"
"link> provides API to use complex test data without custom data type. It "
"uses <link linkend=\"GType\"><type>GType</type></link> for providing complex "
"data."
msgstr ""
"<link linkend=\"cut-add-data\"><function>cut_add_data()</function></link>で複"
"雑なテストデータを使用したい場合はテストデータ用にデータ型を定義する必要があ"
"ります。しかし、それは少し面倒です。<link linkend=\"gcut-add-datum"
"\"><function>gcut_add_datum()</function></link>はデータ型を定義せずに複雑なテ"
"ストデータを使用するためのAPIを提供します。このAPIは複雑なデータを扱うために"
"<link linkend=\"GType\"><type>GType</type></link>を使います。"

#: xml/gcut-data.xml:66(title)
msgid "gcut_add_datum ()"
msgstr ""

#: xml/gcut-data.xml:67(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_add_datum                      (const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_field_name,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-data.xml:70(para)
msgid ""
"Adds a datum to be used in data driven test. It's convenient rather than "
"<link linkend=\"cut-add-data\"><function>cut_add_data()</function></link> "
"because you doesn't need to define a new structure for a complex test data."
msgstr ""
"データ駆動テスト用のデータを追加します。複雑なテストデータのために新しく構造"
"体を定義する必要がないため、<link linkend=\"cut-add-data"
"\"><function>cut_add_data()</function></link>よりも便利です。"

#: xml/gcut-data.xml:77(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;gcutter.h&gt;\n"
"\n"
"void data_translate (void);\n"
"void test_translate (gconstpointer data);\n"
"\n"
"static const gchar*\n"
"translate (gint input)\n"
"{\n"
"   switch(input) {\n"
"   case 1:\n"
"       return \"first\";\n"
"   case 111:\n"
"       return \"a hundred eleven\";\n"
"   default:\n"
"       return \"unsupported\";\n"
"   }\n"
"}\n"
"\n"
"void\n"
"data_translate(void)\n"
"{\n"
"    gcut_add_datum(\"simple data\",\n"
"                   \"translated\", G_TYPE_STRING, \"first\",\n"
"                   \"input\", G_TYPE_INT, 1,\n"
"                   NULL);\n"
"    gcut_add_datum(\"complex data\",\n"
"                   \"translated\", G_TYPE_STRING, \"a hundred eleven\",\n"
"                   \"input\", G_TYPE_INT, 111,\n"
"                   NULL);\n"
"}\n"
"\n"
"void\n"
"test_translate(gconstpointer data)\n"
"{\n"
"    cut_assert_equal_string(gcut_data_get_string(data, \"translated\"),\n"
"                            gcut_data_get_int(data, \"input\"));\n"
"}\n"
msgstr ""

#: xml/gcut-data.xml:117(para)
msgid "Available types and their values are the followings:"
msgstr "利用可能な型とその時の値は以下の通りです。"

#: xml/gcut-data.xml:123(type)
msgid "G_TYPE_STRING"
msgstr ""

#: xml/gcut-data.xml:125(para)
msgid "const <link linkend=\"gchar\"><type>gchar</type></link> *value"
msgstr "const <link linkend=\"gchar\"><type>gchar</type></link> *value"

#: xml/gcut-data.xml:127(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_add_datum(\"data name\",\n"
"               \"field-name\", G_TYPE_STRING, \"string value\",\n"
"               NULL);\n"
msgstr ""

#: xml/gcut-data.xml:136(type)
msgid "G_TYPE_INT"
msgstr ""

#: xml/gcut-data.xml:138(para)
msgid "<link linkend=\"gint\"><type>gint</type></link> value"
msgstr "<link linkend=\"gint\"><type>gint</type></link> value"

#: xml/gcut-data.xml:140(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_add_datum(\"data name\",\n"
"               \"field-name\", G_TYPE_INT, 100,\n"
"               NULL);\n"
msgstr ""

#: xml/gcut-data.xml:149(type)
msgid "G_TYPE_UINT"
msgstr ""

#: xml/gcut-data.xml:151(para)
msgid "<link linkend=\"guint\"><type>guint</type></link> value"
msgstr "<link linkend=\"guint\"><type>guint</type></link> value"

#: xml/gcut-data.xml:153(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_add_datum(\"data name\",\n"
"               \"field-name\", G_TYPE_UINT, 100,\n"
"               NULL);\n"
msgstr ""

#: xml/gcut-data.xml:162(type)
msgid "G_TYPE_GTYPE"
msgstr ""

#: xml/gcut-data.xml:164(para)
msgid "<link linkend=\"GType\"><type>GType</type></link> value"
msgstr "<link linkend=\"GType\"><type>GType</type></link> value"

#: xml/gcut-data.xml:166(programlisting)
#, no-wrap
msgid ""
"\n"
"gut_add_datum(\"data name\",\n"
"              \"field-name\", G_TYPE_GTYPE, G_TYPE_OBJECT,\n"
"              NULL);\n"
msgstr ""

#: xml/gcut-data.xml:175(term)
msgid "GFlags types"
msgstr "GFlagsの型"

#: xml/gcut-data.xml:177(para) xml/gcut-data.xml:190(para)
#: xml/gcut-data.xml:218(para)
msgid "its type value."
msgstr "その型の値。"

#: xml/gcut-data.xml:179(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_add_datum(\"data name\",\n"
"               \"field-name\", GTK_TYPE_WIDGET_FLAGS, GTK_TOPLEVEL | GTK_MAPPED,\n"
"               NULL);\n"
msgstr ""

#: xml/gcut-data.xml:188(term)
msgid "GEnum types"
msgstr "GEnumの型"

#: xml/gcut-data.xml:192(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_add_datum(\"data name\",\n"
"               \"field-name\", GTK_TYPE_WRAP_MODE, GTK_WRAP_NONE,\n"
"               NULL);\n"
msgstr ""

#: xml/gcut-data.xml:201(type)
msgid "G_TYPE_POINTER"
msgstr ""

#: xml/gcut-data.xml:203(para)
msgid ""
"<link linkend=\"gconstpointer\"><type>gconstpointer</type></link> value, "
"<link linkend=\"GDestroyNotify\"><type>GDestroyNotify</type></link> notify"
msgstr ""
"<link linkend=\"gconstpointer\"><type>gconstpointer</type></link> value, "
"<link linkend=\"GDestroyNotify\"><type>GDestroyNotify</type></link> notify"

#: xml/gcut-data.xml:204(para)
msgid "notify is called when value is destroyed."
msgstr "valueが破棄されるときにnotifyが呼ばれます。"

#: xml/gcut-data.xml:206(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_add_datum(\"data name\",\n"
"               \"field-name\", G_TYPE_POINTER, my_structure_new(...), my_structure_free,\n"
"               NULL);\n"
msgstr ""

#: xml/gcut-data.xml:212(para) xml/gcut-data.xml:229(para)
msgid "NOTE: value's ownership is passed to Cutter. Don't free it."
msgstr "注意: 値の所有者はCutterになります。解放しないで下さい。"

#: xml/gcut-data.xml:216(term)
msgid "GBoxed types"
msgstr "GBoxedの型"

#: xml/gcut-data.xml:220(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_add_datum(\"data name\",\n"
"               \"field-name\", G_TYPE_HASH_TABLE,\n"
"               gcut_hash_table_string_string_new(\"name1\", \"value1\",\n"
"                                                 \"name2\", \"value2\",\n"
"                                                 NULL),\n"
"               NULL);\n"
msgstr ""

#: xml/gcut-data.xml:235(term) xml/gcut-egg.xml:364(term)
msgid "<parameter>name</parameter> :"
msgstr ""

#: xml/gcut-data.xml:236(simpara)
msgid "the name of the data."
msgstr "データの名前。"

#: xml/gcut-data.xml:238(term) xml/gcut-dynamic-data.xml:127(term)
#: xml/gcut-dynamic-data.xml:142(term)
msgid "<parameter>first_field_name</parameter> :"
msgstr ""

#: xml/gcut-data.xml:239(simpara)
msgid "the first field name."
msgstr "最初のフィールド名。"

#: xml/gcut-data.xml:242(simpara)
msgid ""
"the type and value pair of the first field, followed optionally by the next "
"field name, type and value triples. <link linkend=\"NULL--CAPS"
"\"><literal>NULL</literal></link>-terminated. See description for more "
"details."
msgstr ""
"最初のフィールドの型と値。その後に、フィールドの名前と型と値の3つを任意の数だ"
"け指定します。最後の引数は<link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>にしてください。詳細は関数の説明文のところにあります。"

#: xml/gcut-data.xml:249(title)
msgid "gcut_data_get_string ()"
msgstr "gcut_data_get_string ()"

#: xml/gcut-data.xml:250(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link> *       gcut_data_get_string                (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name);"
msgstr ""

#: xml/gcut-data.xml:252(para)
msgid ""
"Gets a field value identified by <parameter>field_name</parameter> as string."
msgstr ""
"<parameter>field_name</parameter>フィールドの値を文字列として取得します。"

#: xml/gcut-data.xml:257(simpara) xml/gcut-data.xml:275(simpara)
#: xml/gcut-data.xml:294(simpara) xml/gcut-data.xml:312(simpara)
#: xml/gcut-data.xml:331(simpara) xml/gcut-data.xml:350(simpara)
#: xml/gcut-data.xml:369(simpara) xml/gcut-data.xml:388(simpara)
msgid ""
"the data added by <link linkend=\"gcut-add-datum\"><function>gcut_add_datum()"
"</function></link>."
msgstr ""
"<link linkend=\"gcut-add-datum\"><function>gcut_add_datum()</function></link>"
"で追加したデータ。"

#: xml/gcut-data.xml:260(simpara) xml/gcut-data.xml:278(simpara)
#: xml/gcut-data.xml:297(simpara) xml/gcut-data.xml:315(simpara)
#: xml/gcut-data.xml:334(simpara) xml/gcut-data.xml:353(simpara)
#: xml/gcut-data.xml:372(simpara) xml/gcut-data.xml:391(simpara)
msgid "the field name."
msgstr "フィールド名。"

#: xml/gcut-data.xml:262(simpara) xml/gcut-data.xml:280(simpara)
#: xml/gcut-data.xml:299(simpara) xml/gcut-data.xml:317(simpara)
#: xml/gcut-data.xml:336(simpara) xml/gcut-data.xml:355(simpara)
#: xml/gcut-data.xml:374(simpara) xml/gcut-data.xml:393(simpara)
msgid "a field value corresponded to <parameter>field_name</parameter>."
msgstr "<parameter>field_name</parameter>に対応するフィールドの値。"

#: xml/gcut-data.xml:267(title)
msgid "gcut_data_get_int ()"
msgstr "gcut_data_get_int ()"

#: xml/gcut-data.xml:268(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gint\">gint</link>                gcut_data_get_int                   (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name);"
msgstr ""

#: xml/gcut-data.xml:270(para)
msgid ""
"Gets a field value identified by <parameter>field_name</parameter> as "
"integer."
msgstr ""
"<parameter>field_name</parameter>フィールドの値を整数として取得します。"

#: xml/gcut-data.xml:285(title)
msgid "gcut_data_get_uint ()"
msgstr "gcut_data_get_uint ()"

#: xml/gcut-data.xml:286(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"guint\">guint</link>               gcut_data_get_uint                  (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name);"
msgstr ""

#: xml/gcut-data.xml:288(para)
msgid ""
"Gets a field value identified by <parameter>field_name</parameter> as "
"unsigned integer."
msgstr "<parameter>field_name</parameter>の値を符号なし整数として取得します。"

#: xml/gcut-data.xml:304(title)
msgid "gcut_data_get_type ()"
msgstr "gcut_data_get_type ()"

#: xml/gcut-data.xml:305(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GType\">GType</link>               gcut_data_get_type                  (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name);"
msgstr ""

#: xml/gcut-data.xml:307(para)
msgid ""
"Gets a field value identified by <parameter>field_name</parameter> as <link "
"linkend=\"GType\"><type>GType</type></link>."
msgstr ""
"<parameter>field_name</parameter>フィールドの値を<link linkend=\"GType"
"\"><type>GType</type></link>として取得します。"

#: xml/gcut-data.xml:322(title)
msgid "gcut_data_get_flags ()"
msgstr "gcut_data_get_flags ()"

#: xml/gcut-data.xml:323(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"guint\">guint</link>               gcut_data_get_flags                 (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name);"
msgstr ""

#: xml/gcut-data.xml:325(para)
msgid ""
"Gets a field value identified by <parameter>field_name</parameter> as "
"unsigned integer of GFlags."
msgstr ""
"<parameter>field_name</parameter>の値をGFlags型の符号なし整数として取得しま"
"す。"

#: xml/gcut-data.xml:341(title)
msgid "gcut_data_get_enum ()"
msgstr "gcut_data_get_enum ()"

#: xml/gcut-data.xml:342(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gint\">gint</link>                gcut_data_get_enum                  (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name);"
msgstr ""

#: xml/gcut-data.xml:344(para)
msgid ""
"Gets a field value identified by <parameter>field_name</parameter> as "
"integer of GEnum type."
msgstr ""
"<parameter>field_name</parameter>フィールドの値をGEnum型の整数として取得しま"
"す。"

#: xml/gcut-data.xml:360(title)
msgid "gcut_data_get_pointer ()"
msgstr "gcut_data_get_pointer ()"

#: xml/gcut-data.xml:361(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gconstpointer\">gconstpointer</link>       gcut_data_get_pointer               (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name);"
msgstr ""

#: xml/gcut-data.xml:363(para)
msgid ""
"Gets a field value identified by <parameter>field_name</parameter> as "
"pointer."
msgstr "<parameter>field_name</parameter>の値をポインタとして取得します。"

#: xml/gcut-data.xml:379(title)
msgid "gcut_data_get_boxed ()"
msgstr ""

#: xml/gcut-data.xml:380(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gconstpointer\">gconstpointer</link>       gcut_data_get_boxed                 (<link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name);"
msgstr ""

#: xml/gcut-data.xml:382(para)
msgid ""
"Gets a field value identified by <parameter>field_name</parameter> as GBoxed "
"type value."
msgstr ""
"<parameter>field_name</parameter>フィールドの値をGBoxed型の値として取得しま"
"す。"

#: xml/gcut-dynamic-data.xml:25(link) xml/gcut-egg.xml:25(link)
#: xml/gcut-enum.xml:23(link)
msgid "GQuark"
msgstr ""

#: xml/gcut-dynamic-data.xml:31(link) xml/gcut-egg.xml:41(link)
#: xml/gcut-egg.xml:44(link) xml/gcut-error.xml:22(link)
#: xml/gcut-hash-table.xml:22(link) xml/gcut-hash-table.xml:29(link)
#: xml/gcut-list.xml:22(link) xml/gcut-list.xml:28(link)
#: xml/gcut-list.xml:31(link) xml/gcut-list.xml:34(link)
#: xml/gcut-object.xml:22(link) xml/gcut-string-io-channel.xml:32(link)
#: xml/gcut-string-io-channel.xml:36(link)
#: xml/gcut-string-io-channel.xml:37(link)
#: xml/gcut-string-io-channel.xml:41(link) xml/gcut-value-equal.xml:22(link)
#: xml/gdkcut-pixbuf.xml:21(link) xml/gdkcut-pixbuf.xml:23(link)
#: xml/soupcut-client.xml:52(link)
msgid "gboolean"
msgstr ""

#: xml/gcut-dynamic-data.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
"#define             <placeholder-2/>                   (obj)\n"
"                    <placeholder-3/>;\n"
"enum                <placeholder-4/>;\n"
"<placeholder-5/>              <placeholder-6/>       (void);\n"
"<placeholder-7/> *   <placeholder-8/>               (const <placeholder-9/> *first_field_name,\n"
"                                                         ...);\n"
"<placeholder-10/> *   <placeholder-11/>       (const <placeholder-12/> *first_field_name,\n"
"                                                         <placeholder-13/> args);\n"
"<placeholder-14/> *             <placeholder-15/>           (<placeholder-16/> *data);\n"
"<placeholder-17/>            <placeholder-18/>             (<placeholder-19/> *data1,\n"
"                                                         <placeholder-20/> *data2);\n"
"const <placeholder-21/> *       <placeholder-22/>        (<placeholder-23/> *data,\n"
"                                                         const <placeholder-24/> *field_name,\n"
"                                                         <placeholder-25/> **error);\n"
"<placeholder-26/>                <placeholder-27/>           (<placeholder-28/> *data,\n"
"                                                         const <placeholder-29/> *field_name,\n"
"                                                         <placeholder-30/> **error);\n"
"<placeholder-31/>               <placeholder-32/>          (<placeholder-33/> *data,\n"
"                                                         const <placeholder-34/> *field_name,\n"
"                                                         <placeholder-35/> **error);\n"
"<placeholder-36/>               <placeholder-37/>     (<placeholder-38/> *data,\n"
"                                                         const <placeholder-39/> *field_name,\n"
"                                                         <placeholder-40/> **error);\n"
"<placeholder-41/>               <placeholder-42/>         (<placeholder-43/> *data,\n"
"                                                         const <placeholder-44/> *field_name,\n"
"                                                         <placeholder-45/> **error);\n"
"<placeholder-46/>                <placeholder-47/>          (<placeholder-48/> *data,\n"
"                                                         const <placeholder-49/> *field_name,\n"
"                                                         <placeholder-50/> **error);\n"
"<placeholder-51/>       <placeholder-52/>       (<placeholder-53/> *data,\n"
"                                                         const <placeholder-54/> *field_name,\n"
"                                                         <placeholder-55/> **error);\n"
"<placeholder-56/>       <placeholder-57/>         (<placeholder-58/> *data,\n"
"                                                         const <placeholder-59/> *field_name,\n"
"                                                         <placeholder-60/> **error);\n"
msgstr ""

#: xml/gcut-dynamic-data.xml:61(title) xml/gcut-egg.xml:66(title)
#: xml/soupcut-client.xml:38(title)
msgid "Object Hierarchy"
msgstr "オブジェクト階層"

#: xml/gcut-dynamic-data.xml:62(synopsis)
#, no-wrap
msgid ""
"\n"
"  <placeholder-1/>\n"
"   +----GCutDynamicData\n"
msgstr ""

#: xml/gcut-dynamic-data.xml:85(programlisting)
#, no-wrap
msgid "#define GCUT_DYNAMIC_DATA_ERROR           (gcut_dynamic_data_error_quark())\n"
msgstr ""

#: xml/gcut-dynamic-data.xml:90(title)
msgid "GCUT_DYNAMIC_DATA()"
msgstr ""

#: xml/gcut-dynamic-data.xml:91(programlisting)
#, no-wrap
msgid "#define GCUT_DYNAMIC_DATA(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GCUT_TYPE_DYNAMIC_DATA, GCutDynamicData))\n"
msgstr ""

#: xml/gcut-dynamic-data.xml:95(term)
msgid "<parameter>obj</parameter> :"
msgstr ""

#: xml/gcut-dynamic-data.xml:101(programlisting)
#, no-wrap
msgid "typedef struct _GCutDynamicData GCutDynamicData;"
msgstr ""

#: xml/gcut-dynamic-data.xml:105(title)
msgid "enum GCutDynamicDataError"
msgstr ""

#: xml/gcut-dynamic-data.xml:106(programlisting)
#, no-wrap
msgid ""
"typedef enum\n"
"{\n"
"    GCUT_DYNAMIC_DATA_ERROR_NOT_EXIST\n"
"} GCutDynamicDataError;\n"
msgstr ""

#: xml/gcut-dynamic-data.xml:114(title)
msgid "gcut_dynamic_data_error_quark ()"
msgstr ""

#: xml/gcut-dynamic-data.xml:115(programlisting)
#, no-wrap
msgid "<link linkend=\"GQuark\">GQuark</link>              gcut_dynamic_data_error_quark       (void);"
msgstr ""

#: xml/gcut-dynamic-data.xml:122(title)
msgid "gcut_dynamic_data_new ()"
msgstr ""

#: xml/gcut-dynamic-data.xml:123(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GCutDynamicData\">GCutDynamicData</link> *   gcut_dynamic_data_new               (const <link linkend=\"gchar\">gchar</link> *first_field_name,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-dynamic-data.xml:137(title)
msgid "gcut_dynamic_data_new_va_list ()"
msgstr ""

#: xml/gcut-dynamic-data.xml:138(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GCutDynamicData\">GCutDynamicData</link> *   gcut_dynamic_data_new_va_list       (const <link linkend=\"gchar\">gchar</link> *first_field_name,\n"
"                                                         <link linkend=\"va-list\">va_list</link> args);"
msgstr ""

#: xml/gcut-dynamic-data.xml:152(title)
msgid "gcut_dynamic_data_inspect ()"
msgstr ""

#: xml/gcut-dynamic-data.xml:153(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link> *             gcut_dynamic_data_inspect           (<link linkend=\"GCutDynamicData\">GCutDynamicData</link> *data);"
msgstr ""

#: xml/gcut-dynamic-data.xml:163(title)
msgid "gcut_dynamic_data_equal ()"
msgstr ""

#: xml/gcut-dynamic-data.xml:164(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_dynamic_data_equal             (<link linkend=\"GCutDynamicData\">GCutDynamicData</link> *data1,\n"
"                                                         <link linkend=\"GCutDynamicData\">GCutDynamicData</link> *data2);"
msgstr ""

#: xml/gcut-dynamic-data.xml:168(term)
msgid "<parameter>data1</parameter> :"
msgstr ""

#: xml/gcut-dynamic-data.xml:171(term)
msgid "<parameter>data2</parameter> :"
msgstr ""

#: xml/gcut-dynamic-data.xml:178(title)
msgid "gcut_dynamic_data_get_string ()"
msgstr ""

#: xml/gcut-dynamic-data.xml:179(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link> *       gcut_dynamic_data_get_string        (<link linkend=\"GCutDynamicData\">GCutDynamicData</link> *data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-dynamic-data.xml:197(title)
msgid "gcut_dynamic_data_get_int ()"
msgstr ""

#: xml/gcut-dynamic-data.xml:198(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gint\">gint</link>                gcut_dynamic_data_get_int           (<link linkend=\"GCutDynamicData\">GCutDynamicData</link> *data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-dynamic-data.xml:216(title)
msgid "gcut_dynamic_data_get_uint ()"
msgstr ""

#: xml/gcut-dynamic-data.xml:217(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"guint\">guint</link>               gcut_dynamic_data_get_uint          (<link linkend=\"GCutDynamicData\">GCutDynamicData</link> *data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-dynamic-data.xml:235(title)
msgid "gcut_dynamic_data_get_data_type ()"
msgstr ""

#: xml/gcut-dynamic-data.xml:236(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GType\">GType</link>               gcut_dynamic_data_get_data_type     (<link linkend=\"GCutDynamicData\">GCutDynamicData</link> *data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-dynamic-data.xml:254(title)
msgid "gcut_dynamic_data_get_flags ()"
msgstr ""

#: xml/gcut-dynamic-data.xml:255(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"guint\">guint</link>               gcut_dynamic_data_get_flags         (<link linkend=\"GCutDynamicData\">GCutDynamicData</link> *data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-dynamic-data.xml:273(title)
msgid "gcut_dynamic_data_get_enum ()"
msgstr ""

#: xml/gcut-dynamic-data.xml:274(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gint\">gint</link>                gcut_dynamic_data_get_enum          (<link linkend=\"GCutDynamicData\">GCutDynamicData</link> *data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-dynamic-data.xml:292(title)
msgid "gcut_dynamic_data_get_pointer ()"
msgstr "gcut_dynamic_data_get_pointer ()"

#: xml/gcut-dynamic-data.xml:293(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gconstpointer\">gconstpointer</link>       gcut_dynamic_data_get_pointer       (<link linkend=\"GCutDynamicData\">GCutDynamicData</link> *data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-dynamic-data.xml:311(title)
msgid "gcut_dynamic_data_get_boxed ()"
msgstr ""

#: xml/gcut-dynamic-data.xml:312(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gconstpointer\">gconstpointer</link>       gcut_dynamic_data_get_boxed         (<link linkend=\"GCutDynamicData\">GCutDynamicData</link> *data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *field_name,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-egg.xml:7(refentrytitle) xml/gcut-egg.xml:13(refname)
msgid "External command"
msgstr "外部コマンド"

#: xml/gcut-egg.xml:14(refpurpose)
msgid "Convenience API for using external command."
msgstr "外部コマンドを使うための便利API"

#: xml/gcut-egg.xml:33(link)
msgid "GArray"
msgstr ""

#: xml/gcut-egg.xml:35(link) xml/gcut-egg.xml:36(link)
msgid "GSpawnFlags"
msgstr ""

#: xml/gcut-egg.xml:46(link) xml/gcut-string-io-channel.xml:24(link)
#: xml/gcut-string-io-channel.xml:28(link)
#: xml/gcut-string-io-channel.xml:29(link)
#: xml/gcut-string-io-channel.xml:31(link)
msgid "gsize"
msgstr ""

#: xml/gcut-egg.xml:54(link) xml/gcut-egg.xml:55(link)
#: xml/gcut-egg.xml:56(link) xml/gcut-string-io-channel.xml:21(link)
#: xml/gcut-string-io-channel.xml:22(link)
#: xml/gcut-string-io-channel.xml:23(link)
#: xml/gcut-string-io-channel.xml:25(link)
#: xml/gcut-string-io-channel.xml:27(link)
#: xml/gcut-string-io-channel.xml:29(link)
#: xml/gcut-string-io-channel.xml:30(link)
#: xml/gcut-string-io-channel.xml:33(link)
#: xml/gcut-string-io-channel.xml:35(link)
#: xml/gcut-string-io-channel.xml:38(link)
#: xml/gcut-string-io-channel.xml:40(link)
msgid "GIOChannel"
msgstr ""

#: xml/gcut-egg.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
"                    <placeholder-2/>;\n"
"enum                <placeholder-3/>;\n"
"<placeholder-4/>              <placeholder-5/>                (void);\n"
"<placeholder-6/> *           <placeholder-7/>                        (const <placeholder-8/> *command,\n"
"                                                         ...);\n"
"<placeholder-9/> *           <placeholder-10/>                (const <placeholder-11/> *command,\n"
"                                                         <placeholder-12/> args);\n"
"<placeholder-13/> *           <placeholder-14/>                   (<placeholder-15/> argc,\n"
"                                                         <placeholder-16/> **argv);\n"
"<placeholder-17/> *           <placeholder-18/>                (const <placeholder-19/> **command);\n"
"<placeholder-20/> *           <placeholder-21/>                  (<placeholder-22/> *command);\n"
"<placeholder-23/>                <placeholder-24/>                  (<placeholder-25/> *egg,\n"
"                                                         <placeholder-26/> flags);\n"
"<placeholder-27/>         <placeholder-28/>                  (<placeholder-29/> *egg);\n"
"<placeholder-30/>                <placeholder-31/>                    (<placeholder-32/> *egg,\n"
"                                                         const <placeholder-33/> *name,\n"
"                                                         ...);\n"
"<placeholder-34/> **            <placeholder-35/>                    (<placeholder-36/> *egg);\n"
"<placeholder-37/>            <placeholder-38/>                      (<placeholder-39/> *egg,\n"
"                                                         <placeholder-40/> **error);\n"
"<placeholder-41/>                <placeholder-42/>                      (<placeholder-43/> *egg);\n"
"<placeholder-44/>            <placeholder-45/>                      (<placeholder-46/> *egg,\n"
"                                                         const <placeholder-47/> *chunk,\n"
"                                                         <placeholder-48/> size,\n"
"                                                         <placeholder-49/> **error);\n"
"<placeholder-50/>                <placeholder-51/>                    (<placeholder-52/> *egg);\n"
"<placeholder-53/>                <placeholder-54/>                       (<placeholder-55/> *egg,\n"
"                                                         <placeholder-56/> timeout,\n"
"                                                         <placeholder-57/> **error);\n"
"<placeholder-58/>                <placeholder-59/>                       (<placeholder-60/> *egg,\n"
"                                                         <placeholder-61/> signal_number);\n"
"<placeholder-62/> *        <placeholder-63/>                  (<placeholder-64/> *egg);\n"
"<placeholder-65/> *        <placeholder-66/>                 (<placeholder-67/> *egg);\n"
"<placeholder-68/> *        <placeholder-69/>                  (<placeholder-70/> *egg);\n"
"<placeholder-71/>               <placeholder-72/>\n"
"                                                        (<placeholder-73/> *egg);\n"
"<placeholder-74/>                <placeholder-75/>\n"
"                                                        (<placeholder-76/> *egg,\n"
"                                                         <placeholder-77/> timeout);\n"
msgstr ""

#: xml/gcut-egg.xml:67(synopsis)
#, no-wrap
msgid ""
"\n"
"  <placeholder-1/>\n"
"   +----GCutEgg\n"
msgstr ""

#: xml/gcut-egg.xml:78(title) xml/soupcut-client.xml:50(title)
msgid "Properties"
msgstr "プロパティ"

#: xml/gcut-egg.xml:80(link)
msgid "command"
msgstr ""

#: xml/gcut-egg.xml:79(synopsis)
#, no-wrap
msgid ""
"\n"
"  \"<placeholder-1/>\"                  <placeholder-2/>              : Read / Write\n"
msgstr ""

#: xml/gcut-egg.xml:85(title)
msgid "Signals"
msgstr "シグナル"

#: xml/gcut-egg.xml:87(link)
msgid "error"
msgstr ""

#: xml/gcut-egg.xml:88(link)
msgid "error-received"
msgstr ""

#: xml/gcut-egg.xml:89(link)
msgid "output-received"
msgstr ""

#: xml/gcut-egg.xml:90(link)
msgid "reaped"
msgstr ""

#: xml/gcut-egg.xml:86(synopsis)
#, no-wrap
msgid ""
"\n"
"  \"<placeholder-1/>\"                                          : Run Last\n"
"  \"<placeholder-2/>\"                                 : Run Last\n"
"  \"<placeholder-3/>\"                                : Run Last\n"
"  \"<placeholder-4/>\"                                         : Run Last\n"
msgstr ""

#: xml/gcut-egg.xml:97(para)
msgid ""
"<link linkend=\"GCutEgg\"><type>GCutEgg</type></link> encapsulates external "
"command execution, communication and termination. <link linkend=\"GCutEgg"
"\"><type>GCutEgg</type></link> reports an error as <link linkend=\"GError"
"\"><type>GError</type></link>. It can be asserted easily by <link linkend="
"\"gcut-assert-error\"><function>gcut_assert_error()</function></link>."
msgstr ""
"<link linkend=\"GCutEgg\"><type>GCutEgg</type></link>は外部コマンドの実行・通"
"信・終了をカプセル化します。<link linkend=\"GCutEgg\"><type>GCutEgg</type></"
"link>はエラーを<link linkend=\"GError\"><type>GError</type></link>として報告"
"します。エラーは<link linkend=\"gcut-assert-error"
"\"><function>gcut_assert_error()</function></link>を使うことにより簡単に検証"
"できます。"

#: xml/gcut-egg.xml:103(para)
msgid ""
"External command is specified to constructor like <link linkend=\"gcut-egg-"
"new\"><function>gcut_egg_new()</function></link>, <link linkend=\"gcut-egg-"
"new-strings\"><function>gcut_egg_new_strings()</function></link> and so on. "
"External command isn't run at the time. <link linkend=\"gcut-egg-hatch"
"\"><function>gcut_egg_hatch()</function></link> runs specified external "
"command."
msgstr ""
"外部コマンドは<link linkend=\"gcut-egg-new\"><function>gcut_egg_new()</"
"function></link>、<link linkend=\"gcut-egg-new-strings"
"\"><function>gcut_egg_new_strings()</function></link>などのようなコンストラク"
"タで指定します。この時点では外部コマンドは実行されません。<link linkend="
"\"gcut-egg-hatch\"><function>gcut_egg_hatch()</function></link>で指定された外"
"部コマンドが実行されます。"

#: xml/gcut-egg.xml:109(para)
msgid ""
"Standard/Error outputs of external command are passed by <link linkend="
"\"GCutEgg-output-received\"><type>\"output-received\"</type></link>/<link "
"linkend=\"GCutEgg-error-received\"><type>\"error-received\"</type></link> "
"signals or <link linkend=\"GIOChannel\"><type>GIOChannel</type></link> "
"returned by <link linkend=\"gcut-egg-get-output"
"\"><function>gcut_egg_get_output()</function></link>/<link linkend=\"gcut-"
"egg-get-error\"><function>gcut_egg_get_error()</function></link>. <link "
"linkend=\"gcut-egg-write\"><function>gcut_egg_write()</function></link> "
"writes a chunk to standard input of external command."
msgstr ""
"外部コマンドの標準出力・エラー出力は<link linkend=\"GCutEgg-output-received"
"\"><type>\"output-received\"</type></link>シグナル・<link linkend=\"GCutEgg-"
"error-received\"><type>\"error-received\"</type></link>シグナル、あるいは、"
"<link linkend=\"gcut-egg-get-output\"><function>gcut_egg_get_output()</"
"function></link>・<link linkend=\"gcut-egg-get-error"
"\"><function>gcut_egg_get_error()</function></link>が返す<link linkend="
"\"GIOChannel\"><type>GIOChannel</type></link>で取得できます。<link linkend="
"\"gcut-egg-write\"><function>gcut_egg_write()</function></link>は外部コマンド"
"の標準入力にデータを書き込みます。"

#: xml/gcut-egg.xml:117(para)
msgid ""
"To wait external command finished, <link linkend=\"gcut-egg-wait"
"\"><function>gcut_egg_wait()</function></link> can be used. It accepts "
"timeout to avoid infinite waiting."
msgstr ""
"外部コマンドの終了を待つためには<link linkend=\"gcut-egg-wait"
"\"><function>gcut_egg_wait()</function></link>を使うことがおできます。無限待"
"ちを避けるために、タイムアウトを指定することができます。"

#: xml/gcut-egg.xml:123(programlisting)
#, no-wrap
msgid ""
"\n"
"static GString *output_string;\n"
"static GCutEgg *egg;\n"
"\n"
"void\n"
"cut_setup (void)\n"
"{\n"
"    output_string = g_string_new(NULL);\n"
"    egg = NULL;\n"
"}\n"
"\n"
"void\n"
"cut_teardown (void)\n"
"{\n"
"    if (output_string)\n"
"        g_string_free(output_string, TRUE);\n"
"    if (egg)\n"
"        g_object_unref(egg);\n"
"}\n"
"\n"
"static void\n"
"cb_output_received (GCutEgg *egg, const gchar *chunk, gsize size,\n"
"                    gpointer user_data)\n"
"{\n"
"    g_string_append_len(output_string, chunk, size);\n"
"}\n"
"void\n"
"test_echo (void)\n"
"{\n"
"    GError *error = NULL;\n"
"\n"
"    egg = gcut_egg_new(\"echo\", \"XXX\", NULL);\n"
"    g_signal_connect(egg, \"receive-output\",\n"
"                     G_CALLBACK(cb_output_received), NULL);\n"
"\n"
"    gcut_egg_hatch(egg, &amp;error);\n"
"    gcut_assert_error(error);\n"
"\n"
"    gcut_egg_wait(egg, 1000, &amp;error);\n"
"    gcut_assert_error(error);\n"
"    cut_assert_equal_string(\"XXX\\n\", output_string-&gt;str);\n"
"}\n"
msgstr ""

#: xml/gcut-egg.xml:174(programlisting)
#, no-wrap
msgid "#define GCUT_EGG_ERROR           (gcut_egg_error_quark())\n"
msgstr ""

#: xml/gcut-egg.xml:180(programlisting)
#, no-wrap
msgid "typedef struct _GCutEgg GCutEgg;"
msgstr ""

#: xml/gcut-egg.xml:184(title)
msgid "enum GCutEggError"
msgstr ""

#: xml/gcut-egg.xml:185(programlisting)
#, no-wrap
msgid ""
"typedef enum\n"
"{\n"
"    GCUT_EGG_ERROR_COMMAND_LINE,\n"
"    GCUT_EGG_ERROR_IO_ERROR,\n"
"    GCUT_EGG_ERROR_ALREADY_RUNNING,\n"
"    GCUT_EGG_ERROR_NOT_RUNNING,\n"
"    GCUT_EGG_ERROR_INVALID_OBJECT,\n"
"    GCUT_EGG_ERROR_TIMEOUT\n"
"} GCutEggError;\n"
msgstr ""

#: xml/gcut-egg.xml:195(para)
msgid ""
"Error codes returned by <link linkend=\"GCutEgg\"><type>GCutEgg</type></"
"link> related operations."
msgstr ""
"<link linkend=\"GCutEgg\"><type>GCutEgg</type></link>関連の操作で返されるエ"
"ラーコード。"

#: xml/gcut-egg.xml:200(literal)
msgid "GCUT_EGG_ERROR_COMMAND_LINE"
msgstr ""

#: xml/gcut-egg.xml:201(simpara)
msgid "Command line related error."
msgstr "コマンドライン関連のエラー。"

#: xml/gcut-egg.xml:205(literal)
msgid "GCUT_EGG_ERROR_IO_ERROR"
msgstr ""

#: xml/gcut-egg.xml:206(simpara)
msgid "IO error."
msgstr "入出力エラー。"

#: xml/gcut-egg.xml:210(literal)
msgid "GCUT_EGG_ERROR_ALREADY_RUNNING"
msgstr ""

#: xml/gcut-egg.xml:211(simpara)
msgid "External command is already running."
msgstr "外部コマンドはすでに実行されています。"

#: xml/gcut-egg.xml:215(literal)
msgid "GCUT_EGG_ERROR_NOT_RUNNING"
msgstr ""

#: xml/gcut-egg.xml:216(simpara)
msgid "External command isn't running."
msgstr "外部こもアンドが実行されていません。"

#: xml/gcut-egg.xml:220(literal)
msgid "GCUT_EGG_ERROR_INVALID_OBJECT"
msgstr ""

#: xml/gcut-egg.xml:221(simpara)
msgid ""
"Invalid <link linkend=\"GCutEgg\"><type>GCutEgg</type></link> object is "
"passed."
msgstr ""
"不正な<link linkend=\"GCutEgg\"><type>GCutEgg</type></link>オブジェクトが渡さ"
"れました。"

#: xml/gcut-egg.xml:225(literal)
msgid "GCUT_EGG_ERROR_TIMEOUT"
msgstr ""

#: xml/gcut-egg.xml:226(simpara)
msgid "Timeout."
msgstr "タイムアウト。"

#: xml/gcut-egg.xml:231(title)
msgid "gcut_egg_error_quark ()"
msgstr ""

#: xml/gcut-egg.xml:232(programlisting)
#, no-wrap
msgid "<link linkend=\"GQuark\">GQuark</link>              gcut_egg_error_quark                (void);"
msgstr ""

#: xml/gcut-egg.xml:239(title)
msgid "gcut_egg_new ()"
msgstr ""

#: xml/gcut-egg.xml:240(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GCutEgg\">GCutEgg</link> *           gcut_egg_new                        (const <link linkend=\"gchar\">gchar</link> *command,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-egg.xml:242(para) xml/gcut-egg.xml:260(para)
#: xml/gcut-egg.xml:278(para) xml/gcut-egg.xml:296(para)
#: xml/gcut-egg.xml:311(para)
msgid ""
"Creates a new <link linkend=\"GCutEgg\"><type>GCutEgg</type></link> object "
"that runs <parameter>command</parameter>."
msgstr ""
"<parameter>command</parameter>を実行する新しい<link linkend=\"GCutEgg"
"\"><type>GCutEgg</type></link>オブジェクトを生成します。"

#: xml/gcut-egg.xml:246(term) xml/gcut-egg.xml:264(term)
#: xml/gcut-egg.xml:300(term) xml/gcut-egg.xml:315(term)
msgid "<parameter>command</parameter> :"
msgstr ""

#: xml/gcut-egg.xml:247(simpara) xml/gcut-egg.xml:265(simpara)
msgid "the external command name to be ran"
msgstr "実行する外部コマンド名。"

#: xml/gcut-egg.xml:250(simpara)
msgid "the arguments for <parameter>command</parameter>"
msgstr "<parameter>command</parameter>の引数"

#: xml/gcut-egg.xml:252(simpara) xml/gcut-egg.xml:270(simpara)
#: xml/gcut-egg.xml:289(simpara) xml/gcut-egg.xml:304(simpara)
#: xml/gcut-egg.xml:319(simpara)
msgid "a new <link linkend=\"GCutEgg\"><type>GCutEgg</type></link>."
msgstr "新しい<link linkend=\"GCutEgg\"><type>GCutEgg</type></link>。"

#: xml/gcut-egg.xml:257(title)
msgid "gcut_egg_new_va_list ()"
msgstr ""

#: xml/gcut-egg.xml:258(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GCutEgg\">GCutEgg</link> *           gcut_egg_new_va_list                (const <link linkend=\"gchar\">gchar</link> *command,\n"
"                                                         <link linkend=\"va-list\">va_list</link> args);"
msgstr ""

#: xml/gcut-egg.xml:268(simpara)
msgid "arguments for <parameter>command</parameter>"
msgstr "<parameter>command</parameter>の引数"

#: xml/gcut-egg.xml:275(title)
msgid "gcut_egg_new_argv ()"
msgstr ""

#: xml/gcut-egg.xml:276(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GCutEgg\">GCutEgg</link> *           gcut_egg_new_argv                   (<link linkend=\"gint\">gint</link> argc,\n"
"                                                         <link linkend=\"gchar\">gchar</link> **argv);"
msgstr ""

#: xml/gcut-egg.xml:282(term)
msgid "<parameter>argc</parameter> :"
msgstr ""

#: xml/gcut-egg.xml:283(simpara)
msgid "the number of elements of <parameter>argv</parameter>"
msgstr "<parameter>argv</parameter>の要素数"

#: xml/gcut-egg.xml:285(term)
msgid "<parameter>argv</parameter> :"
msgstr ""

#: xml/gcut-egg.xml:286(simpara)
msgid "the external command name to be ran and arguments of it."
msgstr "実行する外部コマンド名とコマンド引数。"

#: xml/gcut-egg.xml:294(title)
msgid "gcut_egg_new_strings ()"
msgstr ""

#: xml/gcut-egg.xml:295(programlisting)
#, no-wrap
msgid "<link linkend=\"GCutEgg\">GCutEgg</link> *           gcut_egg_new_strings                (const <link linkend=\"gchar\">gchar</link> **command);"
msgstr ""

#: xml/gcut-egg.xml:301(simpara)
msgid ""
"the external command name to be ran and arguments of it. <link linkend="
"\"NULL--CAPS\"><literal>NULL</literal></link>-terminated."
msgstr ""
"実行する外部コマンド名とコマンド引数。<link linkend=\"NULL--CAPS"
"\"><literal>NULL</literal></link>終端。"

#: xml/gcut-egg.xml:309(title)
msgid "gcut_egg_new_array ()"
msgstr ""

#: xml/gcut-egg.xml:310(programlisting)
#, no-wrap
msgid "<link linkend=\"GCutEgg\">GCutEgg</link> *           gcut_egg_new_array                  (<link linkend=\"GArray\">GArray</link> *command);"
msgstr ""

#: xml/gcut-egg.xml:316(simpara)
msgid ""
"the external command name to be ran and arguments of it. The <link linkend="
"\"GArray\"><type>GArray</type></link> should be zero-terminated."
msgstr ""
"実行する外部コマンド名とコマンド引数。<link linkend=\"GArray\"><type>GArray</"
"type></link>は0終端にして下さい。"

#: xml/gcut-egg.xml:324(title)
msgid "gcut_egg_set_flags ()"
msgstr ""

#: xml/gcut-egg.xml:325(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_egg_set_flags                  (<link linkend=\"GCutEgg\">GCutEgg</link> *egg,\n"
"                                                         <link linkend=\"GSpawnFlags\">GSpawnFlags</link> flags);"
msgstr ""

#: xml/gcut-egg.xml:327(para)
msgid "Sets <parameter>flags</parameter> for spawning."
msgstr "外部コマンドを実行するときの<parameter>flags</parameter>を設定します。"

#: xml/gcut-egg.xml:331(term) xml/gcut-egg.xml:345(term)
#: xml/gcut-egg.xml:361(term) xml/gcut-egg.xml:379(term)
#: xml/gcut-egg.xml:397(term) xml/gcut-egg.xml:415(term)
#: xml/gcut-egg.xml:429(term) xml/gcut-egg.xml:453(term)
#: xml/gcut-egg.xml:475(term) xml/gcut-egg.xml:497(term)
#: xml/gcut-egg.xml:512(term) xml/gcut-egg.xml:528(term)
#: xml/gcut-egg.xml:544(term) xml/gcut-egg.xml:561(term)
#: xml/gcut-egg.xml:580(term) xml/gcut-egg.xml:607(term)
#: xml/gcut-egg.xml:632(term) xml/gcut-egg.xml:660(term)
#: xml/gcut-egg.xml:685(term)
msgid "<parameter>egg</parameter> :"
msgstr ""

#: xml/gcut-egg.xml:332(simpara) xml/gcut-egg.xml:346(simpara)
#: xml/gcut-egg.xml:362(simpara) xml/gcut-egg.xml:380(simpara)
#: xml/gcut-egg.xml:398(simpara) xml/gcut-egg.xml:416(simpara)
#: xml/gcut-egg.xml:430(simpara) xml/gcut-egg.xml:454(simpara)
#: xml/gcut-egg.xml:476(simpara) xml/gcut-egg.xml:498(simpara)
#: xml/gcut-egg.xml:513(simpara) xml/gcut-egg.xml:529(simpara)
#: xml/gcut-egg.xml:545(simpara) xml/gcut-egg.xml:562(simpara)
#: xml/gcut-egg.xml:581(simpara)
msgid "a <link linkend=\"GCutEgg\"><type>GCutEgg</type></link>"
msgstr "<link linkend=\"GCutEgg\"><type>GCutEgg</type></link>"

#: xml/gcut-egg.xml:334(term)
msgid "<parameter>flags</parameter> :"
msgstr ""

#: xml/gcut-egg.xml:335(simpara)
msgid ""
"the flags to be passed to <link linkend=\"g-spawn-async-with-pipes"
"\"><function>g_spawn_async_with_pipes()</function></link>."
msgstr ""
"<link linkend=\"g-spawn-async-with-pipes\"><function>g_spawn_async_with_pipes"
"()</function></link>に渡すフラグ。"

#: xml/gcut-egg.xml:339(title)
msgid "gcut_egg_get_flags ()"
msgstr ""

#: xml/gcut-egg.xml:340(programlisting)
#, no-wrap
msgid "<link linkend=\"GSpawnFlags\">GSpawnFlags</link>         gcut_egg_get_flags                  (<link linkend=\"GCutEgg\">GCutEgg</link> *egg);"
msgstr ""

#: xml/gcut-egg.xml:341(para)
msgid "Gets <parameter>flags</parameter> for spawning."
msgstr "外部コマンドを実行する時の<parameter>flags</parameter>を取得します。"

#: xml/gcut-egg.xml:348(simpara)
msgid "the flags for spawning."
msgstr "外部コマンドを実行するときのフラグ。"

#: xml/gcut-egg.xml:353(title)
msgid "gcut_egg_set_env ()"
msgstr ""

#: xml/gcut-egg.xml:354(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_egg_set_env                    (<link linkend=\"GCutEgg\">GCutEgg</link> *egg,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-egg.xml:357(para)
msgid "Sets environment variable for external command."
msgstr "外部コマンドの環境変数を設定します。"

#: xml/gcut-egg.xml:365(simpara)
msgid "the first environment name."
msgstr "最初の環境変数名。"

#: xml/gcut-egg.xml:368(simpara)
msgid ""
"the value of <parameter>name</parameter>, followed by name and value pairs. "
"<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>-terminated."
msgstr ""
"<parameter>name</parameter>に対応する値。その後に、名前と値のペアを任意の数だ"
"け指定します。最後の引数は<link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>にしてください。"

#: xml/gcut-egg.xml:373(title)
msgid "gcut_egg_get_env ()"
msgstr ""

#: xml/gcut-egg.xml:374(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link> **            gcut_egg_get_env                    (<link linkend=\"GCutEgg\">GCutEgg</link> *egg);"
msgstr ""

#: xml/gcut-egg.xml:375(para)
msgid "Gets environment variable for external command."
msgstr "外部コマンドの環境変数を取得します。"

#: xml/gcut-egg.xml:382(simpara)
msgid ""
"a newly-allocated <link linkend=\"NULL--CAPS\"><literal>NULL</literal></"
"link>-terminated environment variables. (\"NAME1=VALUE1\", \"NAME2=VALUE2"
"\", ..., <link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>) It "
"should be freed by <link linkend=\"g-strfreev\"><function>g_strfreev()</"
"function></link> when no longer needed."
msgstr ""
"新しく割り当てられた<link linkend=\"NULL--CAPS\"><literal>NULL</literal></"
"link>終端の環境変数のリスト（\"名前1=値1\", \"名前2=値2\", ..., <link "
"linkend=\"NULL--CAPS\"><literal>NULL</literal></link>）を返します。必要がなく"
"なったら<link linkend=\"g-strfreev\"><function>g_strfreev()</function></link>"
"で開放してください。"

#: xml/gcut-egg.xml:390(title)
msgid "gcut_egg_hatch ()"
msgstr ""

#: xml/gcut-egg.xml:391(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_egg_hatch                      (<link linkend=\"GCutEgg\">GCutEgg</link> *egg,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-egg.xml:393(para)
msgid "Hatches a new external process."
msgstr "新しい外部プロセスを実行します。"

#: xml/gcut-egg.xml:401(simpara) xml/gcut-egg.xml:439(simpara)
#: xml/gcut-egg.xml:482(simpara) xml/gcut-enum.xml:141(simpara)
#: xml/gcut-enum.xml:186(simpara) xml/gcut-enum.xml:205(simpara)
msgid ""
"return location for an error, or <link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>"
msgstr ""
"エラーを返すアドレスまたは<link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>。"

#: xml/gcut-egg.xml:403(simpara) xml/gcut-egg.xml:441(simpara)
msgid ""
"<link linkend=\"TRUE--CAPS\"><literal>TRUE</literal></link> on success, "
"otherwise <link linkend=\"FALSE--CAPS\"><literal>FALSE</literal></link>"
msgstr ""
"成功したときは<link linkend=\"TRUE--CAPS\"><literal>TRUE</literal></link>、そ"
"うでない場合は<link linkend=\"FALSE--CAPS\"><literal>FALSE</literal></link>。"

#: xml/gcut-egg.xml:408(title)
msgid "gcut_egg_close ()"
msgstr ""

#: xml/gcut-egg.xml:409(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                gcut_egg_close                      (<link linkend=\"GCutEgg\">GCutEgg</link> *egg);"
msgstr ""

#: xml/gcut-egg.xml:410(para)
msgid "Closes a hatched external process. It is closed implicitly on destroy."
msgstr ""
"実行した外部コマンドのリソースを回収します。破棄されるときに暗黙的に回収され"
"ます。"

#: xml/gcut-egg.xml:420(title)
msgid "gcut_egg_write ()"
msgstr ""

#: xml/gcut-egg.xml:421(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_egg_write                      (<link linkend=\"GCutEgg\">GCutEgg</link> *egg,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *chunk,\n"
"                                                         <link linkend=\"gsize\">gsize</link> size,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-egg.xml:425(para)
msgid ""
"Writes <parameter>chunk</parameter> to external process's standard input."
msgstr "外部プロセスの標準入力に<parameter>chunk</parameter>を書き込みます。"

#: xml/gcut-egg.xml:432(term) xml/gcut-egg.xml:635(term)
#: xml/gcut-egg.xml:663(term)
msgid "<parameter>chunk</parameter> :"
msgstr ""

#: xml/gcut-egg.xml:433(simpara)
msgid "the data to be wrote"
msgstr "書き込むデータ"

#: xml/gcut-egg.xml:436(simpara)
msgid "the size of <parameter>chunk</parameter>"
msgstr "<parameter>chunk</parameter>のサイズ"

#: xml/gcut-egg.xml:446(title)
msgid "gcut_egg_get_pid ()"
msgstr ""

#: xml/gcut-egg.xml:447(programlisting)
#, no-wrap
msgid "<link linkend=\"GPid\">GPid</link>                gcut_egg_get_pid                    (<link linkend=\"GCutEgg\">GCutEgg</link> *egg);"
msgstr ""

#: xml/gcut-egg.xml:448(para)
msgid ""
"Gets the process ID of running external process. If external process isn't "
"running, 0 is returned."
msgstr ""
"実行している外部プロセスのプロセスIDを取得します。外部コマンドが実行されてい"
"ない場合は0が返ります。"

#: xml/gcut-egg.xml:456(simpara)
msgid ""
"the process ID of running external process if external process is running, "
"otherwise 0."
msgstr "実行中の外部コマンドのプロセスID。実行していない場合は0。"

#: xml/gcut-egg.xml:462(title)
msgid "gcut_egg_wait ()"
msgstr ""

#: xml/gcut-egg.xml:463(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gint\">gint</link>                gcut_egg_wait                       (<link linkend=\"GCutEgg\">GCutEgg</link> *egg,\n"
"                                                         <link linkend=\"guint\">guint</link> timeout,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-egg.xml:466(para)
msgid ""
"Waits running external process is finished while <parameter>timeout</"
"parameter> milliseconds. If external process isn't finished while "
"<parameter>timeout</parameter> milliseconds, <link linkend=\"GCUT-EGG-ERROR-"
"TIMEOUT--CAPS\"><literal>GCUT_EGG_ERROR_TIMEOUT</literal></link> error is "
"set and -1 is returned. If external process isn't running, <link linkend="
"\"GCUT-EGG-ERROR-NOT-RUNNING--CAPS\"><literal>GCUT_EGG_ERROR_NOT_RUNNING</"
"literal></link> error is set and -1 is returned."
msgstr ""
"実行中の外部プロセスが終了することを<parameter>timeout</parameter>ミリ秒待ち"
"ます。外部コマンドが<parameter>timeout</parameter>ミリ秒以内に終了しなかった"
"場合は、<link linkend=\"GCUT-EGG-ERROR-TIMEOUT--CAPS"
"\"><literal>GCUT_EGG_ERROR_TIMEOUT</literal></link>エラーが設定され、-1が返り"
"ます。外部プロセスが実行されていない場合は、<link linkend=\"GCUT-EGG-ERROR-"
"NOT-RUNNING--CAPS\"><literal>GCUT_EGG_ERROR_NOT_RUNNING</literal></link>エ"
"ラーが設定され、-1が返ります。"

#: xml/gcut-egg.xml:478(term) xml/gcut-egg.xml:583(term)
msgid "<parameter>timeout</parameter> :"
msgstr ""

#: xml/gcut-egg.xml:479(simpara)
msgid "the timeout period in milliseconds"
msgstr "タイムアウト時間（ミリ秒）"

#: xml/gcut-egg.xml:484(simpara)
msgid "an exit status of external process on success, otherwise -1."
msgstr "外部プロセスが終了した場合は終了ステータス。そうでない場合は-1。"

#: xml/gcut-egg.xml:490(title)
msgid "gcut_egg_kill ()"
msgstr ""

#: xml/gcut-egg.xml:491(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_egg_kill                       (<link linkend=\"GCutEgg\">GCutEgg</link> *egg,\n"
"                                                         <link linkend=\"gint\">gint</link> signal_number);"
msgstr ""

#: xml/gcut-egg.xml:493(para)
msgid "Sends <parameter>signal_number</parameter> signal to external process."
msgstr "外部プロセスに<parameter>signal_number</parameter>シグナルを送ります。"

#: xml/gcut-egg.xml:500(term)
msgid "<parameter>signal_number</parameter> :"
msgstr ""

#: xml/gcut-egg.xml:501(simpara)
msgid "the signal number to be sent to external process"
msgstr "外部プロセスに送るシグナル番号。"

#: xml/gcut-egg.xml:505(title)
msgid "gcut_egg_get_input ()"
msgstr ""

#: xml/gcut-egg.xml:506(programlisting)
#, no-wrap
msgid "<link linkend=\"GIOChannel\">GIOChannel</link> *        gcut_egg_get_input                  (<link linkend=\"GCutEgg\">GCutEgg</link> *egg);"
msgstr ""

#: xml/gcut-egg.xml:507(para)
msgid ""
"Gets a <link linkend=\"GIOChannel\"><type>GIOChannel</type></link> connected "
"with standard input of external process."
msgstr ""
"外部プロセスの標準入力と結びついた<link linkend=\"GIOChannel"
"\"><type>GIOChannel</type></link>を取得します。"

#: xml/gcut-egg.xml:515(simpara) xml/gcut-egg.xml:531(simpara)
#: xml/gcut-egg.xml:547(simpara)
msgid ""
"a <link linkend=\"GIOChannel\"><type>GIOChannel</type></link> if external "
"process is running, otherwise <link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>."
msgstr ""
"外部プロセスが実行中の場合は<link linkend=\"GIOChannel\"><type>GIOChannel</"
"type></link>。そうでない場合は<link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>。"

#: xml/gcut-egg.xml:521(title)
msgid "gcut_egg_get_output ()"
msgstr ""

#: xml/gcut-egg.xml:522(programlisting)
#, no-wrap
msgid "<link linkend=\"GIOChannel\">GIOChannel</link> *        gcut_egg_get_output                 (<link linkend=\"GCutEgg\">GCutEgg</link> *egg);"
msgstr ""

#: xml/gcut-egg.xml:523(para)
msgid ""
"Gets a <link linkend=\"GIOChannel\"><type>GIOChannel</type></link> connected "
"with standard output of external process."
msgstr ""
"外部プロセスの標準出力と結びついた<link linkend=\"GIOChannel"
"\"><type>GIOChannel</type></link>を取得します。"

#: xml/gcut-egg.xml:537(title)
msgid "gcut_egg_get_error ()"
msgstr ""

#: xml/gcut-egg.xml:538(programlisting)
#, no-wrap
msgid "<link linkend=\"GIOChannel\">GIOChannel</link> *        gcut_egg_get_error                  (<link linkend=\"GCutEgg\">GCutEgg</link> *egg);"
msgstr ""

#: xml/gcut-egg.xml:539(para)
msgid ""
"Gets a <link linkend=\"GIOChannel\"><type>GIOChannel</type></link> connected "
"with standard error output of external process."
msgstr ""
"外部プロセスのエラー出力に結びついた<link linkend=\"GIOChannel"
"\"><type>GIOChannel</type></link>を返します。"

#: xml/gcut-egg.xml:553(title)
msgid "gcut_egg_get_forced_termination_wait_time ()"
msgstr ""

#: xml/gcut-egg.xml:554(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"guint\">guint</link>               gcut_egg_get_forced_termination_wait_time\n"
"                                                        (<link linkend=\"GCutEgg\">GCutEgg</link> *egg);"
msgstr ""

#: xml/gcut-egg.xml:556(para)
msgid "Gets a wait time in milliseconds for forced termination on dispose."
msgstr ""
"オブジェクトが破棄されるときに行われる外部コマンド強制終了後に待つ時間（ミリ"
"秒）を取得します。"

#: xml/gcut-egg.xml:564(simpara)
msgid ""
"a timeout value for waiting forced terminated external command on dispose."
msgstr "破棄時の強制終了待ちの時間。"

#: xml/gcut-egg.xml:570(title)
msgid "gcut_egg_set_forced_termination_wait_time ()"
msgstr ""

#: xml/gcut-egg.xml:571(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_egg_set_forced_termination_wait_time\n"
"                                                        (<link linkend=\"GCutEgg\">GCutEgg</link> *egg,\n"
"                                                         <link linkend=\"guint\">guint</link> timeout);"
msgstr ""

#: xml/gcut-egg.xml:574(para)
msgid ""
"Sets a wait time in milliseconds for forced termination on dispose. If "
"<parameter>timeout</parameter> is 0, it doesn't wait termination of external "
"process. The default value is 10."
msgstr ""
"オブジェクトが破棄されるときに行われる外部コマンド強制終了時に待つ時間（ミリ"
"秒）を設定します。<parameter>timeout</parameter>が0なら外部コマンドの終了を待"
"ちません。デフォルト値は10です。"

#: xml/gcut-egg.xml:584(simpara)
msgid "the timeout value in milliseconds"
msgstr "タイムアウト時間（ミリ秒）"

#: xml/gcut-egg.xml:590(title) xml/soupcut-client.xml:192(title)
msgid "Property Details"
msgstr "プロパティ詳細"

#: xml/gcut-egg.xml:591(title)
msgid "The <literal>\"command\"</literal> property"
msgstr "<literal>\"command\"</literal>プロパティ"

#: xml/gcut-egg.xml:592(programlisting)
#, no-wrap
msgid "  \"command\"                  <link linkend=\"gpointer\">gpointer</link>              : Read / Write"
msgstr ""

#: xml/gcut-egg.xml:593(para)
msgid "The command to be ran by the egg."
msgstr "実行する外部コマンド。"

#: xml/gcut-egg.xml:597(title)
msgid "Signal Details"
msgstr "シグナル詳細"

#: xml/gcut-egg.xml:598(title)
msgid "The <literal>\"error\"</literal> signal"
msgstr "<literal>\"error\"</literal>シグナル"

#: xml/gcut-egg.xml:599(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                user_function                      (<link linkend=\"GCutEgg\">GCutEgg</link> *egg,\n"
"                                                        <link linkend=\"gpointer\">gpointer</link> error,\n"
"                                                        <link linkend=\"gpointer\">gpointer</link> user_data)      : Run Last"
msgstr ""

#: xml/gcut-egg.xml:602(para)
msgid ""
"It is emitted each time an external process causes an error. (e.g. IO error)"
msgstr ""
"外部プロセス関連のエラーが発生した毎に発行されます。（例: 入出力エラー）"

#: xml/gcut-egg.xml:608(simpara) xml/gcut-egg.xml:633(simpara)
#: xml/gcut-egg.xml:661(simpara) xml/gcut-egg.xml:686(simpara)
msgid "the object which received the signal."
msgstr "シグナルを受け取るオブジェクト。"

#: xml/gcut-egg.xml:611(simpara)
msgid ""
"the error of an external process. (<link linkend=\"GError\"><literal>GError</"
"literal></link>)"
msgstr ""
"外部プロセスのエラー。（<link linkend=\"GError\"><literal>GError</literal></"
"link>）"

#: xml/gcut-egg.xml:613(term) xml/gcut-egg.xml:642(term)
#: xml/gcut-egg.xml:670(term) xml/gcut-egg.xml:691(term)
#: xml/gcut-hash-table.xml:120(term) xml/gcut-inspect.xml:90(term)
#: xml/gcut-inspect.xml:115(term) xml/gcut-inspect.xml:140(term)
#: xml/gcut-inspect.xml:165(term) xml/gcut-inspect.xml:190(term)
#: xml/gcut-inspect.xml:221(term) xml/gcut-inspect.xml:252(term)
#: xml/gcut-inspect.xml:278(term) xml/gcut-list.xml:130(term)
#: xml/gcut-object.xml:112(term) xml/gcut-types.xml:65(term)
msgid "<parameter>user_data</parameter> :"
msgstr ""

#: xml/gcut-egg.xml:614(simpara) xml/gcut-egg.xml:643(simpara)
#: xml/gcut-egg.xml:671(simpara) xml/gcut-egg.xml:692(simpara)
msgid "user data set when the signal handler was connected."
msgstr "シグナルハンドラが接続された時にユーザが指定したデータ。"

#: xml/gcut-egg.xml:615(title)
msgid "The <literal>\"error-received\"</literal> signal"
msgstr "<literal>\"error-received\"</literal>シグナル"

#: xml/gcut-egg.xml:616(programlisting) xml/gcut-egg.xml:645(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                user_function                      (<link linkend=\"GCutEgg\">GCutEgg</link> *egg,\n"
"                                                        <link linkend=\"gchar\">gchar</link>   *chunk,\n"
"                                                        <link linkend=\"guint\">guint</link>    size,\n"
"                                                        <link linkend=\"gpointer\">gpointer</link> user_data)      : Run Last"
msgstr ""

#: xml/gcut-egg.xml:620(para)
msgid ""
"It is emitted each time an external process outputs something to its "
"standard error output and it is read."
msgstr ""
"外部プロセスが標準エラー出力に出力したデータが読み込まれる毎に発行されます。"

#: xml/gcut-egg.xml:625(para) xml/gcut-egg.xml:653(para)
msgid ""
"Note that you need to run GLib's main loop by <link linkend=\"g-main-loop-run"
"\"><function>g_main_loop_run()</function></link>, <link linkend=\"g-main-"
"context-iteration\"><function>g_main_context_iteration()</function></link> "
"and so on for detecting an external process's output is readable."
msgstr ""
"外部コマンドの出力が読み取り可能になったかどうかを検出するために、<link "
"linkend=\"g-main-loop-run\"><function>g_main_loop_run()</function></link>や"
"<link linkend=\"g-main-context-iteration\"><function>g_main_context_iteration"
"()</function></link>などでGLibのメインループをまわす必要があることに注意して"
"ください。"

#: xml/gcut-egg.xml:636(simpara)
msgid "the chunk read from an external process's standard error output."
msgstr "外部プロセスの標準エラー出力から読み込んだデータ。"

#: xml/gcut-egg.xml:640(simpara) xml/gcut-egg.xml:668(simpara)
msgid ""
"the size of <parameter>chunk</parameter>. (<link linkend=\"gsize"
"\"><literal>gsize</literal></link>)"
msgstr ""
"<parameter>chunk</parameter>のサイズ。（<link linkend=\"gsize"
"\"><literal>gsize</literal></link>）"

#: xml/gcut-egg.xml:644(title)
msgid "The <literal>\"output-received\"</literal> signal"
msgstr "<literal>\"output-received\"</literal>シグナル"

#: xml/gcut-egg.xml:649(para)
msgid ""
"It is emitted each time an external process outputs something to its "
"standard output and it is read."
msgstr "外部プロセスが標準出力に出力したデータが読み込まれる毎に発行されます。"

#: xml/gcut-egg.xml:664(simpara)
msgid "the chunk read from an external process's standard output."
msgstr "外部プロセスの標準出力から読み込んだデータ。"

#: xml/gcut-egg.xml:672(title)
msgid "The <literal>\"reaped\"</literal> signal"
msgstr "<literal>\"reaped\"</literal>シグナル"

#: xml/gcut-egg.xml:673(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                user_function                      (<link linkend=\"GCutEgg\">GCutEgg</link> *egg,\n"
"                                                        <link linkend=\"gint\">gint</link>     status,\n"
"                                                        <link linkend=\"gpointer\">gpointer</link> user_data)      : Run Last"
msgstr ""

#: xml/gcut-egg.xml:676(para)
msgid "It is emitted when an external process is exited."
msgstr "外部プロセスが終了した時に発行されます。"

#: xml/gcut-egg.xml:679(para)
msgid ""
"Note that you need to run GLib's main loop by <link linkend=\"g-main-loop-run"
"\"><function>g_main_loop_run()</function></link>, <link linkend=\"g-main-"
"context-iteration\"><function>g_main_context_iteration()</function></link> "
"and so on for detecting an external process is exited."
msgstr ""
"外部コマンドが終了したこと検出するために、<link linkend=\"g-main-loop-run"
"\"><function>g_main_loop_run()</function></link>や<link linkend=\"g-main-"
"context-iteration\"><function>g_main_context_iteration()</function></link>な"
"どでGLibのメインループをまわす必要があることに注意してください。"

#: xml/gcut-egg.xml:688(term)
msgid "<parameter>status</parameter> :"
msgstr ""

#: xml/gcut-egg.xml:689(simpara)
msgid "the exit status of an external process."
msgstr "外部プロセスの終了ステータス。"

#: xml/gcut-enum.xml:7(refentrytitle) xml/gcut-enum.xml:13(refname)
msgid "Assertion Utilities for GEnum and GFlags"
msgstr "GEnumとGFlags用の検証ユーティリティ"

#: xml/gcut-enum.xml:15(type)
msgid "GEnum"
msgstr ""

#: xml/gcut-enum.xml:15(type)
msgid "GFlags"
msgstr ""

#: xml/gcut-enum.xml:14(refpurpose)
msgid ""
"Utilities to write assertions related to <link linkend=\"GEnum"
"\"><placeholder-1/></link> or <link linkend=\"GFlags\"><placeholder-2/></"
"link> more easily."
msgstr ""
"<link linkend=\"GEnum\"><placeholder-1/></link>または<link linkend=\"GFlags"
"\"><placeholder-2/></link>に関する検証をもっと簡単に書くためのユーティリ"
"ティ。"

#: xml/gcut-enum.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
"<placeholder-2/>              <placeholder-3/>               (void);\n"
"enum                <placeholder-4/>;\n"
"<placeholder-5/> *             <placeholder-6/>                   (<placeholder-7/> enum_type,\n"
"                                                         <placeholder-8/> enum_value);\n"
"<placeholder-9/>                <placeholder-10/>                     (<placeholder-11/> enum_type,\n"
"                                                         const <placeholder-12/> *enum_value,\n"
"                                                         <placeholder-13/> **error);\n"
"<placeholder-14/> *             <placeholder-15/>                  (<placeholder-16/> flags_type,\n"
"                                                         <placeholder-17/> flags_value);\n"
"<placeholder-18/>               <placeholder-19/>                    (<placeholder-20/> flags_type,\n"
"                                                         const <placeholder-21/> *flags_value,\n"
"                                                         <placeholder-22/> **error);\n"
"<placeholder-23/>               <placeholder-24/>                  (<placeholder-25/> flags_type,\n"
"                                                         <placeholder-26/> **error);\n"
msgstr ""

#: xml/gcut-enum.xml:50(para) xml/gcut-error.xml:38(para)
#: xml/gcut-hash-table.xml:47(para) xml/gcut-list.xml:64(para)
#: xml/gcut-object.xml:42(para) xml/gcut-value-equal.xml:40(para)
msgid ""
"To write assertions, you need to check equality and show expected and actual "
"values."
msgstr ""
"検証を書くためには等価性を検証し、期待値と実測値を表示する必要があります。"

#: xml/gcut-enum.xml:54(para)
msgid ""
"The utilities help you to write assertions that are related to <link linkend="
"\"GEnum\"><type>GEnum</type></link> or <link linkend=\"GFlags"
"\"><type>GFlags</type></link>."
msgstr ""
"このユーティリティは<link linkend=\"GEnum\"><type>GEnum</type></link>または"
"<link linkend=\"GFlags\"><type>GFlags</type></link>に関する検証の作成を補助し"
"ます。"

#: xml/gcut-enum.xml:65(programlisting)
#, no-wrap
msgid "#define GCUT_ENUM_ERROR (gcut_enum_error_quark())\n"
msgstr ""

#: xml/gcut-enum.xml:67(para)
msgid ""
"Error domain for enum related operations. Errors in this domain will be from "
"the <link linkend=\"GCutEnumError\"><type>GCutEnumError</type></link> "
"enumeration."
msgstr ""
"列挙型関連操作用のエラードメインです。このドメインのエラーは<link linkend="
"\"GCutEnumError\"><type>GCutEnumError</type></link>列挙型のどれかです。"

#: xml/gcut-enum.xml:73(title)
msgid "gcut_enum_error_quark ()"
msgstr ""

#: xml/gcut-enum.xml:74(programlisting)
#, no-wrap
msgid "<link linkend=\"GQuark\">GQuark</link>              gcut_enum_error_quark               (void);"
msgstr ""

#: xml/gcut-enum.xml:81(title)
msgid "enum GCutEnumError"
msgstr ""

#: xml/gcut-enum.xml:82(programlisting)
#, no-wrap
msgid ""
"typedef enum\n"
"{\n"
"    GCUT_ENUM_ERROR_INVALID_TYPE,\n"
"    GCUT_ENUM_ERROR_INVALID_VALUE\n"
"} GCutEnumError;\n"
msgstr ""

#: xml/gcut-enum.xml:88(para)
msgid "Error codes returned by enum related operation."
msgstr "列挙型関連操作で返されるエラーコード。"

#: xml/gcut-enum.xml:93(literal)
msgid "GCUT_ENUM_ERROR_INVALID_TYPE"
msgstr ""

#: xml/gcut-enum.xml:94(simpara)
msgid "Invalid type."
msgstr "不正な型。"

#: xml/gcut-enum.xml:98(literal)
msgid "GCUT_ENUM_ERROR_INVALID_VALUE"
msgstr ""

#: xml/gcut-enum.xml:99(simpara)
msgid "Invalid value."
msgstr "不正な値。"

#: xml/gcut-enum.xml:104(title)
msgid "gcut_enum_inspect ()"
msgstr ""

#: xml/gcut-enum.xml:105(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link> *             gcut_enum_inspect                   (<link linkend=\"GType\">GType</link> enum_type,\n"
"                                                         <link linkend=\"gint\">gint</link> enum_value);"
msgstr ""

#: xml/gcut-enum.xml:107(para)
msgid ""
"Inspects <parameter>enum_type</parameter> value, <parameter>enum_value</"
"parameter>. The returned string should be freed when no longer needed."
msgstr ""
"<parameter>enum_type</parameter>の値<parameter>enum_value</parameter>の詳細を"
"返します。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-enum.xml:113(simpara) xml/gcut-enum.xml:135(simpara)
#: xml/gcut-list.xml:268(simpara) xml/gcut-list.xml:411(simpara)
msgid "a <link linkend=\"GEnum\"><type>GEnum</type></link> type."
msgstr "<link linkend=\"GEnum\"><type>GEnum</type></link>の型。"

#: xml/gcut-enum.xml:115(term) xml/gcut-enum.xml:137(term)
msgid "<parameter>enum_value</parameter> :"
msgstr ""

#: xml/gcut-enum.xml:116(simpara)
msgid ""
"a <link linkend=\"GEnum\"><type>GEnum</type></link> value to be inspected."
msgstr "詳細を示す<link linkend=\"GEnum\"><type>GEnum</type></link>の値。"

#: xml/gcut-enum.xml:118(simpara)
msgid "inspected <parameter>enum_value</parameter> as a string."
msgstr "<parameter>enum_value</parameter>の詳細を示した文字列。"

#: xml/gcut-enum.xml:123(title)
msgid "gcut_enum_parse ()"
msgstr ""

#: xml/gcut-enum.xml:124(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gint\">gint</link>                gcut_enum_parse                     (<link linkend=\"GType\">GType</link> enum_type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *enum_value,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-enum.xml:127(para)
msgid ""
"Parses <parameter>enum_value</parameter> and returns a enum value of "
"<parameter>enum_type</parameter>. <parameter>enum_value</parameter> should "
"be enum name or nick name. If <parameter>enum_value</parameter> isn't match "
"then <parameter>error</parameter> is set to a <link linkend=\"GCutEnumError"
"\"><type>GCutEnumError</type></link>."
msgstr ""
"<parameter>enum_value</parameter>をパースし、<parameter>enum_type</parameter>"
"型の列挙値を返します。<parameter>enum_value</parameter>は列挙名またはニック"
"ネームでなければいけません。<parameter>enum_value</parameter>がマッチしない場"
"合は<parameter>error</parameter>に<link linkend=\"GCutEnumError"
"\"><type>GCutEnumError</type></link>エラーが設定されます。"

#: xml/gcut-enum.xml:138(simpara) xml/gcut-enum.xml:183(simpara)
msgid "a string to be parsed."
msgstr "パースされる文字列。"

#: xml/gcut-enum.xml:143(simpara)
msgid ""
"enum value of <parameter>enum_type</parameter> corresponded to "
"<parameter>enum_value</parameter>."
msgstr ""
"<parameter>enum_value</parameter>に対応する<parameter>enum_type</parameter>の"
"値。"

#: xml/gcut-enum.xml:148(title)
msgid "gcut_flags_inspect ()"
msgstr ""

#: xml/gcut-enum.xml:149(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link> *             gcut_flags_inspect                  (<link linkend=\"GType\">GType</link> flags_type,\n"
"                                                         <link linkend=\"guint\">guint</link> flags_value);"
msgstr ""

#: xml/gcut-enum.xml:151(para)
msgid ""
"Inspects <parameter>flags_type</parameter> value, <parameter>flags_value</"
"parameter>. The returned string should be freed when no longer needed."
msgstr ""
"<parameter>flags_type</parameter>の値<parameter>flags_value</parameter>の詳細"
"を返します。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-enum.xml:157(simpara) xml/gcut-enum.xml:180(simpara)
#: xml/gcut-enum.xml:202(simpara) xml/gcut-list.xml:288(simpara)
#: xml/gcut-list.xml:428(simpara)
msgid "a <link linkend=\"GFlags\"><type>GFlags</type></link> type."
msgstr "<link linkend=\"GFlags\"><type>GFlags</type></link>の型。"

#: xml/gcut-enum.xml:159(term) xml/gcut-enum.xml:182(term)
msgid "<parameter>flags_value</parameter> :"
msgstr ""

#: xml/gcut-enum.xml:160(simpara)
msgid ""
"a <link linkend=\"GFlags\"><type>GFlags</type></link> value to be inspected."
msgstr "詳細を示す<link linkend=\"GFlags\"><type>GFlags</type></link>の値。"

#: xml/gcut-enum.xml:162(simpara)
msgid "inspected <parameter>flags_value</parameter> as a string."
msgstr "<parameter>flags_value</parameter>の詳細を示した文字列。"

#: xml/gcut-enum.xml:167(title)
msgid "gcut_flags_parse ()"
msgstr ""

#: xml/gcut-enum.xml:168(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"guint\">guint</link>               gcut_flags_parse                    (<link linkend=\"GType\">GType</link> flags_type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *flags_value,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-enum.xml:171(para)
msgid ""
"Parses <parameter>flags_value</parameter> and returns a flags value of "
"<parameter>flags_type</parameter>. <parameter>flags_value</parameter> should "
"be formated as \"nick-or-name1|nick-or-name2|...|nick-or-nameN\". If "
"<parameter>flags_value</parameter> includes unknown flag then "
"<parameter>error</parameter> is set to a <link linkend=\"GCutEnumError"
"\"><type>GCutEnumError</type></link>."
msgstr ""
"<parameter>flags_value</parameter>をパースし、<parameter>flags_type</"
"parameter>型のフラグ値を返します。<parameter>flags_value</parameter>は\"ニッ"
"クネームまたは名前1|ニックネームまたは名前2|...|ニックネームまたは名前N\"とい"
"う書式でなければいけません。<parameter>flags_value</parameter>が未知のフラグ"
"を含んでいる場合は、<parameter>error</parameter>に<link linkend="
"\"GCutEnumError\"><type>GCutEnumError</type></link>エラーが設定されます。"

#: xml/gcut-enum.xml:188(simpara)
msgid ""
"flags value of <parameter>flags_type</parameter> corresponded to "
"<parameter>flags_value</parameter>."
msgstr ""
"<parameter>flags_value</parameter>に対応する<parameter>flags_type</parameter>"
"の値。"

#: xml/gcut-enum.xml:193(title)
msgid "gcut_flags_get_all ()"
msgstr ""

#: xml/gcut-enum.xml:194(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"guint\">guint</link>               gcut_flags_get_all                  (<link linkend=\"GType\">GType</link> flags_type,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-enum.xml:196(para)
msgid "Gets a flags value that includes all available flag values."
msgstr "すべてのフラグ値が有効なフラグ値を返します。"

#: xml/gcut-enum.xml:207(simpara)
msgid "a flags value that includes all available flag values."
msgstr "すべてのフラグ値が有効なフラグ値。"

#: xml/gcut-error.xml:7(refentrytitle) xml/gcut-error.xml:13(refname)
msgid "Assertion Utilities for GError"
msgstr "GError用の検証ユーティリティ"

#: xml/gcut-error.xml:14(refpurpose)
msgid ""
"Utilities to write assertions related to <link linkend=\"GError"
"\"><placeholder-1/></link> more easily."
msgstr ""
"<link linkend=\"GError\"><placeholder-1/></link>に関する検証をもっと簡単に書"
"くためのユーティリティ。"

#: xml/gcut-error.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            <placeholder-2/>                    (const <placeholder-3/> *error1,\n"
"                                                         const <placeholder-4/> *error2);\n"
"<placeholder-5/> *             <placeholder-6/>                  (const <placeholder-7/> *error);\n"
msgstr ""

#: xml/gcut-error.xml:42(para)
msgid ""
"The utilities help you to write assertions that are related to <link linkend="
"\"GError\"><type>GError</type></link>."
msgstr ""
"このユーティリティは<link linkend=\"GError\"><type>GError</type></link>に関す"
"る検証の作成を補助します。"

#: xml/gcut-error.xml:52(title)
msgid "gcut_error_equal ()"
msgstr ""

#: xml/gcut-error.xml:53(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_error_equal                    (const <link linkend=\"GError\">GError</link> *error1,\n"
"                                                         const <link linkend=\"GError\">GError</link> *error2);"
msgstr ""

#: xml/gcut-error.xml:55(para)
msgid ""
"Compares two <link linkend=\"GError\"><type>GError</type></link>, "
"<parameter>error1</parameter> and <parameter>error2</parameter>."
msgstr ""
"ふたつの<link linkend=\"GError\"><type>GError</type></link>、"
"<parameter>error1</parameter>と<parameter>error2</parameter>を比較します。"

#: xml/gcut-error.xml:59(term)
msgid "<parameter>error1</parameter> :"
msgstr ""

#: xml/gcut-error.xml:60(simpara) xml/gcut-error.xml:63(simpara)
msgid "a <link linkend=\"GError\"><type>GError</type></link> to be compared."
msgstr "比較する<link linkend=\"GError\"><type>GError</type></link>の値。"

#: xml/gcut-error.xml:62(term)
msgid "<parameter>error2</parameter> :"
msgstr ""

#: xml/gcut-error.xml:65(simpara)
msgid ""
"<link linkend=\"TRUE--CAPS\"><literal>TRUE</literal></link> if both of "
"<parameter>error1</parameter> and <parameter>error2</parameter> have the "
"same domain, code and message, <link linkend=\"FALSE--CAPS\"><literal>FALSE</"
"literal></link> otherwise."
msgstr ""
"<parameter>error1</parameter>と<parameter>error2</parameter>が同じドメイン、"
"コード、メッセージなら<link linkend=\"TRUE--CAPS\"><literal>TRUE</literal></"
"link>、そうでなれば<link linkend=\"FALSE--CAPS\"><literal>FALSE</literal></"
"link>。"

#: xml/gcut-error.xml:71(title)
msgid "gcut_error_inspect ()"
msgstr ""

#: xml/gcut-error.xml:72(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link> *             gcut_error_inspect                  (const <link linkend=\"GError\">GError</link> *error);"
msgstr ""

#: xml/gcut-error.xml:73(para)
msgid ""
"Inspects <parameter>error</parameter>. The returned string should be freed "
"when no longer needed."
msgstr ""
"<parameter>error</parameter>の詳細を返します。返された文字列が必要なくなった"
"ときは開放してください。"

#: xml/gcut-error.xml:79(simpara)
msgid "a <link linkend=\"GError\"><type>GError</type></link> value."
msgstr "<link linkend=\"GError\"><type>GError</type></link>の値。"

#: xml/gcut-error.xml:81(simpara)
msgid "inspected <parameter>error</parameter> as a string."
msgstr "<parameter>error</parameter>の詳細を示した文字列。"

#: xml/gcut-hash-table.xml:7(refentrytitle)
#: xml/gcut-hash-table.xml:13(refname)
msgid "Assertion Utilities for GHashTable"
msgstr "GHashTable用の検証ユーティリティ"

#: xml/gcut-hash-table.xml:14(refpurpose)
msgid ""
"Utilities to write assertions related to <link linkend=\"GHashTable"
"\"><placeholder-1/></link> more easily."
msgstr ""
"<link linkend=\"GHashTable\"><placeholder-1/></link>に関する検証をもっと簡単"
"に書くためのユーティリティ。"

#: xml/gcut-hash-table.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            <placeholder-2/>               (<placeholder-3/> *hash1,\n"
"                                                         <placeholder-4/> *hash2,\n"
"                                                         <placeholder-5/> equal_func);\n"
"<placeholder-6/> *             <placeholder-7/>             (<placeholder-8/> *hash,\n"
"                                                         <placeholder-9/> key_inspect_func,\n"
"                                                         <placeholder-10/> value_inspect_func,\n"
"                                                         <placeholder-11/> user_data);\n"
"<placeholder-12/>            <placeholder-13/>        (<placeholder-14/> *hash1,\n"
"                                                         <placeholder-15/> *hash2);\n"
"<placeholder-16/> *             <placeholder-17/>\n"
"                                                        (<placeholder-18/> *hash);\n"
"<placeholder-19/> *        <placeholder-20/>  (<placeholder-21/> *hash);\n"
msgstr ""

#: xml/gcut-hash-table.xml:51(para)
msgid ""
"The utilities help you to write assertions that are related to <link linkend="
"\"GHashTable\"><type>GHashTable</type></link>."
msgstr ""
"このユーティリティは<link linkend=\"GHashTable\"><type>GHashTable</type></"
"link>に関する検証の作成を補助します。"

#: xml/gcut-hash-table.xml:61(title)
msgid "gcut_hash_table_equal ()"
msgstr ""

#: xml/gcut-hash-table.xml:62(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_hash_table_equal               (<link linkend=\"GHashTable\">GHashTable</link> *hash1,\n"
"                                                         <link linkend=\"GHashTable\">GHashTable</link> *hash2,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_func);"
msgstr ""

#: xml/gcut-hash-table.xml:65(para)
msgid ""
"Compares two <link linkend=\"GHashTable\"><type>GHashTable</type></link>, "
"<parameter>hash1</parameter> and <parameter>hash2</parameter>. "
"<parameter>equal_func</parameter> is called for each values of the same key "
"of <parameter>hash1</parameter> and <parameter>hash2</parameter>."
msgstr ""
"ふたつの<link linkend=\"GHashTable\"><type>GHashTable</type></link>、"
"<parameter>hash1</parameter>と<parameter>hash2</parameter>を比較します。"
"<parameter>equal_func</parameter>は<parameter>hash1</parameter>と"
"<parameter>hash2</parameter>の同じキーに対応する値それぞれについて呼ばれま"
"す。"

#: xml/gcut-hash-table.xml:72(programlisting)
#: xml/gcut-hash-table.xml:106(programlisting)
#: xml/gcut-list.xml:88(programlisting) xml/gcut-list.xml:119(programlisting)
#: xml/gcut-value-equal.xml:81(programlisting)
#, no-wrap
msgid ""
"\n"
"TODO\n"
msgstr ""

#: xml/gcut-hash-table.xml:77(term) xml/gcut-hash-table.xml:137(term)
msgid "<parameter>hash1</parameter> :"
msgstr ""

#: xml/gcut-hash-table.xml:78(simpara) xml/gcut-hash-table.xml:81(simpara)
#: xml/gcut-hash-table.xml:138(simpara) xml/gcut-hash-table.xml:141(simpara)
msgid ""
"a <link linkend=\"GHashTable\"><type>GHashTable</type></link> to be compared."
msgstr "比較する<link linkend=\"GHashTable\"><type>GHashTable</type></link>。"

#: xml/gcut-hash-table.xml:80(term) xml/gcut-hash-table.xml:140(term)
msgid "<parameter>hash2</parameter> :"
msgstr ""

#: xml/gcut-hash-table.xml:83(term) xml/gcut-list.xml:99(term)
#: xml/gcut-object.xml:72(term) xml/gcut-value-equal.xml:96(term)
msgid "<parameter>equal_func</parameter> :"
msgstr ""

#: xml/gcut-hash-table.xml:84(simpara) xml/gcut-list.xml:100(simpara)
msgid "a function that compares two values."
msgstr "ふたつの値を比較する関数。"

#: xml/gcut-hash-table.xml:86(simpara)
msgid ""
"TRUE if all same key's values of <parameter>hash1</parameter> and "
"<parameter>hash2</parameter> are reported TRUE by <parameter>equal_func</"
"parameter>, FALSE otherwise."
msgstr ""
"同じキーに対応するすべての<parameter>hash1</parameter>と<parameter>hash2</"
"parameter>の値が<parameter>equal_func</parameter>でTRUEとなったらTRUE、そうで"
"ない場合はFALSE。"

#: xml/gcut-hash-table.xml:93(title)
msgid "gcut_hash_table_inspect ()"
msgstr ""

#: xml/gcut-hash-table.xml:94(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link> *             gcut_hash_table_inspect             (<link linkend=\"GHashTable\">GHashTable</link> *hash,\n"
"                                                         <link linkend=\"GCutInspectFunction\">GCutInspectFunction</link> key_inspect_func,\n"
"                                                         <link linkend=\"GCutInspectFunction\">GCutInspectFunction</link> value_inspect_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-hash-table.xml:98(para)
msgid ""
"Inspects <parameter>hash</parameter>. Each key of <parameter>hash</"
"parameter> is inspected by <parameter>key_inspect_func</parameter> and each "
"value of <parameter>hash</parameter> is inspected by "
"<parameter>value_inspect_func</parameter>. The returned string should be "
"freed when no longer needed."
msgstr ""
"<parameter>hash</parameter>の詳細を返します。<parameter>hash</parameter>の各"
"キーは<parameter>key_inspect_func</parameter>で詳細化し、<parameter>hash</"
"parameter>の各値は<parameter>value_inspect_func</parameter>で詳細化します。返"
"された文字列が必要なくなったときは開放してください。"

#: xml/gcut-hash-table.xml:111(term) xml/gcut-hash-table.xml:158(term)
#: xml/gcut-hash-table.xml:174(term)
msgid "<parameter>hash</parameter> :"
msgstr ""

#: xml/gcut-hash-table.xml:112(simpara) xml/gcut-hash-table.xml:159(simpara)
msgid ""
"a <link linkend=\"GHashTable\"><type>GHashTable</type></link> to be "
"inspected."
msgstr ""
"詳細を示す<link linkend=\"GHashTable\"><type>GHashTable</type></link>。"

#: xml/gcut-hash-table.xml:114(term)
msgid "<parameter>key_inspect_func</parameter> :"
msgstr ""

#: xml/gcut-hash-table.xml:115(simpara)
msgid "a function that inspects each key."
msgstr "各キーの詳細を示す関数。"

#: xml/gcut-hash-table.xml:117(term)
msgid "<parameter>value_inspect_func</parameter> :"
msgstr ""

#: xml/gcut-hash-table.xml:118(simpara) xml/gcut-list.xml:128(simpara)
msgid "a function that inspects each value."
msgstr "各値の詳細を示す関数。"

#: xml/gcut-hash-table.xml:121(simpara) xml/gcut-list.xml:131(simpara)
#: xml/gcut-object.xml:113(simpara) xml/gcut-types.xml:66(simpara)
msgid "user data to pass to the function."
msgstr "関数に渡すユーザ用データ。"

#: xml/gcut-hash-table.xml:123(simpara) xml/gcut-hash-table.xml:161(simpara)
msgid "inspected <parameter>hash</parameter> as a string."
msgstr "<parameter>hash</parameter>の詳細を示した文字列。"

#: xml/gcut-hash-table.xml:128(title)
msgid "gcut_hash_table_string_equal ()"
msgstr ""

#: xml/gcut-hash-table.xml:129(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_hash_table_string_equal        (<link linkend=\"GHashTable\">GHashTable</link> *hash1,\n"
"                                                         <link linkend=\"GHashTable\">GHashTable</link> *hash2);"
msgstr ""

#: xml/gcut-hash-table.xml:131(para)
msgid ""
"Compares two <link linkend=\"GHashTable\"><type>GHashTable</type></link>, "
"<parameter>hash1</parameter> and <parameter>hash2</parameter>. "
"<parameter>hash1</parameter> and <parameter>hash2</parameter> should have "
"string key and string value."
msgstr ""
"ふたつの<link linkend=\"GHashTable\"><type>GHashTable</type></link>、"
"<parameter>hash1</parameter>と<parameter>hash2</parameter>を比較します。"
"<parameter>hash1</parameter>と<parameter>hash2</parameter>は文字列のキーと文"
"字列の値を持っていなければいけません。"

#: xml/gcut-hash-table.xml:143(simpara)
msgid ""
"TRUE if all same key's values of <parameter>hash1</parameter> and "
"<parameter>hash2</parameter> are same string content, FALSE otherwise."
msgstr ""
"<parameter>hash1</parameter>と<parameter>hash2</parameter>の同じキーの値それ"
"ぞれすべてが同じ内容の文字列の場合TRUE、そうでない場合はFALSE。"

#: xml/gcut-hash-table.xml:149(title)
msgid "gcut_hash_table_string_string_inspect ()"
msgstr ""

#: xml/gcut-hash-table.xml:150(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link> *             gcut_hash_table_string_string_inspect\n"
"                                                        (<link linkend=\"GHashTable\">GHashTable</link> *hash);"
msgstr ""

#: xml/gcut-hash-table.xml:152(para)
msgid ""
"Inspects <parameter>hash</parameter>. <parameter>hash</parameter> should "
"have string key and string value. The returned string should be freed when "
"no longer needed."
msgstr ""
"<parameter>hash</parameter>の詳細を返します。<parameter>hash</parameter>は文"
"字列のキーと文字列の値を持っていなければいけません。返された文字列が必要なく"
"なったときは開放してください。"

#: xml/gcut-hash-table.xml:166(title)
msgid "gcut_hash_table_string_string_copy ()"
msgstr ""

#: xml/gcut-hash-table.xml:167(programlisting)
#, no-wrap
msgid "<link linkend=\"GHashTable\">GHashTable</link> *        gcut_hash_table_string_string_copy  (<link linkend=\"GHashTable\">GHashTable</link> *hash);"
msgstr ""

#: xml/gcut-hash-table.xml:168(para)
msgid ""
"Copy <parameter>hash</parameter>. <parameter>hash</parameter> should have "
"string key and string value. The returned <parameter>hash</parameter> should "
"be freed by <link linkend=\"g-hash-table-unref\"><function>g_hash_table_unref"
"()</function></link>."
msgstr ""
"<parameter>hash</parameter>を複製します。<parameter>hash</parameter>は文字列"
"のキーと文字列の値を持っていなければいけません。返された<parameter>hash</"
"parameter>は<link linkend=\"g-hash-table-unref\"><function>g_hash_table_unref"
"()</function></link>で開放しなければいけません。"

#: xml/gcut-hash-table.xml:175(simpara)
msgid ""
"a <link linkend=\"GHashTable\"><type>GHashTable</type></link> to be copied."
msgstr "複製する<link linkend=\"GHashTable\"><type>GHashTable</type></link>。"

#: xml/gcut-hash-table.xml:177(simpara)
msgid ""
"copied <link linkend=\"GHashTable\"><type>GHashTable</type></link>. It "
"should be freed when no longer needed."
msgstr ""
"複製された<link linkend=\"GHashTable\"><type>GHashTable</type></link>。必要が"
"なくなったら開放しなければいけません。"

#: xml/gcut-hash-table.xml:181(para) xml/soupcut-assertions.xml:69(para)
#: xml/soupcut-assertions.xml:86(para) xml/soupcut-assertions.xml:97(para)
#: xml/soupcut-assertions.xml:112(para) xml/soupcut-assertions.xml:128(para)
#: xml/soupcut-client.xml:86(para) xml/soupcut-client.xml:101(para)
#: xml/soupcut-client.xml:119(para) xml/soupcut-client.xml:146(para)
#: xml/soupcut-client.xml:160(para) xml/soupcut-client.xml:174(para)
#: xml/soupcut-client.xml:188(para) xml/soupcut-server.xml:59(para)
#: xml/soupcut-server.xml:74(para) xml/soupcut-server.xml:92(para)
#: xml/soupcutter.xml:82(para)
msgid "Since 1.0.8"
msgstr "1.0.8から"

#: xml/gcut-inspect.xml:7(refentrytitle) xml/gcut-inspect.xml:13(refname)
msgid "Object inspection functions"
msgstr "オブジェクト調査関数"

#: xml/gcut-inspect.xml:14(refpurpose)
msgid "Functions to inspect an object for debugging."
msgstr "デバッグ用にオブジェクトの詳細を示す関数です。"

#: xml/gcut-inspect.xml:22(link) xml/gcut-inspect.xml:25(link)
#: xml/gcut-inspect.xml:28(link) xml/gcut-inspect.xml:31(link)
#: xml/gcut-inspect.xml:34(link) xml/gcut-inspect.xml:37(link)
#: xml/gcut-inspect.xml:40(link) xml/gcut-inspect.xml:43(link)
#: xml/gcut-string-io-channel.xml:22(link) xml/gcut-types.xml:21(link)
msgid "GString"
msgstr ""

#: xml/gcut-inspect.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                 (<placeholder-3/> *string,\n"
"                                                         <placeholder-4/> data,\n"
"                                                         <placeholder-5/> user_data);\n"
"<placeholder-6/>                <placeholder-7/>                    (<placeholder-8/> *string,\n"
"                                                         <placeholder-9/> data,\n"
"                                                         <placeholder-10/> user_data);\n"
"<placeholder-11/>                <placeholder-12/>                   (<placeholder-13/> *string,\n"
"                                                         <placeholder-14/> data,\n"
"                                                         <placeholder-15/> user_data);\n"
"<placeholder-16/>                <placeholder-17/>                 (<placeholder-18/> *string,\n"
"                                                         <placeholder-19/> data,\n"
"                                                         <placeholder-20/> user_data);\n"
"<placeholder-21/>                <placeholder-22/>                   (<placeholder-23/> *string,\n"
"                                                         <placeholder-24/> data,\n"
"                                                         <placeholder-25/> user_data);\n"
"<placeholder-26/>                <placeholder-27/>                  (<placeholder-28/> *string,\n"
"                                                         <placeholder-29/> data,\n"
"                                                         <placeholder-30/> user_data);\n"
"<placeholder-31/>                <placeholder-32/>                   (<placeholder-33/> *string,\n"
"                                                         <placeholder-34/> data,\n"
"                                                         <placeholder-35/> user_data);\n"
"<placeholder-36/>                <placeholder-37/>                (<placeholder-38/> *string,\n"
"                                                         <placeholder-39/> data,\n"
"                                                         <placeholder-40/> user_data);\n"
msgstr ""

#: xml/gcut-inspect.xml:59(para)
msgid ""
"In test result, we need to know detail of inspected objects for debugging. "
"Functions of this section help us to inspect interested objects."
msgstr ""
"デバッグするために、テスト結果ではオブジェクトの詳細を示す必要があります。こ"
"のセクションの関数はオブジェクトの詳細を示す場合に役立ちます。"

#: xml/gcut-inspect.xml:70(title)
msgid "gcut_inspect_direct ()"
msgstr ""

#: xml/gcut-inspect.xml:71(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_inspect_direct                 (<link linkend=\"GString\">GString</link> *string,\n"
"                                                         <link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-inspect.xml:74(para) xml/gcut-inspect.xml:124(para)
msgid "Shows <parameter>data</parameter> as unsigned integer."
msgstr "符号なし整数として<parameter>data</parameter>の詳細を示します。"

#: xml/gcut-inspect.xml:79(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_inspect_direct(string, GUINT_TO_POINTER(100), NULL) -&gt; \"100\"\n"
msgstr ""

#: xml/gcut-inspect.xml:85(simpara) xml/gcut-inspect.xml:110(simpara)
#: xml/gcut-inspect.xml:135(simpara) xml/gcut-inspect.xml:160(simpara)
#: xml/gcut-inspect.xml:185(simpara) xml/gcut-inspect.xml:216(simpara)
#: xml/gcut-inspect.xml:247(simpara) xml/gcut-inspect.xml:273(simpara)
msgid "the output string."
msgstr "出力の文字列。"

#: xml/gcut-inspect.xml:88(simpara) xml/gcut-inspect.xml:113(simpara)
#: xml/gcut-inspect.xml:138(simpara) xml/gcut-inspect.xml:163(simpara)
#: xml/gcut-inspect.xml:188(simpara) xml/gcut-inspect.xml:219(simpara)
#: xml/gcut-inspect.xml:250(simpara) xml/gcut-inspect.xml:276(simpara)
msgid "the interested target."
msgstr "関心のある対象。"

#: xml/gcut-inspect.xml:91(simpara) xml/gcut-inspect.xml:116(simpara)
#: xml/gcut-inspect.xml:141(simpara) xml/gcut-inspect.xml:166(simpara)
#: xml/gcut-inspect.xml:191(simpara) xml/gcut-inspect.xml:279(simpara)
msgid "the data passed by user. (ignored)"
msgstr "ユーザが渡したデータ。（無視されます）"

#: xml/gcut-inspect.xml:95(title)
msgid "gcut_inspect_int ()"
msgstr ""

#: xml/gcut-inspect.xml:96(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_inspect_int                    (<link linkend=\"GString\">GString</link> *string,\n"
"                                                         <link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-inspect.xml:99(para)
msgid "Shows <parameter>data</parameter> as integer."
msgstr "整数として<parameter>data</parameter>の詳細を示します。"

#: xml/gcut-inspect.xml:104(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_inspect_int(string, GINT_TO_POINTER(100), NULL) -&gt; \"100\"\n"
msgstr ""

#: xml/gcut-inspect.xml:120(title)
msgid "gcut_inspect_uint ()"
msgstr ""

#: xml/gcut-inspect.xml:121(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_inspect_uint                   (<link linkend=\"GString\">GString</link> *string,\n"
"                                                         <link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-inspect.xml:129(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_inspect_uint(string, GUINT_TO_POINTER(100), NULL) -&gt; \"100\"\n"
msgstr ""

#: xml/gcut-inspect.xml:145(title)
msgid "gcut_inspect_string ()"
msgstr ""

#: xml/gcut-inspect.xml:146(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_inspect_string                 (<link linkend=\"GString\">GString</link> *string,\n"
"                                                         <link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-inspect.xml:149(para)
msgid ""
"Shows <parameter>data</parameter> as string. It also accepts <link linkend="
"\"NULL--CAPS\"><literal>NULL</literal></link>."
msgstr ""
"文字列として<parameter>data</parameter>の詳細を示します。<link linkend="
"\"NULL--CAPS\"><literal>NULL</literal></link>でも構いません。"

#: xml/gcut-inspect.xml:154(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_inspect_string(string, \"string\", NULL) -&gt; \"\\\"string\\\"\"\n"
msgstr ""

#: xml/gcut-inspect.xml:170(title)
msgid "gcut_inspect_type ()"
msgstr ""

#: xml/gcut-inspect.xml:171(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_inspect_type                   (<link linkend=\"GString\">GString</link> *string,\n"
"                                                         <link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-inspect.xml:174(para)
msgid ""
"Shows <parameter>data</parameter> as <link linkend=\"GType\"><literal>GType</"
"literal></link>."
msgstr ""
"<link linkend=\"GType\"><literal>GType</literal></link>として"
"<parameter>data</parameter>の詳細を示します。"

#: xml/gcut-inspect.xml:179(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_inspect_type(string, GTK_TYPE_WINDOW, NULL) -&gt; \"&lt;GtkWindow&gt;\"\n"
msgstr ""

#: xml/gcut-inspect.xml:195(title)
msgid "gcut_inspect_flags ()"
msgstr ""

#: xml/gcut-inspect.xml:196(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_inspect_flags                  (<link linkend=\"GString\">GString</link> *string,\n"
"                                                         <link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-inspect.xml:199(para)
msgid "Shows <parameter>data</parameter> as value a GFlags type."
msgstr "GFlagsの型の値として<parameter>data</parameter>の詳細を示します。"

#: xml/gcut-inspect.xml:204(programlisting)
#, no-wrap
msgid ""
"\n"
"GType flags_type;\n"
"GtkWidgetFlags flags;\n"
"\n"
"flags_type = GTK_TYPE_WIDGET_FLAGS;\n"
"flags = GTK_TOPLEVEL | GTK_VISIBLE;\n"
"gcut_inspect_flags(string, &amp;flags, &amp;flags_type);\n"
"-&gt; #&lt;GtkWidgetFlags: toplevel|visible (GTK_TOPLEVEL:0x10)|(GTK_VISIBLE:0x100)&gt;\n"
msgstr ""

#: xml/gcut-inspect.xml:222(simpara)
msgid "the pointer of GFlags type."
msgstr "GFlagsの型のポインタ。"

#: xml/gcut-inspect.xml:226(title)
msgid "gcut_inspect_enum ()"
msgstr ""

#: xml/gcut-inspect.xml:227(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_inspect_enum                   (<link linkend=\"GString\">GString</link> *string,\n"
"                                                         <link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-inspect.xml:230(para)
msgid "Shows <parameter>data</parameter> as value of a GEnum type."
msgstr "GEnumの型の値として<parameter>data</parameter>の詳細を示します。"

#: xml/gcut-inspect.xml:235(programlisting)
#, no-wrap
msgid ""
"\n"
"GType enum_type;\n"
"GtkWidgetHelpType value;\n"
"\n"
"enum_type = GTK_TYPE_WIDGET_HELP_TYPE;\n"
"value = GTK_WIDGET_HELP_TOOLTIP;\n"
"gcut_inspect_enum(string, &amp;value, &amp;enum_type);\n"
"-&gt; #&lt;GtkWidgetHelpType: tooltip(GTK_WIDGET_HELP_TOOLTIP:0)&gt;\n"
msgstr ""

#: xml/gcut-inspect.xml:253(simpara)
msgid "the pointer of GEnum type."
msgstr "GEnumの型のポインタ。"

#: xml/gcut-inspect.xml:257(title)
msgid "gcut_inspect_pointer ()"
msgstr ""

#: xml/gcut-inspect.xml:258(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_inspect_pointer                (<link linkend=\"GString\">GString</link> *string,\n"
"                                                         <link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-inspect.xml:261(para)
msgid "Shows <parameter>data</parameter> as a pointer."
msgstr "ポインタとして<parameter>data</parameter>の詳細を示します。"

#: xml/gcut-inspect.xml:266(programlisting)
#, no-wrap
msgid ""
"\n"
"memory = malloc(1);\n"
"gcut_inspect_pointer(string, memory, NULL) -&gt; \"#&lt;0xXXXXXXX&gt;\"\n"
msgstr ""

#: xml/gcut-io.xml:7(refentrytitle) xml/gcut-io.xml:13(refname)
msgid "gcut-io"
msgstr ""

#: xml/gcut-io.xml:21(link)
msgid "GIOCondition"
msgstr ""

#: xml/gcut-io.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/> *             <placeholder-2/>           (<placeholder-3/> condition);\n"
msgstr ""

#: xml/gcut-io.xml:42(title)
msgid "gcut_io_inspect_condition ()"
msgstr ""

#: xml/gcut-io.xml:43(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link> *             gcut_io_inspect_condition           (<link linkend=\"GIOCondition\">GIOCondition</link> condition);"
msgstr ""

#: xml/gcut-io.xml:46(term)
msgid "<parameter>condition</parameter> :"
msgstr ""

#: xml/gcut-key-file.xml:7(refentrytitle) xml/gcut-key-file.xml:13(refname)
msgid "gcut-key-file"
msgstr ""

#: xml/gcut-key-file.xml:21(link) xml/gcut-key-file.xml:26(link)
msgid "GKeyFile"
msgstr ""

#: xml/gcut-key-file.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>              (<placeholder-3/> *key_file,\n"
"                                                         const <placeholder-4/> *group_name,\n"
"                                                         const <placeholder-5/> *key,\n"
"                                                         <placeholder-6/> enum_type,\n"
"                                                         <placeholder-7/> **error);\n"
"<placeholder-8/>               <placeholder-9/>             (<placeholder-10/> *key_file,\n"
"                                                         const <placeholder-11/> *group_name,\n"
"                                                         const <placeholder-12/> *key,\n"
"                                                         <placeholder-13/> flags_type,\n"
"                                                         <placeholder-14/> **error);\n"
msgstr ""

#: xml/gcut-key-file.xml:51(title)
msgid "gcut_key_file_get_enum ()"
msgstr ""

#: xml/gcut-key-file.xml:52(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gint\">gint</link>                gcut_key_file_get_enum              (<link linkend=\"GKeyFile\">GKeyFile</link> *key_file,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *group_name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *key,\n"
"                                                         <link linkend=\"GType\">GType</link> enum_type,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-key-file.xml:59(term) xml/gcut-key-file.xml:86(term)
msgid "<parameter>key_file</parameter> :"
msgstr ""

#: xml/gcut-key-file.xml:62(term) xml/gcut-key-file.xml:89(term)
msgid "<parameter>group_name</parameter> :"
msgstr ""

#: xml/gcut-key-file.xml:65(term) xml/gcut-key-file.xml:92(term)
#: xml/gcut-test-utils.xml:240(term) xml/gcut-test-utils.xml:265(term)
#: xml/gcut-test-utils.xml:291(term)
msgid "<parameter>key</parameter> :"
msgstr ""

#: xml/gcut-key-file.xml:78(title)
msgid "gcut_key_file_get_flags ()"
msgstr ""

#: xml/gcut-key-file.xml:79(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"guint\">guint</link>               gcut_key_file_get_flags             (<link linkend=\"GKeyFile\">GKeyFile</link> *key_file,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *group_name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *key,\n"
"                                                         <link linkend=\"GType\">GType</link> flags_type,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gcut-list.xml:7(refentrytitle) xml/gcut-list.xml:13(refname)
msgid "Assertion Utilities for GList"
msgstr "GList用の検証ユーティリティ"

#: xml/gcut-list.xml:14(refpurpose)
msgid ""
"Utilities to write assertions related to <link linkend=\"GList"
"\"><placeholder-1/></link> more easily."
msgstr ""
"<link linkend=\"GList\"><placeholder-1/></link>に関する検証をもっと簡単に書く"
"ためのユーティリティ。"

#: xml/gcut-list.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            <placeholder-2/>                     (const <placeholder-3/> *list1,\n"
"                                                         const <placeholder-4/> *list2,\n"
"                                                         <placeholder-5/> equal_func);\n"
"<placeholder-6/> *             <placeholder-7/>                   (const <placeholder-8/> *list,\n"
"                                                         <placeholder-9/> inspect_func,\n"
"                                                         <placeholder-10/> user_data);\n"
"<placeholder-11/>            <placeholder-12/>                 (const <placeholder-13/> *list1,\n"
"                                                         const <placeholder-14/> *list2);\n"
"<placeholder-15/> *             <placeholder-16/>               (const <placeholder-17/> *list);\n"
"<placeholder-18/>            <placeholder-19/>                (const <placeholder-20/> *list1,\n"
"                                                         const <placeholder-21/> *list2);\n"
"<placeholder-22/> *             <placeholder-23/>              (const <placeholder-24/> *list);\n"
"<placeholder-25/>            <placeholder-26/>              (const <placeholder-27/> *list1,\n"
"                                                         const <placeholder-28/> *list2);\n"
"<placeholder-29/> *             <placeholder-30/>            (const <placeholder-31/> *list);\n"
"<placeholder-32/> *             <placeholder-33/>            (const <placeholder-34/> *list);\n"
"<placeholder-35/> *             <placeholder-36/>              (<placeholder-37/> type,\n"
"                                                         const <placeholder-38/> *list);\n"
"<placeholder-39/> *             <placeholder-40/>             (<placeholder-41/> type,\n"
"                                                         const <placeholder-42/> *list);\n"
"#define             <placeholder-43/>                 (list1, list2)\n"
"#define             <placeholder-44/>               (list)\n"
"#define             <placeholder-45/>                (list1, list2)\n"
"#define             <placeholder-46/>              (list)\n"
"#define             <placeholder-47/>              (list1, list2)\n"
"#define             <placeholder-48/>            (list)\n"
"#define             <placeholder-49/>            (list)\n"
"#define             <placeholder-50/>              (list, type)\n"
"#define             <placeholder-51/>             (list, type)\n"
msgstr ""

#: xml/gcut-list.xml:68(para)
msgid ""
"The utilities help you to write assertions that are related to <link linkend="
"\"GList\"><type>GList</type></link>."
msgstr ""
"このユーティリティは<link linkend=\"GList\"><type>GList</type></link>に関する"
"検証の作成を補助します。"

#: xml/gcut-list.xml:78(title)
msgid "gcut_list_equal ()"
msgstr ""

#: xml/gcut-list.xml:79(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_list_equal                     (const <link linkend=\"GList\">GList</link> *list1,\n"
"                                                         const <link linkend=\"GList\">GList</link> *list2,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_func);"
msgstr ""

#: xml/gcut-list.xml:82(para)
msgid ""
"Compares two <link linkend=\"GList\"><type>GList</type></link>, "
"<parameter>list1</parameter> and <parameter>list2</parameter>. "
"<parameter>equal_func</parameter> is called for each corresponding values of "
"<parameter>list1</parameter> and <parameter>list2</parameter>."
msgstr ""
"ふたつの<link linkend=\"GList\"><type>GList</type></link>、<parameter>list1</"
"parameter>と<parameter>list2</parameter>を比較します。<parameter>equal_func</"
"parameter>は<parameter>list1</parameter>と<parameter>list2</parameter>の対応"
"する値それぞれに対して呼ばれます。"

#: xml/gcut-list.xml:93(term) xml/gcut-list.xml:146(term)
#: xml/gcut-list.xml:181(term) xml/gcut-list.xml:216(term)
#: xml/gcut-list.xml:306(term) xml/gcut-list.xml:335(term)
#: xml/gcut-list.xml:364(term)
msgid "<parameter>list1</parameter> :"
msgstr ""

#: xml/gcut-list.xml:94(simpara) xml/gcut-list.xml:97(simpara)
msgid "a <link linkend=\"GList\"><type>GList</type></link> to be compared."
msgstr "比較する<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:96(term) xml/gcut-list.xml:149(term)
#: xml/gcut-list.xml:184(term) xml/gcut-list.xml:219(term)
#: xml/gcut-list.xml:309(term) xml/gcut-list.xml:338(term)
#: xml/gcut-list.xml:367(term)
msgid "<parameter>list2</parameter> :"
msgstr ""

#: xml/gcut-list.xml:102(simpara)
msgid ""
"TRUE if all corresponding values of <parameter>list1</parameter> and "
"<parameter>list2</parameter> are reported TRUE by <parameter>equal_func</"
"parameter>, FALSE otherwise."
msgstr ""
"<parameter>list1</parameter>と<parameter>list2</parameter>のすべての対応する"
"値が<parameter>equal_func</parameter>でTRUEの場合はTRUE、そうでない場合は"
"FALSE。"

#: xml/gcut-list.xml:108(title)
msgid "gcut_list_inspect ()"
msgstr ""

#: xml/gcut-list.xml:109(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link> *             gcut_list_inspect                   (const <link linkend=\"GList\">GList</link> *list,\n"
"                                                         <link linkend=\"GCutInspectFunction\">GCutInspectFunction</link> inspect_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-list.xml:112(para)
msgid ""
"Inspects <parameter>list</parameter>. Each value of <parameter>list</"
"parameter> is inspected by <parameter>inspect_func</parameter>. The returned "
"string should be freed when no longer needed."
msgstr ""
"<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>のそ"
"れぞれの値は<parameter>inspect_func</parameter>で詳細化されます。返された文字"
"列が必要なくなったときは開放してください。"

#: xml/gcut-list.xml:124(term) xml/gcut-list.xml:165(term)
#: xml/gcut-list.xml:200(term) xml/gcut-list.xml:235(term)
#: xml/gcut-list.xml:250(term) xml/gcut-list.xml:270(term)
#: xml/gcut-list.xml:290(term) xml/gcut-list.xml:322(term)
#: xml/gcut-list.xml:351(term) xml/gcut-list.xml:380(term)
#: xml/gcut-list.xml:393(term) xml/gcut-list.xml:407(term)
#: xml/gcut-list.xml:424(term) xml/gcut-public.xml:89(term)
#: xml/gcut-test-utils.xml:109(term) xml/gcut-test-utils.xml:227(term)
msgid "<parameter>list</parameter> :"
msgstr ""

#: xml/gcut-list.xml:125(simpara)
msgid "a <link linkend=\"GList\"><type>GList</type></link> to be inspected."
msgstr "詳細を示す<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:127(term) xml/gcut-object.xml:109(term)
msgid "<parameter>inspect_func</parameter> :"
msgstr ""

#: xml/gcut-list.xml:133(simpara) xml/gcut-list.xml:168(simpara)
#: xml/gcut-list.xml:203(simpara) xml/gcut-list.xml:238(simpara)
#: xml/gcut-list.xml:253(simpara) xml/gcut-list.xml:273(simpara)
#: xml/gcut-list.xml:293(simpara)
msgid "inspected <parameter>list</parameter> as a string."
msgstr "<parameter>list</parameter>の詳細を示した文字列。"

#: xml/gcut-list.xml:138(title)
msgid "gcut_list_equal_int ()"
msgstr ""

#: xml/gcut-list.xml:139(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_list_equal_int                 (const <link linkend=\"GList\">GList</link> *list1,\n"
"                                                         const <link linkend=\"GList\">GList</link> *list2);"
msgstr ""

#: xml/gcut-list.xml:141(para) xml/gcut-list.xml:301(para)
msgid ""
"Compares two <link linkend=\"GList\"><type>GList</type></link>, "
"<parameter>list1</parameter> and <parameter>list2</parameter>. "
"<parameter>list1</parameter> and <parameter>list2</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"gint"
"\"><type>gint</type></link>."
msgstr ""
"ふたつの<link linkend=\"GList\"><type>GList</type></link>、<parameter>list1</"
"parameter>と<parameter>list2</parameter>を比較します。<parameter>list1</"
"parameter>と<parameter>list2</parameter>は<link linkend=\"gint\"><type>gint</"
"type></link>の<link linkend=\"GList\"><type>GList</type></link>でなければいけ"
"ません。"

#: xml/gcut-list.xml:147(simpara) xml/gcut-list.xml:150(simpara)
#: xml/gcut-list.xml:307(simpara) xml/gcut-list.xml:310(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"gint"
"\"><type>gint</type></link> to be compared."
msgstr ""
"比較する<link linkend=\"gint\"><type>gint</type></link>の<link linkend="
"\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:152(simpara)
msgid ""
"TRUE if all corresponding integers of <parameter>list1</parameter> and "
"<parameter>list2</parameter> are same value, FALSE otherwise."
msgstr ""
"<parameter>list1</parameter>と<parameter>list2</parameter>の対応するすべての"
"値が同じ場合はTRUE、そうでない場合はFALSE。"

#: xml/gcut-list.xml:158(title)
msgid "gcut_list_inspect_int ()"
msgstr ""

#: xml/gcut-list.xml:159(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link> *             gcut_list_inspect_int               (const <link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/gcut-list.xml:160(para) xml/gcut-list.xml:317(para)
msgid ""
"Inspects <parameter>list</parameter>. <parameter>list</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"gint"
"\"><type>gint</type></link>. The returned string should be freed when no "
"longer needed."
msgstr ""
"<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>は"
"<link linkend=\"gint\"><type>gint</type></link>の<link linkend=\"GList"
"\"><type>GList</type></link>でなければいけません。返された文字列が必要なく"
"なったときは開放してください。"

#: xml/gcut-list.xml:166(simpara) xml/gcut-list.xml:323(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"gint"
"\"><type>gint</type></link> to be inspected."
msgstr ""
"詳細を示す<link linkend=\"gint\"><type>gint</type></link>の<link linkend="
"\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:173(title)
msgid "gcut_list_equal_uint ()"
msgstr ""

#: xml/gcut-list.xml:174(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_list_equal_uint                (const <link linkend=\"GList\">GList</link> *list1,\n"
"                                                         const <link linkend=\"GList\">GList</link> *list2);"
msgstr ""

#: xml/gcut-list.xml:176(para) xml/gcut-list.xml:330(para)
msgid ""
"Compares two <link linkend=\"GList\"><type>GList</type></link>, "
"<parameter>list1</parameter> and <parameter>list2</parameter>. "
"<parameter>list1</parameter> and <parameter>list2</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"guint"
"\"><type>guint</type></link>."
msgstr ""
"ふたつの<link linkend=\"GList\"><type>GList</type></link>、<parameter>list1</"
"parameter>と<parameter>list2</parameter>を比較します。<parameter>list1</"
"parameter>と<parameter>list2</parameter>は<link linkend=\"guint"
"\"><type>guint</type></link>の<link linkend=\"GList\"><type>GList</type></"
"link>でなければいけません。"

#: xml/gcut-list.xml:182(simpara) xml/gcut-list.xml:185(simpara)
#: xml/gcut-list.xml:336(simpara) xml/gcut-list.xml:339(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"guint"
"\"><type>guint</type></link> to be compared."
msgstr ""
"比較する<link linkend=\"guint\"><type>guint</type></link>の<link linkend="
"\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:187(simpara)
msgid ""
"TRUE if all corresponding unsigned integers of <parameter>list1</parameter> "
"and <parameter>list2</parameter> are same value, FALSE otherwise."
msgstr ""
"<parameter>list1</parameter>と<parameter>list2</parameter>のすべての対応する"
"符号なし整数値が同じ値の場合はTRUE、そうでない場合はFALSE。"

#: xml/gcut-list.xml:193(title)
msgid "gcut_list_inspect_uint ()"
msgstr ""

#: xml/gcut-list.xml:194(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link> *             gcut_list_inspect_uint              (const <link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/gcut-list.xml:195(para) xml/gcut-list.xml:346(para)
msgid ""
"Inspects <parameter>list</parameter>. <parameter>list</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"guint"
"\"><type>guint</type></link>. The returned string should be freed when no "
"longer needed."
msgstr ""
"<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>は"
"<link linkend=\"guint\"><type>guint</type></link>の<link linkend=\"GList"
"\"><type>GList</type></link>でなければいけません。返された文字列が必要なく"
"なったときは開放してください。"

#: xml/gcut-list.xml:201(simpara) xml/gcut-list.xml:352(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"guint"
"\"><type>guint</type></link> to be inspected."
msgstr ""
"詳細を示す<link linkend=\"guint\"><type>guint</type></link>の<link linkend="
"\"GList\"><type>GList</type></link>です。"

#: xml/gcut-list.xml:208(title)
msgid "gcut_list_equal_string ()"
msgstr ""

#: xml/gcut-list.xml:209(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_list_equal_string              (const <link linkend=\"GList\">GList</link> *list1,\n"
"                                                         const <link linkend=\"GList\">GList</link> *list2);"
msgstr ""

#: xml/gcut-list.xml:211(para) xml/gcut-list.xml:359(para)
msgid ""
"Compares two <link linkend=\"GList\"><type>GList</type></link>, "
"<parameter>list1</parameter> and <parameter>list2</parameter>. "
"<parameter>list1</parameter> and <parameter>list2</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of string."
msgstr ""
"ふたつの<link linkend=\"GList\"><type>GList</type></link>、<parameter>list1</"
"parameter>と<parameter>list2</parameter>を比較します。<parameter>list1</"
"parameter>と<parameter>list2</parameter>は文字列の<link linkend=\"GList"
"\"><type>GList</type></link>でなければいけません。"

#: xml/gcut-list.xml:217(simpara) xml/gcut-list.xml:220(simpara)
#: xml/gcut-list.xml:365(simpara) xml/gcut-list.xml:368(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of string to be compared."
msgstr "比較する文字列の<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:222(simpara)
msgid ""
"TRUE if all corresponding string of <parameter>list1</parameter> and "
"<parameter>list2</parameter> are same content string, FALSE otherwise."
msgstr ""
"<parameter>list1</parameter>と<parameter>list2</parameter>のすべての対応する"
"文字列が同じ内容の文字列の場合はTRUE、そうでない場合はFALSE。"

#: xml/gcut-list.xml:228(title)
msgid "gcut_list_inspect_string ()"
msgstr ""

#: xml/gcut-list.xml:229(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link> *             gcut_list_inspect_string            (const <link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/gcut-list.xml:230(para) xml/gcut-list.xml:375(para)
msgid ""
"Inspects <parameter>list</parameter>. <parameter>list</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of string. The returned "
"string should be freed when no longer needed."
msgstr ""
"<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>は文"
"字列の<link linkend=\"GList\"><type>GList</type></link>でなければいけません。"
"返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-list.xml:236(simpara) xml/gcut-list.xml:381(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of string to be "
"inspected."
msgstr "詳細を示す文字列の<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:243(title)
msgid "gcut_list_inspect_object ()"
msgstr ""

#: xml/gcut-list.xml:244(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link> *             gcut_list_inspect_object            (const <link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/gcut-list.xml:245(para) xml/gcut-list.xml:388(para)
msgid ""
"Inspects <parameter>list</parameter>. <parameter>list</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"GObject"
"\"><type>GObject</type></link>. The returned string should be freed when no "
"longer needed."
msgstr ""
"<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>は"
"<link linkend=\"GObject\"><type>GObject</type></link>の<link linkend=\"GList"
"\"><type>GList</type></link>でなければいけません。返された文字列が必要なく"
"なったときは開放してください。"

#: xml/gcut-list.xml:251(simpara) xml/gcut-list.xml:394(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of <link linkend="
"\"GObject\"><type>GObject</type></link> to be inspected."
msgstr ""
"詳細を示す<link linkend=\"GObject\"><type>GObject</type></link>の<link "
"linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:258(title)
msgid "gcut_list_inspect_enum ()"
msgstr ""

#: xml/gcut-list.xml:259(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link> *             gcut_list_inspect_enum              (<link linkend=\"GType\">GType</link> type,\n"
"                                                         const <link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/gcut-list.xml:261(para) xml/gcut-list.xml:401(para)
msgid ""
"Inspects <parameter>list</parameter>. <parameter>list</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of enum value of <link "
"linkend=\"GEnum\"><type>GEnum</type></link>. The returned string should be "
"freed when no longer needed."
msgstr ""
"<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>は"
"<link linkend=\"GEnum\"><type>GEnum</type></link>の列挙値の<link linkend="
"\"GList\"><type>GList</type></link>でなければいけません。返された文字列が必要"
"なくなったときは開放してください。"

#: xml/gcut-list.xml:271(simpara) xml/gcut-list.xml:408(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of enum value to be "
"inspected."
msgstr "詳細を示す列挙値の<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:278(title)
msgid "gcut_list_inspect_flags ()"
msgstr ""

#: xml/gcut-list.xml:279(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link> *             gcut_list_inspect_flags             (<link linkend=\"GType\">GType</link> type,\n"
"                                                         const <link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/gcut-list.xml:281(para) xml/gcut-list.xml:418(para)
msgid ""
"Inspects <parameter>list</parameter>. <parameter>list</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of flags value of <link "
"linkend=\"GFlags\"><type>GFlags</type></link>. The returned string should be "
"freed when no longer needed."
msgstr ""
"<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>は"
"<link linkend=\"GFlags\"><type>GFlags</type></link>のフラグ値の<link linkend="
"\"GList\"><type>GList</type></link>でなければいけません。返された文字列が必要"
"なくなったときは開放してください。"

#: xml/gcut-list.xml:291(simpara) xml/gcut-list.xml:425(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of flags value to be "
"inspected."
msgstr ""
"詳細を示すフラグ値の<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:298(title)
msgid "gcut_list_int_equal()"
msgstr ""

#: xml/gcut-list.xml:299(programlisting)
#, no-wrap
msgid "#define             gcut_list_int_equal(list1, list2)"
msgstr ""

#: xml/gcut-list.xml:300(para)
msgid ""
"<literal>gcut_list_int_equal</literal> has been deprecated since version "
"1.0.6 and should not be used in newly-written code. Use <link linkend=\"gcut-"
"list-equal-int\"><function>gcut_list_equal_int()</function></link> instead."
msgstr ""
"<literal>gcut_list_int_equal</literal>はバージョン1.0.6から非推奨になりまし"
"た。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"list-equal-int\"><function>gcut_list_equal_int()</function></link>を使って下"
"さい。"

#: xml/gcut-list.xml:314(title)
msgid "gcut_list_int_inspect()"
msgstr ""

#: xml/gcut-list.xml:315(programlisting)
#, no-wrap
msgid "#define             gcut_list_int_inspect(list)"
msgstr ""

#: xml/gcut-list.xml:316(para)
msgid ""
"<literal>gcut_list_int_inspect</literal> has been deprecated since version "
"1.0.6 and should not be used in newly-written code. Use <link linkend=\"gcut-"
"list-inspect-int\"><function>gcut_list_inspect_int()</function></link> "
"instead."
msgstr ""
"<literal>gcut_list_int_inspect</literal>はバージョン1.0.6から非推奨になりまし"
"た。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"list-inspect-int\"><function>gcut_list_inspect_int()</function></link>を使っ"
"てください。"

#: xml/gcut-list.xml:327(title)
msgid "gcut_list_uint_equal()"
msgstr ""

#: xml/gcut-list.xml:328(programlisting)
#, no-wrap
msgid "#define             gcut_list_uint_equal(list1, list2)"
msgstr ""

#: xml/gcut-list.xml:329(para)
msgid ""
"<literal>gcut_list_uint_equal</literal> has been deprecated since version "
"1.0.6 and should not be used in newly-written code. Use <link linkend=\"gcut-"
"list-equal-uint\"><function>gcut_list_equal_uint()</function></link> instead."
msgstr ""
"<literal>gcut_list_uint_equal</literal>はバージョン1.0.6から非推奨になりまし"
"た。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"list-equal-uint\"><function>gcut_list_equal_uint()</function></link>を使って"
"ください。"

#: xml/gcut-list.xml:343(title)
msgid "gcut_list_uint_inspect()"
msgstr ""

#: xml/gcut-list.xml:344(programlisting)
#, no-wrap
msgid "#define             gcut_list_uint_inspect(list)"
msgstr ""

#: xml/gcut-list.xml:345(para)
msgid ""
"<literal>gcut_list_uint_inspect</literal> has been deprecated since version "
"1.0.6 and should not be used in newly-written code. Use <link linkend=\"gcut-"
"list-inspect-uint\"><function>gcut_list_inspect_uint()</function></link> "
"instead."
msgstr ""
"<literal>gcut_list_uint_inspect</literal>はバージョン1.0.6から非推奨になりま"
"した。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"list-inspect-uint\"><function>gcut_list_inspect_uint()</function></link>を"
"使ってください。"

#: xml/gcut-list.xml:356(title)
msgid "gcut_list_string_equal()"
msgstr ""

#: xml/gcut-list.xml:357(programlisting)
#, no-wrap
msgid "#define             gcut_list_string_equal(list1, list2)"
msgstr ""

#: xml/gcut-list.xml:358(para)
msgid ""
"<literal>gcut_list_string_equal</literal> has been deprecated since version "
"1.0.6 and should not be used in newly-written code. Use <link linkend=\"gcut-"
"list-equal-string\"><function>gcut_list_equal_string()</function></link> "
"instead."
msgstr ""
"<literal>gcut_list_string_equal</literal>はバージョン1.0.6から非推奨になりま"
"した。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"list-equal-string\"><function>gcut_list_equal_string()</function></link>を"
"使ってください。"

#: xml/gcut-list.xml:372(title)
msgid "gcut_list_string_inspect()"
msgstr ""

#: xml/gcut-list.xml:373(programlisting)
#, no-wrap
msgid "#define             gcut_list_string_inspect(list)"
msgstr ""

#: xml/gcut-list.xml:374(para)
msgid ""
"<literal>gcut_list_string_inspect</literal> has been deprecated since "
"version 1.0.6 and should not be used in newly-written code. Use <link "
"linkend=\"gcut-list-inspect-string\"><function>gcut_list_inspect_string()</"
"function></link> instead."
msgstr ""
"<literal>gcut_list_string_inspect</literal>はバージョン1.0.6から非推奨になり"
"ました。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"list-inspect-string\"><function>gcut_list_inspect_string()</function></link>"
"を使ってください。"

#: xml/gcut-list.xml:385(title)
msgid "gcut_list_object_inspect()"
msgstr ""

#: xml/gcut-list.xml:386(programlisting)
#, no-wrap
msgid "#define             gcut_list_object_inspect(list)"
msgstr ""

#: xml/gcut-list.xml:387(para)
msgid ""
"<literal>gcut_list_object_inspect</literal> has been deprecated since "
"version 1.0.6 and should not be used in newly-written code. Use <link "
"linkend=\"gcut-list-inspect-object\"><function>gcut_list_inspect_object()</"
"function></link> instead."
msgstr ""
"<literal>gcut_list_object_inspect</literal>はバージョン1.0.6から非推奨になり"
"ました。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"list-inspect-object\"><function>gcut_list_inspect_object()</function></link>"
"を使ってください。"

#: xml/gcut-list.xml:398(title)
msgid "gcut_list_enum_inspect()"
msgstr ""

#: xml/gcut-list.xml:399(programlisting)
#, no-wrap
msgid "#define             gcut_list_enum_inspect(list, type)"
msgstr ""

#: xml/gcut-list.xml:400(para)
msgid ""
"<literal>gcut_list_enum_inspect</literal> has been deprecated since version "
"1.0.6 and should not be used in newly-written code. Use <link linkend=\"gcut-"
"list-inspect-enum\"><function>gcut_list_inspect_enum()</function></link> "
"instead."
msgstr ""
"<literal>gcut_list_enum_inspect</literal>はバージョン1.0.6から非推奨になりま"
"した。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"list-inspect-enum\"><function>gcut_list_inspect_enum()</function></link>を"
"使ってください。"

#: xml/gcut-list.xml:415(title)
msgid "gcut_list_flags_inspect()"
msgstr ""

#: xml/gcut-list.xml:416(programlisting)
#, no-wrap
msgid "#define             gcut_list_flags_inspect(list, type)"
msgstr ""

#: xml/gcut-list.xml:417(para)
msgid ""
"<literal>gcut_list_flags_inspect</literal> has been deprecated since version "
"1.0.6 and should not be used in newly-written code. Use <link linkend=\"gcut-"
"list-inspect-flags\"><function>gcut_list_inspect_flags()</function></link> "
"instead."
msgstr ""
"<literal>gcut_list_flags_inspect</literal>はバージョン1.0.6から非推奨になりま"
"した。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"list-inspect-flags\"><function>gcut_list_inspect_flags()</function></link>を"
"使ってください。"

#: xml/gcut-main.xml:7(refentrytitle) xml/gcut-main.xml:13(refname)
msgid "gcut-main"
msgstr ""

#: xml/gcut-main.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                           (void);\n"
"<placeholder-3/>                <placeholder-4/>               (void);\n"
"<placeholder-5/>                <placeholder-6/>                           (void);\n"
"<placeholder-7/>                <placeholder-8/>               (void);\n"
msgstr ""

#: xml/gcut-main.xml:45(title)
msgid "gcut_init ()"
msgstr ""

#: xml/gcut-main.xml:46(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                gcut_init                           (void);"
msgstr ""

#: xml/gcut-main.xml:50(title)
msgid "gcut_value_equal_init ()"
msgstr ""

#: xml/gcut-main.xml:51(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                gcut_value_equal_init               (void);"
msgstr ""

#: xml/gcut-main.xml:55(title)
msgid "gcut_quit ()"
msgstr ""

#: xml/gcut-main.xml:56(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                gcut_quit                           (void);"
msgstr ""

#: xml/gcut-main.xml:60(title)
msgid "gcut_value_equal_quit ()"
msgstr ""

#: xml/gcut-main.xml:61(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                gcut_value_equal_quit               (void);"
msgstr ""

#: xml/gcut-object.xml:7(refentrytitle) xml/gcut-object.xml:13(refname)
msgid "Assertion Utilities for GObject"
msgstr "GObject用の検証ユーティリティ"

#: xml/gcut-object.xml:14(refpurpose)
msgid ""
"Utilities to write assertions related to <link linkend=\"GObject"
"\"><placeholder-1/></link> more easily."
msgstr ""
"<link linkend=\"GObject\"><placeholder-1/></link>に関する検証をもっと簡単に書"
"くためのユーティリティ。"

#: xml/gcut-object.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            <placeholder-2/>                   (const <placeholder-3/> *object1,\n"
"                                                         const <placeholder-4/> *object2,\n"
"                                                         <placeholder-5/> equal_func);\n"
"<placeholder-6/> *             <placeholder-7/>                 (const <placeholder-8/> *object);\n"
"<placeholder-9/> *             <placeholder-10/>          (const <placeholder-11/> *object,\n"
"                                                         <placeholder-12/> inspect_func,\n"
"                                                         <placeholder-13/> user_data);\n"
msgstr ""

#: xml/gcut-object.xml:46(para)
msgid ""
"The utilities help you to write assertions that are related to <link linkend="
"\"GObject\"><type>GObject</type></link>."
msgstr ""
"このユーティリティは<link linkend=\"GObject\"><type>GObject</type></link>に関"
"する検証の作成を補助します。"

#: xml/gcut-object.xml:56(title)
msgid "gcut_object_equal ()"
msgstr ""

#: xml/gcut-object.xml:57(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_object_equal                   (const <link linkend=\"GObject\">GObject</link> *object1,\n"
"                                                         const <link linkend=\"GObject\">GObject</link> *object2,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_func);"
msgstr ""

#: xml/gcut-object.xml:60(para)
msgid ""
"Compares two <link linkend=\"GObject\"><type>GObject</type></link>, "
"<parameter>object1</parameter> and <parameter>object2</parameter> by "
"<parameter>equal_func</parameter>. If <parameter>equal_func</parameter> is "
"NULL, <parameter>object1</parameter> and <parameter>object2</parameter> is "
"just only compared by memory location."
msgstr ""
"ふたつの<link linkend=\"GObject\"><type>GObject</type></link>、"
"<parameter>object1</parameter>と<parameter>object2</parameter>を"
"<parameter>equal_func</parameter>で比較します。<parameter>equal_func</"
"parameter>がNULLの場合は<parameter>object1</parameter>と<parameter>object2</"
"parameter>は単にメモリの位置だけで比較します。"

#: xml/gcut-object.xml:66(term)
msgid "<parameter>object1</parameter> :"
msgstr ""

#: xml/gcut-object.xml:67(simpara) xml/gcut-object.xml:70(simpara)
msgid "a <link linkend=\"GObject\"><type>GObject</type></link> to be compared."
msgstr "比較する<link linkend=\"GObject\"><type>GObject</type></link>。"

#: xml/gcut-object.xml:69(term)
msgid "<parameter>object2</parameter> :"
msgstr ""

#: xml/gcut-object.xml:73(simpara)
msgid ""
"a function that compares two <link linkend=\"GObject\"><type>GObject</type></"
"link>. NULL is OK."
msgstr ""
"ふたつの<link linkend=\"GObject\"><type>GObject</type></link>を比較する関数。"
"NULLも可。"

#: xml/gcut-object.xml:76(simpara)
msgid ""
"TRUE if <parameter>object1</parameter> == <parameter>object2</parameter> or "
"<parameter>equal_func</parameter>(<parameter>object1</parameter>, "
"<parameter>object2</parameter>), FALSE otherwise."
msgstr ""
"<parameter>object1</parameter> == <parameter>object2</parameter>あるいは"
"<parameter>equal_func</parameter>(<parameter>object1</parameter>, "
"<parameter>object2</parameter>)がTRUEならTRUE、そうでない場合はFALSE。"

#: xml/gcut-object.xml:82(title)
msgid "gcut_object_inspect ()"
msgstr ""

#: xml/gcut-object.xml:83(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link> *             gcut_object_inspect                 (const <link linkend=\"GObject\">GObject</link> *object);"
msgstr ""

#: xml/gcut-object.xml:84(para)
msgid ""
"Inspects <parameter>object</parameter>'s property. The returned string "
"should be freed when no longer needed."
msgstr ""
"<parameter>object</parameter>のプロパティの詳細を返します。返された文字列が必"
"要なくなったときは開放してください。"

#: xml/gcut-object.xml:90(simpara) xml/gcut-object.xml:107(simpara)
msgid "a <link linkend=\"GObject\"><type>GObject</type></link>."
msgstr "<link linkend=\"GObject\"><type>GObject</type></link>。"

#: xml/gcut-object.xml:92(simpara) xml/gcut-object.xml:115(simpara)
msgid "inspected <parameter>object</parameter> as a string."
msgstr "<parameter>object</parameter>の詳細を示した文字列。"

#: xml/gcut-object.xml:97(title)
msgid "gcut_object_inspect_custom ()"
msgstr ""

#: xml/gcut-object.xml:98(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link> *             gcut_object_inspect_custom          (const <link linkend=\"GObject\">GObject</link> *object,\n"
"                                                         <link linkend=\"GCutInspectFunction\">GCutInspectFunction</link> inspect_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-object.xml:101(para)
msgid ""
"Inspects <parameter>object</parameter> by <parameter>inspect_func</"
"parameter>. The returned string should be freed when no longer needed."
msgstr ""
"<parameter>object</parameter>を<parameter>inspect_func</parameter>で詳細を示"
"します。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-object.xml:110(simpara)
msgid "a function that inspects <parameter>object</parameter>."
msgstr "<parameter>object</parameter>の詳細を示す関数。"

#: xml/gcut-public.xml:7(refentrytitle) xml/gcut-public.xml:13(refname)
msgid "gcut-public"
msgstr ""

#: xml/gcut-public.xml:21(link) xml/gcut-public.xml:23(link)
#: xml/gcut-public.xml:25(link) xml/gcut-public.xml:28(link)
msgid "CutTestContext"
msgstr ""

#: xml/gcut-public.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/> *           <placeholder-2/>      (<placeholder-3/> *context,\n"
"                                                         <placeholder-4/> *object);\n"
"const <placeholder-5/> *      <placeholder-6/>       (<placeholder-7/> *context,\n"
"                                                         <placeholder-8/> *error);\n"
"const <placeholder-9/> *       <placeholder-10/>        (<placeholder-11/> *context,\n"
"                                                         <placeholder-12/> *list,\n"
"                                                         <placeholder-13/> destroy);\n"
"<placeholder-14/> *        <placeholder-15/>  (<placeholder-16/> *context,\n"
"                                                         <placeholder-17/> *hash_table);\n"
msgstr ""

#: xml/gcut-public.xml:50(title)
msgid "cut_test_context_take_g_object ()"
msgstr ""

#: xml/gcut-public.xml:51(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GObject\">GObject</link> *           cut_test_context_take_g_object      (<link linkend=\"CutTestContext\">CutTestContext</link> *context,\n"
"                                                         <link linkend=\"GObject\">GObject</link> *object);"
msgstr ""

#: xml/gcut-public.xml:65(title)
msgid "cut_test_context_take_g_error ()"
msgstr ""

#: xml/gcut-public.xml:66(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"GError\">GError</link> *      cut_test_context_take_g_error       (<link linkend=\"CutTestContext\">CutTestContext</link> *context,\n"
"                                                         <link linkend=\"GError\">GError</link> *error);"
msgstr ""

#: xml/gcut-public.xml:80(title)
msgid "cut_test_context_take_g_list ()"
msgstr ""

#: xml/gcut-public.xml:81(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"GList\">GList</link> *       cut_test_context_take_g_list        (<link linkend=\"CutTestContext\">CutTestContext</link> *context,\n"
"                                                         <link linkend=\"GList\">GList</link> *list,\n"
"                                                         <link linkend=\"CutDestroyFunction\">CutDestroyFunction</link> destroy);"
msgstr ""

#: xml/gcut-public.xml:92(term)
msgid "<parameter>destroy</parameter> :"
msgstr ""

#: xml/gcut-public.xml:99(title)
msgid "cut_test_context_take_g_hash_table ()"
msgstr ""

#: xml/gcut-public.xml:100(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GHashTable\">GHashTable</link> *        cut_test_context_take_g_hash_table  (<link linkend=\"CutTestContext\">CutTestContext</link> *context,\n"
"                                                         <link linkend=\"GHashTable\">GHashTable</link> *hash_table);"
msgstr ""

#: xml/gcut-public.xml:107(term) xml/gcut-test-utils.xml:129(term)
msgid "<parameter>hash_table</parameter> :"
msgstr ""

#: xml/gcut-string-io-channel.xml:7(refentrytitle)
#: xml/gcut-string-io-channel.xml:13(refname)
msgid "gcut-string-io-channel"
msgstr ""

#: xml/gcut-string-io-channel.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/> *        <placeholder-2/>          (const <placeholder-3/> *initial);\n"
"<placeholder-4/> *           <placeholder-5/>   (<placeholder-6/> *channel);\n"
"<placeholder-7/>                <placeholder-8/>        (<placeholder-9/> *channel);\n"
"<placeholder-10/>               <placeholder-11/>\n"
"                                                        (<placeholder-12/> *channel);\n"
"<placeholder-13/>                <placeholder-14/>\n"
"                                                        (<placeholder-15/> *channel,\n"
"                                                         <placeholder-16/> limit);\n"
"<placeholder-17/>               <placeholder-18/>    (<placeholder-19/> *channel);\n"
"<placeholder-20/>                <placeholder-21/>    (<placeholder-22/> *channel,\n"
"                                                         <placeholder-23/> limit);\n"
"<placeholder-24/>            <placeholder-25/>\n"
"                                                        (<placeholder-26/> *channel);\n"
"<placeholder-27/>                <placeholder-28/>\n"
"                                                        (<placeholder-29/> *channel,\n"
"                                                         <placeholder-30/> read_fail);\n"
"<placeholder-31/>            <placeholder-32/>\n"
"                                                        (<placeholder-33/> *channel);\n"
"<placeholder-34/>                <placeholder-35/>\n"
"                                                        (<placeholder-36/> *channel,\n"
"                                                         <placeholder-37/> pipe_mode);\n"
msgstr ""

#: xml/gcut-string-io-channel.xml:62(title)
msgid "gcut_string_io_channel_new ()"
msgstr ""

#: xml/gcut-string-io-channel.xml:63(programlisting)
#, no-wrap
msgid "<link linkend=\"GIOChannel\">GIOChannel</link> *        gcut_string_io_channel_new          (const <link linkend=\"gchar\">gchar</link> *initial);"
msgstr ""

#: xml/gcut-string-io-channel.xml:66(term)
msgid "<parameter>initial</parameter> :"
msgstr ""

#: xml/gcut-string-io-channel.xml:73(title)
msgid "gcut_string_io_channel_get_string ()"
msgstr ""

#: xml/gcut-string-io-channel.xml:74(programlisting)
#, no-wrap
msgid "<link linkend=\"GString\">GString</link> *           gcut_string_io_channel_get_string   (<link linkend=\"GIOChannel\">GIOChannel</link> *channel);"
msgstr ""

#: xml/gcut-string-io-channel.xml:77(term)
#: xml/gcut-string-io-channel.xml:88(term)
#: xml/gcut-string-io-channel.xml:98(term)
#: xml/gcut-string-io-channel.xml:111(term)
#: xml/gcut-string-io-channel.xml:123(term)
#: xml/gcut-string-io-channel.xml:135(term)
#: xml/gcut-string-io-channel.xml:148(term)
#: xml/gcut-string-io-channel.xml:161(term)
#: xml/gcut-string-io-channel.xml:174(term)
#: xml/gcut-string-io-channel.xml:187(term)
msgid "<parameter>channel</parameter> :"
msgstr ""

#: xml/gcut-string-io-channel.xml:84(title)
msgid "gcut_string_io_channel_clear ()"
msgstr ""

#: xml/gcut-string-io-channel.xml:85(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                gcut_string_io_channel_clear        (<link linkend=\"GIOChannel\">GIOChannel</link> *channel);"
msgstr ""

#: xml/gcut-string-io-channel.xml:93(title)
msgid "gcut_string_io_channel_get_buffer_limit ()"
msgstr ""

#: xml/gcut-string-io-channel.xml:94(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gsize\">gsize</link>               gcut_string_io_channel_get_buffer_limit\n"
"                                                        (<link linkend=\"GIOChannel\">GIOChannel</link> *channel);"
msgstr ""

#: xml/gcut-string-io-channel.xml:105(title)
msgid "gcut_string_io_channel_set_buffer_limit ()"
msgstr ""

#: xml/gcut-string-io-channel.xml:106(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_string_io_channel_set_buffer_limit\n"
"                                                        (<link linkend=\"GIOChannel\">GIOChannel</link> *channel,\n"
"                                                         <link linkend=\"gsize\">gsize</link> limit);"
msgstr ""

#: xml/gcut-string-io-channel.xml:114(term)
#: xml/gcut-string-io-channel.xml:138(term)
msgid "<parameter>limit</parameter> :"
msgstr ""

#: xml/gcut-string-io-channel.xml:119(title)
msgid "gcut_string_io_channel_get_limit ()"
msgstr ""

#: xml/gcut-string-io-channel.xml:120(programlisting)
#, no-wrap
msgid "<link linkend=\"gsize\">gsize</link>               gcut_string_io_channel_get_limit    (<link linkend=\"GIOChannel\">GIOChannel</link> *channel);"
msgstr ""

#: xml/gcut-string-io-channel.xml:130(title)
msgid "gcut_string_io_channel_set_limit ()"
msgstr ""

#: xml/gcut-string-io-channel.xml:131(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_string_io_channel_set_limit    (<link linkend=\"GIOChannel\">GIOChannel</link> *channel,\n"
"                                                         <link linkend=\"gsize\">gsize</link> limit);"
msgstr ""

#: xml/gcut-string-io-channel.xml:143(title)
msgid "gcut_string_io_channel_get_read_fail ()"
msgstr ""

#: xml/gcut-string-io-channel.xml:144(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_string_io_channel_get_read_fail\n"
"                                                        (<link linkend=\"GIOChannel\">GIOChannel</link> *channel);"
msgstr ""

#: xml/gcut-string-io-channel.xml:155(title)
msgid "gcut_string_io_channel_set_read_fail ()"
msgstr ""

#: xml/gcut-string-io-channel.xml:156(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_string_io_channel_set_read_fail\n"
"                                                        (<link linkend=\"GIOChannel\">GIOChannel</link> *channel,\n"
"                                                         <link linkend=\"gboolean\">gboolean</link> read_fail);"
msgstr ""

#: xml/gcut-string-io-channel.xml:164(term)
msgid "<parameter>read_fail</parameter> :"
msgstr ""

#: xml/gcut-string-io-channel.xml:169(title)
msgid "gcut_string_io_channel_get_pipe_mode ()"
msgstr ""

#: xml/gcut-string-io-channel.xml:170(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_string_io_channel_get_pipe_mode\n"
"                                                        (<link linkend=\"GIOChannel\">GIOChannel</link> *channel);"
msgstr ""

#: xml/gcut-string-io-channel.xml:181(title)
msgid "gcut_string_io_channel_set_pipe_mode ()"
msgstr ""

#: xml/gcut-string-io-channel.xml:182(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_string_io_channel_set_pipe_mode\n"
"                                                        (<link linkend=\"GIOChannel\">GIOChannel</link> *channel,\n"
"                                                         <link linkend=\"gboolean\">gboolean</link> pipe_mode);"
msgstr ""

#: xml/gcut-string-io-channel.xml:190(term)
msgid "<parameter>pipe_mode</parameter> :"
msgstr ""

#: xml/gcut-test-utils.xml:7(refentrytitle)
#: xml/gcut-test-utils.xml:13(refname)
msgid "Test Utilities with GLib support"
msgstr "GLibサポート付きテストユーティリティ"

#: xml/gcut-test-utils.xml:14(refpurpose)
msgid "Utilities to write tests more easily with GLib support."
msgstr "テストをもっと簡単に書くためのGLibサポート付きユーティリティ。"

#: xml/gcut-test-utils.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/> *           <placeholder-2/>                    (<placeholder-3/> *object);\n"
"<placeholder-4/> *            <placeholder-5/>                     (<placeholder-6/> *error);\n"
"const <placeholder-7/> *       <placeholder-8/>                      (const <placeholder-9/> *list,\n"
"                                                         <placeholder-10/> destroy_function);\n"
"<placeholder-11/> *        <placeholder-12/>                (<placeholder-13/> *hash_table);\n"
"<placeholder-14/> *             <placeholder-15/>                (const <placeholder-16/> *value,\n"
"                                                         ...);\n"
"<placeholder-17/> *             <placeholder-18/>          (const <placeholder-19/> **strings);\n"
"const <placeholder-20/> *       <placeholder-21/>           (const <placeholder-22/> *value,\n"
"                                                         ...);\n"
"#define             <placeholder-23/>(value, ...)\n"
"const <placeholder-24/> *       <placeholder-25/>     (const <placeholder-26/> **strings);\n"
"<placeholder-27/>                <placeholder-28/>               (<placeholder-29/> *list);\n"
"<placeholder-30/> *        <placeholder-31/>   (const <placeholder-32/> *key,\n"
"                                                         ...);\n"
"<placeholder-33/> *        <placeholder-34/>\n"
"                                                        (const <placeholder-35/> *key,\n"
"                                                         <placeholder-36/> args);\n"
"<placeholder-37/> *        <placeholder-38/>\n"
"                                                        (const <placeholder-39/> *key,\n"
"                                                         ...);\n"
msgstr ""

#: xml/gcut-test-utils.xml:62(para)
msgid "The utilities work with GLib."
msgstr "このユーティリティはGLibと一緒に使います。"

#: xml/gcut-test-utils.xml:71(title)
msgid "gcut_take_object ()"
msgstr ""

#: xml/gcut-test-utils.xml:72(programlisting)
#, no-wrap
msgid "<link linkend=\"GObject\">GObject</link> *           gcut_take_object                    (<link linkend=\"GObject\">GObject</link> *object);"
msgstr ""

#: xml/gcut-test-utils.xml:73(para)
msgid ""
"Passes ownership of <parameter>object</parameter> to Cutter and returns "
"<parameter>object</parameter>."
msgstr ""
"<parameter>object</parameter>の所有権をCutterに渡し、<parameter>object</"
"parameter>を返します。"

#: xml/gcut-test-utils.xml:78(simpara)
msgid ""
"the <link linkend=\"GObject\"><type>GObject</type></link> to be owned by "
"Cutter."
msgstr ""
"Cutterに所有権を渡す<link linkend=\"GObject\"><type>GObject</type></link>。"

#: xml/gcut-test-utils.xml:80(simpara)
msgid ""
"<parameter>object</parameter> owned by Cutter. Don't <link linkend=\"g-"
"object-unref\"><function>g_object_unref()</function></link> it."
msgstr ""
"Cutterが所有権をもつ<parameter>object</parameter>。<link linkend=\"g-object-"
"unref\"><function>g_object_unref()</function></link>しないでください。"

#: xml/gcut-test-utils.xml:85(title)
msgid "gcut_take_error ()"
msgstr ""

#: xml/gcut-test-utils.xml:86(programlisting)
#, no-wrap
msgid "<link linkend=\"GError\">GError</link> *            gcut_take_error                     (<link linkend=\"GError\">GError</link> *error);"
msgstr ""

#: xml/gcut-test-utils.xml:87(para)
msgid ""
"Passes ownership of <parameter>error</parameter> to Cutter and returns a "
"<parameter>error</parameter> itself."
msgstr ""
"Cutterに<parameter>error</parameter>の所有権を渡し、<parameter>error</"
"parameter>それ自身を返します。"

#: xml/gcut-test-utils.xml:93(simpara)
msgid ""
"the <link linkend=\"GError\"><type>GError</type></link> to be owned by "
"Cutter."
msgstr ""
"Cutterに所有権を渡す<link linkend=\"GError\"><type>GError</type></link>。"

#: xml/gcut-test-utils.xml:95(simpara)
msgid ""
"a <link linkend=\"GError\"><type>GError</type></link> owned by Cutter. Don't "
"<link linkend=\"g-error-free\"><function>g_error_free()</function></link> it."
msgstr ""
"Cutterが所有権をもつ<link linkend=\"GError\"><type>GError</type></link>。"
"<link linkend=\"g-error-free\"><function>g_error_free()</function></link>しな"
"いでください。"

#: xml/gcut-test-utils.xml:101(title)
msgid "gcut_take_list ()"
msgstr ""

#: xml/gcut-test-utils.xml:102(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"GList\">GList</link> *       gcut_take_list                      (const <link linkend=\"GList\">GList</link> *list,\n"
"                                                         <link linkend=\"CutDestroyFunction\">CutDestroyFunction</link> destroy_function);"
msgstr ""

#: xml/gcut-test-utils.xml:104(para)
msgid ""
"Passes ownership of <parameter>list</parameter> to Cutter and returns "
"<parameter>list</parameter> itself."
msgstr ""
"<parameter>list</parameter>の所有権をCutterに渡し、<parameter>list</"
"parameter>それ自身を返します。"

#: xml/gcut-test-utils.xml:110(simpara)
msgid ""
"the <link linkend=\"GList\"><type>GList</type></link> to be owned by Cutter."
msgstr ""
"Cutterに所有権を渡す<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-test-utils.xml:113(simpara)
msgid ""
"the destroy function that destroys the elements of <parameter>list</"
"parameter>, or <link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>."
msgstr ""
"<parameter>list</parameter>の各要素を破棄する関数、または<link linkend="
"\"NULL--CAPS\"><literal>NULL</literal></link>。"

#: xml/gcut-test-utils.xml:116(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> owned by Cutter. Don't "
"<link linkend=\"g-list-free\"><function>g_list_free()</function></link> it."
msgstr ""
"Cutterが所有権を持つ<link linkend=\"GList\"><type>GList</type></link>。<link "
"linkend=\"g-list-free\"><function>g_list_free()</function></link>しないでくだ"
"さい。"

#: xml/gcut-test-utils.xml:122(title)
msgid "gcut_take_hash_table ()"
msgstr ""

#: xml/gcut-test-utils.xml:123(programlisting)
#, no-wrap
msgid "<link linkend=\"GHashTable\">GHashTable</link> *        gcut_take_hash_table                (<link linkend=\"GHashTable\">GHashTable</link> *hash_table);"
msgstr ""

#: xml/gcut-test-utils.xml:124(para)
msgid ""
"Passes ownership of <parameter>hash_table</parameter> to Cutter and returns "
"<parameter>hash_table</parameter> itself."
msgstr ""
"<parameter>hash_table</parameter>の所有権をCutterに渡し、"
"<parameter>hash_table</parameter>それ自身を返します。"

#: xml/gcut-test-utils.xml:130(simpara)
msgid ""
"the <link linkend=\"GHashTable\"><type>GHashTable</type></link> to be owned "
"by Cutter."
msgstr ""
"Cutterに所有権を渡す<link linkend=\"GHashTable\"><type>GHashTable</type></"
"link>。"

#: xml/gcut-test-utils.xml:132(simpara)
msgid ""
"a <link linkend=\"GHashTable\"><type>GHashTable</type></link> owned by "
"Cutter. Don't <link linkend=\"g-hash-table-unref"
"\"><function>g_hash_table_unref()</function></link> it."
msgstr ""
"Cutterが所有権をもつ<link linkend=\"GHashTable\"><type>GHashTable</type></"
"link>。<link linkend=\"g-hash-table-unref\"><function>g_hash_table_unref()</"
"function></link>しないでください。"

#: xml/gcut-test-utils.xml:138(title)
msgid "gcut_list_string_new ()"
msgstr ""

#: xml/gcut-test-utils.xml:139(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GList\">GList</link> *             gcut_list_string_new                (const <link linkend=\"gchar\">gchar</link> *value,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-test-utils.xml:141(para)
msgid "Creates a list from passed strings."
msgstr "渡された文字列からリストを作ります。"

#: xml/gcut-test-utils.xml:145(term) xml/gcut-test-utils.xml:180(term)
#: xml/gcut-test-utils.xml:197(term)
msgid "<parameter>value</parameter> :"
msgstr ""

#: xml/gcut-test-utils.xml:146(simpara) xml/gcut-test-utils.xml:181(simpara)
msgid "the first string."
msgstr "最初の文字列。"

#: xml/gcut-test-utils.xml:149(simpara) xml/gcut-test-utils.xml:184(simpara)
msgid ""
"remaining strings in list. <link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>-terminate."
msgstr ""
"リストの残りの文字列。<link linkend=\"NULL--CAPS\"><literal>NULL</literal></"
"link>終端。"

#: xml/gcut-test-utils.xml:151(simpara)
msgid ""
"a newly-allocated <link linkend=\"GList\"><type>GList</type></link> that "
"contains passed strings and must be freed with <link linkend=\"gcut-list-"
"string-free\"><function>gcut_list_string_free()</function></link>."
msgstr ""
"渡された文字列を含む<link linkend=\"GList\"><type>GList</type></link>。<link "
"linkend=\"gcut-list-string-free\"><function>gcut_list_string_free()</"
"function></link>で開放すること。"

#: xml/gcut-test-utils.xml:157(title)
msgid "gcut_list_string_new_array ()"
msgstr ""

#: xml/gcut-test-utils.xml:158(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link> *             gcut_list_string_new_array          (const <link linkend=\"gchar\">gchar</link> **strings);"
msgstr ""

#: xml/gcut-test-utils.xml:159(para)
msgid "Creates a list from passed string array."
msgstr "渡された文字列配列からリストを作ります。"

#: xml/gcut-test-utils.xml:164(simpara) xml/gcut-test-utils.xml:213(simpara)
msgid ""
"the string array. <link linkend=\"NULL--CAPS\"><literal>NULL</literal></"
"link>-terminate."
msgstr ""
"文字列の配列。<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>終"
"端。"

#: xml/gcut-test-utils.xml:166(simpara)
msgid ""
"a newly-allocated <link linkend=\"GList\"><type>GList</type></link> that "
"contains passed string array and must be freed with <link linkend=\"gcut-"
"list-string-free\"><function>gcut_list_string_free()</function></link>."
msgstr ""
"渡された文字列配列と同じ内容の<link linkend=\"GList\"><type>GList</type></"
"link>。<link linkend=\"gcut-list-string-free"
"\"><function>gcut_list_string_free()</function></link>で開放すること。"

#: xml/gcut-test-utils.xml:172(title)
msgid "gcut_take_new_list_string ()"
msgstr ""

#: xml/gcut-test-utils.xml:173(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"GList\">GList</link> *       gcut_take_new_list_string           (const <link linkend=\"gchar\">gchar</link> *value,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-test-utils.xml:175(para)
msgid "Creates a list from passed strings that is owned by Cutter."
msgstr ""
"渡された文字列からリストを作ります。作られたリストはCutterが所有権を持ちま"
"す。"

#: xml/gcut-test-utils.xml:186(simpara)
msgid ""
"a newly-allocated <link linkend=\"GList\"><type>GList</type></link> that "
"contains passed strings and is owned by Cutter."
msgstr ""
"渡された文字列と同じ内容の<link linkend=\"GList\"><type>GList</type></link>。"
"Cutterが所有権を持ちます。"

#: xml/gcut-test-utils.xml:192(title)
msgid "gcut_take_new_list_string_backward_compatibility()"
msgstr ""

#: xml/gcut-test-utils.xml:193(programlisting)
#, no-wrap
msgid "#define             gcut_take_new_list_string_backward_compatibility(value, ...)"
msgstr ""

#: xml/gcut-test-utils.xml:194(para)
msgid ""
"<literal>gcut_take_new_list_string_backward_compatibility</literal> is "
"deprecated and should not be used in newly-written code."
msgstr ""

#: xml/gcut-test-utils.xml:205(title)
msgid "gcut_take_new_list_string_array ()"
msgstr ""

#: xml/gcut-test-utils.xml:206(programlisting)
#, no-wrap
msgid "const <link linkend=\"GList\">GList</link> *       gcut_take_new_list_string_array     (const <link linkend=\"gchar\">gchar</link> **strings);"
msgstr ""

#: xml/gcut-test-utils.xml:207(para)
msgid "Creates a list from passed string array that is owned by Cutter."
msgstr "渡された文字列の配列からリストを作ります。Cutterが所有権を持ちます。"

#: xml/gcut-test-utils.xml:215(simpara)
msgid ""
"a newly-allocated <link linkend=\"GList\"><type>GList</type></link> that "
"contains passed string array and is owned by Cutter."
msgstr ""
"渡された文字列の配列と同じ内容の<link linkend=\"GList\"><type>GList</type></"
"link>。Cutterが所有。"

#: xml/gcut-test-utils.xml:221(title)
msgid "gcut_list_string_free ()"
msgstr ""

#: xml/gcut-test-utils.xml:222(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                gcut_list_string_free               (<link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/gcut-test-utils.xml:223(para)
msgid "Frees <parameter>list</parameter> and contained strings."
msgstr ""
"<parameter>list</parameter>と<parameter>list</parameter>内にある文字列を開放"
"します。"

#: xml/gcut-test-utils.xml:228(simpara)
msgid "the list that contains strings to be freed."
msgstr "開放する文字列のリスト。"

#: xml/gcut-test-utils.xml:232(title)
msgid "gcut_hash_table_string_string_new ()"
msgstr ""

#: xml/gcut-test-utils.xml:233(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GHashTable\">GHashTable</link> *        gcut_hash_table_string_string_new   (const <link linkend=\"gchar\">gchar</link> *key,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-test-utils.xml:235(para) xml/gcut-test-utils.xml:260(para)
msgid ""
"Creates a hash table that has string key and string value from passed key/"
"value pairs."
msgstr ""
"引数で指定されたキーと値のペアから、文字列のキーと値を持つハッシュテーブルを"
"作成します。"

#: xml/gcut-test-utils.xml:241(simpara) xml/gcut-test-utils.xml:266(simpara)
#: xml/gcut-test-utils.xml:292(simpara)
msgid "The first key string."
msgstr "最初のキー文字列。"

#: xml/gcut-test-utils.xml:244(simpara) xml/gcut-test-utils.xml:269(simpara)
msgid ""
"A <link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>-terminated "
"list of rest arguments. The first item is the string value of the first key, "
"followed optionally by more key/value pairs. It must end with <link linkend="
"\"NULL--CAPS\"><literal>NULL</literal></link>."
msgstr ""
"残りの引数の<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>終端の"
"リスト。まず、最初のキーの文字列値を指定します。続いて、任意の数だけキー・値"
"のペアを指定します。最後に<link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>を指定しなければいけません。"

#: xml/gcut-test-utils.xml:249(simpara) xml/gcut-test-utils.xml:274(simpara)
msgid ""
"a newly-allocated <link linkend=\"GHashTable\"><type>GHashTable</type></"
"link> that contains passed key/value pairs and must be freed with <link "
"linkend=\"g-hash-table-unref\"><function>g_hash_table_unref()</function></"
"link>."
msgstr ""
"渡されたキー・値を持つ<link linkend=\"GHashTable\"><type>GHashTable</type></"
"link>。<link linkend=\"g-hash-table-unref\"><function>g_hash_table_unref()</"
"function></link>で開放してください。"

#: xml/gcut-test-utils.xml:256(title)
msgid "gcut_hash_table_string_string_new_va_list ()"
msgstr ""

#: xml/gcut-test-utils.xml:257(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GHashTable\">GHashTable</link> *        gcut_hash_table_string_string_new_va_list\n"
"                                                        (const <link linkend=\"gchar\">gchar</link> *key,\n"
"                                                         <link linkend=\"va-list\">va_list</link> args);"
msgstr ""

#: xml/gcut-test-utils.xml:281(title)
msgid "gcut_take_new_hash_table_string_string ()"
msgstr ""

#: xml/gcut-test-utils.xml:282(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GHashTable\">GHashTable</link> *        gcut_take_new_hash_table_string_string\n"
"                                                        (const <link linkend=\"gchar\">gchar</link> *key,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-test-utils.xml:285(para)
msgid ""
"Creates a hash table that has string key and string value from passed key/"
"value pairs. The created hash table is owned by Cutter. So don't <link "
"linkend=\"g-hash-table-unref\"><function>g_hash_table_unref()</function></"
"link> it."
msgstr ""
"渡されたキー・値のペアから文字列のキー・値を持つハッシュテーブルを作成しま"
"す。作成されたハッシュテーブルはCutterが所有権を持つので、<link linkend=\"g-"
"hash-table-unref\"><function>g_hash_table_unref()</function></link>を呼ばない"
"でください。"

#: xml/gcut-test-utils.xml:295(simpara)
msgid ""
"A <link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>-terminated "
"list of rest arguments. The string value of the first key, followed "
"optionally by more key/value pairs. It must end with <link linkend=\"NULL--"
"CAPS\"><literal>NULL</literal></link>."
msgstr ""
"残りの引数の<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>終端の"
"リスト。まず、最初のキーの文字列値を指定します。続いて、任意の数だけキー・値"
"のペアを指定します。最後に<link linkend=\"NULL--CAPS\"><literal>NULL</"
"literal></link>を指定しなければいけません。"

#: xml/gcut-test-utils.xml:299(simpara)
msgid ""
"a newly-allocated <link linkend=\"GHashTable\"><type>GHashTable</type></"
"link> that contains passed key/value pairs."
msgstr ""
"渡されたキー・値を持つ<link linkend=\"GHashTable\"><type>GHashTable</type></"
"link>。"

#: xml/gcut-types.xml:7(refentrytitle) xml/gcut-types.xml:13(refname)
msgid "Types for GLib support"
msgstr "GLibサポート用の型"

#: xml/gcut-types.xml:14(refpurpose)
msgid "Types that is used in test with GLib support."
msgstr "GLibサポート付きテストで使う型です。"

#: xml/gcut-types.xml:21(link)
msgid "*GCutInspectFunction"
msgstr ""

#: xml/gcut-types.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                (<placeholder-2/>)              (<placeholder-3/> *string,\n"
"                                                         <placeholder-4/> data,\n"
"                                                         <placeholder-5/> user_data);\n"
"#define             <placeholder-6/>\n"
"<placeholder-7/>               <placeholder-8/>                 (void);\n"
msgstr ""

#: xml/gcut-types.xml:39(para)
msgid "There are some types to be used in test with GLib support."
msgstr "GLibサポート付きテストで使う型がいくつかあります。"

#: xml/gcut-types.xml:48(title)
msgid "GCutInspectFunction ()"
msgstr ""

#: xml/gcut-types.xml:49(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                (*GCutInspectFunction)              (<link linkend=\"GString\">GString</link> *string,\n"
"                                                         <link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-types.xml:52(para)
msgid ""
"Specifies the type of function which is called when the <parameter>data</"
"parameter> element is inspected. It is passed the pointer to the data "
"element, should inspect <parameter>data</parameter> and append inspected "
"string to <parameter>string</parameter>."
msgstr ""
"<parameter>data</parameter>要素の詳細を示すときに呼ばれる関数の型です。データ"
"要素のポインタを渡されるので、<parameter>data</parameter>の詳細を"
"<parameter>string</parameter>に追加してください。"

#: xml/gcut-types.xml:60(simpara)
msgid ""
"the <link linkend=\"GString\"><type>GString</type></link> to be stored "
"inspected result."
msgstr ""
"詳細情報を保存する<link linkend=\"GString\"><type>GString</type></link>。"

#: xml/gcut-types.xml:63(simpara)
msgid "the data element to be inspected."
msgstr "詳細化されるデータ。"

#: xml/gcut-types.xml:71(programlisting)
#, no-wrap
msgid "#define\tGCUT_TYPE_ERROR (gcut_error_get_type())\n"
msgstr ""

#: xml/gcut-types.xml:73(para) xml/gcut-types.xml:85(simpara)
msgid ""
"The <link linkend=\"GType\"><type>GType</type></link> for a boxed type "
"holding a <link linkend=\"GError\"><type>GError</type></link> reference."
msgstr ""
"<link linkend=\"GError\"><type>GError</type></link>への参照を保持するGBoxed型"
"の<link linkend=\"GType\"><type>GType</type></link>。"

#: xml/gcut-types.xml:78(title)
msgid "gcut_error_get_type ()"
msgstr ""

#: xml/gcut-types.xml:79(programlisting)
#, no-wrap
msgid "<link linkend=\"GType\">GType</link>               gcut_error_get_type                 (void);"
msgstr ""

#: xml/gcut-types.xml:80(para)
msgid ""
"Use <link linkend=\"GCUT-TYPE-ERROR--CAPS\"><literal>GCUT_TYPE_ERROR</"
"literal></link> macro to get <link linkend=\"GType\"><type>GType</type></"
"link> for <link linkend=\"GError\"><type>GError</type></link> instead of "
"this function."
msgstr ""
"<link linkend=\"GError\"><type>GError</type></link>の<link linkend=\"GType"
"\"><type>GType</type></link>を取得するためには、この関数ではなく<link "
"linkend=\"GCUT-TYPE-ERROR--CAPS\"><literal>GCUT_TYPE_ERROR</literal></link>マ"
"クロを使ってください。"

#: xml/gcut-value-equal.xml:7(refentrytitle)
#: xml/gcut-value-equal.xml:13(refname)
msgid "Assertion Utilities for GValue"
msgstr "GValue用の検証ユーティリティ"

#: xml/gcut-value-equal.xml:14(refpurpose)
msgid ""
"Utilities to write assertions related to <link linkend=\"GValue"
"\"><placeholder-1/></link> more easily."
msgstr ""
"<link linkend=\"GValue\"><placeholder-1/></link>に関する検証をもっと簡単に書"
"くためのユーティリティ。"

#: xml/gcut-value-equal.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            <placeholder-2/>                    (const <placeholder-3/> *value1,\n"
"                                                         const <placeholder-4/> *value2);\n"
"<placeholder-5/>                <placeholder-6/>      (<placeholder-7/> type1,\n"
"                                                         <placeholder-8/> type2,\n"
"                                                         <placeholder-9/> equal_func);\n"
msgstr ""

#: xml/gcut-value-equal.xml:44(para)
msgid ""
"The utilities help you to write assertions that are related to <link linkend="
"\"GValue\"><type>GValue</type></link>."
msgstr ""
"このユーティリティは<link linkend=\"GValue\"><type>GValue</type></link>に関す"
"る検証を作成を補助します。"

#: xml/gcut-value-equal.xml:54(title)
msgid "gcut_value_equal ()"
msgstr ""

#: xml/gcut-value-equal.xml:55(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_value_equal                    (const <link linkend=\"GValue\">GValue</link> *value1,\n"
"                                                         const <link linkend=\"GValue\">GValue</link> *value2);"
msgstr ""

#: xml/gcut-value-equal.xml:57(para)
msgid ""
"Compares two <link linkend=\"GValue\"><type>GValue</type></link>, "
"<parameter>value1</parameter> and <parameter>value2</parameter> by "
"registered equal function. (See <link linkend=\"gcut-value-register-equal-"
"func\"><function>gcut_value_register_equal_func()</function></link> for "
"detail of how to register equal function of <link linkend=\"GValue"
"\"><type>GValue</type></link>)"
msgstr ""
"ふたつの<link linkend=\"GValue\"><type>GValue</type></link>、"
"<parameter>value1</parameter>と<parameter>value2</parameter>を登録された比較"
"関数で比較します。（<link linkend=\"GValue\"><type>GValue</type></link>の比較"
"関数の登録方法については<link linkend=\"gcut-value-register-equal-func"
"\"><function>gcut_value_register_equal_func()</function></link>を見てくださ"
"い。）"

#: xml/gcut-value-equal.xml:63(term)
msgid "<parameter>value1</parameter> :"
msgstr ""

#: xml/gcut-value-equal.xml:64(simpara) xml/gcut-value-equal.xml:67(simpara)
msgid "a <link linkend=\"GValue\"><type>GValue</type></link> to be compared."
msgstr "比較する<link linkend=\"GValue\"><type>GValue</type></link>。"

#: xml/gcut-value-equal.xml:66(term)
msgid "<parameter>value2</parameter> :"
msgstr ""

#: xml/gcut-value-equal.xml:69(simpara)
msgid ""
"TRUE if <parameter>value1</parameter> equals to <parameter>value2</"
"parameter>, FALSE otherwise."
msgstr ""
"<parameter>value1</parameter>と<parameter>value2</parameter>が等しいときは"
"TRUE、そうでない場合はFALSE。"

#: xml/gcut-value-equal.xml:75(title)
msgid "gcut_value_register_equal_func ()"
msgstr ""

#: xml/gcut-value-equal.xml:76(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_value_register_equal_func      (<link linkend=\"GType\">GType</link> type1,\n"
"                                                         <link linkend=\"GType\">GType</link> type2,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_func);"
msgstr ""

#: xml/gcut-value-equal.xml:85(para)
msgid ""
"Registers equality check function between <link linkend=\"GValue"
"\"><type>GValue</type></link> of <parameter>type1</parameter> and <link "
"linkend=\"GValue\"><type>GValue</type></link> of <parameter>type2</"
"parameter>."
msgstr ""
"<parameter>type1</parameter>の<link linkend=\"GValue\"><type>GValue</type></"
"link>と<parameter>type2</parameter>の<link linkend=\"GValue\"><type>GValue</"
"type></link>の等価性を調べる関数を登録します。"

#: xml/gcut-value-equal.xml:90(term)
msgid "<parameter>type1</parameter> :"
msgstr ""

#: xml/gcut-value-equal.xml:91(simpara) xml/gcut-value-equal.xml:94(simpara)
msgid ""
"a <link linkend=\"GType\"><type>GType</type></link> of compared <link "
"linkend=\"GValue\"><type>GValue</type></link>."
msgstr ""
"比較する<link linkend=\"GValue\"><type>GValue</type></link>の<link linkend="
"\"GType\"><type>GType</type></link>。"

#: xml/gcut-value-equal.xml:93(term)
msgid "<parameter>type2</parameter> :"
msgstr ""

#: xml/gcut-value-equal.xml:97(simpara)
msgid ""
"a function that compares <parameter>type1</parameter>'s <link linkend="
"\"GValue\"><type>GValue</type></link> with <parameter>type2</parameter>'s "
"<link linkend=\"GValue\"><type>GValue</type></link>."
msgstr ""
"<parameter>type1</parameter>の<link linkend=\"GValue\"><type>GValue</type></"
"link>と<parameter>type2</parameter>の<link linkend=\"GValue\"><type>GValue</"
"type></link>を比較する関数。"

#: xml/gcutter.xml:7(refentrytitle) xml/gcutter.xml:13(refname)
msgid "GCutter"
msgstr ""

#: xml/gcutter.xml:14(refpurpose)
msgid "Cutter with GLib support."
msgstr "GLibサポート付きのCutter。"

#: xml/gcutter.xml:20(synopsis) xml/gdkcutter-pixbuf.xml:20(synopsis)
#: xml/soupcutter.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
msgstr ""

#: xml/gcutter.xml:35(para)
msgid ""
"GCutter adds many useful features based on GLib to Cutter. If you want to "
"write tests with more easily, it's good idea that you consider GCutter to be "
"used too."
msgstr ""
"GCutterはGLibベースのたくさんの便利な機能をCutterに追加します。より簡単にテス"
"トを書きたい場合はGCutterの使用を検討してください。"

#: xml/gcutter.xml:40(para)
msgid ""
"It's easy to use GCutter. You just include &lt;gcutter.h&gt; instead of &lt;"
"cutter.h&gt; and use gcutter.pc instead of cutter.pc:"
msgstr ""
"GCutterを使うことは簡単です。&lt;cutter.h&gt;の代わりに&lt;gcutter.h&gt;を"
"inlcudeして、cutter.pcの代わりにgcutter.pcを使うだけです。"

#: xml/gcutter.xml:47(programlisting)
#, no-wrap
msgid ""
"\n"
"-#include &lt;cutter.h&gt;\n"
"+#include &lt;gcutter.h&gt;\n"
msgstr ""

#: xml/gcutter.xml:45(para) xml/gdkcutter-pixbuf.xml:47(para)
#: xml/soupcutter.xml:47(para)
msgid "test-xxx.c: <placeholder-1/>"
msgstr ""

#: xml/gcutter.xml:54(programlisting)
#, no-wrap
msgid ""
"\n"
"-AC_CHECK_CUTTER\n"
"+AC_CHECK_GCUTTER\n"
msgstr ""

#: xml/gcutter.xml:52(para) xml/gdkcutter-pixbuf.xml:54(para)
#: xml/soupcutter.xml:54(para)
msgid "configure.ac: <placeholder-1/>"
msgstr ""

#: xml/gcutter.xml:61(programlisting)
#, no-wrap
msgid ""
"\n"
"-XXX_CFLAGS = $(CUTTER_CFLAGS)\n"
"-XXX_LIBS = $(CUTTER_LIBS)\n"
"+XXX_CFLAGS = $(GCUTTER_CFLAGS)\n"
"+XXX_LIBS = $(GCUTTER_LIBS)\n"
msgstr ""

#: xml/gcutter.xml:75(programlisting)
#, no-wrap
msgid "#define GCUTTER_ENABLED 1\n"
msgstr ""

#: xml/gcutter.xml:77(para)
msgid "Defined when GCutter is enabled."
msgstr "GCutterが有効なとき定義されます。"

#: xml/gdkcut-pixbuf-assertions-helper.xml:7(refentrytitle)
#: xml/gdkcut-pixbuf-assertions-helper.xml:13(refname)
msgid "gdkcut-pixbuf-assertions-helper"
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:21(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:22(link)
#: xml/gdkcut-pixbuf-assertions.xml:22(link)
#: xml/gdkcut-pixbuf-assertions.xml:23(link) xml/gdkcut-pixbuf.xml:21(link)
#: xml/gdkcut-pixbuf.xml:22(link) xml/gdkcut-pixbuf.xml:23(link)
#: xml/gdkcut-pixbuf.xml:24(link) xml/gdkcut-pixbuf.xml:26(link)
#: xml/gdkcut-pixbuf.xml:27(link) xml/gdkcut-pixbuf.xml:29(link)
#: xml/gdkcut-pixbuf.xml:30(link)
msgid "GdkPixbuf"
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>   (const <placeholder-3/> *expected,\n"
"                                                         const <placeholder-4/> *actual,\n"
"                                                         <placeholder-5/> threshold,\n"
"                                                         const <placeholder-6/> *expression_expected,\n"
"                                                         const <placeholder-7/> *expression_actual,\n"
"                                                         const <placeholder-8/> *expression_threshold);\n"
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:47(title)
msgid "gdkcut_pixbuf_assert_equal_helper ()"
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:48(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gdkcut_pixbuf_assert_equal_helper   (const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *expected,\n"
"                                                         const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *actual,\n"
"                                                         <link linkend=\"guint\">guint</link> threshold,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_threshold);"
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:62(term)
#: xml/gdkcut-pixbuf-assertions.xml:71(term) xml/gdkcut-pixbuf.xml:81(term)
#: xml/gdkcut-pixbuf.xml:100(term) xml/gdkcut-pixbuf.xml:121(term)
msgid "<parameter>threshold</parameter> :"
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:71(term)
msgid "<parameter>expression_threshold</parameter> :"
msgstr ""

#: xml/gdkcut-pixbuf-assertions.xml:7(refentrytitle)
#: xml/gdkcut-pixbuf-assertions.xml:13(refname)
#: xml/gdkcutter-pixbuf.xml:91(link)
msgid "Assertions with gdk-pixbuf support"
msgstr "gdk-pixbufサポート付きの検証"

#: xml/gdkcut-pixbuf-assertions.xml:14(refpurpose)
msgid "Checks that your program works as you expect with gdk-pixbuf support."
msgstr ""
"gdk-pixbufサポート付きであなたのプログラムが期待通りに動作しているかを検証し"
"ます。"

#: xml/gdkcut-pixbuf-assertions.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>          (const <placeholder-3/> *expected,\n"
"                                                         const <placeholder-4/> *actual,\n"
"                                                         <placeholder-5/> threshold);\n"
msgstr ""

#: xml/gdkcut-pixbuf-assertions.xml:47(title)
msgid "gdkcut_pixbuf_assert_equal ()"
msgstr "gdkcut_pixbuf_assert_equal ()"

#: xml/gdkcut-pixbuf-assertions.xml:48(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gdkcut_pixbuf_assert_equal          (const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *expected,\n"
"                                                         const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *actual,\n"
"                                                         <link linkend=\"guint\">guint</link> threshold);"
msgstr ""

#: xml/gdkcut-pixbuf-assertions.xml:51(para)
msgid ""
"Passes if <parameter>expected</parameter> == <parameter>actual</parameter>. "
"If difference of each corresponding pixel value is within threshold, "
"<parameter>expected</parameter> and <parameter>actual</parameter> are "
"treated as equal image."
msgstr ""
"<parameter>expected</parameter> == <parameter>actual</parameter>が成り立つと"
"きパスします。もし、対応するピクセル値のそれぞれの違いがしきい値以内の場合は"
"<parameter>expected</parameter>と<parameter>actual</parameter>は同じ画像とし"
"て扱います。"

#: xml/gdkcut-pixbuf-assertions.xml:56(para)
msgid ""
"If threshold is 3, pixel value of <parameter>expected</parameter> at (1, 1) "
"is 127 and pixel value of <parameter>actual</parameter> at (1, 1) is 131, "
"<parameter>actual</parameter> doesn't equals to <parameter>expected</"
"parameter>. If pixel value of <parameter>actual</parameter> at (1, 1) is "
"130, <parameter>actual</parameter> may equal to <parameter>expected</"
"parameter>. (All other corresponding pixel values are needed to fill this "
"condition.)"
msgstr ""
"もし、しきい値が3、<parameter>expected</parameter>の(1, 1)のピクセル値が127、"
"<parameter>actual</parameter>の(1, 1)のピクセル値が131とすると、"
"<parameter>actual</parameter>と<parameter>expected</parameter>は等しくありま"
"せん。もし、<parameter>actual</parameter>の(1, 1)のピクセル値が130なら"
"<parameter>actual</parameter>と<parameter>expected</parameter>は等しいかもし"
"れません。（等しくなるためには、他のすべての対応するピクセル値がこの条件を満"
"たしている必要があります。）"

#: xml/gdkcut-pixbuf-assertions.xml:66(simpara)
msgid "an expected <link linkend=\"GdkPixbuf\"><type>GdkPixbuf</type></link>."
msgstr "期待する<link linkend=\"GdkPixbuf\"><type>GdkPixbuf</type></link>。"

#: xml/gdkcut-pixbuf-assertions.xml:69(simpara)
msgid "an actual <link linkend=\"GdkPixbuf\"><type>GdkPixbuf</type></link>."
msgstr "実際の<link linkend=\"GdkPixbuf\"><type>GdkPixbuf</type></link>。"

#: xml/gdkcut-pixbuf-assertions.xml:72(simpara)
msgid "an threshold used for detecting pixel difference."
msgstr "ピクセルの違いを検出するために使われるしきい値。"

#: xml/gdkcut-pixbuf.xml:7(refentrytitle) xml/gdkcut-pixbuf.xml:13(refname)
msgid "gdkcut-pixbuf"
msgstr ""

#: xml/gdkcut-pixbuf.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            <placeholder-2/>        (const <placeholder-3/> *pixbuf1,\n"
"                                                         const <placeholder-4/> *pixbuf2);\n"
"<placeholder-5/>            <placeholder-6/>         (const <placeholder-7/> *pixbuf1,\n"
"                                                         const <placeholder-8/> *pixbuf2,\n"
"                                                         <placeholder-9/> threshold);\n"
"<placeholder-10/> *         <placeholder-11/>                  (const <placeholder-12/> *pixbuf1,\n"
"                                                         const <placeholder-13/> *pixbuf2,\n"
"                                                         <placeholder-14/> threshold);\n"
"<placeholder-15/> *             <placeholder-16/>             (const <placeholder-17/> *pixbuf1,\n"
"                                                         const <placeholder-18/> *pixbuf2,\n"
"                                                         <placeholder-19/> threshold,\n"
"                                                         const <placeholder-20/> *prefix,\n"
"                                                         <placeholder-21/> **error);\n"
msgstr ""

#: xml/gdkcut-pixbuf.xml:54(title)
msgid "gdkcut_pixbuf_equal_property ()"
msgstr ""

#: xml/gdkcut-pixbuf.xml:55(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gdkcut_pixbuf_equal_property        (const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf1,\n"
"                                                         const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf2);"
msgstr ""

#: xml/gdkcut-pixbuf.xml:59(term) xml/gdkcut-pixbuf.xml:75(term)
#: xml/gdkcut-pixbuf.xml:94(term) xml/gdkcut-pixbuf.xml:115(term)
msgid "<parameter>pixbuf1</parameter> :"
msgstr ""

#: xml/gdkcut-pixbuf.xml:62(term) xml/gdkcut-pixbuf.xml:78(term)
#: xml/gdkcut-pixbuf.xml:97(term) xml/gdkcut-pixbuf.xml:118(term)
msgid "<parameter>pixbuf2</parameter> :"
msgstr ""

#: xml/gdkcut-pixbuf.xml:69(title)
msgid "gdkcut_pixbuf_equal_content ()"
msgstr ""

#: xml/gdkcut-pixbuf.xml:70(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gdkcut_pixbuf_equal_content         (const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf1,\n"
"                                                         const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf2,\n"
"                                                         <link linkend=\"guint\">guint</link> threshold);"
msgstr ""

#: xml/gdkcut-pixbuf.xml:88(title)
msgid "gdkcut_pixbuf_diff ()"
msgstr ""

#: xml/gdkcut-pixbuf.xml:89(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GdkPixbuf\">GdkPixbuf</link> *         gdkcut_pixbuf_diff                  (const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf1,\n"
"                                                         const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf2,\n"
"                                                         <link linkend=\"guint\">guint</link> threshold);"
msgstr ""

#: xml/gdkcut-pixbuf.xml:107(title)
msgid "gdkcut_pixbuf_save_diff ()"
msgstr ""

#: xml/gdkcut-pixbuf.xml:108(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link> *             gdkcut_pixbuf_save_diff             (const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf1,\n"
"                                                         const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf2,\n"
"                                                         <link linkend=\"guint\">guint</link> threshold,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *prefix,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gdkcut-pixbuf.xml:124(term)
msgid "<parameter>prefix</parameter> :"
msgstr ""

#: xml/gdkcutter-pixbuf.xml:7(refentrytitle)
#: xml/gdkcutter-pixbuf.xml:13(refname)
msgid "GdkCutter Pixbuf"
msgstr ""

#: xml/gdkcutter-pixbuf.xml:14(refpurpose)
msgid "Cutter with gdk-pixbuf support."
msgstr "gdk-pixbufサポート付きのCutter。"

#: xml/gdkcutter-pixbuf.xml:35(para)
msgid ""
"GdkCutter Pixbuf adds many useful features based on gdk-pixbuf to Cutter. If "
"you want to write tests for image, it's good idea that you consider "
"GdkCutter Pixbuf to be used too."
msgstr ""
"GdkCutter Pixbufはgdk-pixbufベースのたくさんの便利な機能をCutterに追加しま"
"す。画像のテストを書きたい場合はGdkCutter Pixbufの使用を検討してください。"

#: xml/gdkcutter-pixbuf.xml:41(para)
msgid ""
"It's easy to use GdkCutter Pixbuf. You just include &lt;gdk-cutter-pixbuf."
"h&gt; instead of &lt;cutter.h&gt; or &lt;gcutter.h&gt; and use gdkcutter-"
"pixbuf.pc instead of cutter.pc or gcutter.pc:"
msgstr ""
"GdkCutter Pixbufを使うことは簡単です。&lt;cutter.h&gt;または&lt;gcutter.h&gt;"
"の代わりに&lt;gdk-cutter-pixbuf.h&gt;をincludeし、cutter.pcまたはgcutter.pcの"
"代わりにgdkcutter-pixbuf.pcを使うだけです。"

#: xml/gdkcutter-pixbuf.xml:49(programlisting)
#, no-wrap
msgid ""
"\n"
"-#include &lt;cutter.h&gt;\n"
"+#include &lt;gdkcutter-pixbuf.h&gt;\n"
msgstr ""

#: xml/gdkcutter-pixbuf.xml:56(programlisting)
#, no-wrap
msgid ""
"\n"
"-AC_CHECK_CUTTER\n"
"+AC_CHECK_GDKCUTTER_PIXBUF\n"
msgstr ""

#: xml/gdkcutter-pixbuf.xml:63(programlisting)
#, no-wrap
msgid ""
"\n"
"-XXX_CFLAGS = $(CUTTER_CFLAGS)\n"
"-XXX_LIBS = $(CUTTER_LIBS)\n"
"+XXX_CFLAGS = $(GDKCUTTER_PIXBUF_CFLAGS)\n"
"+XXX_LIBS = $(GDKCUTTER_PIXBUF_LIBS)\n"
msgstr ""

#: xml/gdkcutter-pixbuf.xml:77(programlisting)
#, no-wrap
msgid "#define GDKCUTTER_PIXBUF_ENABLED 1\n"
msgstr ""

#: xml/gdkcutter-pixbuf.xml:79(para)
msgid "Defined when GdkCutter Pixbuf is enabled."
msgstr "GdkCutter Pixbufが有効なとき定義されます。"

#: xml/gst-cutter-console-output.xml:7(refentrytitle)
#: xml/gst-cutter-console-output.xml:13(refname)
msgid "GstCutterConsoleOutput"
msgstr ""

#: xml/gst-cutter-server.xml:7(refentrytitle)
#: xml/gst-cutter-server.xml:13(refname)
msgid "GstCutterServer"
msgstr ""

#: xml/gst-cutter-test-runner.xml:7(refentrytitle)
#: xml/gst-cutter-test-runner.xml:13(refname)
msgid "GstCutterTestRunner"
msgstr ""

#: xml/soupcut-assertions-helper.xml:7(refentrytitle)
#: xml/soupcut-assertions-helper.xml:13(refname)
msgid "soupcut-assertions-helper"
msgstr ""

#: xml/soupcut-assertions-helper.xml:23(link)
#: xml/soupcut-assertions.xml:24(link) xml/soupcut-client.xml:26(link)
#: xml/soupcut-client.xml:32(link)
msgid "SoupMessage"
msgstr ""

#: xml/soupcut-assertions-helper.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>\n"
"                                                        (const <placeholder-3/> *expected,\n"
"                                                         <placeholder-4/> *message,\n"
"                                                         const <placeholder-5/> *expression_expected,\n"
"                                                         const <placeholder-6/> *expression_message);\n"
"<placeholder-7/>                <placeholder-8/>\n"
"                                                        (const <placeholder-9/> *expected,\n"
"                                                         <placeholder-10/> *client,\n"
"                                                         const <placeholder-11/> *expression_expected,\n"
"                                                         const <placeholder-12/> *expression_client);\n"
"<placeholder-13/>                <placeholder-14/>\n"
"                                                        (<placeholder-15/> *client,\n"
"                                                         const <placeholder-16/> *expression_client);\n"
"<placeholder-17/>                <placeholder-18/>\n"
"                                                        (const <placeholder-19/> *expected,\n"
"                                                         <placeholder-20/> *client,\n"
"                                                         const <placeholder-21/> *expression_expected,\n"
"                                                         const <placeholder-22/> *expression_client);\n"
"<placeholder-23/>                <placeholder-24/>\n"
"                                                        (const <placeholder-25/> *pattern,\n"
"                                                         <placeholder-26/> *client,\n"
"                                                         const <placeholder-27/> *expression_pattern,\n"
"                                                         const <placeholder-28/> *expression_client);\n"
msgstr ""

#: xml/soupcut-assertions-helper.xml:64(title)
msgid "soupcut_message_assert_equal_content_type_helper ()"
msgstr ""

#: xml/soupcut-assertions-helper.xml:65(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                soupcut_message_assert_equal_content_type_helper\n"
"                                                        (const <link linkend=\"gchar\">gchar</link> *expected,\n"
"                                                         <link linkend=\"SoupMessage\">SoupMessage</link> *message,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_message);"
msgstr ""

#: xml/soupcut-assertions-helper.xml:81(term)
msgid "<parameter>expression_message</parameter> :"
msgstr ""

#: xml/soupcut-assertions-helper.xml:86(title)
msgid "soupcut_client_assert_equal_content_type_helper ()"
msgstr ""

#: xml/soupcut-assertions-helper.xml:87(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                soupcut_client_assert_equal_content_type_helper\n"
"                                                        (const <link linkend=\"gchar\">gchar</link> *expected,\n"
"                                                         <link linkend=\"SoupCutClient\">SoupCutClient</link> *client,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_client);"
msgstr ""

#: xml/soupcut-assertions-helper.xml:97(term)
#: xml/soupcut-assertions-helper.xml:114(term)
#: xml/soupcut-assertions-helper.xml:133(term)
#: xml/soupcut-assertions-helper.xml:155(term)
#: xml/soupcut-assertions.xml:83(term) xml/soupcut-assertions.xml:94(term)
#: xml/soupcut-assertions.xml:109(term) xml/soupcut-assertions.xml:125(term)
#: xml/soupcut-client.xml:95(term) xml/soupcut-client.xml:110(term)
#: xml/soupcut-client.xml:131(term) xml/soupcut-client.xml:154(term)
#: xml/soupcut-client.xml:168(term) xml/soupcut-client.xml:182(term)
msgid "<parameter>client</parameter> :"
msgstr ""

#: xml/soupcut-assertions-helper.xml:103(term)
#: xml/soupcut-assertions-helper.xml:117(term)
#: xml/soupcut-assertions-helper.xml:139(term)
#: xml/soupcut-assertions-helper.xml:161(term)
msgid "<parameter>expression_client</parameter> :"
msgstr ""

#: xml/soupcut-assertions-helper.xml:108(title)
msgid "soupcut_client_assert_response_helper ()"
msgstr ""

#: xml/soupcut-assertions-helper.xml:109(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                soupcut_client_assert_response_helper\n"
"                                                        (<link linkend=\"SoupCutClient\">SoupCutClient</link> *client,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_client);"
msgstr ""

#: xml/soupcut-assertions-helper.xml:122(title)
msgid "soupcut_client_assert_equal_body_helper ()"
msgstr ""

#: xml/soupcut-assertions-helper.xml:123(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                soupcut_client_assert_equal_body_helper\n"
"                                                        (const <link linkend=\"gchar\">gchar</link> *expected,\n"
"                                                         <link linkend=\"SoupCutClient\">SoupCutClient</link> *client,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_client);"
msgstr ""

#: xml/soupcut-assertions-helper.xml:144(title)
msgid "soupcut_client_assert_match_body_helper ()"
msgstr ""

#: xml/soupcut-assertions-helper.xml:145(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                soupcut_client_assert_match_body_helper\n"
"                                                        (const <link linkend=\"gchar\">gchar</link> *pattern,\n"
"                                                         <link linkend=\"SoupCutClient\">SoupCutClient</link> *client,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_pattern,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_client);"
msgstr ""

#: xml/soupcut-assertions-helper.xml:158(term)
msgid "<parameter>expression_pattern</parameter> :"
msgstr ""

#: xml/soupcut-assertions.xml:7(refentrytitle)
#: xml/soupcut-assertions.xml:13(refname) xml/soupcut-client.xml:204(link)
#: xml/soupcut-server.xml:101(link) xml/soupcutter.xml:91(link)
msgid "Assertions for HTTP client/server based on libsoup"
msgstr "libsoupを使ったHTTPクライアント・サーバ用の検証"

#: xml/soupcut-assertions.xml:14(refpurpose)
msgid ""
"Checks that your HTTP client/server works as you expect with libsoup support."
msgstr ""
"libsoupを使ってあなたのHTTPクライアント・サーバが期待通りに動作しているかを検"
"証します。"

#: xml/soupcut-assertions.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>\n"
"                                                        (const <placeholder-3/> *expected,\n"
"                                                         <placeholder-4/> *message);\n"
"<placeholder-5/>                <placeholder-6/>\n"
"                                                        (const <placeholder-7/> *expected,\n"
"                                                         <placeholder-8/> *client);\n"
"<placeholder-9/>                <placeholder-10/>      (<placeholder-11/> *client);\n"
"<placeholder-12/>                <placeholder-13/>    (const <placeholder-14/> *expected,\n"
"                                                         <placeholder-15/> *client);\n"
"<placeholder-16/>                <placeholder-17/>    (const <placeholder-18/> *pattern,\n"
"                                                         <placeholder-19/> *client);\n"
msgstr ""

#: xml/soupcut-assertions.xml:55(title)
msgid "soupcut_message_assert_equal_content_type ()"
msgstr ""

#: xml/soupcut-assertions.xml:56(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                soupcut_message_assert_equal_content_type\n"
"                                                        (const <link linkend=\"gchar\">gchar</link> *expected,\n"
"                                                         <link linkend=\"SoupMessage\">SoupMessage</link> *message);"
msgstr ""

#: xml/soupcut-assertions.xml:59(para)
msgid ""
"Passes if <parameter>expected</parameter> == <parameter>message-&gt;"
"response_headers-&gt;content_type</parameter>."
msgstr ""
"<parameter>expected</parameter> == <parameter>message-&gt;response_headers-"
"&gt;content_type</parameter>が成り立つときパスします。"

#: xml/soupcut-assertions.xml:64(simpara)
#: xml/soupcut-assertions.xml:81(simpara)
msgid "an expected Content-Type."
msgstr "期待するContent-Type。"

#: xml/soupcut-assertions.xml:67(simpara) xml/soupcut-client.xml:114(simpara)
msgid "a <link linkend=\"SoupMessage\"><type>SoupMessage</type></link>."
msgstr ""
"<link linkend=\"SoupMessage\"><type>SoupMessage</type></link>オブジェクト。"

#: xml/soupcut-assertions.xml:71(title)
msgid "soupcut_client_assert_equal_content_type ()"
msgstr ""

#: xml/soupcut-assertions.xml:72(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                soupcut_client_assert_equal_content_type\n"
"                                                        (const <link linkend=\"gchar\">gchar</link> *expected,\n"
"                                                         <link linkend=\"SoupCutClient\">SoupCutClient</link> *client);"
msgstr ""

#: xml/soupcut-assertions.xml:75(para)
msgid ""
"Passes if <parameter>expected</parameter> equals to Content-Type of the "
"latest message of <parameter>client</parameter>."
msgstr ""
"<parameter>expected</parameter>が<parameter>client</parameter>の最後のメッ"
"セージのContent-Typeと等しいとパスします。"

#: xml/soupcut-assertions.xml:84(simpara)
#: xml/soupcut-assertions.xml:95(simpara)
#: xml/soupcut-assertions.xml:110(simpara)
#: xml/soupcut-assertions.xml:126(simpara) xml/soupcut-client.xml:96(simpara)
#: xml/soupcut-client.xml:111(simpara) xml/soupcut-client.xml:132(simpara)
#: xml/soupcut-client.xml:155(simpara) xml/soupcut-client.xml:169(simpara)
#: xml/soupcut-client.xml:183(simpara)
msgid "a <link linkend=\"SoupCutClient\"><type>SoupCutClient</type></link>."
msgstr ""
"<link linkend=\"SoupCutClient\"><type>SoupCutClient</type></link>オブジェク"
"ト。"

#: xml/soupcut-assertions.xml:88(title)
msgid "soupcut_client_assert_response ()"
msgstr ""

#: xml/soupcut-assertions.xml:89(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                soupcut_client_assert_response      (<link linkend=\"SoupCutClient\">SoupCutClient</link> *client);"
msgstr ""

#: xml/soupcut-assertions.xml:90(para)
msgid "Passes if status code of <parameter>client</parameter> is 2XX."
msgstr "<parameter>client</parameter>のステータスコードが2XXならパスします。"

#: xml/soupcut-assertions.xml:99(title)
msgid "soupcut_client_assert_equal_body ()"
msgstr ""

#: xml/soupcut-assertions.xml:100(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                soupcut_client_assert_equal_body    (const <link linkend=\"gchar\">gchar</link> *expected,\n"
"                                                         <link linkend=\"SoupCutClient\">SoupCutClient</link> *client);"
msgstr ""

#: xml/soupcut-assertions.xml:102(para)
msgid ""
"Passes if <parameter>expected</parameter> == <parameter>client-&gt;"
"response_body-&gt;data</parameter>."
msgstr ""
"<parameter>expected</parameter> == <parameter>message-&gt;response_body-&gt;"
"data</parameter>が成り立つときパスします。"

#: xml/soupcut-assertions.xml:107(simpara)
msgid "an expected response body."
msgstr "期待するレスポンスの本体。"

#: xml/soupcut-assertions.xml:114(title)
msgid "soupcut_client_assert_match_body ()"
msgstr ""

#: xml/soupcut-assertions.xml:115(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                soupcut_client_assert_match_body    (const <link linkend=\"gchar\">gchar</link> *pattern,\n"
"                                                         <link linkend=\"SoupCutClient\">SoupCutClient</link> *client);"
msgstr ""

#: xml/soupcut-assertions.xml:117(para)
msgid ""
"Passes if <parameter>pattern</parameter> matches the response body of the "
"latest message of <parameter>client</parameter>."
msgstr ""
"<parameter>pattern</parameter>が<parameter>client</parameter>の最後のメッセー"
"ジのレスポンスの本体にマッチしたときにパスします。"

#: xml/soupcut-client.xml:7(refentrytitle) xml/soupcut-client.xml:13(refname)
msgid "Convenience HTTP client API"
msgstr "便利なHTTPクライアントAPI"

#: xml/soupcut-client.xml:14(refpurpose)
msgid "API to work as HTTP client."
msgstr "HTTPクライアントとして動作するためのAPI。"

#: xml/soupcut-client.xml:33(link) xml/soupcut-server.xml:22(link)
msgid "GMainContext"
msgstr ""

#: xml/soupcut-client.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/> *     <placeholder-3/>                  (void);\n"
"<placeholder-4/>                <placeholder-5/>             (<placeholder-6/> *client,\n"
"                                                         const <placeholder-7/> *uri);\n"
"<placeholder-8/>               <placeholder-9/>         (<placeholder-10/> *client,\n"
"                                                         <placeholder-11/> *message);\n"
"<placeholder-12/>               <placeholder-13/>                  (<placeholder-14/> *client,\n"
"                                                         const <placeholder-15/> *uri,\n"
"                                                         const <placeholder-16/> *first_query_name,\n"
"                                                         ...);\n"
"<placeholder-17/>               <placeholder-18/>       (<placeholder-19/> *client);\n"
"<placeholder-20/> *       <placeholder-21/>   (<placeholder-22/> *client);\n"
"<placeholder-23/> *      <placeholder-24/>    (<placeholder-25/> *client);\n"
msgstr ""

#: xml/soupcut-client.xml:39(synopsis)
#, no-wrap
msgid ""
"\n"
"  <placeholder-1/>\n"
"   +----SoupCutClient\n"
msgstr ""

#: xml/soupcut-client.xml:52(link)
msgid "async"
msgstr ""

#: xml/soupcut-client.xml:51(synopsis)
#, no-wrap
msgid ""
"\n"
"  \"<placeholder-1/>\"                    <placeholder-2/>              : Read / Write\n"
msgstr ""

#: xml/soupcut-client.xml:60(para)
msgid ""
"<link linkend=\"SoupCutClient\"><type>SoupCutClient</type></link> works as a "
"HTTP client. It accepts multiple requests and responses are managed by <link "
"linkend=\"SoupCutClient\"><type>SoupCutClient</type></link>. <link linkend="
"\"SoupCutClient\"><type>SoupCutClient</type></link> related assertions are "
"also provided."
msgstr ""
"<link linkend=\"SoupCutClient\"><type>SoupCutClient</type></link>オブジェクト"
"はHTTPクライアントとして動作します。<link linkend=\"SoupCutClient"
"\"><type>SoupCutClient</type></link>は複数のリクエストやレスポンスを管理する"
"ことができます。また、<link linkend=\"SoupCutClient\"><type>SoupCutClient</"
"type></link>に関連するアサーションのAPIも提供しています。"

#: xml/soupcut-client.xml:73(programlisting)
#, no-wrap
msgid "typedef struct _SoupCutClient SoupCutClient;"
msgstr ""

#: xml/soupcut-client.xml:77(title)
msgid "soupcut_client_new ()"
msgstr ""

#: xml/soupcut-client.xml:78(programlisting)
#, no-wrap
msgid "<link linkend=\"SoupCutClient\">SoupCutClient</link> *     soupcut_client_new                  (void);"
msgstr ""

#: xml/soupcut-client.xml:79(para)
msgid ""
"Creates and returns a new <link linkend=\"SoupCutClient"
"\"><type>SoupCutClient</type></link>"
msgstr ""
"新たに<link linkend=\"SoupCutClient\"><type>SoupCutClient</type></link>オブ"
"ジェクトを生成して返します。"

#: xml/soupcut-client.xml:83(simpara)
msgid ""
"a new <link linkend=\"SoupCutClient\"><type>SoupCutClient</type></link>."
msgstr ""
"<link linkend=\"SoupCutClient\"><type>SoupCutClient</type></link>オブジェク"
"ト。"

#: xml/soupcut-client.xml:88(title)
msgid "soupcut_client_set_base ()"
msgstr ""

#: xml/soupcut-client.xml:89(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                soupcut_client_set_base             (<link linkend=\"SoupCutClient\">SoupCutClient</link> *client,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *uri);"
msgstr ""

#: xml/soupcut-client.xml:91(para)
msgid ""
"Set <parameter>uri</parameter> as a base uri of <parameter>client</"
"parameter>."
msgstr ""
"<parameter>client</parameter>のベースURIを<parameter>uri</parameter>に設定し"
"ます。"

#: xml/soupcut-client.xml:98(term) xml/soupcut-client.xml:134(term)
msgid "<parameter>uri</parameter> :"
msgstr ""

#: xml/soupcut-client.xml:99(simpara)
msgid "a base uri."
msgstr "ベースURIの文字列。"

#: xml/soupcut-client.xml:103(title)
msgid "soupcut_client_send_message ()"
msgstr ""

#: xml/soupcut-client.xml:104(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"guint\">guint</link>               soupcut_client_send_message         (<link linkend=\"SoupCutClient\">SoupCutClient</link> *client,\n"
"                                                         <link linkend=\"SoupMessage\">SoupMessage</link> *message);"
msgstr ""

#: xml/soupcut-client.xml:106(para)
msgid ""
"Send <parameter>message</parameter> with <parameter>client</parameter>. "
"<parameter>client</parameter> remebers all the messages it sent."
msgstr ""
"<parameter>client</parameter>を使って<parameter>message</parameter>を送信しま"
"す。<parameter>client</parameter>は過去に送信した全ての<link linkend="
"\"SoupMessage\">SoupMessage</link>の情報を保持しています。"

#: xml/soupcut-client.xml:116(simpara) xml/soupcut-client.xml:143(simpara)
msgid "a status code of the response."
msgstr "レスポンスのステータスコード。"

#: xml/soupcut-client.xml:121(title)
msgid "soupcut_client_get ()"
msgstr ""

#: xml/soupcut-client.xml:122(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"guint\">guint</link>               soupcut_client_get                  (<link linkend=\"SoupCutClient\">SoupCutClient</link> *client,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *uri,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_query_name,\n"
"                                                         ...);"
msgstr ""

#: xml/soupcut-client.xml:126(para)
msgid ""
"Send a GET request to <parameter>uri</parameter> with queries. If the base "
"URI of <parameter>client</parameter> is set by <link linkend=\"soupcut-"
"client-set-base\"><function>soupcut_client_set_base()</function></link>, the "
"destination URI is composed of the base URI and <parameter>uri</parameter>. "
"If not, <parameter>uri</parameter> must be a fully qualified URI."
msgstr ""
"<parameter>uri</parameter>とクエリパラメータで指定されたURIにGETリクエストを"
"送信します。もしも<parameter>client</parameter>のベースURIが<link linkend="
"\"soupcut-client-set-base\"><function>soupcut_client_set_base()</function></"
"link>によって設定されていた場合は、URIはベースURIと<parameter>uri</parameter>"
"を組み合わせたものとなります。そうでない場合は、<parameter>uri</parameter>は"
"絶対URIである必要があります。"

#: xml/soupcut-client.xml:135(simpara)
msgid "an URI string."
msgstr "URI文字列。"

#: xml/soupcut-client.xml:137(term)
msgid "<parameter>first_query_name</parameter> :"
msgstr ""

#: xml/soupcut-client.xml:138(simpara)
msgid "the name of the first query parameter."
msgstr "ひとつめのクエリパラメータの名前"

#: xml/soupcut-client.xml:141(simpara)
msgid ""
"pairs of query parameter names and values, starting with "
"<parameter>first_query_name</parameter>, terminated by <link linkend=\"NULL--"
"CAPS\"><literal>NULL</literal></link>"
msgstr ""
"<parameter>first_query_name</parameter>から始まる、クエリパラメータの名前と値"
"のペア。最後に<link linkend=\"NULL--CAPS\"><literal>NULL</literal></link>を指"
"定しなければいけません。"

#: xml/soupcut-client.xml:148(title)
msgid "soupcut_client_get_n_messages ()"
msgstr ""

#: xml/soupcut-client.xml:149(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               soupcut_client_get_n_messages       (<link linkend=\"SoupCutClient\">SoupCutClient</link> *client);"
msgstr ""

#: xml/soupcut-client.xml:150(para)
msgid "Returns the number of messages <parameter>client</parameter> sent."
msgstr "<parameter>client</parameter>が送信した#SoupMessageの数。"

#: xml/soupcut-client.xml:157(simpara)
msgid "the number of messages."
msgstr "#SoupMessageの数。"

#: xml/soupcut-client.xml:162(title)
msgid "soupcut_client_get_latest_message ()"
msgstr ""

#: xml/soupcut-client.xml:163(programlisting)
#, no-wrap
msgid "<link linkend=\"SoupMessage\">SoupMessage</link> *       soupcut_client_get_latest_message   (<link linkend=\"SoupCutClient\">SoupCutClient</link> *client);"
msgstr ""

#: xml/soupcut-client.xml:164(para)
msgid ""
"Returns the latest <link linkend=\"SoupMessage\"><type>SoupMessage</type></"
"link> <parameter>client</parameter> sent."
msgstr ""
"<parameter>client</parameter>が最後に送信した<link linkend=\"SoupMessage"
"\"><type>SoupMessage</type></link>オブジェクト。"

#: xml/soupcut-client.xml:171(simpara)
msgid ""
"the latest <link linkend=\"SoupMessage\"><type>SoupMessage</type></link>."
msgstr ""
"最後に送信された<link linkend=\"SoupMessage\"><type>SoupMessage</type></link>"
"オブジェクト。"

#: xml/soupcut-client.xml:176(title)
msgid "soupcut_client_get_async_context ()"
msgstr ""

#: xml/soupcut-client.xml:177(programlisting)
#, no-wrap
msgid "<link linkend=\"GMainContext\">GMainContext</link> *      soupcut_client_get_async_context    (<link linkend=\"SoupCutClient\">SoupCutClient</link> *client);"
msgstr ""

#: xml/soupcut-client.xml:178(para)
msgid "Returns the asynch_context of <parameter>client</parameter>."
msgstr "<parameter>client</parameter>の非同期コンテキスト。"

#: xml/soupcut-client.xml:185(simpara)
msgid ""
"a <link linkend=\"GMainContext\"><type>GMainContext</type></link> of "
"<parameter>client</parameter>, which may be <link linkend=\"NULL--CAPS"
"\"><literal>NULL</literal></link>."
msgstr ""
"<parameter>client</parameter>の<link linkend=\"GMainContext"
"\"><type>GMainContext</type></link>。<link linkend=\"NULL--CAPS"
"\"><literal>NULL</literal></link>が返る可能性があります。"

#: xml/soupcut-client.xml:193(title)
msgid "The <literal>\"async\"</literal> property"
msgstr "<literal>\"async\"</literal>プロパティ"

#: xml/soupcut-client.xml:194(programlisting)
#, no-wrap
msgid "  \"async\"                    <link linkend=\"gboolean\">gboolean</link>              : Read / Write"
msgstr ""

#: xml/soupcut-client.xml:195(para)
msgid "True if the session is asynchronous."
msgstr "セッションが非同期の場合は真。"

#: xml/soupcut-client.xml:195(para)
msgid "Default value: FALSE"
msgstr "デフォルト値: FALSE"

#: xml/soupcut-server.xml:7(refentrytitle) xml/soupcut-server.xml:13(refname)
msgid "Convenience HTTP server API"
msgstr "便利なHTTPサーバーAPI"

#: xml/soupcut-server.xml:14(refpurpose)
msgid "API to work as HTTP server."
msgstr "HTTPサーバーとして動作するためのAPI。"

#: xml/soupcut-server.xml:21(link) xml/soupcut-server.xml:22(link)
#: xml/soupcut-server.xml:23(link)
msgid "SoupServer"
msgstr ""

#: xml/soupcut-server.xml:20(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/> *        <placeholder-2/>                 (<placeholder-3/> *server);\n"
"<placeholder-4/> *        <placeholder-5/>             (<placeholder-6/> *context);\n"
"const <placeholder-7/> *       <placeholder-8/>            (<placeholder-9/> *server,\n"
"                                                         const <placeholder-10/> *path);\n"
msgstr ""

#: xml/soupcut-server.xml:38(para)
msgid ""
"Useful wrappers for <link linkend=\"SoupServer\"><type>SoupServer</type></"
"link> are provided."
msgstr ""
"<link linkend=\"SoupServer\"><type>SoupServer</type></link>の便利なラッパー。"

#: xml/soupcut-server.xml:47(title)
msgid "soupcut_server_take ()"
msgstr ""

#: xml/soupcut-server.xml:48(programlisting)
#, no-wrap
msgid "<link linkend=\"SoupServer\">SoupServer</link> *        soupcut_server_take                 (<link linkend=\"SoupServer\">SoupServer</link> *server);"
msgstr ""

#: xml/soupcut-server.xml:49(para)
msgid "<parameter>server</parameter> is shut down and unref when tear down."
msgstr "サーバーは tear down 時に自動的にシャットダウンされ、<link linkend=\"g-object-unref\"><function>g_object_unref()</function></link>により解放されます。"

#: xml/soupcut-server.xml:53(term) xml/soupcut-server.xml:83(term)
msgid "<parameter>server</parameter> :"
msgstr ""

#: xml/soupcut-server.xml:54(simpara) xml/soupcut-server.xml:84(simpara)
msgid "a <link linkend=\"SoupServer\"><type>SoupServer</type></link>."
msgstr ""
"<link linkend=\"SoupServer\"><type>SoupServer</type></link>オブジェクト。"

#: xml/soupcut-server.xml:56(simpara)
msgid ""
"<parameter>server</parameter> owned by Cutter. Don't <link linkend=\"g-"
"object-unref\"><function>g_object_unref()</function></link> it."
msgstr "<parameter>server</parameter>はCutterが所有権を持つので、<link linkend=\"g-object-unref\"><function>g_object_unref()</function></link>を呼ばないでください。"

#: xml/soupcut-server.xml:61(title)
msgid "soupcut_server_take_new ()"
msgstr ""

#: xml/soupcut-server.xml:62(programlisting)
#, no-wrap
msgid "<link linkend=\"SoupServer\">SoupServer</link> *        soupcut_server_take_new             (<link linkend=\"GMainContext\">GMainContext</link> *context);"
msgstr ""

#: xml/soupcut-server.xml:63(para)
msgid ""
"Creates and returns a new <link linkend=\"SoupServer\"><type>SoupServer</"
"type></link>, whose context is <parameter>context</parameter>. The server is "
"shut down and unref when tear down."
msgstr ""
"コンテキストが<parameter>context</parameter>である<link linkend=\"SoupServer"
"\"><type>SoupServer</type></link>オブジェクトを生成して返します。サーバーは"
"tear down 時に自動的にシャットダウンされ、<link linkend=\\\"g-object-unref\\"
"\"><function>g_object_unref()</function></link>により解放されます。"

#: xml/soupcut-server.xml:69(simpara)
msgid ""
"a <link linkend=\"GMainContext\"><type>GMainContext</type></link> for the "
"main loop of a new server."
msgstr ""
"サーバーの<link linkend=\"GMainContext\"><type>GMainContext</type></link>コン"
"テキスト。"

#: xml/soupcut-server.xml:71(simpara)
msgid ""
"a new <link linkend=\"SoupServer\"><type>SoupServer</type></link> owned by "
"Cutter. Don't <link linkend=\"g-object-unref\"><function>g_object_unref()</"
"function></link> it."
msgstr ""
"新たに<link linkend=\"SoupServer\"><type>SoupServer</type></link>オブジェクト"
"を生成します。作成されたサーバーはCutterが所有権を持つので、<link linkend="
"\"g-object-unref\"><function>g_object_unref()</function></link>を呼ばないでく"
"ださい。"

#: xml/soupcut-server.xml:76(title)
msgid "soupcut_server_build_uri ()"
msgstr ""

#: xml/soupcut-server.xml:77(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link> *       soupcut_server_build_uri            (<link linkend=\"SoupServer\">SoupServer</link> *server,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *path);"
msgstr ""

#: xml/soupcut-server.xml:79(para)
msgid ""
"an URI is built and returned with the base uri of <parameter>server</"
"parameter> and <parameter>path</parameter>."
msgstr ""
"@server のベースURIにパスとして @path を組み合わせたURIの文字列を作成します。"

#: xml/soupcut-server.xml:87(simpara)
msgid "a path."
msgstr ""

#: xml/soupcut-server.xml:89(simpara)
msgid "a new uri string owned by Cutter. Don't free it."
msgstr "Cutterが所有するURI文字列。解放しないで下さい。"

#: xml/soupcutter.xml:7(refentrytitle) xml/soupcutter.xml:13(refname)
msgid "SoupCutter"
msgstr ""

#: xml/soupcutter.xml:14(refpurpose)
msgid "HTTP supported Cutter with libsoup."
msgstr "libsoupを用いたHTTPサポート付きのCutter。"

#: xml/soupcutter.xml:35(para)
msgid ""
"SoupCutter adds many useful HTTP related features based on libsoup to "
"Cutter. If you want to write tests for HTTP, it's good idea that you "
"consider SoupCutter to be used too."
msgstr ""
"SoupCutterはlibsoupを用いたHTTP関連のたくさんの便利な機能をCutterに追加しま"
"す。より簡単にHTTPのテストを書きたい場合はSoupCutterの使用を検討してくださ"
"い。"

#: xml/soupcutter.xml:41(para)
msgid ""
"It's easy to use SoupCutter. You just include &lt;soupcuttter.h&gt; instead "
"of &lt;cutter.h&gt; or &lt;gcutter.h&gt; and use soupcutter-pixbuf.pc "
"instead of cutter.pc or gcutter.pc:"
msgstr ""
"SoupCutterを使うことは簡単です。&lt;cutter.h&gt;または&lt;gcutter.h&gt;の代わ"
"りに&lt;soupcutter.h&gt;をincludeし、cutter.pcまたはgcutter.pcの代わりに"
"soupcutter.pcを使うだけです。"

#: xml/soupcutter.xml:49(programlisting)
#, no-wrap
msgid ""
"\n"
"-#include &lt;cutter.h&gt;\n"
"+#include &lt;soupcutter.h&gt;\n"
msgstr ""

#: xml/soupcutter.xml:56(programlisting)
#, no-wrap
msgid ""
"\n"
"-AC_CHECK_CUTTER\n"
"+AC_CHECK_SOUPCUTTER\n"
msgstr ""

#: xml/soupcutter.xml:63(programlisting)
#, no-wrap
msgid ""
"\n"
"-XXX_CFLAGS = $(CUTTER_CFLAGS)\n"
"-XXX_LIBS = $(CUTTER_LIBS)\n"
"+XXX_CFLAGS = $(SOUPCUTTER_CFLAGS)\n"
"+XXX_LIBS = $(SOUPCUTTER_LIBS)\n"
msgstr ""

#: xml/soupcutter.xml:77(programlisting)
#, no-wrap
msgid "#define SOUPCUTTER_ENABLED 1\n"
msgstr ""

#: xml/soupcutter.xml:79(para)
msgid "Defined when SoupCutter is enabled."
msgstr "SoupCutterが有効なとき定義されます。"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: xml/soupcutter.xml:0(None)
msgid "translator-credits"
msgstr ""
