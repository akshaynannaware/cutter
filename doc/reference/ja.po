# ja.po for Cutter Reference.
# Copyright (C) 2007 Kouhei Sutou
# This file is distributed under the same license as the Cutter package.
# Kouhei Sutou <kou@cozmixng.org>, 2007.
#
msgid ""
msgstr ""
"Project-Id-Version: Cutter 1.0.0\n"
"POT-Creation-Date: 2008-05-19 14:59+0900\n"
"PO-Revision-Date: 2008-05-19 15:03+0900\n"
"Last-Translator: Kouhei Sutou <kou@cozmixng.org>\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\\n\n"

#: cutter-docs.sgml:7(title)
msgid "Cutter Reference Manual"
msgstr "Cutterリファレンスマニュアル"

#: cutter-docs.sgml:8(releaseinfo)
msgid "for Cutter &version;"
msgstr "Cutter &version;用"

#: cutter-docs.sgml:12(title)
msgid "Introduction"
msgstr "はじめに"

#: cutter-docs.sgml:14(title)
msgid "Getting start"
msgstr "はじめよう"

#: cutter-docs.sgml:22(title)
msgid "Reference"
msgstr "リファレンス"

#: cutter-docs.sgml:24(title)
msgid "Writing tests"
msgstr "テスト作成"

#: cutter-docs.sgml:60(title)
msgid "Index"
msgstr "索引"

#: cutter-docs.sgml:63(title)
msgid "Index of deprecated symbols"
msgstr "非推奨のシンボル一覧"

#: cutter-docs.sgml:66(title)
msgid "Index of new symbols in 1.0"
msgstr "1.0での新しいシンボル一覧"

#: cutter-docs.sgml:69(title)
msgid "Index of new symbols in 0.9"
msgstr "0.9での新しいシンボル一覧"

#: cutter-docs.sgml:72(title)
msgid "Index of new symbols in 0.8"
msgstr "0.8での新しいシンボル一覧"

#: cutter-docs.sgml:75(title)
msgid "Index of new symbols in 0.7"
msgstr "0.7での新しいシンボル一覧"

#: cutter-docs.sgml:78(title)
msgid "Index of new symbols in 0.6"
msgstr "0.6での新しいシンボル一覧"

#: cutter-docs.sgml:81(title)
msgid "Index of new symbols in 0.5"
msgstr "0.5での新しいシンボル一覧"

#: cutter-docs.sgml:84(title)
msgid "Index of new symbols in 0.4"
msgstr "0.4での新しいシンボル一覧"

#: cutter-docs.sgml:87(title)
msgid "Index of new symbols in 0.3"
msgstr "0.3での新しいシンボル一覧"

#: xml/cut-assertions.xml:7(refentrytitle) xml/cut-assertions.xml:13(refname)
#: xml/cutter.xml:190(link)
msgid "Assertions"
msgstr "検証"

#: xml/cut-assertions.xml:8(manvolnum)
#: xml/cut-cairo-chart-data.xml:8(manvolnum)
#: xml/cut-cairo-pie-chart.xml:8(manvolnum) xml/cut-cairo.xml:8(manvolnum)
#: xml/cut-contractor.xml:8(manvolnum) xml/cut-diff.xml:8(manvolnum)
#: xml/cut-experimental.xml:8(manvolnum)
#: xml/cut-factory-builder.xml:8(manvolnum)
#: xml/cut-gassertions-helper.xml:8(manvolnum)
#: xml/cut-gassertions.xml:8(manvolnum) xml/cut-gpublic.xml:8(manvolnum)
#: xml/cut-list.xml:8(manvolnum) xml/cut-listener-utils.xml:8(manvolnum)
#: xml/cut-listener.xml:8(manvolnum) xml/cut-main.xml:8(manvolnum)
#: xml/cut-module-factory-utils.xml:8(manvolnum)
#: xml/cut-module-factory.xml:8(manvolnum) xml/cut-pipeline.xml:8(manvolnum)
#: xml/cut-process.xml:8(manvolnum)
#: xml/cut-report-factory-builder.xml:8(manvolnum)
#: xml/cut-report.xml:8(manvolnum) xml/cut-run-context.xml:8(manvolnum)
#: xml/cut-sequence-matcher.xml:8(manvolnum)
#: xml/cut-stream-parser.xml:8(manvolnum)
#: xml/cut-streamer-factory-builder.xml:8(manvolnum)
#: xml/cut-streamer.xml:8(manvolnum) xml/cut-test-runner.xml:8(manvolnum)
#: xml/cut-ui-factory-builder.xml:8(manvolnum) xml/cut-ui.xml:8(manvolnum)
#: xml/cut-value-equal.xml:8(manvolnum) xml/cut-xml-parser.xml:8(manvolnum)
#: xml/cutter.xml:8(manvolnum) xml/gbsearcharray.xml:8(manvolnum)
msgid "3"
msgstr ""

#: xml/cut-assertions.xml:9(refmiscinfo)
#: xml/cut-cairo-chart-data.xml:9(refmiscinfo)
#: xml/cut-cairo-pie-chart.xml:9(refmiscinfo) xml/cut-cairo.xml:9(refmiscinfo)
#: xml/cut-contractor.xml:9(refmiscinfo) xml/cut-diff.xml:9(refmiscinfo)
#: xml/cut-experimental.xml:9(refmiscinfo)
#: xml/cut-factory-builder.xml:9(refmiscinfo)
#: xml/cut-gassertions-helper.xml:9(refmiscinfo)
#: xml/cut-gassertions.xml:9(refmiscinfo) xml/cut-gpublic.xml:9(refmiscinfo)
#: xml/cut-list.xml:9(refmiscinfo) xml/cut-listener-utils.xml:9(refmiscinfo)
#: xml/cut-listener.xml:9(refmiscinfo) xml/cut-main.xml:9(refmiscinfo)
#: xml/cut-module-factory-utils.xml:9(refmiscinfo)
#: xml/cut-module-factory.xml:9(refmiscinfo)
#: xml/cut-pipeline.xml:9(refmiscinfo) xml/cut-process.xml:9(refmiscinfo)
#: xml/cut-report-factory-builder.xml:9(refmiscinfo)
#: xml/cut-report.xml:9(refmiscinfo) xml/cut-run-context.xml:9(refmiscinfo)
#: xml/cut-sequence-matcher.xml:9(refmiscinfo)
#: xml/cut-stream-parser.xml:9(refmiscinfo)
#: xml/cut-streamer-factory-builder.xml:9(refmiscinfo)
#: xml/cut-streamer.xml:9(refmiscinfo) xml/cut-test-runner.xml:9(refmiscinfo)
#: xml/cut-ui-factory-builder.xml:9(refmiscinfo) xml/cut-ui.xml:9(refmiscinfo)
#: xml/cut-value-equal.xml:9(refmiscinfo)
#: xml/cut-xml-parser.xml:9(refmiscinfo) xml/cutter.xml:9(refmiscinfo)
#: xml/gbsearcharray.xml:9(refmiscinfo)
msgid "CUTTER Library"
msgstr "Cutterライブラリ"

#: xml/cut-assertions.xml:14(refpurpose)
msgid "Checks that your program works as you expect."
msgstr "あなたのプログラムが期待通りに動作しているかを検証します。"

#: xml/cut-assertions.xml:19(title) xml/cut-cairo-chart-data.xml:19(title)
#: xml/cut-cairo-pie-chart.xml:19(title) xml/cut-cairo.xml:19(title)
#: xml/cut-contractor.xml:19(title) xml/cut-diff.xml:19(title)
#: xml/cut-experimental.xml:19(title) xml/cut-factory-builder.xml:19(title)
#: xml/cut-gassertions-helper.xml:19(title) xml/cut-gassertions.xml:20(title)
#: xml/cut-gpublic.xml:19(title) xml/cut-list.xml:19(title)
#: xml/cut-listener-utils.xml:19(title) xml/cut-listener.xml:19(title)
#: xml/cut-main.xml:19(title) xml/cut-module-factory-utils.xml:19(title)
#: xml/cut-module-factory.xml:19(title) xml/cut-pipeline.xml:19(title)
#: xml/cut-process.xml:19(title) xml/cut-report-factory-builder.xml:19(title)
#: xml/cut-report.xml:19(title) xml/cut-run-context.xml:19(title)
#: xml/cut-sequence-matcher.xml:19(title) xml/cut-stream-parser.xml:19(title)
#: xml/cut-streamer-factory-builder.xml:19(title)
#: xml/cut-streamer.xml:19(title) xml/cut-test-runner.xml:19(title)
#: xml/cut-ui-factory-builder.xml:19(title) xml/cut-ui.xml:19(title)
#: xml/cut-value-equal.xml:19(title) xml/cut-xml-parser.xml:19(title)
#: xml/cutter.xml:19(title) xml/gbsearcharray.xml:19(title)
msgid "Synopsis"
msgstr "概要"

#: xml/cut-assertions.xml:22(link) xml/cut-assertions.xml:83(primary)
msgid "cut_error"
msgstr ""

#: xml/cut-assertions.xml:23(link) xml/cut-assertions.xml:98(primary)
msgid "cut_fail"
msgstr ""

#: xml/cut-assertions.xml:24(link) xml/cut-assertions.xml:113(primary)
msgid "cut_pend"
msgstr ""

#: xml/cut-assertions.xml:25(link) xml/cut-assertions.xml:129(primary)
msgid "cut_pending"
msgstr ""

#: xml/cut-assertions.xml:26(link) xml/cut-assertions.xml:147(primary)
msgid "cut_notify"
msgstr ""

#: xml/cut-assertions.xml:27(link) xml/cut-assertions.xml:162(primary)
msgid "cut_omit"
msgstr ""

#: xml/cut-assertions.xml:28(link) xml/cut-assertions.xml:185(primary)
msgid "cut_assert"
msgstr ""

#: xml/cut-assertions.xml:29(link) xml/cut-assertions.xml:201(primary)
msgid "cut_assert_true"
msgstr ""

#: xml/cut-assertions.xml:30(link) xml/cut-assertions.xml:218(primary)
msgid "cut_assert_false"
msgstr ""

#: xml/cut-assertions.xml:31(link) xml/cut-assertions.xml:235(primary)
msgid "cut_assert_null"
msgstr ""

#: xml/cut-assertions.xml:32(link) xml/cut-assertions.xml:251(primary)
msgid "cut_assert_null_string"
msgstr ""

#: xml/cut-assertions.xml:33(link) xml/cut-assertions.xml:268(primary)
msgid "cut_assert_not_null"
msgstr ""

#: xml/cut-assertions.xml:34(link) xml/cut-assertions.xml:284(primary)
msgid "cut_assert_equal_int"
msgstr ""

#: xml/cut-assertions.xml:35(link) xml/cut-assertions.xml:303(primary)
msgid "cut_assert_equal_uint"
msgstr ""

#: xml/cut-assertions.xml:36(link) xml/cut-assertions.xml:322(primary)
msgid "cut_assert_equal_double"
msgstr ""

#: xml/cut-assertions.xml:37(link) xml/cut-assertions.xml:344(primary)
msgid "cut_assert_equal_string"
msgstr ""

#: xml/cut-assertions.xml:38(link) xml/cut-assertions.xml:364(primary)
msgid "cut_assert_equal_string_with_free"
msgstr ""

#: xml/cut-assertions.xml:39(link) xml/cut-assertions.xml:385(primary)
msgid "cut_assert_equal_string_or_null"
msgstr ""

#: xml/cut-assertions.xml:40(link) xml/cut-assertions.xml:406(primary)
msgid "cut_assert_equal_memory"
msgstr ""

#: xml/cut-assertions.xml:42(link) xml/cut-assertions.xml:433(primary)
msgid "cut_assert_equal_string_array"
msgstr ""

#: xml/cut-assertions.xml:43(link) xml/cut-assertions.xml:453(primary)
msgid "cut_assert_equal_string_array_with_free"
msgstr ""

#: xml/cut-assertions.xml:44(link) xml/cut-assertions.xml:474(primary)
msgid "cut_assert_operator"
msgstr ""

#: xml/cut-assertions.xml:45(link) xml/cut-assertions.xml:502(primary)
msgid "cut_assert_operator_int"
msgstr ""

#: xml/cut-assertions.xml:46(link) xml/cut-assertions.xml:530(primary)
msgid "cut_assert_equal"
msgstr ""

#: xml/cut-assertions.xml:47(link) xml/cut-assertions.xml:558(primary)
msgid "cut_assert_errno"
msgstr ""

#: xml/cut-assertions.xml:48(link) xml/cut-assertions.xml:579(primary)
msgid "cut_assert_file_exist"
msgstr ""

#: xml/cut-assertions.xml:49(link) xml/cut-assertions.xml:603(primary)
msgid "cut_assert_match"
msgstr ""

#: xml/cut-assertions.xml:50(link) xml/cut-assertions.xml:630(primary)
msgid "cut_assert_equal_pointer"
msgstr ""

#: xml/cut-assertions.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>                           (format, ...)\n"
"#define             <placeholder-2/>                            (format, ...)\n"
"#define             <placeholder-3/>                            (format, ...)\n"
"#define             <placeholder-4/>                         (format, ...)\n"
"#define             <placeholder-5/>                          (format, ...)\n"
"#define             <placeholder-6/>                            (format, ...)\n"
"#define             <placeholder-7/>                          (expression, ...)\n"
"#define             <placeholder-8/>                     (expression, ...)\n"
"#define             <placeholder-9/>                    (expression, ...)\n"
"#define             <placeholder-10/>                     (expression, ...)\n"
"#define             <placeholder-11/>              (expression, ...)\n"
"#define             <placeholder-12/>                 (expression, ...)\n"
"#define             <placeholder-13/>                (expected, actual, ...)\n"
"#define             <placeholder-14/>               (expected, actual, ...)\n"
"#define             <placeholder-15/>             (expected, error, actual, ...)\n"
"#define             <placeholder-16/>             (expected, actual, ...)\n"
"#define             <placeholder-17/>   (expected, actual, ...)\n"
"#define             <placeholder-18/>     (expected, actual, ...)\n"
"#define             <placeholder-19/>             (expected, expected_size,\n"
"                                                         actual, actual_size, ...)\n"
"#define             <placeholder-20/>       (expected, actual, ...)\n"
"#define             <placeholder-21/>(expected, actual, ...)\n"
"#define             <placeholder-22/>                 (lhs, operator, rhs, ...)\n"
"#define             <placeholder-23/>             (lhs, operator, rhs, ...)\n"
"#define             <placeholder-24/>                    (function, expected, actual, ...)\n"
"#define             <placeholder-25/>                    (...)\n"
"#define             <placeholder-26/>               (path, ...)\n"
"#define             <placeholder-27/>                    (pattern, actual, ...)\n"
"#define             <placeholder-28/>            (expected, actual, ...)\n"
msgstr ""

#: xml/cut-assertions.xml:63(title) xml/cut-cairo-chart-data.xml:42(title)
#: xml/cut-cairo-pie-chart.xml:45(title) xml/cut-cairo.xml:39(title)
#: xml/cut-contractor.xml:42(title) xml/cut-diff.xml:38(title)
#: xml/cut-experimental.xml:39(title) xml/cut-factory-builder.xml:42(title)
#: xml/cut-gassertions-helper.xml:36(title) xml/cut-gassertions.xml:40(title)
#: xml/cut-gpublic.xml:38(title) xml/cut-list.xml:50(title)
#: xml/cut-listener-utils.xml:35(title) xml/cut-listener.xml:39(title)
#: xml/cut-main.xml:40(title) xml/cut-module-factory-utils.xml:49(title)
#: xml/cut-module-factory.xml:47(title) xml/cut-pipeline.xml:37(title)
#: xml/cut-process.xml:47(title) xml/cut-report-factory-builder.xml:35(title)
#: xml/cut-report.xml:47(title) xml/cut-run-context.xml:114(title)
#: xml/cut-sequence-matcher.xml:84(title) xml/cut-stream-parser.xml:41(title)
#: xml/cut-streamer-factory-builder.xml:35(title)
#: xml/cut-streamer.xml:38(title) xml/cut-test-runner.xml:36(title)
#: xml/cut-ui-factory-builder.xml:35(title) xml/cut-ui.xml:42(title)
#: xml/cut-value-equal.xml:40(title) xml/cut-xml-parser.xml:36(title)
#: xml/cutter.xml:38(title) xml/gbsearcharray.xml:45(title)
msgid "Description"
msgstr "説明"

#: xml/cut-assertions.xml:64(para)
msgid ""
"To check that your program works as you expect, you use <link linkend=\"cut-"
"assert-XXX\"><function>cut_assert_XXX()</function></link> where you want to "
"check expected value is got."
msgstr ""
"あなたのプログラムが期待通りに動作しているかを検証するために、期待した値が得"
"られていることを検証したい箇所で<link linkend=\"cut-assert-XXX"
"\"><function>cut_assert_XXX()</function></link>を使います。"

#: xml/cut-assertions.xml:71(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal_int(3, 1 + 2);\n"
msgstr ""

#: xml/cut-assertions.xml:69(para) xml/cut-assertions.xml:166(para)
#: xml/cut-assertions.xml:478(para) xml/cut-assertions.xml:506(para)
#: xml/cut-assertions.xml:534(para) xml/cut-assertions.xml:562(para)
#: xml/cut-assertions.xml:583(para) xml/cut-assertions.xml:607(para)
#: xml/cut-experimental.xml:69(para) xml/cut-experimental.xml:97(para)
#: xml/cut-experimental.xml:129(para) xml/cut-experimental.xml:158(para)
msgid "e.g.: <placeholder-1/>"
msgstr "例: <placeholder-1/>"

#: xml/cut-assertions.xml:80(title) xml/cut-cairo-chart-data.xml:49(title)
#: xml/cut-cairo-pie-chart.xml:52(title) xml/cut-cairo.xml:46(title)
#: xml/cut-contractor.xml:49(title) xml/cut-diff.xml:45(title)
#: xml/cut-experimental.xml:48(title) xml/cut-factory-builder.xml:49(title)
#: xml/cut-gassertions-helper.xml:43(title) xml/cut-gassertions.xml:49(title)
#: xml/cut-gpublic.xml:45(title) xml/cut-list.xml:57(title)
#: xml/cut-listener-utils.xml:42(title) xml/cut-listener.xml:46(title)
#: xml/cut-main.xml:47(title) xml/cut-module-factory-utils.xml:56(title)
#: xml/cut-module-factory.xml:54(title) xml/cut-pipeline.xml:44(title)
#: xml/cut-process.xml:54(title) xml/cut-report-factory-builder.xml:42(title)
#: xml/cut-report.xml:54(title) xml/cut-run-context.xml:121(title)
#: xml/cut-sequence-matcher.xml:91(title) xml/cut-stream-parser.xml:48(title)
#: xml/cut-streamer-factory-builder.xml:42(title)
#: xml/cut-streamer.xml:45(title) xml/cut-test-runner.xml:43(title)
#: xml/cut-ui-factory-builder.xml:42(title) xml/cut-ui.xml:49(title)
#: xml/cut-value-equal.xml:47(title) xml/cut-xml-parser.xml:43(title)
#: xml/cutter.xml:143(title) xml/gbsearcharray.xml:52(title)
msgid "Details"
msgstr "詳細"

#: xml/cut-assertions.xml:82(title)
msgid "cut_error()"
msgstr ""

#: xml/cut-assertions.xml:83(programlisting)
#, no-wrap
msgid "#define             cut_error(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:84(para)
msgid "Raises an error with message."
msgstr "メッセージ付きでエラーを発生させます。"

#: xml/cut-assertions.xml:89(term) xml/cut-assertions.xml:104(term)
#: xml/cut-assertions.xml:120(term) xml/cut-assertions.xml:138(term)
#: xml/cut-assertions.xml:153(term) xml/cut-assertions.xml:175(term)
#: xml/cut-run-context.xml:802(term)
msgid "<parameter>format</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:90(simpara) xml/cut-assertions.xml:105(simpara)
#: xml/cut-assertions.xml:121(simpara) xml/cut-assertions.xml:139(simpara)
#: xml/cut-assertions.xml:154(simpara) xml/cut-assertions.xml:176(simpara)
msgid ""
"the message format. See the <link linkend=\"printf\"><function>printf()</"
"function></link> documentation."
msgstr ""
"整形文字列。<link linkend=\"printf\"><function>printf()</function></link>のド"
"キュメントを見てください。"

#: xml/cut-assertions.xml:92(term) xml/cut-assertions.xml:107(term)
#: xml/cut-assertions.xml:123(term) xml/cut-assertions.xml:141(term)
#: xml/cut-assertions.xml:156(term) xml/cut-assertions.xml:178(term)
#: xml/cut-assertions.xml:194(term) xml/cut-assertions.xml:210(term)
#: xml/cut-assertions.xml:227(term) xml/cut-assertions.xml:244(term)
#: xml/cut-assertions.xml:260(term) xml/cut-assertions.xml:277(term)
#: xml/cut-assertions.xml:296(term) xml/cut-assertions.xml:315(term)
#: xml/cut-assertions.xml:337(term) xml/cut-assertions.xml:357(term)
#: xml/cut-assertions.xml:377(term) xml/cut-assertions.xml:399(term)
#: xml/cut-assertions.xml:426(term) xml/cut-assertions.xml:446(term)
#: xml/cut-assertions.xml:466(term) xml/cut-assertions.xml:495(term)
#: xml/cut-assertions.xml:523(term) xml/cut-assertions.xml:551(term)
#: xml/cut-assertions.xml:571(term) xml/cut-assertions.xml:595(term)
#: xml/cut-assertions.xml:622(term) xml/cut-assertions.xml:642(term)
#: xml/cut-gassertions.xml:64(term) xml/cut-gassertions.xml:83(term)
#: xml/cut-gassertions.xml:102(term) xml/cut-gassertions.xml:122(term)
#: xml/cut-gassertions.xml:139(term) xml/cut-module-factory.xml:82(term)
#: xml/cut-report.xml:78(term) xml/cut-run-context.xml:805(term)
#: xml/cut-streamer.xml:69(term) xml/cut-ui.xml:82(term)
msgid "<parameter>...</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:93(simpara) xml/cut-assertions.xml:108(simpara)
#: xml/cut-assertions.xml:124(simpara) xml/cut-assertions.xml:142(simpara)
#: xml/cut-assertions.xml:157(simpara) xml/cut-assertions.xml:179(simpara)
msgid "the parameters to insert into the format string."
msgstr "整形文字列に挿入されるパラメータ。"

#: xml/cut-assertions.xml:97(title)
msgid "cut_fail()"
msgstr ""

#: xml/cut-assertions.xml:98(programlisting)
#, no-wrap
msgid "#define             cut_fail(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:99(para)
msgid "Raises a failure with message."
msgstr "メッセージ付きでテストを失敗させます。"

#: xml/cut-assertions.xml:112(title)
msgid "cut_pend()"
msgstr ""

#: xml/cut-assertions.xml:113(programlisting)
#, no-wrap
msgid "#define             cut_pend(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:114(para) xml/cut-assertions.xml:132(para)
msgid "Marks the test is pending with message. The test is stopped."
msgstr ""
"メッセージ付きでこのテストが未解決であると印を付けます。テストはここで中断し"
"ます。"

#: xml/cut-assertions.xml:128(title)
msgid "cut_pending()"
msgstr ""

#: xml/cut-assertions.xml:129(programlisting)
#, no-wrap
msgid "#define cut_pending(format, ...) cut_pend(format, ## __VA_ARGS__)\n"
msgstr ""

#: xml/cut-assertions.xml:131(para)
msgid ""
"<literal>cut_pending</literal> has been deprecated since version 0.4 and "
"should not be used in newly-written code. Use <link linkend=\"cut-pend"
"\"><function>cut_pend()</function></link> instead."
msgstr ""
"<literal>cut_pending</literal>はバージョン0.4から非推奨になりました。新しく書"
"くコードでは使わないでください。代わりに<link linkend=\"cut-pend"
"\"><function>cut_pend()</function></link>を使ってください。"

#: xml/cut-assertions.xml:146(title)
msgid "cut_notify()"
msgstr ""

#: xml/cut-assertions.xml:147(programlisting)
#, no-wrap
msgid "#define             cut_notify(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:148(para)
msgid "Leaves a notification message. The test is continued."
msgstr "通知用のメッセージを残します。テストは続行します。"

#: xml/cut-assertions.xml:161(title)
msgid "cut_omit()"
msgstr ""

#: xml/cut-assertions.xml:162(programlisting)
#, no-wrap
msgid "#define             cut_omit(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:163(para)
msgid "Omit the test."
msgstr "このテストを省略します。"

#: xml/cut-assertions.xml:168(programlisting)
#, no-wrap
msgid ""
"\n"
"if (version &lt; 2.0)\n"
"  cut_omit(\"Require &gt;= 2.0\");\n"
msgstr ""

#: xml/cut-assertions.xml:181(para) xml/cut-assertions.xml:575(para)
#: xml/cut-experimental.xml:89(para) xml/cut-experimental.xml:121(para)
#: xml/cut-experimental.xml:150(para) xml/cut-experimental.xml:179(para)
#: xml/cut-gassertions.xml:106(para) xml/cut-gassertions.xml:126(para)
#: xml/cutter.xml:171(para) xml/cutter.xml:181(para)
msgid "Since 0.8"
msgstr "0.8から"

#: xml/cut-assertions.xml:184(title)
msgid "cut_assert()"
msgstr ""

#: xml/cut-assertions.xml:185(programlisting)
#, no-wrap
msgid "#define             cut_assert(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:186(para)
msgid "Passes if <parameter>expression</parameter> is not 0 or NULL."
msgstr "<parameter>expression</parameter>が0でもNULLでもないときにパスします。"

#: xml/cut-assertions.xml:191(term) xml/cut-assertions.xml:207(term)
#: xml/cut-assertions.xml:224(term) xml/cut-assertions.xml:241(term)
#: xml/cut-assertions.xml:257(term) xml/cut-assertions.xml:274(term)
msgid "<parameter>expression</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:192(simpara) xml/cut-assertions.xml:208(simpara)
#: xml/cut-assertions.xml:225(simpara) xml/cut-assertions.xml:242(simpara)
#: xml/cut-assertions.xml:275(simpara)
msgid "the expression to check."
msgstr "チェックする式。"

#: xml/cut-assertions.xml:195(simpara) xml/cut-assertions.xml:211(simpara)
#: xml/cut-assertions.xml:228(simpara) xml/cut-assertions.xml:245(simpara)
#: xml/cut-assertions.xml:261(simpara) xml/cut-assertions.xml:278(simpara)
#: xml/cut-assertions.xml:297(simpara) xml/cut-assertions.xml:316(simpara)
#: xml/cut-assertions.xml:338(simpara) xml/cut-assertions.xml:358(simpara)
#: xml/cut-assertions.xml:378(simpara) xml/cut-assertions.xml:400(simpara)
#: xml/cut-assertions.xml:427(simpara) xml/cut-assertions.xml:447(simpara)
#: xml/cut-assertions.xml:467(simpara) xml/cut-assertions.xml:496(simpara)
#: xml/cut-assertions.xml:524(simpara) xml/cut-assertions.xml:552(simpara)
#: xml/cut-assertions.xml:572(simpara) xml/cut-assertions.xml:596(simpara)
#: xml/cut-assertions.xml:623(simpara) xml/cut-assertions.xml:643(simpara)
#: xml/cut-gassertions.xml:65(simpara) xml/cut-gassertions.xml:84(simpara)
#: xml/cut-gassertions.xml:103(simpara) xml/cut-gassertions.xml:123(simpara)
#: xml/cut-gassertions.xml:140(simpara)
msgid ""
"optional format string, followed by parameters to insert into the format "
"string (as with <link linkend=\"printf\"><function>printf()</function></"
"link>)"
msgstr ""
"省略可能な整形文字列。以降のパラメータが整形文字列に挿入されます。（<link "
"linkend=\"printf\"><function>printf()</function></link>と同じ）"

#: xml/cut-assertions.xml:200(title)
msgid "cut_assert_true()"
msgstr ""

#: xml/cut-assertions.xml:201(programlisting)
#, no-wrap
msgid "#define             cut_assert_true(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:202(para)
msgid ""
"Passes if <parameter>expression</parameter> is TRUE value (not 0 or NULL)."
msgstr ""
"<parameter>expression</parameter>が真の値の（0でもNULLでもない）ときにパスし"
"ます。"

#: xml/cut-assertions.xml:214(para) xml/cut-assertions.xml:231(para)
#: xml/cut-assertions.xml:470(para) xml/cut-assertions.xml:599(para)
msgid "Since 0.9"
msgstr "0.9から"

#: xml/cut-assertions.xml:217(title)
msgid "cut_assert_false()"
msgstr ""

#: xml/cut-assertions.xml:218(programlisting)
#, no-wrap
msgid "#define             cut_assert_false(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:219(para)
msgid "Passes if <parameter>expression</parameter> is 0 or NULL."
msgstr "<parameter>expression</parameter>が0かNULLのときにパスします。"

#: xml/cut-assertions.xml:234(title)
msgid "cut_assert_null()"
msgstr ""

#: xml/cut-assertions.xml:235(programlisting)
#, no-wrap
msgid "#define             cut_assert_null(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:236(para) xml/cut-assertions.xml:252(para)
msgid "Passes if <parameter>expression</parameter> is NULL."
msgstr "<parameter>expression</parameter>がNULLのときにパスします。"

#: xml/cut-assertions.xml:250(title)
msgid "cut_assert_null_string()"
msgstr ""

#: xml/cut-assertions.xml:251(programlisting)
#, no-wrap
msgid "#define             cut_assert_null_string(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:258(simpara)
msgid "the expression that returns string."
msgstr "文字列を返す式。"

#: xml/cut-assertions.xml:264(para) xml/cut-assertions.xml:381(para)
msgid "Since 0.3"
msgstr "0.3から"

#: xml/cut-assertions.xml:267(title)
msgid "cut_assert_not_null()"
msgstr ""

#: xml/cut-assertions.xml:268(programlisting)
#, no-wrap
msgid "#define             cut_assert_not_null(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:269(para)
msgid "Passes if <parameter>expression</parameter> is not NULL."
msgstr "<parameter>expression</parameter>がNULLではないときにパスします。"

#: xml/cut-assertions.xml:283(title)
msgid "cut_assert_equal_int()"
msgstr ""

#: xml/cut-assertions.xml:284(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_int(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:285(para) xml/cut-assertions.xml:304(para)
#: xml/cut-assertions.xml:631(para) xml/cut-gassertions.xml:53(para)
#: xml/cut-gassertions.xml:72(para) xml/cut-gassertions.xml:91(para)
#: xml/cut-gassertions.xml:111(para)
msgid ""
"Passes if <parameter>expected</parameter> == <parameter>actual</parameter>."
msgstr ""
"<parameter>expected</parameter> == <parameter>actual</parameter>が成り立つと"
"きパスします。"

#: xml/cut-assertions.xml:290(term) xml/cut-assertions.xml:309(term)
#: xml/cut-assertions.xml:328(term) xml/cut-assertions.xml:351(term)
#: xml/cut-assertions.xml:371(term) xml/cut-assertions.xml:393(term)
#: xml/cut-assertions.xml:414(term) xml/cut-assertions.xml:440(term)
#: xml/cut-assertions.xml:460(term) xml/cut-assertions.xml:545(term)
#: xml/cut-assertions.xml:636(term) xml/cut-gassertions.xml:58(term)
#: xml/cut-gassertions.xml:77(term) xml/cut-gassertions.xml:96(term)
#: xml/cut-gassertions.xml:116(term)
msgid "<parameter>expected</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:291(simpara)
msgid "an expected integer value."
msgstr "期待する整数の値。"

#: xml/cut-assertions.xml:293(term) xml/cut-assertions.xml:312(term)
#: xml/cut-assertions.xml:334(term) xml/cut-assertions.xml:354(term)
#: xml/cut-assertions.xml:374(term) xml/cut-assertions.xml:396(term)
#: xml/cut-assertions.xml:420(term) xml/cut-assertions.xml:443(term)
#: xml/cut-assertions.xml:463(term) xml/cut-assertions.xml:548(term)
#: xml/cut-assertions.xml:619(term) xml/cut-assertions.xml:639(term)
#: xml/cut-gassertions.xml:61(term) xml/cut-gassertions.xml:80(term)
#: xml/cut-gassertions.xml:99(term) xml/cut-gassertions.xml:119(term)
msgid "<parameter>actual</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:294(simpara)
msgid "an actual integer value."
msgstr "実際の整数の値。"

#: xml/cut-assertions.xml:302(title)
msgid "cut_assert_equal_uint()"
msgstr ""

#: xml/cut-assertions.xml:303(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_uint(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:310(simpara)
msgid "an expected unsigned integer value."
msgstr "期待する符号無し整数の値。"

#: xml/cut-assertions.xml:313(simpara)
msgid "an actual unsigned integer value."
msgstr "実際の符号無し符号整数の値。"

#: xml/cut-assertions.xml:321(title)
msgid "cut_assert_equal_double()"
msgstr ""

#: xml/cut-assertions.xml:322(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_double(expected, error, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:323(para)
msgid ""
"Passes if (<parameter>expected</parameter> - <parameter>error</parameter>) "
"&lt;= <parameter>actual</parameter> &lt;= (<parameter>expected</parameter> + "
"<parameter>error</parameter>)."
msgstr ""
"(<parameter>expected</parameter> - <parameter>error</parameter>) &lt;= "
"<parameter>actual</parameter> &lt;= (<parameter>expected</parameter> + "
"<parameter>error</parameter>)が成り立つときパスします。"

#: xml/cut-assertions.xml:329(simpara)
msgid "an expected float value."
msgstr "期待される浮動小数点数。"

#: xml/cut-assertions.xml:331(term) xml/cut-gassertions-helper.xml:62(term)
#: xml/cut-gpublic.xml:74(term) xml/cut-run-context.xml:799(term)
#: xml/cut-stream-parser.xml:101(term)
msgid "<parameter>error</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:332(simpara)
msgid "an float value that specifies error range."
msgstr "誤差範囲を示す浮動小数点数。"

#: xml/cut-assertions.xml:335(simpara)
msgid "an actual float value."
msgstr "実際の浮動小数点数。"

#: xml/cut-assertions.xml:343(title)
msgid "cut_assert_equal_string()"
msgstr ""

#: xml/cut-assertions.xml:344(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:345(para) xml/cut-assertions.xml:365(para)
#: xml/cut-assertions.xml:387(para)
msgid ""
"Passes if both <parameter>expected</parameter> and <parameter>actual</"
"parameter> are NULL or strcmp(<parameter>expected</parameter>, "
"<parameter>actual</parameter>) == 0."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>がどちらとも"
"NULL、あるいはstrcmp(<parameter>expected</parameter>, <parameter>actual</"
"parameter>) == 0が成り立つときにパスします。"

#: xml/cut-assertions.xml:352(simpara) xml/cut-assertions.xml:372(simpara)
#: xml/cut-assertions.xml:394(simpara)
msgid "an expected string value."
msgstr "期待される文字列。"

#: xml/cut-assertions.xml:355(simpara) xml/cut-assertions.xml:397(simpara)
msgid "an actual string value."
msgstr "実際の文字列の値。"

#: xml/cut-assertions.xml:363(title)
msgid "cut_assert_equal_string_with_free()"
msgstr ""

#: xml/cut-assertions.xml:364(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string_with_free(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:375(simpara)
msgid "an actual string value that is freed."
msgstr "実際の文字列の値（メモリは開放される）。"

#: xml/cut-assertions.xml:384(title)
msgid "cut_assert_equal_string_or_null()"
msgstr ""

#: xml/cut-assertions.xml:385(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string_or_null(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:386(para)
msgid ""
"<literal>cut_assert_equal_string_or_null</literal> has been deprecated since "
"version 0.3 and should not be used in newly-written code. Use <link linkend="
"\"cut-assert-equal-string\"><function>cut_assert_equal_string()</function></"
"link> instead."
msgstr ""
"<literal>cut_assert_equal_string_or_null</literal>はバージョン0.3から非推奨に"
"なりました。新しく書くコードでは使わないでください。代わりに<link linkend="
"\"cut-assert-equal-string\"><function>cut_assert_equal_string()</function></"
"link>を使ってください。"

#: xml/cut-assertions.xml:405(title)
msgid "cut_assert_equal_memory()"
msgstr ""

#: xml/cut-assertions.xml:406(programlisting)
#, no-wrap
msgid ""
"#define             cut_assert_equal_memory(expected, expected_size,                \\\n"
"                                            actual, actual_size, ...)"
msgstr ""

#: xml/cut-assertions.xml:408(para)
msgid ""
"Passes if <parameter>expected_size</parameter> == <parameter>actual_size</"
"parameter> and memcmp(<parameter>expected</parameter>, <parameter>actual</"
"parameter>, <parameter>expected_size</parameter>) == 0."
msgstr ""
"<parameter>expected_size</parameter> == <parameter>actual_size</parameter>が"
"成り立ち、かつ、memcmp(<parameter>expected</parameter>, <parameter>actual</"
"parameter>, <parameter>expected_size</parameter>) == 0が成り立つときにパスし"
"ます。"

#: xml/cut-assertions.xml:415(simpara)
msgid "an expected data."
msgstr "期待するデータ。"

#: xml/cut-assertions.xml:417(term)
msgid "<parameter>expected_size</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:418(simpara)
msgid "a size of <parameter>expected</parameter>."
msgstr "<parameter>expected</parameter>のサイズ。"

#: xml/cut-assertions.xml:421(simpara)
msgid "an actual data."
msgstr "実際のデータ。"

#: xml/cut-assertions.xml:423(term)
msgid "<parameter>actual_size</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:424(simpara)
msgid "a size of <parameter>actual</parameter>."
msgstr "<parameter>actual</parameter>のサイズ。"

#: xml/cut-assertions.xml:432(title)
msgid "cut_assert_equal_string_array()"
msgstr ""

#: xml/cut-assertions.xml:433(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string_array(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:434(para) xml/cut-assertions.xml:454(para)
msgid ""
"Passes if both <parameter>expected</parameter> and <parameter>actual</"
"parameter> are not NULL and have same content (<link linkend=\"strcmp"
"\"><function>strcmp()</function></link> == 0) strings."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>がどちらとも"
"NULLではなく、どちらも同じ内容の文字列(<link linkend=\"strcmp"
"\"><function>strcmp()</function></link> == 0)を持つときにパスします。"

#: xml/cut-assertions.xml:441(simpara) xml/cut-assertions.xml:461(simpara)
msgid "an expected NULL-terminated array of strings."
msgstr "期待する文字列の配列。配列はNULL終端。"

#: xml/cut-assertions.xml:444(simpara)
msgid "an actual NULL-terminated array of strings that are freed."
msgstr "実際の文字列の配列。配列はNULL終端。"

#: xml/cut-assertions.xml:452(title)
msgid "cut_assert_equal_string_array_with_free()"
msgstr ""

#: xml/cut-assertions.xml:453(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string_array_with_free(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:464(simpara)
msgid "an actual NULL-terminated array of strings."
msgstr "実際の文字列の配列。配列はNULL終端。"

#: xml/cut-assertions.xml:473(title)
msgid "cut_assert_operator()"
msgstr ""

#: xml/cut-assertions.xml:474(programlisting)
#, no-wrap
msgid "#define             cut_assert_operator(lhs, operator, rhs, ...)"
msgstr ""

#: xml/cut-assertions.xml:475(para) xml/cut-assertions.xml:503(para)
msgid ""
"Passes if (<parameter>lhs</parameter> <parameter>operator</parameter> "
"<parameter>rhs</parameter>) is TRUE."
msgstr ""
"(<parameter>lhs</parameter> <parameter>operator</parameter> <parameter>rhs</"
"parameter>)が真のときにパスします。"

#: xml/cut-assertions.xml:480(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_operator(1, &lt;, 2) -&gt; (1 &lt; 2);\n"
msgstr ""

#: xml/cut-assertions.xml:486(term) xml/cut-assertions.xml:514(term)
msgid "<parameter>lhs</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:487(simpara)
msgid "a left hand side value."
msgstr "左辺値。"

#: xml/cut-assertions.xml:489(term) xml/cut-assertions.xml:517(term)
msgid "<parameter>operator</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:490(simpara) xml/cut-assertions.xml:518(simpara)
msgid "a binary operator."
msgstr "二項演算子。"

#: xml/cut-assertions.xml:492(term) xml/cut-assertions.xml:520(term)
msgid "<parameter>rhs</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:493(simpara)
msgid "a right hand side value."
msgstr "右辺値。"

#: xml/cut-assertions.xml:501(title)
msgid "cut_assert_operator_int()"
msgstr ""

#: xml/cut-assertions.xml:502(programlisting)
#, no-wrap
msgid "#define             cut_assert_operator_int(lhs, operator, rhs, ...)"
msgstr ""

#: xml/cut-assertions.xml:508(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_operator_int(1, &lt;, 2) -&gt; (1 &lt; 2);\n"
msgstr ""

#: xml/cut-assertions.xml:515(simpara)
msgid "a left hand side integer value."
msgstr "左辺の整数の値。"

#: xml/cut-assertions.xml:521(simpara)
msgid "a right hand side integer value."
msgstr "右辺の整数の値。"

#: xml/cut-assertions.xml:529(title)
msgid "cut_assert_equal()"
msgstr ""

#: xml/cut-assertions.xml:530(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal(function, expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:531(para)
msgid ""
"Passes if <parameter>function</parameter>(<parameter>expected</parameter>, "
"<parameter>actual</parameter>) returns TRUE."
msgstr ""
"<parameter>function</parameter>(<parameter>expected</parameter>, "
"<parameter>actual</parameter>)が真を返すときパスします。"

#: xml/cut-assertions.xml:536(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal(!strcmp, \"abc\", \"abc\"); -&gt; Pass\n"
msgstr ""

#: xml/cut-assertions.xml:542(term)
msgid "<parameter>function</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:543(simpara)
msgid ""
"a function that compares <parameter>actual</parameter> with "
"<parameter>expected</parameter>."
msgstr ""
"<parameter>actual</parameter>と<parameter>expected</parameter>を比較する関"
"数。"

#: xml/cut-assertions.xml:546(simpara)
msgid "an expected value."
msgstr "期待値。"

#: xml/cut-assertions.xml:549(simpara)
msgid "an actual value."
msgstr "実測値。"

#: xml/cut-assertions.xml:557(title)
msgid "cut_assert_errno()"
msgstr ""

#: xml/cut-assertions.xml:558(programlisting)
#, no-wrap
msgid "#define             cut_assert_errno(...)"
msgstr ""

#: xml/cut-assertions.xml:559(para)
msgid "Passes if errno is 0."
msgstr ""

#: xml/cut-assertions.xml:564(programlisting)
#, no-wrap
msgid ""
"\n"
"count = write(stdout, buffer, strlen(buffer));\n"
"cut_assert_errno(\"Failed to write\");            -&gt; Pass when count != -1\n"
msgstr ""

#: xml/cut-assertions.xml:578(title)
msgid "cut_assert_file_exist()"
msgstr ""

#: xml/cut-assertions.xml:579(programlisting)
#, no-wrap
msgid "#define             cut_assert_file_exist(path, ...)"
msgstr ""

#: xml/cut-assertions.xml:580(para)
msgid ""
"Passes if <parameter>path</parameter> is exist. It may or may not be a "
"regular file."
msgstr ""
"<parameter>path</parameter>が存在するときにパスします。普通のファイルでもそう"
"でなくても（例えばシンボリックリンクやディレクトリなど）かまいません。"

#: xml/cut-assertions.xml:585(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_file_exist(\"/tmp\");             -&gt; Pass on many environment.\n"
"cut_assert_file_exist(\"/non-existent\");    -&gt; Fail\n"
msgstr ""

#: xml/cut-assertions.xml:592(term)
msgid "<parameter>path</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:593(simpara)
msgid "the path to test."
msgstr "テストするパス。"

#: xml/cut-assertions.xml:602(title)
msgid "cut_assert_match()"
msgstr ""

#: xml/cut-assertions.xml:603(programlisting)
#, no-wrap
msgid "#define             cut_assert_match(pattern, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:604(para)
msgid ""
"Passes if <parameter>regex</parameter> matches <parameter>string</parameter>."
msgstr "<parameter>regex</parameter>が<parameter>string</parameter>にマッチしたときパスします。"

#: xml/cut-assertions.xml:609(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_match(\"^abc\", \"abc\");            -&gt; Pass\n"
"cut_assert_match(\"^abc\", \" abc\");           -&gt; Fail\n"
msgstr ""

#: xml/cut-assertions.xml:616(term)
msgid "<parameter>pattern</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:617(simpara)
msgid "the regular expression as string."
msgstr "正規表現。（文字列で指定）"

#: xml/cut-assertions.xml:620(simpara)
msgid "the string to be matched."
msgstr "マッチされる文字列。"

#: xml/cut-assertions.xml:626(para) xml/cut-assertions.xml:646(para)
#: xml/cut-gassertions.xml:143(para)
msgid "Since 1.0"
msgstr "1.0から"

#: xml/cut-assertions.xml:629(title)
msgid "cut_assert_equal_pointer()"
msgstr ""

#: xml/cut-assertions.xml:630(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_pointer(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:637(simpara)
msgid "an expected pointer."
msgstr "期待するポインタ。"

#: xml/cut-assertions.xml:640(simpara)
msgid "an actual pointer."
msgstr "実際のポインタ。"

#: xml/cut-cairo-chart-data.xml:7(refentrytitle)
#: xml/cut-cairo-chart-data.xml:13(refname)
#: xml/cut-cairo-chart-data.xml:22(link) xml/cut-cairo-chart-data.xml:23(link)
#: xml/cut-cairo-chart-data.xml:25(link) xml/cut-cairo-chart-data.xml:26(link)
#: xml/cut-cairo-chart-data.xml:51(title)
#: xml/cut-cairo-chart-data.xml:52(primary)
msgid "CutCairoChartData"
msgstr ""

#: xml/cut-cairo-chart-data.xml:23(link)
#: xml/cut-cairo-chart-data.xml:61(primary)
msgid "cut_cairo_chart_data_new"
msgstr ""

#: xml/cut-cairo-chart-data.xml:24(link) xml/cut-cairo.xml:23(link)
#: xml/cut-contractor.xml:27(link) xml/cut-diff.xml:23(link)
#: xml/cut-diff.xml:24(link) xml/cut-diff.xml:25(link)
#: xml/cut-factory-builder.xml:23(link) xml/cut-factory-builder.xml:24(link)
#: xml/cut-list.xml:29(link) xml/cut-list.xml:34(link)
#: xml/cut-list.xml:37(link) xml/cut-module-factory-utils.xml:24(link)
#: xml/cut-module-factory-utils.xml:27(link)
#: xml/cut-module-factory-utils.xml:28(link)
#: xml/cut-module-factory-utils.xml:29(link)
#: xml/cut-module-factory-utils.xml:30(link)
#: xml/cut-module-factory-utils.xml:32(link)
#: xml/cut-module-factory-utils.xml:33(link)
#: xml/cut-module-factory-utils.xml:34(link)
#: xml/cut-module-factory-utils.xml:35(link)
#: xml/cut-module-factory-utils.xml:36(link)
#: xml/cut-module-factory.xml:23(link) xml/cut-module-factory.xml:24(link)
#: xml/cut-module-factory.xml:25(link) xml/cut-module-factory.xml:27(link)
#: xml/cut-module-factory.xml:28(link) xml/cut-module-factory.xml:29(link)
#: xml/cut-module-factory.xml:34(link) xml/cut-process.xml:28(link)
#: xml/cut-process.xml:29(link) xml/cut-process.xml:33(link)
#: xml/cut-report.xml:23(link) xml/cut-report.xml:24(link)
#: xml/cut-report.xml:26(link) xml/cut-report.xml:27(link)
#: xml/cut-report.xml:28(link) xml/cut-report.xml:29(link)
#: xml/cut-report.xml:30(link) xml/cut-report.xml:31(link)
#: xml/cut-report.xml:32(link) xml/cut-report.xml:33(link)
#: xml/cut-report.xml:34(link) xml/cut-run-context.xml:25(link)
#: xml/cut-run-context.xml:26(link) xml/cut-run-context.xml:29(link)
#: xml/cut-run-context.xml:30(link) xml/cut-run-context.xml:37(link)
#: xml/cut-run-context.xml:38(link) xml/cut-run-context.xml:41(link)
#: xml/cut-run-context.xml:42(link) xml/cut-run-context.xml:46(link)
#: xml/cut-run-context.xml:47(link) xml/cut-run-context.xml:51(link)
#: xml/cut-run-context.xml:52(link) xml/cut-run-context.xml:70(link)
#: xml/cut-run-context.xml:88(link) xml/cut-run-context.xml:90(link)
#: xml/cut-run-context.xml:93(link) xml/cut-run-context.xml:95(link)
#: xml/cut-run-context.xml:99(link) xml/cut-run-context.xml:100(link)
#: xml/cut-sequence-matcher.xml:47(link) xml/cut-sequence-matcher.xml:48(link)
#: xml/cut-sequence-matcher.xml:49(link) xml/cut-sequence-matcher.xml:50(link)
#: xml/cut-sequence-matcher.xml:53(link) xml/cut-sequence-matcher.xml:54(link)
#: xml/cut-sequence-matcher.xml:56(link) xml/cut-sequence-matcher.xml:57(link)
#: xml/cut-stream-parser.xml:26(link) xml/cut-streamer.xml:23(link)
#: xml/cut-streamer.xml:24(link) xml/cut-ui.xml:25(link)
#: xml/cut-ui.xml:26(link) xml/cut-xml-parser.xml:22(link)
msgid "gchar"
msgstr ""

#: xml/cut-cairo-chart-data.xml:24(link)
#: xml/cut-cairo-chart-data.xml:72(primary)
msgid "cut_cairo_chart_data_get_description"
msgstr ""

#: xml/cut-cairo-chart-data.xml:26(link) xml/cut-contractor.xml:26(link)
#: xml/cut-list.xml:25(link) xml/cut-list.xml:32(link)
#: xml/cut-list.xml:35(link) xml/cut-main.xml:25(link)
#: xml/cut-main.xml:27(link) xml/cut-module-factory-utils.xml:33(link)
#: xml/cut-process.xml:30(link) xml/cut-run-context.xml:33(link)
#: xml/cut-run-context.xml:34(link) xml/cut-run-context.xml:35(link)
#: xml/cut-run-context.xml:69(link) xml/cut-run-context.xml:72(link)
#: xml/cut-run-context.xml:91(link) xml/cut-sequence-matcher.xml:24(link)
#: xml/cut-stream-parser.xml:25(link) xml/cut-ui.xml:28(link)
#: xml/cut-value-equal.xml:23(link)
msgid "gboolean"
msgstr ""

#: xml/cut-cairo-chart-data.xml:26(link)
#: xml/cut-cairo-chart-data.xml:87(primary)
msgid "cut_cairo_chart_data_get_rgb"
msgstr ""

#: xml/cut-cairo-chart-data.xml:27(link) xml/cut-cairo-chart-data.xml:28(link)
#: xml/cut-cairo-chart-data.xml:29(link) xml/cut-cairo-pie-chart.xml:23(link)
#: xml/cut-cairo-pie-chart.xml:24(link) xml/cut-cairo-pie-chart.xml:29(link)
#: xml/cut-cairo-pie-chart.xml:30(link) xml/cut-cairo-pie-chart.xml:31(link)
#: xml/cut-cairo-pie-chart.xml:32(link) xml/cut-sequence-matcher.xml:71(link)
msgid "gdouble"
msgstr ""

#: xml/cut-cairo-chart-data.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*  <placeholder-3/>            (void);\n"
"const <placeholder-4/>*        <placeholder-5/>\n"
"                                                        (<placeholder-6/> *data);\n"
"<placeholder-7/>            <placeholder-8/>        (<placeholder-9/> *data,\n"
"                                                         <placeholder-10/> *red,\n"
"                                                         <placeholder-11/> *green,\n"
"                                                         <placeholder-12/> *blue);\n"
msgstr ""

#: xml/cut-cairo-chart-data.xml:52(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutCairoChartData;\n"
msgstr ""

#: xml/cut-cairo-chart-data.xml:60(title)
msgid "cut_cairo_chart_data_new ()"
msgstr ""

#: xml/cut-cairo-chart-data.xml:61(programlisting)
#, no-wrap
msgid "<link linkend=\"CutCairoChartData\">CutCairoChartData</link>*  cut_cairo_chart_data_new            (void);"
msgstr ""

#: xml/cut-cairo-chart-data.xml:65(term) xml/cut-cairo-chart-data.xml:80(term)
#: xml/cut-cairo-chart-data.xml:106(term) xml/cut-cairo-pie-chart.xml:75(term)
#: xml/cut-cairo-pie-chart.xml:129(term) xml/cut-cairo-pie-chart.xml:143(term)
#: xml/cut-cairo.xml:64(term) xml/cut-contractor.xml:65(term)
#: xml/cut-contractor.xml:79(term) xml/cut-contractor.xml:93(term)
#: xml/cut-contractor.xml:111(term) xml/cut-diff.xml:68(term)
#: xml/cut-diff.xml:82(term) xml/cut-experimental.xml:60(term)
#: xml/cut-experimental.xml:86(term) xml/cut-factory-builder.xml:68(term)
#: xml/cut-factory-builder.xml:82(term) xml/cut-factory-builder.xml:113(term)
#: xml/cut-factory-builder.xml:127(term) xml/cut-gpublic.xml:59(term)
#: xml/cut-gpublic.xml:77(term) xml/cut-list.xml:99(term)
#: xml/cut-list.xml:121(term) xml/cut-list.xml:139(term)
#: xml/cut-list.xml:153(term) xml/cut-list.xml:171(term)
#: xml/cut-list.xml:185(term) xml/cut-main.xml:76(term)
#: xml/cut-main.xml:87(term) xml/cut-main.xml:101(term)
#: xml/cut-module-factory-utils.xml:76(term)
#: xml/cut-module-factory-utils.xml:137(term)
#: xml/cut-module-factory-utils.xml:155(term)
#: xml/cut-module-factory-utils.xml:173(term)
#: xml/cut-module-factory.xml:85(term) xml/cut-module-factory.xml:111(term)
#: xml/cut-module-factory.xml:141(term) xml/cut-module-factory.xml:155(term)
#: xml/cut-pipeline.xml:60(term) xml/cut-pipeline.xml:74(term)
#: xml/cut-process.xml:70(term) xml/cut-process.xml:84(term)
#: xml/cut-process.xml:102(term) xml/cut-process.xml:116(term)
#: xml/cut-process.xml:130(term) xml/cut-process.xml:144(term)
#: xml/cut-process.xml:163(term) xml/cut-process.xml:177(term)
#: xml/cut-report.xml:81(term) xml/cut-report.xml:95(term)
#: xml/cut-report.xml:109(term) xml/cut-report.xml:127(term)
#: xml/cut-report.xml:141(term) xml/cut-report.xml:155(term)
#: xml/cut-report.xml:169(term) xml/cut-report.xml:183(term)
#: xml/cut-report.xml:197(term) xml/cut-run-context.xml:167(term)
#: xml/cut-run-context.xml:199(term) xml/cut-run-context.xml:229(term)
#: xml/cut-run-context.xml:243(term) xml/cut-run-context.xml:273(term)
#: xml/cut-run-context.xml:305(term) xml/cut-run-context.xml:337(term)
#: xml/cut-run-context.xml:369(term) xml/cut-run-context.xml:431(term)
#: xml/cut-run-context.xml:445(term) xml/cut-run-context.xml:459(term)
#: xml/cut-run-context.xml:473(term) xml/cut-run-context.xml:487(term)
#: xml/cut-run-context.xml:501(term) xml/cut-run-context.xml:515(term)
#: xml/cut-run-context.xml:529(term) xml/cut-run-context.xml:543(term)
#: xml/cut-run-context.xml:557(term) xml/cut-run-context.xml:571(term)
#: xml/cut-run-context.xml:597(term) xml/cut-run-context.xml:611(term)
#: xml/cut-run-context.xml:625(term) xml/cut-run-context.xml:671(term)
#: xml/cut-run-context.xml:689(term) xml/cut-run-context.xml:764(term)
#: xml/cut-run-context.xml:778(term) xml/cut-run-context.xml:838(term)
#: xml/cut-sequence-matcher.xml:129(term)
#: xml/cut-sequence-matcher.xml:172(term)
#: xml/cut-sequence-matcher.xml:215(term)
#: xml/cut-sequence-matcher.xml:269(term)
#: xml/cut-sequence-matcher.xml:287(term)
#: xml/cut-sequence-matcher.xml:313(term)
#: xml/cut-sequence-matcher.xml:331(term)
#: xml/cut-sequence-matcher.xml:358(term)
#: xml/cut-sequence-matcher.xml:376(term)
#: xml/cut-sequence-matcher.xml:407(term)
#: xml/cut-sequence-matcher.xml:421(term)
#: xml/cut-sequence-matcher.xml:435(term)
#: xml/cut-sequence-matcher.xml:449(term)
#: xml/cut-sequence-matcher.xml:463(term) xml/cut-stream-parser.xml:67(term)
#: xml/cut-stream-parser.xml:78(term) xml/cut-stream-parser.xml:104(term)
#: xml/cut-streamer.xml:72(term) xml/cut-test-runner.xml:59(term)
#: xml/cut-ui.xml:85(term) xml/cut-ui.xml:103(term)
#: xml/cut-value-equal.xml:67(term) xml/cut-xml-parser.xml:57(term)
#: xml/gbsearcharray.xml:78(term) xml/gbsearcharray.xml:191(term)
#: xml/gbsearcharray.xml:205(term)
msgid "<emphasis>Returns</emphasis>&nbsp;:"
msgstr "<emphasis>戻り値</emphasis>&nbsp;:"

#: xml/cut-cairo-chart-data.xml:71(title)
msgid "cut_cairo_chart_data_get_description ()"
msgstr ""

#: xml/cut-cairo-chart-data.xml:72(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link>*        cut_cairo_chart_data_get_description\n"
"                                                        (<link linkend=\"CutCairoChartData\">CutCairoChartData</link> *data);"
msgstr ""

#: xml/cut-cairo-chart-data.xml:77(term) xml/cut-cairo-chart-data.xml:94(term)
#: xml/cut-list.xml:69(term) xml/cut-sequence-matcher.xml:123(term)
msgid "<parameter>data</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-chart-data.xml:86(title)
msgid "cut_cairo_chart_data_get_rgb ()"
msgstr ""

#: xml/cut-cairo-chart-data.xml:87(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_cairo_chart_data_get_rgb        (<link linkend=\"CutCairoChartData\">CutCairoChartData</link> *data,\n"
"                                                         <link linkend=\"gdouble\">gdouble</link> *red,\n"
"                                                         <link linkend=\"gdouble\">gdouble</link> *green,\n"
"                                                         <link linkend=\"gdouble\">gdouble</link> *blue);"
msgstr ""

#: xml/cut-cairo-chart-data.xml:97(term)
msgid "<parameter>red</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-chart-data.xml:100(term)
msgid "<parameter>green</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-chart-data.xml:103(term)
msgid "<parameter>blue</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:7(refentrytitle)
#: xml/cut-cairo-pie-chart.xml:13(refname)
#: xml/cut-cairo-pie-chart.xml:22(link) xml/cut-cairo-pie-chart.xml:23(link)
#: xml/cut-cairo-pie-chart.xml:25(link) xml/cut-cairo-pie-chart.xml:28(link)
#: xml/cut-cairo-pie-chart.xml:31(link) xml/cut-cairo-pie-chart.xml:32(link)
#: xml/cut-cairo-pie-chart.xml:54(title)
#: xml/cut-cairo-pie-chart.xml:55(primary)
msgid "CutCairoPieChart"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:23(link)
#: xml/cut-cairo-pie-chart.xml:64(primary)
msgid "cut_cairo_pie_chart_new"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:25(link) xml/cut-cairo-pie-chart.xml:28(link)
#: xml/cut-cairo.xml:25(link) xml/cut-contractor.xml:28(link)
#: xml/cut-factory-builder.xml:25(link) xml/cut-list.xml:22(link)
#: xml/cut-listener.xml:22(link) xml/cut-listener.xml:24(link)
#: xml/cut-main.xml:22(link) xml/cut-main.xml:24(link)
#: xml/cut-module-factory-utils.xml:22(link)
#: xml/cut-module-factory-utils.xml:23(link)
#: xml/cut-module-factory-utils.xml:26(link)
#: xml/cut-module-factory-utils.xml:28(link)
#: xml/cut-module-factory-utils.xml:30(link)
#: xml/cut-module-factory-utils.xml:31(link)
#: xml/cut-module-factory.xml:31(link) xml/cut-process.xml:34(link)
#: xml/cut-run-context.xml:24(link) xml/cut-run-context.xml:27(link)
#: xml/cut-run-context.xml:32(link) xml/cut-run-context.xml:36(link)
#: xml/cut-run-context.xml:39(link) xml/cut-run-context.xml:44(link)
#: xml/cut-run-context.xml:49(link) xml/cut-run-context.xml:54(link)
#: xml/cut-run-context.xml:56(link) xml/cut-run-context.xml:58(link)
#: xml/cut-run-context.xml:71(link) xml/cut-run-context.xml:75(link)
#: xml/cut-run-context.xml:77(link) xml/cut-run-context.xml:82(link)
#: xml/cut-run-context.xml:84(link) xml/cut-run-context.xml:86(link)
#: xml/cut-run-context.xml:87(link) xml/cut-run-context.xml:92(link)
#: xml/cut-run-context.xml:97(link) xml/cut-sequence-matcher.xml:31(link)
#: xml/cut-sequence-matcher.xml:38(link) xml/cut-ui.xml:23(link)
#: xml/cut-ui.xml:24(link) xml/cut-value-equal.xml:22(link)
#: xml/cut-value-equal.xml:25(link) xml/cutter.xml:22(link)
#: xml/cutter.xml:23(link) xml/cutter.xml:24(link) xml/cutter.xml:25(link)
msgid "void"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:25(link)
#: xml/cut-cairo-pie-chart.xml:82(primary)
msgid "cut_cairo_pie_chart_draw"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:26(link) xml/cut-cairo.xml:22(link)
#: xml/cut-cairo.xml:25(link)
msgid "cairo_t"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:27(link) xml/cut-listener.xml:23(link)
#: xml/cut-listener.xml:26(link) xml/cut-main.xml:26(link)
#: xml/cut-main.xml:27(link) xml/cut-pipeline.xml:23(link)
#: xml/cut-pipeline.xml:24(link) xml/cut-run-context.xml:7(refentrytitle)
#: xml/cut-run-context.xml:13(refname) xml/cut-run-context.xml:23(link)
#: xml/cut-run-context.xml:24(link) xml/cut-run-context.xml:26(link)
#: xml/cut-run-context.xml:28(link) xml/cut-run-context.xml:31(link)
#: xml/cut-run-context.xml:32(link) xml/cut-run-context.xml:34(link)
#: xml/cut-run-context.xml:35(link) xml/cut-run-context.xml:36(link)
#: xml/cut-run-context.xml:38(link) xml/cut-run-context.xml:40(link)
#: xml/cut-run-context.xml:43(link) xml/cut-run-context.xml:45(link)
#: xml/cut-run-context.xml:48(link) xml/cut-run-context.xml:50(link)
#: xml/cut-run-context.xml:53(link) xml/cut-run-context.xml:54(link)
#: xml/cut-run-context.xml:56(link) xml/cut-run-context.xml:58(link)
#: xml/cut-run-context.xml:60(link) xml/cut-run-context.xml:61(link)
#: xml/cut-run-context.xml:62(link) xml/cut-run-context.xml:63(link)
#: xml/cut-run-context.xml:64(link) xml/cut-run-context.xml:65(link)
#: xml/cut-run-context.xml:66(link) xml/cut-run-context.xml:67(link)
#: xml/cut-run-context.xml:68(link) xml/cut-run-context.xml:69(link)
#: xml/cut-run-context.xml:70(link) xml/cut-run-context.xml:71(link)
#: xml/cut-run-context.xml:72(link) xml/cut-run-context.xml:73(link)
#: xml/cut-run-context.xml:74(link) xml/cut-run-context.xml:75(link)
#: xml/cut-run-context.xml:77(link) xml/cut-run-context.xml:79(link)
#: xml/cut-run-context.xml:80(link) xml/cut-run-context.xml:82(link)
#: xml/cut-run-context.xml:84(link) xml/cut-run-context.xml:86(link)
#: xml/cut-run-context.xml:87(link) xml/cut-run-context.xml:89(link)
#: xml/cut-run-context.xml:91(link) xml/cut-run-context.xml:92(link)
#: xml/cut-run-context.xml:98(link) xml/cut-run-context.xml:101(link)
#: xml/cut-run-context.xml:135(primary) xml/cut-stream-parser.xml:23(link)
#: xml/cut-test-runner.xml:23(link) xml/cut-ui.xml:29(link)
msgid "CutRunContext"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:28(link)
#: xml/cut-cairo-pie-chart.xml:102(primary)
msgid "cut_cairo_pie_chart_get_size"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:31(link)
#: xml/cut-cairo-pie-chart.xml:122(primary)
msgid "cut_cairo_pie_chart_get_width"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:32(link)
#: xml/cut-cairo-pie-chart.xml:136(primary)
msgid "cut_cairo_pie_chart_get_height"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*   <placeholder-3/>             (<placeholder-4/> width,\n"
"                                                         <placeholder-5/> height);\n"
"<placeholder-6/>                <placeholder-7/>            (<placeholder-8/> *chart,\n"
"                                                         <placeholder-9/> *cr,\n"
"                                                         <placeholder-10/> *run_context);\n"
"<placeholder-11/>                <placeholder-12/>        (<placeholder-13/> *chart,\n"
"                                                         <placeholder-14/> *width,\n"
"                                                         <placeholder-15/> *height);\n"
"<placeholder-16/>             <placeholder-17/>       (<placeholder-18/> *chart);\n"
"<placeholder-19/>             <placeholder-20/>      (<placeholder-21/> *chart);\n"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:55(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutCairoPieChart;\n"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:63(title)
msgid "cut_cairo_pie_chart_new ()"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:64(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutCairoPieChart\">CutCairoPieChart</link>*   cut_cairo_pie_chart_new             (<link linkend=\"gdouble\">gdouble</link> width,\n"
"                                                         <link linkend=\"gdouble\">gdouble</link> height);"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:69(term) xml/cut-cairo-pie-chart.xml:111(term)
msgid "<parameter>width</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:72(term) xml/cut-cairo-pie-chart.xml:114(term)
msgid "<parameter>height</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:81(title)
msgid "cut_cairo_pie_chart_draw ()"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:82(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_cairo_pie_chart_draw            (<link linkend=\"CutCairoPieChart\">CutCairoPieChart</link> *chart,\n"
"                                                         <link linkend=\"cairo-t\">cairo_t</link> *cr,\n"
"                                                         <link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:88(term) xml/cut-cairo-pie-chart.xml:108(term)
#: xml/cut-cairo-pie-chart.xml:126(term) xml/cut-cairo-pie-chart.xml:140(term)
msgid "<parameter>chart</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:91(term) xml/cut-cairo.xml:55(term)
#: xml/cut-cairo.xml:76(term)
msgid "<parameter>cr</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:94(term) xml/cut-listener.xml:57(term)
#: xml/cut-listener.xml:74(term) xml/cut-main.xml:98(term)
#: xml/cut-pipeline.xml:71(term) xml/cut-stream-parser.xml:64(term)
#: xml/cut-ui.xml:100(term)
msgid "<parameter>run_context</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:101(title)
msgid "cut_cairo_pie_chart_get_size ()"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:102(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_cairo_pie_chart_get_size        (<link linkend=\"CutCairoPieChart\">CutCairoPieChart</link> *chart,\n"
"                                                         <link linkend=\"gdouble\">gdouble</link> *width,\n"
"                                                         <link linkend=\"gdouble\">gdouble</link> *height);"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:121(title)
msgid "cut_cairo_pie_chart_get_width ()"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:122(programlisting)
#, no-wrap
msgid "<link linkend=\"gdouble\">gdouble</link>             cut_cairo_pie_chart_get_width       (<link linkend=\"CutCairoPieChart\">CutCairoPieChart</link> *chart);"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:135(title)
msgid "cut_cairo_pie_chart_get_height ()"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:136(programlisting)
#, no-wrap
msgid "<link linkend=\"gdouble\">gdouble</link>             cut_cairo_pie_chart_get_height      (<link linkend=\"CutCairoPieChart\">CutCairoPieChart</link> *chart);"
msgstr ""

#: xml/cut-cairo.xml:7(refentrytitle) xml/cut-cairo.xml:13(refname)
msgid "cut-cairo"
msgstr ""

#: xml/cut-cairo.xml:22(link)
msgid "PangoLayout"
msgstr ""

#: xml/cut-cairo.xml:22(link) xml/cut-cairo.xml:49(primary)
msgid "cut_cairo_create_pango_layout"
msgstr ""

#: xml/cut-cairo.xml:24(link) xml/cut-sequence-matcher.xml:28(link)
#: xml/cut-sequence-matcher.xml:29(link) xml/cut-sequence-matcher.xml:30(link)
#: xml/cut-sequence-matcher.xml:34(link) xml/cut-sequence-matcher.xml:35(link)
#: xml/cut-sequence-matcher.xml:36(link) xml/cut-sequence-matcher.xml:37(link)
#: xml/cut-sequence-matcher.xml:64(link) xml/cut-sequence-matcher.xml:65(link)
#: xml/cut-sequence-matcher.xml:66(link) xml/cut-sequence-matcher.xml:67(link)
#: xml/gbsearcharray.xml:23(link)
msgid "gint"
msgstr ""

#: xml/cut-cairo.xml:25(link) xml/cut-cairo.xml:71(primary)
msgid "cut_cairo_set_source_result_color"
msgstr ""

#: xml/cut-cairo.xml:26(link)
msgid "CutTestResultStatus"
msgstr ""

#: xml/cut-cairo.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>*        <placeholder-2/>       (<placeholder-3/> *cr,\n"
"                                                         const <placeholder-4/> *utf8,\n"
"                                                         <placeholder-5/> font_size);\n"
"<placeholder-6/>                <placeholder-7/>   (<placeholder-8/> *cr,\n"
"                                                         <placeholder-9/> status);\n"
msgstr ""

#: xml/cut-cairo.xml:48(title)
msgid "cut_cairo_create_pango_layout ()"
msgstr ""

#: xml/cut-cairo.xml:49(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"PangoLayout\">PangoLayout</link>*        cut_cairo_create_pango_layout       (<link linkend=\"cairo-t\">cairo_t</link> *cr,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *utf8,\n"
"                                                         <link linkend=\"gint\">gint</link> font_size);"
msgstr ""

#: xml/cut-cairo.xml:58(term)
msgid "<parameter>utf8</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo.xml:61(term)
msgid "<parameter>font_size</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo.xml:70(title)
msgid "cut_cairo_set_source_result_color ()"
msgstr ""

#: xml/cut-cairo.xml:71(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_cairo_set_source_result_color   (<link linkend=\"cairo-t\">cairo_t</link> *cr,\n"
"                                                         <link linkend=\"CutTestResultStatus\">CutTestResultStatus</link> status);"
msgstr ""

#: xml/cut-cairo.xml:79(term)
msgid "<parameter>status</parameter>&nbsp;:"
msgstr ""

#: xml/cut-contractor.xml:7(refentrytitle) xml/cut-contractor.xml:13(refname)
#: xml/cut-contractor.xml:22(link) xml/cut-contractor.xml:23(link)
#: xml/cut-contractor.xml:24(link) xml/cut-contractor.xml:25(link)
#: xml/cut-contractor.xml:26(link) xml/cut-contractor.xml:28(link)
#: xml/cut-contractor.xml:51(title) xml/cut-contractor.xml:52(primary)
msgid "CutContractor"
msgstr ""

#: xml/cut-contractor.xml:23(link) xml/cut-contractor.xml:61(primary)
msgid "cut_contractor_new"
msgstr ""

#: xml/cut-contractor.xml:24(link) xml/cut-contractor.xml:25(link)
#: xml/cut-factory-builder.xml:28(link) xml/cut-factory-builder.xml:29(link)
#: xml/cut-list.xml:25(link) xml/cut-list.xml:26(link)
#: xml/cut-list.xml:29(link) xml/cut-list.xml:32(link)
#: xml/cut-list.xml:33(link) xml/cut-list.xml:34(link)
#: xml/cut-list.xml:35(link) xml/cut-list.xml:36(link)
#: xml/cut-list.xml:37(link) xml/cut-module-factory-utils.xml:32(link)
#: xml/cut-run-context.xml:68(link) xml/cut-run-context.xml:80(link)
#: xml/cut-run-context.xml:81(link) xml/cut-sequence-matcher.xml:60(link)
#: xml/cut-sequence-matcher.xml:68(link) xml/cut-sequence-matcher.xml:69(link)
#: xml/cut-sequence-matcher.xml:70(link)
msgid "GList"
msgstr ""

#: xml/cut-contractor.xml:24(link) xml/cut-contractor.xml:72(primary)
msgid "cut_contractor_build_factories"
msgstr ""

#: xml/cut-contractor.xml:25(link) xml/cut-contractor.xml:86(primary)
msgid "cut_contractor_build_all_factories"
msgstr ""

#: xml/cut-contractor.xml:26(link) xml/cut-contractor.xml:100(primary)
msgid "cut_contractor_has_builder"
msgstr ""

#: xml/cut-contractor.xml:28(link) xml/cut-contractor.xml:118(primary)
msgid "cut_contractor_set_option_context"
msgstr ""

#: xml/cut-contractor.xml:29(link) xml/cut-factory-builder.xml:27(link)
#: xml/cut-module-factory.xml:32(link)
msgid "GOptionContext"
msgstr ""

#: xml/cut-contractor.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*      <placeholder-3/>                  (void);\n"
"<placeholder-4/>*              <placeholder-5/>      (<placeholder-6/> *contractor);\n"
"<placeholder-7/>*              <placeholder-8/>  (<placeholder-9/> *contractor);\n"
"<placeholder-10/>            <placeholder-11/>          (<placeholder-12/> *contractor,\n"
"                                                         const <placeholder-13/> *type_name);\n"
"<placeholder-14/>                <placeholder-15/>   (<placeholder-16/> *contractor,\n"
"                                                         <placeholder-17/> *context);\n"
msgstr ""

#: xml/cut-contractor.xml:52(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutContractor;\n"
msgstr ""

#: xml/cut-contractor.xml:60(title)
msgid "cut_contractor_new ()"
msgstr ""

#: xml/cut-contractor.xml:61(programlisting)
#, no-wrap
msgid "<link linkend=\"CutContractor\">CutContractor</link>*      cut_contractor_new                  (void);"
msgstr ""

#: xml/cut-contractor.xml:71(title)
msgid "cut_contractor_build_factories ()"
msgstr ""

#: xml/cut-contractor.xml:72(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_contractor_build_factories      (<link linkend=\"CutContractor\">CutContractor</link> *contractor);"
msgstr ""

#: xml/cut-contractor.xml:76(term) xml/cut-contractor.xml:90(term)
#: xml/cut-contractor.xml:105(term) xml/cut-contractor.xml:123(term)
msgid "<parameter>contractor</parameter>&nbsp;:"
msgstr ""

#: xml/cut-contractor.xml:85(title)
msgid "cut_contractor_build_all_factories ()"
msgstr ""

#: xml/cut-contractor.xml:86(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_contractor_build_all_factories  (<link linkend=\"CutContractor\">CutContractor</link> *contractor);"
msgstr ""

#: xml/cut-contractor.xml:99(title)
msgid "cut_contractor_has_builder ()"
msgstr ""

#: xml/cut-contractor.xml:100(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_contractor_has_builder          (<link linkend=\"CutContractor\">CutContractor</link> *contractor,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *type_name);"
msgstr ""

#: xml/cut-contractor.xml:108(term)
msgid "<parameter>type_name</parameter>&nbsp;:"
msgstr ""

#: xml/cut-contractor.xml:117(title)
msgid "cut_contractor_set_option_context ()"
msgstr ""

#: xml/cut-contractor.xml:118(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_contractor_set_option_context   (<link linkend=\"CutContractor\">CutContractor</link> *contractor,\n"
"                                                         <link linkend=\"GOptionContext\">GOptionContext</link> *context);"
msgstr ""

#: xml/cut-contractor.xml:126(term) xml/cut-factory-builder.xml:98(term)
#: xml/cut-gpublic.xml:53(term) xml/cut-gpublic.xml:71(term)
#: xml/cut-module-factory.xml:126(term) xml/cut-run-context.xml:149(term)
#: xml/cut-run-context.xml:164(term) xml/cut-run-context.xml:180(term)
#: xml/cut-run-context.xml:196(term) xml/cut-run-context.xml:211(term)
#: xml/cut-run-context.xml:226(term) xml/cut-run-context.xml:240(term)
#: xml/cut-run-context.xml:255(term) xml/cut-run-context.xml:270(term)
#: xml/cut-run-context.xml:286(term) xml/cut-run-context.xml:302(term)
#: xml/cut-run-context.xml:318(term) xml/cut-run-context.xml:334(term)
#: xml/cut-run-context.xml:350(term) xml/cut-run-context.xml:366(term)
#: xml/cut-run-context.xml:381(term) xml/cut-run-context.xml:397(term)
#: xml/cut-run-context.xml:413(term) xml/cut-run-context.xml:428(term)
#: xml/cut-run-context.xml:442(term) xml/cut-run-context.xml:456(term)
#: xml/cut-run-context.xml:470(term) xml/cut-run-context.xml:484(term)
#: xml/cut-run-context.xml:498(term) xml/cut-run-context.xml:512(term)
#: xml/cut-run-context.xml:526(term) xml/cut-run-context.xml:540(term)
#: xml/cut-run-context.xml:554(term) xml/cut-run-context.xml:568(term)
#: xml/cut-run-context.xml:582(term) xml/cut-run-context.xml:594(term)
#: xml/cut-run-context.xml:608(term) xml/cut-run-context.xml:622(term)
#: xml/cut-run-context.xml:637(term) xml/cut-run-context.xml:653(term)
#: xml/cut-run-context.xml:668(term) xml/cut-run-context.xml:683(term)
#: xml/cut-run-context.xml:701(term) xml/cut-run-context.xml:717(term)
#: xml/cut-run-context.xml:732(term) xml/cut-run-context.xml:744(term)
#: xml/cut-run-context.xml:758(term) xml/cut-run-context.xml:775(term)
#: xml/cut-run-context.xml:793(term) xml/cut-run-context.xml:819(term)
#: xml/cut-run-context.xml:835(term)
msgid "<parameter>context</parameter>&nbsp;:"
msgstr ""

#: xml/cut-diff.xml:7(refentrytitle) xml/cut-diff.xml:13(refname)
#: xml/cut-diff.xml:22(link) xml/cut-diff.xml:23(link)
#: xml/cut-diff.xml:25(link) xml/cut-diff.xml:47(title)
#: xml/cut-diff.xml:48(primary)
msgid "CutDiffer"
msgstr ""

#: xml/cut-diff.xml:23(link) xml/cut-diff.xml:57(primary)
msgid "cut_differ_readable_new"
msgstr ""

#: xml/cut-diff.xml:25(link) xml/cut-diff.xml:75(primary)
msgid "cut_differ_diff"
msgstr ""

#: xml/cut-diff.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*          <placeholder-3/>             (const <placeholder-4/> *from,\n"
"                                                         const <placeholder-5/> *to);\n"
"<placeholder-6/>*              <placeholder-7/>                     (<placeholder-8/> *differ);\n"
msgstr ""

#: xml/cut-diff.xml:48(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutDiffer;\n"
msgstr ""

#: xml/cut-diff.xml:56(title)
msgid "cut_differ_readable_new ()"
msgstr ""

#: xml/cut-diff.xml:57(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutDiffer\">CutDiffer</link>*          cut_differ_readable_new             (const <link linkend=\"gchar\">gchar</link> *from,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *to);"
msgstr ""

#: xml/cut-diff.xml:62(term) xml/cut-sequence-matcher.xml:245(term)
#: xml/cut-sequence-matcher.xml:281(term)
#: xml/cut-sequence-matcher.xml:301(term)
#: xml/cut-sequence-matcher.xml:325(term)
#: xml/cut-sequence-matcher.xml:346(term)
msgid "<parameter>from</parameter>&nbsp;:"
msgstr ""

#: xml/cut-diff.xml:65(term) xml/cut-sequence-matcher.xml:248(term)
#: xml/cut-sequence-matcher.xml:284(term)
#: xml/cut-sequence-matcher.xml:304(term)
#: xml/cut-sequence-matcher.xml:328(term)
#: xml/cut-sequence-matcher.xml:349(term)
msgid "<parameter>to</parameter>&nbsp;:"
msgstr ""

#: xml/cut-diff.xml:74(title)
msgid "cut_differ_diff ()"
msgstr ""

#: xml/cut-diff.xml:75(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_differ_diff                     (<link linkend=\"CutDiffer\">CutDiffer</link> *differ);"
msgstr ""

#: xml/cut-diff.xml:79(term)
msgid "<parameter>differ</parameter>&nbsp;:"
msgstr ""

#: xml/cut-experimental.xml:7(refentrytitle)
#: xml/cut-experimental.xml:13(refname)
msgid "Experimental"
msgstr "実験"

#: xml/cut-experimental.xml:14(refpurpose)
msgid "Experimental API."
msgstr "実験的なAPI"

#: xml/cut-experimental.xml:22(link) xml/cut-experimental.xml:50(title)
#: xml/cut-experimental.xml:51(primary)
msgid "cut_user_data"
msgstr ""

#: xml/cut-experimental.xml:23(link) xml/cut-experimental.xml:65(primary)
msgid "cut_fork"
msgstr ""

#: xml/cut-experimental.xml:24(link) xml/cut-experimental.xml:93(primary)
msgid "cut_wait_process"
msgstr ""

#: xml/cut-experimental.xml:25(link) xml/cut-experimental.xml:125(primary)
msgid "cut_fork_get_stdout_message"
msgstr ""

#: xml/cut-experimental.xml:26(link) xml/cut-experimental.xml:154(primary)
msgid "cut_fork_get_stderr_message"
msgstr ""

#: xml/cut-experimental.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
"#define             <placeholder-2/>                            ()\n"
"#define             <placeholder-3/>                    (pid, usec_timeout)\n"
"#define             <placeholder-4/>         (pid)\n"
"#define             <placeholder-5/>         (pid)\n"
msgstr ""

#: xml/cut-experimental.xml:40(para)
msgid "This API may be changed in the future."
msgstr "将来、このAPIは変更されるかもしれません。"

#: xml/cut-experimental.xml:51(programlisting)
#, no-wrap
msgid "#define             cut_user_data"
msgstr ""

#: xml/cut-experimental.xml:52(para)
msgid ""
"This is useful only if you make a custom test runner like cutter command. "
"You can pass a data from your custom test runner to test programs. They will "
"receive your data through this."
msgstr ""
"cutterコマンドのようなテスト起動コマンドを独自に作ったときにだけ役にたちま"
"す。独自のテスト起動コマンドからテストプログラムにデータを渡すことができま"
"す。テストプログラムはこのマクロを使ってデータを受け取ることができます。"

#: xml/cut-experimental.xml:60(simpara)
msgid "a data from a program who invokes your test."
msgstr "テストを実行したプログラムからのデータ。"

#: xml/cut-experimental.xml:64(title)
msgid "cut_fork()"
msgstr ""

#: xml/cut-experimental.xml:65(programlisting)
#, no-wrap
msgid "#define             cut_fork()"
msgstr ""

#: xml/cut-experimental.xml:66(para)
msgid "Makes child process."
msgstr "子プロセスを生成します。"

#: xml/cut-experimental.xml:71(programlisting)
#, no-wrap
msgid ""
"\n"
"int pid;\n"
"pid = cut_fork();\n"
"cut_assert_errno();\n"
"\n"
"if (pid == 0) {\n"
"  do_something_for_child_process();\n"
"  _exit(EXIT_SUCCESS);\n"
"}\n"
"\n"
"do_something_for_parent_process();\n"
msgstr ""

#: xml/cut-experimental.xml:86(simpara) xml/cut-experimental.xml:148(simpara)
#: xml/cut-experimental.xml:177(simpara)
msgid "Process ID."
msgstr "プロセスID。"

#: xml/cut-experimental.xml:92(title)
msgid "cut_wait_process()"
msgstr ""

#: xml/cut-experimental.xml:93(programlisting)
#, no-wrap
msgid "#define             cut_wait_process(pid, usec_timeout)"
msgstr ""

#: xml/cut-experimental.xml:94(para)
msgid "Waits a process specified by <parameter>pid</parameter>."
msgstr "<parameter>pid</parameter>で指定されたプロセスの終了を待ちます。"

#: xml/cut-experimental.xml:99(programlisting)
#, no-wrap
msgid ""
"\n"
"int pid;\n"
"pid = cut_fork();\n"
"cut_assert_errno();\n"
"\n"
"if (pid == 0) {\n"
"  do_something_for_child_process();\n"
"  _exit(EXIT_SUCCESS);\n"
"}\n"
"\n"
"do_something_for_parent_process();\n"
"cut_assert_equal_int(EXIT_SUCCESS, cut_wait_process(pid, 100));\n"
msgstr ""

#: xml/cut-experimental.xml:115(term) xml/cut-experimental.xml:147(term)
#: xml/cut-experimental.xml:176(term)
msgid "<parameter>pid</parameter>&nbsp;:"
msgstr ""

#: xml/cut-experimental.xml:116(simpara)
msgid "Process ID to wait."
msgstr "終了を待つプロセスのID。"

#: xml/cut-experimental.xml:118(term) xml/cut-process.xml:99(term)
msgid "<parameter>usec_timeout</parameter>&nbsp;:"
msgstr ""

#: xml/cut-experimental.xml:119(simpara)
msgid "Timeout in usec."
msgstr "タイムアウトする時間。100万分の1秒単位で指定。"

#: xml/cut-experimental.xml:124(title)
msgid "cut_fork_get_stdout_message()"
msgstr ""

#: xml/cut-experimental.xml:125(programlisting)
#, no-wrap
msgid "#define             cut_fork_get_stdout_message(pid)"
msgstr ""

#: xml/cut-experimental.xml:126(para) xml/cut-experimental.xml:155(para)
msgid "Reads a message from a process specified by <parameter>pid</parameter>."
msgstr ""
"<parameter>pid</parameter>で指定されたプロセスからメッセージを読みます。"

#: xml/cut-experimental.xml:131(programlisting)
#, no-wrap
msgid ""
"\n"
"int pid;\n"
"pid = cut_fork();\n"
"cut_assert_errno();\n"
"\n"
"if (pid == 0) {\n"
"  g_print(\"I'm a child.\");\n"
"  _exit(EXIT_SUCCESS);\n"
"}\n"
"\n"
"cut_assert_equal_string(\"I'm a child.\", cut_fork_get_stdout_message(pid));\n"
"cut_assert_equal_int(EXIT_SUCCESS, cut_wait_process(pid, 100));\n"
msgstr ""

#: xml/cut-experimental.xml:153(title)
msgid "cut_fork_get_stderr_message()"
msgstr ""

#: xml/cut-experimental.xml:154(programlisting)
#, no-wrap
msgid "#define             cut_fork_get_stderr_message(pid)"
msgstr ""

#: xml/cut-experimental.xml:160(programlisting)
#, no-wrap
msgid ""
"\n"
"int pid;\n"
"pid = cut_fork();\n"
"cut_assert_errno();\n"
"\n"
"if (pid == 0) {\n"
"  g_print(\"I'm a child.\");\n"
"  _exit(EXIT_SUCCESS);\n"
"}\n"
"\n"
"cut_assert_equal_string(\"I'm a child.\", cut_fork_get_stderr_message(pid));\n"
"cut_assert_equal_int(EXIT_SUCCESS, cut_wait_process(pid, 100));\n"
msgstr ""

#: xml/cut-factory-builder.xml:7(refentrytitle)
#: xml/cut-factory-builder.xml:13(refname)
#: xml/cut-factory-builder.xml:22(link) xml/cut-factory-builder.xml:23(link)
#: xml/cut-factory-builder.xml:24(link) xml/cut-factory-builder.xml:26(link)
#: xml/cut-factory-builder.xml:28(link) xml/cut-factory-builder.xml:29(link)
#: xml/cut-factory-builder.xml:51(title)
#: xml/cut-factory-builder.xml:52(primary)
msgid "CutFactoryBuilder"
msgstr ""

#: xml/cut-factory-builder.xml:23(link)
#: xml/cut-factory-builder.xml:61(primary)
msgid "cut_factory_builder_get_type_name"
msgstr ""

#: xml/cut-factory-builder.xml:24(link)
#: xml/cut-factory-builder.xml:75(primary)
msgid "cut_factory_builder_get_module_dir"
msgstr ""

#: xml/cut-factory-builder.xml:25(link)
#: xml/cut-factory-builder.xml:89(primary)
msgid "cut_factory_builder_set_option_context"
msgstr ""

#: xml/cut-factory-builder.xml:28(link)
#: xml/cut-factory-builder.xml:106(primary)
msgid "cut_factory_builder_build"
msgstr ""

#: xml/cut-factory-builder.xml:29(link)
#: xml/cut-factory-builder.xml:120(primary)
msgid "cut_factory_builder_build_all"
msgstr ""

#: xml/cut-factory-builder.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"const <placeholder-2/>*        <placeholder-3/>   (<placeholder-4/> *builder);\n"
"const <placeholder-5/>*        <placeholder-6/>  (<placeholder-7/> *builder);\n"
"<placeholder-8/>                <placeholder-9/>\n"
"                                                        (<placeholder-10/> *builder,\n"
"                                                         <placeholder-11/> *context);\n"
"<placeholder-12/>*              <placeholder-13/>           (<placeholder-14/> *builder);\n"
"<placeholder-15/>*              <placeholder-16/>       (<placeholder-17/> *builder);\n"
msgstr ""

#: xml/cut-factory-builder.xml:52(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutFactoryBuilder;\n"
msgstr ""

#: xml/cut-factory-builder.xml:60(title)
msgid "cut_factory_builder_get_type_name ()"
msgstr ""

#: xml/cut-factory-builder.xml:61(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_factory_builder_get_type_name   (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder);"
msgstr ""

#: xml/cut-factory-builder.xml:65(term) xml/cut-factory-builder.xml:79(term)
#: xml/cut-factory-builder.xml:95(term) xml/cut-factory-builder.xml:110(term)
#: xml/cut-factory-builder.xml:124(term)
msgid "<parameter>builder</parameter>&nbsp;:"
msgstr ""

#: xml/cut-factory-builder.xml:74(title)
msgid "cut_factory_builder_get_module_dir ()"
msgstr ""

#: xml/cut-factory-builder.xml:75(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_factory_builder_get_module_dir  (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder);"
msgstr ""

#: xml/cut-factory-builder.xml:88(title)
msgid "cut_factory_builder_set_option_context ()"
msgstr ""

#: xml/cut-factory-builder.xml:89(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_factory_builder_set_option_context\n"
"                                                        (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder,\n"
"                                                         <link linkend=\"GOptionContext\">GOptionContext</link> *context);"
msgstr ""

#: xml/cut-factory-builder.xml:105(title)
msgid "cut_factory_builder_build ()"
msgstr ""

#: xml/cut-factory-builder.xml:106(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_factory_builder_build           (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder);"
msgstr ""

#: xml/cut-factory-builder.xml:119(title)
msgid "cut_factory_builder_build_all ()"
msgstr ""

#: xml/cut-factory-builder.xml:120(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_factory_builder_build_all       (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder);"
msgstr ""

#: xml/cut-gassertions-helper.xml:7(refentrytitle)
#: xml/cut-gassertions-helper.xml:13(refname)
msgid "cut-gassertions-helper"
msgstr ""

#: xml/cut-gassertions-helper.xml:22(link)
#: xml/cut-gassertions-helper.xml:46(primary)
msgid "cut_take_g_object"
msgstr ""

#: xml/cut-gassertions-helper.xml:23(link)
#: xml/cut-gassertions-helper.xml:58(primary)
msgid "cut_take_g_error"
msgstr ""

#: xml/cut-gassertions-helper.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>                   (object)\n"
"#define             <placeholder-2/>                    (error)\n"
msgstr ""

#: xml/cut-gassertions-helper.xml:45(title)
msgid "cut_take_g_object()"
msgstr ""

#: xml/cut-gassertions-helper.xml:46(programlisting)
#, no-wrap
msgid "#define             cut_take_g_object(object)"
msgstr ""

#: xml/cut-gassertions-helper.xml:50(term) xml/cut-gpublic.xml:56(term)
msgid "<parameter>object</parameter>&nbsp;:"
msgstr ""

#: xml/cut-gassertions-helper.xml:57(title)
msgid "cut_take_g_error()"
msgstr ""

#: xml/cut-gassertions-helper.xml:58(programlisting)
#, no-wrap
msgid "#define             cut_take_g_error(error)"
msgstr ""

#: xml/cut-gassertions.xml:7(refentrytitle)
#: xml/cut-gassertions.xml:13(refname)
msgid "Assertions with GLib support"
msgstr "GLibサポート付きの検証"

#: xml/cut-gassertions.xml:14(refpurpose)
msgid "Checks that your program works as you expect with GLib support."
msgstr ""
"GLibサポート付きであなたのプログラムが期待通りに動作しているかを検証します。"

#: xml/cut-gassertions.xml:23(link) xml/cut-gassertions.xml:52(primary)
msgid "cut_assert_equal_g_type"
msgstr ""

#: xml/cut-gassertions.xml:24(link) xml/cut-gassertions.xml:71(primary)
msgid "cut_assert_equal_g_value"
msgstr ""

#: xml/cut-gassertions.xml:25(link) xml/cut-gassertions.xml:90(primary)
msgid "cut_assert_equal_g_list_int"
msgstr ""

#: xml/cut-gassertions.xml:26(link) xml/cut-gassertions.xml:110(primary)
msgid "cut_assert_equal_g_list_string"
msgstr ""

#: xml/cut-gassertions.xml:27(link) xml/cut-gassertions.xml:130(primary)
msgid "cut_assert_g_error"
msgstr ""

#: xml/cut-gassertions.xml:22(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>             (expected, actual, ...)\n"
"#define             <placeholder-2/>            (expected, actual, ...)\n"
"#define             <placeholder-3/>         (expected, actual, ...)\n"
"#define             <placeholder-4/>      (expected, actual, ...)\n"
"#define             <placeholder-5/>                  (g_error, ...)\n"
msgstr ""

#: xml/cut-gassertions.xml:51(title)
msgid "cut_assert_equal_g_type()"
msgstr ""

#: xml/cut-gassertions.xml:52(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_g_type(expected, actual, ...)"
msgstr ""

#: xml/cut-gassertions.xml:59(simpara)
msgid "an expected GType."
msgstr "期待するGType。"

#: xml/cut-gassertions.xml:62(simpara)
msgid "an actual GType."
msgstr "実際のGType。"

#: xml/cut-gassertions.xml:70(title)
msgid "cut_assert_equal_g_value()"
msgstr ""

#: xml/cut-gassertions.xml:71(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_g_value(expected, actual, ...)"
msgstr ""

#: xml/cut-gassertions.xml:78(simpara)
msgid "an expected GValue *."
msgstr "期待するGValue *。"

#: xml/cut-gassertions.xml:81(simpara)
msgid "an actual GValue *."
msgstr "実際のGValue *。"

#: xml/cut-gassertions.xml:89(title)
msgid "cut_assert_equal_g_list_int()"
msgstr ""

#: xml/cut-gassertions.xml:90(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_g_list_int(expected, actual, ...)"
msgstr ""

#: xml/cut-gassertions.xml:97(simpara)
msgid "an expected GList * of integer."
msgstr "期待する整数のリスト（GList *）。"

#: xml/cut-gassertions.xml:100(simpara)
msgid "an actual GList * of integer."
msgstr "実際の整数のリスト（GList *）。"

#: xml/cut-gassertions.xml:109(title)
msgid "cut_assert_equal_g_list_string()"
msgstr ""

#: xml/cut-gassertions.xml:110(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_g_list_string(expected, actual, ...)"
msgstr ""

#: xml/cut-gassertions.xml:117(simpara)
msgid "an expected GList * of string."
msgstr "期待する文字列のリスト（GList *）。"

#: xml/cut-gassertions.xml:120(simpara)
msgid "an actual GList * of string."
msgstr "実際の文字列のリスト（GList *）。"

#: xml/cut-gassertions.xml:129(title)
msgid "cut_assert_g_error()"
msgstr ""

#: xml/cut-gassertions.xml:130(programlisting)
#, no-wrap
msgid "#define             cut_assert_g_error(g_error, ...)"
msgstr ""

#: xml/cut-gassertions.xml:131(para)
msgid "Passes if <parameter>error</parameter> == NULL."
msgstr "<parameter>error</parameter>がNULLのときにパスします。"

#: xml/cut-gassertions.xml:136(term)
msgid "<parameter>g_error</parameter>&nbsp;:"
msgstr ""

#: xml/cut-gpublic.xml:7(refentrytitle) xml/cut-gpublic.xml:13(refname)
msgid "cut-gpublic"
msgstr ""

#: xml/cut-gpublic.xml:22(link) xml/cut-gpublic.xml:23(link)
#: xml/cut-module-factory.xml:33(link) xml/cut-ui.xml:25(link)
msgid "GObject"
msgstr ""

#: xml/cut-gpublic.xml:22(link) xml/cut-gpublic.xml:48(primary)
msgid "cut_test_context_take_g_object"
msgstr ""

#: xml/cut-gpublic.xml:22(link) xml/cut-gpublic.xml:24(link)
msgid "CutTestContext"
msgstr ""

#: xml/cut-gpublic.xml:24(link) xml/cut-gpublic.xml:25(link)
#: xml/cut-run-context.xml:94(link) xml/cut-stream-parser.xml:28(link)
msgid "GError"
msgstr ""

#: xml/cut-gpublic.xml:24(link) xml/cut-gpublic.xml:66(primary)
msgid "cut_test_context_take_g_error"
msgstr ""

#: xml/cut-gpublic.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>*            <placeholder-2/>      (<placeholder-3/> *context,\n"
"                                                         <placeholder-4/> *object);\n"
"const <placeholder-5/>*       <placeholder-6/>       (<placeholder-7/> *context,\n"
"                                                         <placeholder-8/> *error);\n"
msgstr ""

#: xml/cut-gpublic.xml:47(title)
msgid "cut_test_context_take_g_object ()"
msgstr ""

#: xml/cut-gpublic.xml:48(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GObject\">GObject</link>*            cut_test_context_take_g_object      (<link linkend=\"CutTestContext\">CutTestContext</link> *context,\n"
"                                                         <link linkend=\"GObject\">GObject</link> *object);"
msgstr ""

#: xml/cut-gpublic.xml:65(title)
msgid "cut_test_context_take_g_error ()"
msgstr ""

#: xml/cut-gpublic.xml:66(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"GError\">GError</link>*       cut_test_context_take_g_error       (<link linkend=\"CutTestContext\">CutTestContext</link> *context,\n"
"                                                         <link linkend=\"GError\">GError</link> *error);"
msgstr ""

#: xml/cut-list.xml:7(refentrytitle) xml/cut-list.xml:13(refname)
msgid "cut-list"
msgstr ""

#: xml/cut-list.xml:22(link)
msgid "*CutInspectFunc"
msgstr ""

#: xml/cut-list.xml:22(link)
msgid "GString"
msgstr ""

#: xml/cut-list.xml:23(link) xml/gbsearcharray.xml:23(link)
msgid "gconstpointer"
msgstr ""

#: xml/cut-list.xml:24(link) xml/cut-list.xml:28(link)
#: xml/cut-list.xml:31(link) xml/cut-sequence-matcher.xml:24(link)
#: xml/cut-sequence-matcher.xml:25(link) xml/cut-sequence-matcher.xml:42(link)
#: xml/cut-sequence-matcher.xml:46(link) xml/cut-sequence-matcher.xml:52(link)
#: xml/cut-sequence-matcher.xml:59(link) xml/cut-sequence-matcher.xml:61(link)
msgid "gpointer"
msgstr ""

#: xml/cut-list.xml:25(link) xml/cut-list.xml:80(primary)
msgid "cut_list_equal"
msgstr ""

#: xml/cut-list.xml:27(link)
msgid "GCompareDataFunc"
msgstr ""

#: xml/cut-list.xml:29(link) xml/cut-list.xml:106(primary)
msgid "cut_list_inspect"
msgstr ""

#: xml/cut-list.xml:30(link) xml/cut-list.xml:60(primary)
msgid "CutInspectFunc"
msgstr ""

#: xml/cut-list.xml:32(link) xml/cut-list.xml:128(primary)
msgid "cut_list_equal_int"
msgstr ""

#: xml/cut-list.xml:34(link) xml/cut-list.xml:146(primary)
msgid "cut_list_inspect_int"
msgstr ""

#: xml/cut-list.xml:35(link) xml/cut-list.xml:160(primary)
msgid "cut_list_equal_string"
msgstr ""

#: xml/cut-list.xml:37(link) xml/cut-list.xml:178(primary)
msgid "cut_list_inspect_string"
msgstr ""

#: xml/cut-list.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                (<placeholder-2/>)                   (<placeholder-3/> *string,\n"
"                                                         <placeholder-4/> data,\n"
"                                                         <placeholder-5/> user_data);\n"
"<placeholder-6/>            <placeholder-7/>                      (const <placeholder-8/> *list1,\n"
"                                                         const <placeholder-9/> *list2,\n"
"                                                         <placeholder-10/> compare_func,\n"
"                                                         <placeholder-11/> user_data);\n"
"<placeholder-12/>*              <placeholder-13/>                    (const <placeholder-14/> *list,\n"
"                                                         <placeholder-15/> inspect_func,\n"
"                                                         <placeholder-16/> user_data);\n"
"<placeholder-17/>            <placeholder-18/>                  (const <placeholder-19/> *list1,\n"
"                                                         const <placeholder-20/> *list2);\n"
"<placeholder-21/>*              <placeholder-22/>                (const <placeholder-23/> *list);\n"
"<placeholder-24/>            <placeholder-25/>               (const <placeholder-26/> *list1,\n"
"                                                         const <placeholder-27/> *list2);\n"
"<placeholder-28/>*              <placeholder-29/>             (const <placeholder-30/> *list);\n"
msgstr ""

#: xml/cut-list.xml:59(title)
msgid "CutInspectFunc ()"
msgstr ""

#: xml/cut-list.xml:60(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                (*CutInspectFunc)                   (<link linkend=\"GString\">GString</link> *string,\n"
"                                                         <link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/cut-list.xml:66(term)
msgid "<parameter>string</parameter>&nbsp;:"
msgstr ""

#: xml/cut-list.xml:72(term) xml/cut-list.xml:96(term)
#: xml/cut-list.xml:118(term) xml/cut-sequence-matcher.xml:126(term)
#: xml/cut-sequence-matcher.xml:266(term)
msgid "<parameter>user_data</parameter>&nbsp;:"
msgstr ""

#: xml/cut-list.xml:79(title)
msgid "cut_list_equal ()"
msgstr ""

#: xml/cut-list.xml:80(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_list_equal                      (const <link linkend=\"GList\">GList</link> *list1,\n"
"                                                         const <link linkend=\"GList\">GList</link> *list2,\n"
"                                                         <link linkend=\"GCompareDataFunc\">GCompareDataFunc</link> compare_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/cut-list.xml:87(term) xml/cut-list.xml:133(term)
#: xml/cut-list.xml:165(term)
msgid "<parameter>list1</parameter>&nbsp;:"
msgstr ""

#: xml/cut-list.xml:90(term) xml/cut-list.xml:136(term)
#: xml/cut-list.xml:168(term)
msgid "<parameter>list2</parameter>&nbsp;:"
msgstr ""

#: xml/cut-list.xml:93(term) xml/cut-sequence-matcher.xml:251(term)
msgid "<parameter>compare_func</parameter>&nbsp;:"
msgstr ""

#: xml/cut-list.xml:105(title)
msgid "cut_list_inspect ()"
msgstr ""

#: xml/cut-list.xml:106(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              cut_list_inspect                    (const <link linkend=\"GList\">GList</link> *list,\n"
"                                                         <link linkend=\"CutInspectFunc\">CutInspectFunc</link> inspect_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/cut-list.xml:112(term) xml/cut-list.xml:150(term)
#: xml/cut-list.xml:182(term)
msgid "<parameter>list</parameter>&nbsp;:"
msgstr ""

#: xml/cut-list.xml:115(term)
msgid "<parameter>inspect_func</parameter>&nbsp;:"
msgstr ""

#: xml/cut-list.xml:127(title)
msgid "cut_list_equal_int ()"
msgstr ""

#: xml/cut-list.xml:128(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_list_equal_int                  (const <link linkend=\"GList\">GList</link> *list1,\n"
"                                                         const <link linkend=\"GList\">GList</link> *list2);"
msgstr ""

#: xml/cut-list.xml:145(title)
msgid "cut_list_inspect_int ()"
msgstr ""

#: xml/cut-list.xml:146(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_list_inspect_int                (const <link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/cut-list.xml:159(title)
msgid "cut_list_equal_string ()"
msgstr ""

#: xml/cut-list.xml:160(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_list_equal_string               (const <link linkend=\"GList\">GList</link> *list1,\n"
"                                                         const <link linkend=\"GList\">GList</link> *list2);"
msgstr ""

#: xml/cut-list.xml:177(title)
msgid "cut_list_inspect_string ()"
msgstr ""

#: xml/cut-list.xml:178(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_list_inspect_string             (const <link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/cut-listener-utils.xml:7(refentrytitle)
#: xml/cut-listener-utils.xml:13(refname)
msgid "cut-listener-utils"
msgstr ""

#: xml/cut-listener-utils.xml:22(link) xml/cut-listener-utils.xml:45(primary)
msgid "CUT_DEFINE_LISTENER_MODULE"
msgstr ""

#: xml/cut-listener-utils.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>          (name, NAME)\n"
msgstr ""

#: xml/cut-listener-utils.xml:44(title)
msgid "CUT_DEFINE_LISTENER_MODULE()"
msgstr ""

#: xml/cut-listener-utils.xml:45(programlisting)
#, no-wrap
msgid "#define             CUT_DEFINE_LISTENER_MODULE(name, NAME)"
msgstr ""

#: xml/cut-listener-utils.xml:49(term)
#: xml/cut-module-factory-utils.xml:152(term)
#: xml/cut-module-factory-utils.xml:170(term)
#: xml/cut-module-factory.xml:76(term) xml/cut-module-factory.xml:102(term)
#: xml/cut-report.xml:72(term) xml/cut-run-context.xml:796(term)
#: xml/cut-streamer.xml:63(term) xml/cut-ui.xml:76(term)
msgid "<parameter>name</parameter>&nbsp;:"
msgstr ""

#: xml/cut-listener-utils.xml:52(term)
msgid "<parameter>NAME</parameter>&nbsp;:"
msgstr ""

#: xml/cut-listener.xml:7(refentrytitle) xml/cut-listener.xml:13(refname)
#: xml/cut-listener.xml:22(link) xml/cut-listener.xml:25(link)
#: xml/cut-run-context.xml:83(link) xml/cut-run-context.xml:85(link)
msgid "CutListener"
msgstr ""

#: xml/cut-listener.xml:22(link) xml/cut-listener.xml:49(primary)
msgid "cut_listener_attach_to_run_context"
msgstr ""

#: xml/cut-listener.xml:24(link) xml/cut-listener.xml:65(primary)
msgid "cut_listener_detach_from_run_context"
msgstr ""

#: xml/cut-listener.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>  (<placeholder-3/> *listener,\n"
"                                                         <placeholder-4/> *run_context);\n"
"<placeholder-5/>                <placeholder-6/>\n"
"                                                        (<placeholder-7/> *listener,\n"
"                                                         <placeholder-8/> *run_context);\n"
msgstr ""

#: xml/cut-listener.xml:48(title)
msgid "cut_listener_attach_to_run_context ()"
msgstr ""

#: xml/cut-listener.xml:49(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_listener_attach_to_run_context  (<link linkend=\"CutListener\">CutListener</link> *listener,\n"
"                                                         <link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-listener.xml:54(term) xml/cut-listener.xml:71(term)
#: xml/cut-run-context.xml:704(term) xml/cut-run-context.xml:720(term)
msgid "<parameter>listener</parameter>&nbsp;:"
msgstr ""

#: xml/cut-listener.xml:64(title)
msgid "cut_listener_detach_from_run_context ()"
msgstr ""

#: xml/cut-listener.xml:65(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_listener_detach_from_run_context\n"
"                                                        (<link linkend=\"CutListener\">CutListener</link> *listener,\n"
"                                                         <link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-main.xml:7(refentrytitle) xml/cut-main.xml:13(refname)
msgid "cut-main"
msgstr ""

#: xml/cut-main.xml:22(link) xml/cut-main.xml:50(primary)
msgid "cut_init"
msgstr ""

#: xml/cut-main.xml:22(link) xml/cut-process.xml:24(link)
#: xml/cut-process.xml:25(link) xml/cut-process.xml:26(link)
#: xml/cut-process.xml:27(link)
msgid "int"
msgstr ""

#: xml/cut-main.xml:23(link)
msgid "char"
msgstr ""

#: xml/cut-main.xml:24(link) xml/cut-main.xml:66(primary)
msgid "cut_quit"
msgstr ""

#: xml/cut-main.xml:25(link) xml/cut-main.xml:72(primary)
msgid "cut_run"
msgstr ""

#: xml/cut-main.xml:26(link) xml/cut-main.xml:83(primary)
msgid "cut_create_run_context"
msgstr ""

#: xml/cut-main.xml:27(link) xml/cut-main.xml:94(primary)
msgid "cut_start_run_context"
msgstr ""

#: xml/cut-main.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                            (<placeholder-3/> *argc,\n"
"                                                         <placeholder-4/> ***argv);\n"
"<placeholder-5/>                <placeholder-6/>                            (void);\n"
"<placeholder-7/>            <placeholder-8/>                             (void);\n"
"<placeholder-9/>*      <placeholder-10/>              (void);\n"
"<placeholder-11/>            <placeholder-12/>               (<placeholder-13/> *run_context);\n"
msgstr ""

#: xml/cut-main.xml:49(title)
msgid "cut_init ()"
msgstr ""

#: xml/cut-main.xml:50(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_init                            (<link linkend=\"int\">int</link> *argc,\n"
"                                                         <link linkend=\"char\">char</link> ***argv);"
msgstr ""

#: xml/cut-main.xml:55(term)
msgid "<parameter>argc</parameter>&nbsp;:"
msgstr ""

#: xml/cut-main.xml:58(term)
msgid "<parameter>argv</parameter>&nbsp;:"
msgstr ""

#: xml/cut-main.xml:65(title)
msgid "cut_quit ()"
msgstr ""

#: xml/cut-main.xml:66(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_quit                            (void);"
msgstr ""

#: xml/cut-main.xml:71(title)
msgid "cut_run ()"
msgstr ""

#: xml/cut-main.xml:72(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run                             (void);"
msgstr ""

#: xml/cut-main.xml:82(title)
msgid "cut_create_run_context ()"
msgstr ""

#: xml/cut-main.xml:83(programlisting)
#, no-wrap
msgid "<link linkend=\"CutRunContext\">CutRunContext</link>*      cut_create_run_context              (void);"
msgstr ""

#: xml/cut-main.xml:93(title)
msgid "cut_start_run_context ()"
msgstr ""

#: xml/cut-main.xml:94(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_start_run_context               (<link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-module-factory-utils.xml:7(refentrytitle)
#: xml/cut-module-factory-utils.xml:13(refname)
msgid "cut-module-factory-utils"
msgstr ""

#: xml/cut-module-factory-utils.xml:22(link)
#: xml/cut-module-factory-utils.xml:59(primary)
msgid "cut_module_factory_init"
msgstr ""

#: xml/cut-module-factory-utils.xml:23(link)
#: xml/cut-module-factory-utils.xml:65(primary)
msgid "cut_module_factory_quit"
msgstr ""

#: xml/cut-module-factory-utils.xml:24(link)
#: xml/cut-module-factory-utils.xml:71(primary)
msgid "cut_module_factory_get_default_module_dir"
msgstr ""

#: xml/cut-module-factory-utils.xml:26(link)
#: xml/cut-module-factory-utils.xml:83(primary)
msgid "cut_module_factory_set_default_module_dir"
msgstr ""

#: xml/cut-module-factory-utils.xml:28(link)
#: xml/cut-module-factory-utils.xml:96(primary)
msgid "cut_module_factory_load"
msgstr ""

#: xml/cut-module-factory-utils.xml:30(link)
#: xml/cut-module-factory-utils.xml:112(primary)
msgid "cut_module_factory_load_all"
msgstr ""

#: xml/cut-module-factory-utils.xml:31(link)
#: xml/cut-module-factory-utils.xml:124(primary)
msgid "cut_module_factory_unload"
msgstr ""

#: xml/cut-module-factory-utils.xml:32(link)
#: xml/cut-module-factory-utils.xml:130(primary)
msgid "cut_module_factory_get_names"
msgstr ""

#: xml/cut-module-factory-utils.xml:33(link)
#: xml/cut-module-factory-utils.xml:144(primary)
msgid "cut_module_factory_exist_module"
msgstr ""

#: xml/cut-module-factory-utils.xml:35(link)
msgid "CutModule"
msgstr ""

#: xml/cut-module-factory-utils.xml:35(link)
#: xml/cut-module-factory-utils.xml:162(primary)
msgid "cut_module_factory_load_module"
msgstr ""

#: xml/cut-module-factory-utils.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>             (void);\n"
"<placeholder-3/>                <placeholder-4/>             (void);\n"
"const <placeholder-5/>*        <placeholder-6/>\n"
"                                                        (void);\n"
"<placeholder-7/>                <placeholder-8/>\n"
"                                                        (const <placeholder-9/> *dir);\n"
"<placeholder-10/>                <placeholder-11/>             (const <placeholder-12/> *dir,\n"
"                                                         const <placeholder-13/> *type);\n"
"<placeholder-14/>                <placeholder-15/>         (const <placeholder-16/> *base_dir);\n"
"<placeholder-17/>                <placeholder-18/>           (void);\n"
"<placeholder-19/>*              <placeholder-20/>        (const <placeholder-21/> *type);\n"
"<placeholder-22/>            <placeholder-23/>     (const <placeholder-24/> *type,\n"
"                                                         const <placeholder-25/> *name);\n"
"<placeholder-26/>*          <placeholder-27/>      (const <placeholder-28/> *type,\n"
"                                                         const <placeholder-29/> *name);\n"
msgstr ""

#: xml/cut-module-factory-utils.xml:58(title)
msgid "cut_module_factory_init ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:59(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_module_factory_init             (void);"
msgstr ""

#: xml/cut-module-factory-utils.xml:64(title)
msgid "cut_module_factory_quit ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:65(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_module_factory_quit             (void);"
msgstr ""

#: xml/cut-module-factory-utils.xml:70(title)
msgid "cut_module_factory_get_default_module_dir ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:71(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link>*        cut_module_factory_get_default_module_dir\n"
"                                                        (void);"
msgstr ""

#: xml/cut-module-factory-utils.xml:82(title)
msgid "cut_module_factory_set_default_module_dir ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:83(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_module_factory_set_default_module_dir\n"
"                                                        (const <link linkend=\"gchar\">gchar</link> *dir);"
msgstr ""

#: xml/cut-module-factory-utils.xml:88(term)
#: xml/cut-module-factory-utils.xml:101(term)
msgid "<parameter>dir</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory-utils.xml:95(title)
msgid "cut_module_factory_load ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:96(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_module_factory_load             (const <link linkend=\"gchar\">gchar</link> *dir,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *type);"
msgstr ""

#: xml/cut-module-factory-utils.xml:104(term)
#: xml/cut-module-factory-utils.xml:134(term)
#: xml/cut-module-factory-utils.xml:149(term)
#: xml/cut-module-factory-utils.xml:167(term)
#: xml/cut-module-factory.xml:73(term) xml/cut-module-factory.xml:99(term)
#: xml/cut-sequence-matcher.xml:200(term)
msgid "<parameter>type</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory-utils.xml:111(title)
msgid "cut_module_factory_load_all ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:112(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_module_factory_load_all         (const <link linkend=\"gchar\">gchar</link> *base_dir);"
msgstr ""

#: xml/cut-module-factory-utils.xml:116(term)
msgid "<parameter>base_dir</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory-utils.xml:123(title)
msgid "cut_module_factory_unload ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:124(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_module_factory_unload           (void);"
msgstr ""

#: xml/cut-module-factory-utils.xml:129(title)
msgid "cut_module_factory_get_names ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:130(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_module_factory_get_names        (const <link linkend=\"gchar\">gchar</link> *type);"
msgstr ""

#: xml/cut-module-factory-utils.xml:143(title)
msgid "cut_module_factory_exist_module ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:144(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_module_factory_exist_module     (const <link linkend=\"gchar\">gchar</link> *type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name);"
msgstr ""

#: xml/cut-module-factory-utils.xml:161(title)
msgid "cut_module_factory_load_module ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:162(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutModule\">CutModule</link>*          cut_module_factory_load_module      (const <link linkend=\"gchar\">gchar</link> *type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name);"
msgstr ""

#: xml/cut-module-factory.xml:7(refentrytitle)
#: xml/cut-module-factory.xml:13(refname) xml/cut-module-factory.xml:22(link)
#: xml/cut-module-factory.xml:23(link) xml/cut-module-factory.xml:27(link)
#: xml/cut-module-factory.xml:31(link) xml/cut-module-factory.xml:33(link)
#: xml/cut-module-factory.xml:34(link) xml/cut-module-factory.xml:56(title)
#: xml/cut-module-factory.xml:57(primary)
msgid "CutModuleFactory"
msgstr ""

#: xml/cut-module-factory.xml:23(link) xml/cut-module-factory.xml:66(primary)
msgid "cut_module_factory_new"
msgstr ""

#: xml/cut-module-factory.xml:27(link) xml/cut-module-factory.xml:92(primary)
msgid "cut_module_factory_new_valist"
msgstr ""

#: xml/cut-module-factory.xml:30(link)
msgid "va_list"
msgstr ""

#: xml/cut-module-factory.xml:31(link) xml/cut-module-factory.xml:118(primary)
msgid "cut_module_factory_set_option_group"
msgstr ""

#: xml/cut-module-factory.xml:33(link) xml/cut-module-factory.xml:134(primary)
msgid "cut_module_factory_create"
msgstr ""

#: xml/cut-module-factory.xml:34(link) xml/cut-module-factory.xml:148(primary)
msgid "cut_module_factory_get_name"
msgstr ""

#: xml/cut-module-factory.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*   <placeholder-3/>              (const <placeholder-4/> *type,\n"
"                                                         const <placeholder-5/> *name,\n"
"                                                         const <placeholder-6/> *first_property,\n"
"                                                         ...);\n"
"<placeholder-7/>*   <placeholder-8/>       (const <placeholder-9/> *type,\n"
"                                                         const <placeholder-10/> *name,\n"
"                                                         const <placeholder-11/> *first_property,\n"
"                                                         <placeholder-12/> var_args);\n"
"<placeholder-13/>                <placeholder-14/> (<placeholder-15/> *factory,\n"
"                                                         <placeholder-16/> *context);\n"
"<placeholder-17/>*            <placeholder-18/>           (<placeholder-19/> *factory);\n"
"const <placeholder-20/>*        <placeholder-21/>         (<placeholder-22/> *factory);\n"
msgstr ""

#: xml/cut-module-factory.xml:57(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutModuleFactory;\n"
msgstr ""

#: xml/cut-module-factory.xml:65(title)
msgid "cut_module_factory_new ()"
msgstr ""

#: xml/cut-module-factory.xml:66(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutModuleFactory\">CutModuleFactory</link>*   cut_module_factory_new              (const <link linkend=\"gchar\">gchar</link> *type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-module-factory.xml:79(term) xml/cut-module-factory.xml:105(term)
#: xml/cut-report.xml:75(term) xml/cut-streamer.xml:66(term)
#: xml/cut-ui.xml:79(term)
msgid "<parameter>first_property</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory.xml:91(title)
msgid "cut_module_factory_new_valist ()"
msgstr ""

#: xml/cut-module-factory.xml:92(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutModuleFactory\">CutModuleFactory</link>*   cut_module_factory_new_valist       (const <link linkend=\"gchar\">gchar</link> *type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         <link linkend=\"va-list\">va_list</link> var_args);"
msgstr ""

#: xml/cut-module-factory.xml:108(term)
msgid "<parameter>var_args</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory.xml:117(title)
msgid "cut_module_factory_set_option_group ()"
msgstr ""

#: xml/cut-module-factory.xml:118(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_module_factory_set_option_group (<link linkend=\"CutModuleFactory\">CutModuleFactory</link> *factory,\n"
"                                                         <link linkend=\"GOptionContext\">GOptionContext</link> *context);"
msgstr ""

#: xml/cut-module-factory.xml:123(term) xml/cut-module-factory.xml:138(term)
#: xml/cut-module-factory.xml:152(term)
msgid "<parameter>factory</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory.xml:133(title)
msgid "cut_module_factory_create ()"
msgstr ""

#: xml/cut-module-factory.xml:134(programlisting)
#, no-wrap
msgid "<link linkend=\"GObject\">GObject</link>*            cut_module_factory_create           (<link linkend=\"CutModuleFactory\">CutModuleFactory</link> *factory);"
msgstr ""

#: xml/cut-module-factory.xml:147(title)
msgid "cut_module_factory_get_name ()"
msgstr ""

#: xml/cut-module-factory.xml:148(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_module_factory_get_name         (<link linkend=\"CutModuleFactory\">CutModuleFactory</link> *factory);"
msgstr ""

#: xml/cut-pipeline.xml:7(refentrytitle) xml/cut-pipeline.xml:13(refname)
#: xml/cut-pipeline.xml:22(link) xml/cut-pipeline.xml:46(title)
#: xml/cut-pipeline.xml:47(primary)
msgid "CutPipeline"
msgstr ""

#: xml/cut-pipeline.xml:23(link) xml/cut-pipeline.xml:56(primary)
msgid "cut_pipeline_new"
msgstr ""

#: xml/cut-pipeline.xml:24(link) xml/cut-pipeline.xml:67(primary)
msgid "cut_pipeline_new_from_run_context"
msgstr ""

#: xml/cut-pipeline.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*      <placeholder-3/>                    (void);\n"
"<placeholder-4/>*      <placeholder-5/>   (<placeholder-6/> *run_context);\n"
msgstr ""

#: xml/cut-pipeline.xml:47(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutRunContext object;\n"
"} CutPipeline;\n"
msgstr ""

#: xml/cut-pipeline.xml:55(title)
msgid "cut_pipeline_new ()"
msgstr ""

#: xml/cut-pipeline.xml:56(programlisting)
#, no-wrap
msgid "<link linkend=\"CutRunContext\">CutRunContext</link>*      cut_pipeline_new                    (void);"
msgstr ""

#: xml/cut-pipeline.xml:66(title)
msgid "cut_pipeline_new_from_run_context ()"
msgstr ""

#: xml/cut-pipeline.xml:67(programlisting)
#, no-wrap
msgid "<link linkend=\"CutRunContext\">CutRunContext</link>*      cut_pipeline_new_from_run_context   (<link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-process.xml:7(refentrytitle) xml/cut-process.xml:13(refname)
#: xml/cut-process.xml:22(link) xml/cut-process.xml:23(link)
#: xml/cut-process.xml:24(link) xml/cut-process.xml:25(link)
#: xml/cut-process.xml:27(link) xml/cut-process.xml:28(link)
#: xml/cut-process.xml:29(link) xml/cut-process.xml:31(link)
#: xml/cut-process.xml:33(link) xml/cut-process.xml:34(link)
#: xml/cut-process.xml:56(title) xml/cut-process.xml:57(primary)
msgid "CutProcess"
msgstr ""

#: xml/cut-process.xml:23(link) xml/cut-process.xml:66(primary)
msgid "cut_process_new"
msgstr ""

#: xml/cut-process.xml:24(link) xml/cut-process.xml:77(primary)
msgid "cut_process_fork"
msgstr ""

#: xml/cut-process.xml:25(link) xml/cut-process.xml:91(primary)
msgid "cut_process_wait"
msgstr ""

#: xml/cut-process.xml:27(link) xml/cut-process.xml:109(primary)
msgid "cut_process_get_pid"
msgstr ""

#: xml/cut-process.xml:28(link) xml/cut-process.xml:123(primary)
msgid "cut_process_get_stdout_message"
msgstr ""

#: xml/cut-process.xml:29(link) xml/cut-process.xml:137(primary)
msgid "cut_process_get_stderr_message"
msgstr ""

#: xml/cut-process.xml:30(link) xml/cut-process.xml:151(primary)
msgid "cut_process_send_test_result_to_parent"
msgstr ""

#: xml/cut-process.xml:32(link) xml/cut-xml-parser.xml:22(link)
msgid "CutTestResult"
msgstr ""

#: xml/cut-process.xml:33(link) xml/cut-process.xml:170(primary)
msgid "cut_process_get_result_from_child"
msgstr ""

#: xml/cut-process.xml:34(link) xml/cut-process.xml:184(primary)
msgid "cut_process_exit"
msgstr ""

#: xml/cut-process.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*         <placeholder-3/>                     (void);\n"
"<placeholder-4/>                 <placeholder-5/>                    (<placeholder-6/> *process);\n"
"<placeholder-7/>                 <placeholder-8/>                    (<placeholder-9/> *process,\n"
"                                                         unsigned <placeholder-10/> usec_timeout);\n"
"<placeholder-11/>                 <placeholder-12/>                 (<placeholder-13/> *process);\n"
"const <placeholder-14/>*        <placeholder-15/>      (<placeholder-16/> *process);\n"
"const <placeholder-17/>*        <placeholder-18/>      (<placeholder-19/> *process);\n"
"<placeholder-20/>            <placeholder-21/>\n"
"                                                        (<placeholder-22/> *process,\n"
"                                                         <placeholder-23/> *result);\n"
"const <placeholder-24/>*        <placeholder-25/>   (<placeholder-26/> *process);\n"
"<placeholder-27/>                <placeholder-28/>                    (<placeholder-29/> *process);\n"
msgstr ""

#: xml/cut-process.xml:57(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutProcess;\n"
msgstr ""

#: xml/cut-process.xml:65(title)
msgid "cut_process_new ()"
msgstr ""

#: xml/cut-process.xml:66(programlisting)
#, no-wrap
msgid "<link linkend=\"CutProcess\">CutProcess</link>*         cut_process_new                     (void);"
msgstr ""

#: xml/cut-process.xml:76(title)
msgid "cut_process_fork ()"
msgstr ""

#: xml/cut-process.xml:77(programlisting)
#, no-wrap
msgid "<link linkend=\"int\">int</link>                 cut_process_fork                    (<link linkend=\"CutProcess\">CutProcess</link> *process);"
msgstr ""

#: xml/cut-process.xml:81(term) xml/cut-process.xml:96(term)
#: xml/cut-process.xml:113(term) xml/cut-process.xml:127(term)
#: xml/cut-process.xml:141(term) xml/cut-process.xml:157(term)
#: xml/cut-process.xml:174(term) xml/cut-process.xml:188(term)
msgid "<parameter>process</parameter>&nbsp;:"
msgstr ""

#: xml/cut-process.xml:90(title)
msgid "cut_process_wait ()"
msgstr ""

#: xml/cut-process.xml:91(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"int\">int</link>                 cut_process_wait                    (<link linkend=\"CutProcess\">CutProcess</link> *process,\n"
"                                                         unsigned <link linkend=\"int\">int</link> usec_timeout);"
msgstr ""

#: xml/cut-process.xml:108(title)
msgid "cut_process_get_pid ()"
msgstr ""

#: xml/cut-process.xml:109(programlisting)
#, no-wrap
msgid "<link linkend=\"int\">int</link>                 cut_process_get_pid                 (<link linkend=\"CutProcess\">CutProcess</link> *process);"
msgstr ""

#: xml/cut-process.xml:122(title)
msgid "cut_process_get_stdout_message ()"
msgstr ""

#: xml/cut-process.xml:123(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_process_get_stdout_message      (<link linkend=\"CutProcess\">CutProcess</link> *process);"
msgstr ""

#: xml/cut-process.xml:136(title)
msgid "cut_process_get_stderr_message ()"
msgstr ""

#: xml/cut-process.xml:137(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_process_get_stderr_message      (<link linkend=\"CutProcess\">CutProcess</link> *process);"
msgstr ""

#: xml/cut-process.xml:150(title)
msgid "cut_process_send_test_result_to_parent ()"
msgstr ""

#: xml/cut-process.xml:151(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_process_send_test_result_to_parent\n"
"                                                        (<link linkend=\"CutProcess\">CutProcess</link> *process,\n"
"                                                         <link linkend=\"CutTestResult\">CutTestResult</link> *result);"
msgstr ""

#: xml/cut-process.xml:160(term)
msgid "<parameter>result</parameter>&nbsp;:"
msgstr ""

#: xml/cut-process.xml:169(title)
msgid "cut_process_get_result_from_child ()"
msgstr ""

#: xml/cut-process.xml:170(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_process_get_result_from_child   (<link linkend=\"CutProcess\">CutProcess</link> *process);"
msgstr ""

#: xml/cut-process.xml:183(title)
msgid "cut_process_exit ()"
msgstr ""

#: xml/cut-process.xml:184(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_process_exit                    (<link linkend=\"CutProcess\">CutProcess</link> *process);"
msgstr ""

#: xml/cut-report-factory-builder.xml:7(refentrytitle)
#: xml/cut-report-factory-builder.xml:13(refname)
#: xml/cut-report-factory-builder.xml:22(link)
#: xml/cut-report-factory-builder.xml:44(title)
#: xml/cut-report-factory-builder.xml:45(primary)
msgid "CutReportFactoryBuilder"
msgstr ""

#: xml/cut-report-factory-builder.xml:21(synopsis)
#: xml/cut-streamer-factory-builder.xml:21(synopsis)
#: xml/cut-ui-factory-builder.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
msgstr ""

#: xml/cut-report-factory-builder.xml:45(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutFactoryBuilder object;\n"
"} CutReportFactoryBuilder;\n"
msgstr ""

#: xml/cut-report.xml:7(refentrytitle) xml/cut-report.xml:13(refname)
#: xml/cut-report.xml:22(link) xml/cut-report.xml:23(link)
#: xml/cut-report.xml:26(link) xml/cut-report.xml:27(link)
#: xml/cut-report.xml:28(link) xml/cut-report.xml:30(link)
#: xml/cut-report.xml:31(link) xml/cut-report.xml:32(link)
#: xml/cut-report.xml:33(link) xml/cut-report.xml:34(link)
#: xml/cut-report.xml:56(title) xml/cut-report.xml:57(primary)
msgid "CutReport"
msgstr ""

#: xml/cut-report.xml:23(link) xml/cut-report.xml:66(primary)
msgid "cut_report_new"
msgstr ""

#: xml/cut-report.xml:26(link) xml/cut-report.xml:88(primary)
msgid "cut_report_get_filename"
msgstr ""

#: xml/cut-report.xml:27(link) xml/cut-report.xml:102(primary)
msgid "cut_report_get_all_results"
msgstr ""

#: xml/cut-report.xml:28(link) xml/cut-report.xml:116(primary)
msgid "cut_report_get_test_result"
msgstr ""

#: xml/cut-report.xml:30(link) xml/cut-report.xml:134(primary)
msgid "cut_report_get_success_results"
msgstr ""

#: xml/cut-report.xml:31(link) xml/cut-report.xml:148(primary)
msgid "cut_report_get_error_results"
msgstr ""

#: xml/cut-report.xml:32(link) xml/cut-report.xml:162(primary)
msgid "cut_report_get_failure_results"
msgstr ""

#: xml/cut-report.xml:33(link) xml/cut-report.xml:176(primary)
msgid "cut_report_get_pending_results"
msgstr ""

#: xml/cut-report.xml:34(link) xml/cut-report.xml:190(primary)
msgid "cut_report_get_notification_results"
msgstr ""

#: xml/cut-report.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*          <placeholder-3/>                      (const <placeholder-4/> *name,\n"
"                                                         const <placeholder-5/> *first_property,\n"
"                                                         ...);\n"
"const <placeholder-6/>*        <placeholder-7/>             (<placeholder-8/> *report);\n"
"<placeholder-9/>*              <placeholder-10/>          (<placeholder-11/> *report);\n"
"<placeholder-12/>*              <placeholder-13/>          (<placeholder-14/> *report,\n"
"                                                         const <placeholder-15/> *test_name);\n"
"<placeholder-16/>*              <placeholder-17/>      (<placeholder-18/> *report);\n"
"<placeholder-19/>*              <placeholder-20/>        (<placeholder-21/> *report);\n"
"<placeholder-22/>*              <placeholder-23/>      (<placeholder-24/> *report);\n"
"<placeholder-25/>*              <placeholder-26/>      (<placeholder-27/> *report);\n"
"<placeholder-28/>*              <placeholder-29/> (<placeholder-30/> *report);\n"
msgstr ""

#: xml/cut-report.xml:57(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutReport;\n"
msgstr ""

#: xml/cut-report.xml:65(title)
msgid "cut_report_new ()"
msgstr ""

#: xml/cut-report.xml:66(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutReport\">CutReport</link>*          cut_report_new                      (const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-report.xml:87(title)
msgid "cut_report_get_filename ()"
msgstr ""

#: xml/cut-report.xml:88(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_report_get_filename             (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:92(term) xml/cut-report.xml:106(term)
#: xml/cut-report.xml:121(term) xml/cut-report.xml:138(term)
#: xml/cut-report.xml:152(term) xml/cut-report.xml:166(term)
#: xml/cut-report.xml:180(term) xml/cut-report.xml:194(term)
msgid "<parameter>report</parameter>&nbsp;:"
msgstr ""

#: xml/cut-report.xml:101(title)
msgid "cut_report_get_all_results ()"
msgstr ""

#: xml/cut-report.xml:102(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_all_results          (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:115(title)
msgid "cut_report_get_test_result ()"
msgstr ""

#: xml/cut-report.xml:116(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              cut_report_get_test_result          (<link linkend=\"CutReport\">CutReport</link> *report,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *test_name);"
msgstr ""

#: xml/cut-report.xml:124(term)
msgid "<parameter>test_name</parameter>&nbsp;:"
msgstr ""

#: xml/cut-report.xml:133(title)
msgid "cut_report_get_success_results ()"
msgstr ""

#: xml/cut-report.xml:134(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_success_results      (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:147(title)
msgid "cut_report_get_error_results ()"
msgstr ""

#: xml/cut-report.xml:148(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_error_results        (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:161(title)
msgid "cut_report_get_failure_results ()"
msgstr ""

#: xml/cut-report.xml:162(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_failure_results      (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:175(title)
msgid "cut_report_get_pending_results ()"
msgstr ""

#: xml/cut-report.xml:176(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_pending_results      (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:189(title)
msgid "cut_report_get_notification_results ()"
msgstr ""

#: xml/cut-report.xml:190(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_notification_results (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-run-context.xml:22(link) xml/cut-run-context.xml:78(link)
#: xml/cut-run-context.xml:79(link) xml/cut-run-context.xml:124(primary)
msgid "CutOrder"
msgstr ""

#: xml/cut-run-context.xml:24(link) xml/cut-run-context.xml:144(primary)
msgid "cut_run_context_set_test_directory"
msgstr ""

#: xml/cut-run-context.xml:26(link) xml/cut-run-context.xml:160(primary)
msgid "cut_run_context_get_test_directory"
msgstr ""

#: xml/cut-run-context.xml:27(link) xml/cut-run-context.xml:174(primary)
msgid "cut_run_context_set_source_directory"
msgstr ""

#: xml/cut-run-context.xml:30(link) xml/cut-run-context.xml:191(primary)
msgid "cut_run_context_get_source_directory"
msgstr ""

#: xml/cut-run-context.xml:32(link) xml/cut-run-context.xml:206(primary)
msgid "cut_run_context_set_multi_thread"
msgstr ""

#: xml/cut-run-context.xml:34(link) xml/cut-run-context.xml:222(primary)
msgid "cut_run_context_get_multi_thread"
msgstr ""

#: xml/cut-run-context.xml:35(link) xml/cut-run-context.xml:236(primary)
msgid "cut_run_context_is_multi_thread"
msgstr ""

#: xml/cut-run-context.xml:36(link) xml/cut-run-context.xml:250(primary)
msgid "cut_run_context_set_exclude_files"
msgstr ""

#: xml/cut-run-context.xml:38(link) xml/cut-run-context.xml:266(primary)
msgid "cut_run_context_get_exclude_files"
msgstr ""

#: xml/cut-run-context.xml:39(link) xml/cut-run-context.xml:280(primary)
msgid "cut_run_context_set_exclude_directories"
msgstr ""

#: xml/cut-run-context.xml:42(link) xml/cut-run-context.xml:297(primary)
msgid "cut_run_context_get_exclude_directories"
msgstr ""

#: xml/cut-run-context.xml:44(link) xml/cut-run-context.xml:312(primary)
msgid "cut_run_context_set_target_test_case_names"
msgstr ""

#: xml/cut-run-context.xml:47(link) xml/cut-run-context.xml:329(primary)
msgid "cut_run_context_get_target_test_case_names"
msgstr ""

#: xml/cut-run-context.xml:49(link) xml/cut-run-context.xml:344(primary)
msgid "cut_run_context_set_target_test_names"
msgstr ""

#: xml/cut-run-context.xml:52(link) xml/cut-run-context.xml:361(primary)
msgid "cut_run_context_get_target_test_names"
msgstr ""

#: xml/cut-run-context.xml:54(link) xml/cut-run-context.xml:376(primary)
msgid "cut_run_context_prepare_test"
msgstr ""

#: xml/cut-run-context.xml:55(link)
msgid "CutTest"
msgstr ""

#: xml/cut-run-context.xml:56(link) xml/cut-run-context.xml:392(primary)
msgid "cut_run_context_prepare_test_case"
msgstr ""

#: xml/cut-run-context.xml:57(link)
msgid "CutTestCase"
msgstr ""

#: xml/cut-run-context.xml:58(link) xml/cut-run-context.xml:408(primary)
msgid "cut_run_context_prepare_test_suite"
msgstr ""

#: xml/cut-run-context.xml:59(link) xml/cut-run-context.xml:73(link)
#: xml/cut-run-context.xml:74(link) xml/cut-run-context.xml:76(link)
msgid "CutTestSuite"
msgstr ""

#: xml/cut-run-context.xml:60(link) xml/cut-run-context.xml:61(link)
#: xml/cut-run-context.xml:62(link) xml/cut-run-context.xml:63(link)
#: xml/cut-run-context.xml:64(link) xml/cut-run-context.xml:65(link)
#: xml/cut-run-context.xml:66(link) xml/cut-run-context.xml:67(link)
msgid "guint"
msgstr ""

#: xml/cut-run-context.xml:60(link) xml/cut-run-context.xml:424(primary)
msgid "cut_run_context_get_n_tests"
msgstr ""

#: xml/cut-run-context.xml:61(link) xml/cut-run-context.xml:438(primary)
msgid "cut_run_context_get_n_successes"
msgstr ""

#: xml/cut-run-context.xml:62(link) xml/cut-run-context.xml:452(primary)
msgid "cut_run_context_get_n_assertions"
msgstr ""

#: xml/cut-run-context.xml:63(link) xml/cut-run-context.xml:466(primary)
msgid "cut_run_context_get_n_failures"
msgstr ""

#: xml/cut-run-context.xml:64(link) xml/cut-run-context.xml:480(primary)
msgid "cut_run_context_get_n_errors"
msgstr ""

#: xml/cut-run-context.xml:65(link) xml/cut-run-context.xml:494(primary)
msgid "cut_run_context_get_n_pendings"
msgstr ""

#: xml/cut-run-context.xml:66(link) xml/cut-run-context.xml:508(primary)
msgid "cut_run_context_get_n_notifications"
msgstr ""

#: xml/cut-run-context.xml:67(link) xml/cut-run-context.xml:522(primary)
msgid "cut_run_context_get_n_omissions"
msgstr ""

#: xml/cut-run-context.xml:68(link) xml/cut-run-context.xml:536(primary)
msgid "cut_run_context_get_results"
msgstr ""

#: xml/cut-run-context.xml:69(link) xml/cut-run-context.xml:550(primary)
msgid "cut_run_context_is_crashed"
msgstr ""

#: xml/cut-run-context.xml:70(link) xml/cut-run-context.xml:564(primary)
msgid "cut_run_context_get_backtrace"
msgstr ""

#: xml/cut-run-context.xml:71(link) xml/cut-run-context.xml:578(primary)
msgid "cut_run_context_cancel"
msgstr ""

#: xml/cut-run-context.xml:72(link) xml/cut-run-context.xml:590(primary)
msgid "cut_run_context_is_canceled"
msgstr ""

#: xml/cut-run-context.xml:73(link) xml/cut-run-context.xml:604(primary)
msgid "cut_run_context_create_test_suite"
msgstr ""

#: xml/cut-run-context.xml:74(link) xml/cut-run-context.xml:618(primary)
msgid "cut_run_context_get_test_suite"
msgstr ""

#: xml/cut-run-context.xml:75(link) xml/cut-run-context.xml:632(primary)
msgid "cut_run_context_set_test_suite"
msgstr ""

#: xml/cut-run-context.xml:77(link) xml/cut-run-context.xml:648(primary)
msgid "cut_run_context_set_test_case_order"
msgstr ""

#: xml/cut-run-context.xml:79(link) xml/cut-run-context.xml:664(primary)
msgid "cut_run_context_get_test_case_order"
msgstr ""

#: xml/cut-run-context.xml:80(link) xml/cut-run-context.xml:678(primary)
msgid "cut_run_context_sort_test_cases"
msgstr ""

#: xml/cut-run-context.xml:82(link) xml/cut-run-context.xml:696(primary)
msgid "cut_run_context_add_listener"
msgstr ""

#: xml/cut-run-context.xml:84(link) xml/cut-run-context.xml:712(primary)
msgid "cut_run_context_remove_listener"
msgstr ""

#: xml/cut-run-context.xml:86(link) xml/cut-run-context.xml:728(primary)
msgid "cut_run_context_attach_listeners"
msgstr ""

#: xml/cut-run-context.xml:87(link) xml/cut-run-context.xml:740(primary)
msgid "cut_run_context_detach_listeners"
msgstr ""

#: xml/cut-run-context.xml:88(link) xml/cut-run-context.xml:752(primary)
msgid "cut_run_context_build_source_filename"
msgstr ""

#: xml/cut-run-context.xml:91(link) xml/cut-run-context.xml:771(primary)
msgid "cut_run_context_start"
msgstr ""

#: xml/cut-run-context.xml:92(link) xml/cut-run-context.xml:785(primary)
msgid "cut_run_context_emit_error"
msgstr ""

#: xml/cut-run-context.xml:97(link) xml/cut-run-context.xml:813(primary)
msgid "cut_run_context_set_command_line_args"
msgstr ""

#: xml/cut-run-context.xml:100(link) xml/cut-run-context.xml:830(primary)
msgid "cut_run_context_get_command_line_args"
msgstr ""

#: xml/cut-run-context.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"enum                <placeholder-1/>;\n"
"struct              <placeholder-2/>;\n"
"<placeholder-3/>                <placeholder-4/>  (<placeholder-5/> *context,\n"
"                                                         const <placeholder-6/> *directory);\n"
"const <placeholder-7/>*        <placeholder-8/>  (<placeholder-9/> *context);\n"
"<placeholder-10/>                <placeholder-11/>\n"
"                                                        (<placeholder-12/> *context,\n"
"                                                         const <placeholder-13/> *directory);\n"
"const <placeholder-14/>*        <placeholder-15/>\n"
"                                                        (<placeholder-16/> *context);\n"
"<placeholder-17/>                <placeholder-18/>    (<placeholder-19/> *context,\n"
"                                                         <placeholder-20/> use_multi_thread);\n"
"<placeholder-21/>            <placeholder-22/>    (<placeholder-23/> *context);\n"
"<placeholder-24/>            <placeholder-25/>     (<placeholder-26/> *context);\n"
"<placeholder-27/>                <placeholder-28/>   (<placeholder-29/> *context,\n"
"                                                         const <placeholder-30/> **filenames);\n"
"const <placeholder-31/>**       <placeholder-32/>   (<placeholder-33/> *context);\n"
"<placeholder-34/>                <placeholder-35/>\n"
"                                                        (<placeholder-36/> *context,\n"
"                                                         const <placeholder-37/> **directory_names);\n"
"const <placeholder-38/>**       <placeholder-39/>\n"
"                                                        (<placeholder-40/> *context);\n"
"<placeholder-41/>                <placeholder-42/>\n"
"                                                        (<placeholder-43/> *context,\n"
"                                                         <placeholder-44/> **names);\n"
"<placeholder-45/>**             <placeholder-46/>\n"
"                                                        (<placeholder-47/> *context);\n"
"<placeholder-48/>                <placeholder-49/>\n"
"                                                        (<placeholder-50/> *context,\n"
"                                                         <placeholder-51/> **names);\n"
"<placeholder-52/>**             <placeholder-53/>\n"
"                                                        (<placeholder-54/> *context);\n"
"<placeholder-55/>                <placeholder-56/>        (<placeholder-57/> *context,\n"
"                                                         <placeholder-58/> *test);\n"
"<placeholder-59/>                <placeholder-60/>   (<placeholder-61/> *context,\n"
"                                                         <placeholder-62/> *test_case);\n"
"<placeholder-63/>                <placeholder-64/>  (<placeholder-65/> *context,\n"
"                                                         <placeholder-66/> *test_suite);\n"
"<placeholder-67/>               <placeholder-68/>         (<placeholder-69/> *context);\n"
"<placeholder-70/>               <placeholder-71/>     (<placeholder-72/> *context);\n"
"<placeholder-73/>               <placeholder-74/>    (<placeholder-75/> *context);\n"
"<placeholder-76/>               <placeholder-77/>      (<placeholder-78/> *context);\n"
"<placeholder-79/>               <placeholder-80/>        (<placeholder-81/> *context);\n"
"<placeholder-82/>               <placeholder-83/>      (<placeholder-84/> *context);\n"
"<placeholder-85/>               <placeholder-86/> (<placeholder-87/> *context);\n"
"<placeholder-88/>               <placeholder-89/>     (<placeholder-90/> *context);\n"
"const <placeholder-91/>*        <placeholder-92/>         (<placeholder-93/> *context);\n"
"<placeholder-94/>            <placeholder-95/>          (<placeholder-96/> *context);\n"
"const <placeholder-97/>*        <placeholder-98/>       (<placeholder-99/> *context);\n"
"<placeholder-100/>                <placeholder-101/>              (<placeholder-102/> *context);\n"
"<placeholder-103/>            <placeholder-104/>         (<placeholder-105/> *context);\n"
"<placeholder-106/>*       <placeholder-107/>   (<placeholder-108/> *context);\n"
"<placeholder-109/>*       <placeholder-110/>      (<placeholder-111/> *context);\n"
"<placeholder-112/>                <placeholder-113/>      (<placeholder-114/> *context,\n"
"                                                         <placeholder-115/> *suite);\n"
"<placeholder-116/>                <placeholder-117/> (<placeholder-118/> *context,\n"
"                                                         <placeholder-119/> order);\n"
"<placeholder-120/>            <placeholder-121/> (<placeholder-122/> *context);\n"
"<placeholder-123/>*              <placeholder-124/>     (<placeholder-125/> *context,\n"
"                                                         <placeholder-126/> *test_cases);\n"
"<placeholder-127/>                <placeholder-128/>        (<placeholder-129/> *context,\n"
"                                                         <placeholder-130/> *listener);\n"
"<placeholder-131/>                <placeholder-132/>     (<placeholder-133/> *context,\n"
"                                                         <placeholder-134/> *listener);\n"
"<placeholder-135/>                <placeholder-136/>    (<placeholder-137/> *context);\n"
"<placeholder-138/>                <placeholder-139/>    (<placeholder-140/> *context);\n"
"<placeholder-141/>*              <placeholder-142/>\n"
"                                                        (<placeholder-143/> *context,\n"
"                                                         const <placeholder-144/> *filename);\n"
"<placeholder-145/>            <placeholder-146/>               (<placeholder-147/> *context);\n"
"<placeholder-148/>                <placeholder-149/>          (<placeholder-150/> *context,\n"
"                                                         const <placeholder-151/> *name,\n"
"                                                         <placeholder-152/> *error,\n"
"                                                         const <placeholder-153/> *format,\n"
"                                                         ...);\n"
"<placeholder-154/>                <placeholder-155/>\n"
"                                                        (<placeholder-156/> *context,\n"
"                                                         <placeholder-157/> **args);\n"
"const <placeholder-158/>**       <placeholder-159/>\n"
"                                                        (<placeholder-160/> *context);\n"
msgstr ""

#: xml/cut-run-context.xml:123(title)
msgid "enum CutOrder"
msgstr ""

#: xml/cut-run-context.xml:124(programlisting)
#, no-wrap
msgid ""
"typedef enum {\n"
"    CUT_ORDER_NONE_SPECIFIED,\n"
"    CUT_ORDER_NAME_ASCENDING,\n"
"    CUT_ORDER_NAME_DESCENDING\n"
"} CutOrder;\n"
msgstr ""

#: xml/cut-run-context.xml:134(title)
msgid "struct CutRunContext"
msgstr ""

#: xml/cut-run-context.xml:135(programlisting)
#, no-wrap
msgid ""
"struct CutRunContext {\n"
"    GObject object;\n"
"};\n"
msgstr ""

#: xml/cut-run-context.xml:143(title)
msgid "cut_run_context_set_test_directory ()"
msgstr ""

#: xml/cut-run-context.xml:144(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_test_directory  (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *directory);"
msgstr ""

#: xml/cut-run-context.xml:152(term) xml/cut-run-context.xml:183(term)
msgid "<parameter>directory</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:159(title)
msgid "cut_run_context_get_test_directory ()"
msgstr ""

#: xml/cut-run-context.xml:160(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_run_context_get_test_directory  (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:173(title)
msgid "cut_run_context_set_source_directory ()"
msgstr ""

#: xml/cut-run-context.xml:174(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_source_directory\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *directory);"
msgstr ""

#: xml/cut-run-context.xml:190(title)
msgid "cut_run_context_get_source_directory ()"
msgstr ""

#: xml/cut-run-context.xml:191(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link>*        cut_run_context_get_source_directory\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:205(title)
msgid "cut_run_context_set_multi_thread ()"
msgstr ""

#: xml/cut-run-context.xml:206(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_multi_thread    (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"gboolean\">gboolean</link> use_multi_thread);"
msgstr ""

#: xml/cut-run-context.xml:214(term)
msgid "<parameter>use_multi_thread</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:221(title)
msgid "cut_run_context_get_multi_thread ()"
msgstr ""

#: xml/cut-run-context.xml:222(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_context_get_multi_thread    (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:235(title)
msgid "cut_run_context_is_multi_thread ()"
msgstr ""

#: xml/cut-run-context.xml:236(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_context_is_multi_thread     (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:249(title)
msgid "cut_run_context_set_exclude_files ()"
msgstr ""

#: xml/cut-run-context.xml:250(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_exclude_files   (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> **filenames);"
msgstr ""

#: xml/cut-run-context.xml:258(term)
msgid "<parameter>filenames</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:265(title)
msgid "cut_run_context_get_exclude_files ()"
msgstr ""

#: xml/cut-run-context.xml:266(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>**       cut_run_context_get_exclude_files   (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:279(title)
msgid "cut_run_context_set_exclude_directories ()"
msgstr ""

#: xml/cut-run-context.xml:280(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_exclude_directories\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> **directory_names);"
msgstr ""

#: xml/cut-run-context.xml:289(term)
msgid "<parameter>directory_names</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:296(title)
msgid "cut_run_context_get_exclude_directories ()"
msgstr ""

#: xml/cut-run-context.xml:297(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link>**       cut_run_context_get_exclude_directories\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:311(title)
msgid "cut_run_context_set_target_test_case_names ()"
msgstr ""

#: xml/cut-run-context.xml:312(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_target_test_case_names\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"gchar\">gchar</link> **names);"
msgstr ""

#: xml/cut-run-context.xml:321(term) xml/cut-run-context.xml:353(term)
msgid "<parameter>names</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:328(title)
msgid "cut_run_context_get_target_test_case_names ()"
msgstr ""

#: xml/cut-run-context.xml:329(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>**             cut_run_context_get_target_test_case_names\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:343(title)
msgid "cut_run_context_set_target_test_names ()"
msgstr ""

#: xml/cut-run-context.xml:344(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_target_test_names\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"gchar\">gchar</link> **names);"
msgstr ""

#: xml/cut-run-context.xml:360(title)
msgid "cut_run_context_get_target_test_names ()"
msgstr ""

#: xml/cut-run-context.xml:361(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>**             cut_run_context_get_target_test_names\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:375(title)
msgid "cut_run_context_prepare_test ()"
msgstr ""

#: xml/cut-run-context.xml:376(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_prepare_test        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"CutTest\">CutTest</link> *test);"
msgstr ""

#: xml/cut-run-context.xml:384(term)
msgid "<parameter>test</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:391(title)
msgid "cut_run_context_prepare_test_case ()"
msgstr ""

#: xml/cut-run-context.xml:392(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_prepare_test_case   (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"CutTestCase\">CutTestCase</link> *test_case);"
msgstr ""

#: xml/cut-run-context.xml:400(term)
msgid "<parameter>test_case</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:407(title)
msgid "cut_run_context_prepare_test_suite ()"
msgstr ""

#: xml/cut-run-context.xml:408(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_prepare_test_suite  (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"CutTestSuite\">CutTestSuite</link> *test_suite);"
msgstr ""

#: xml/cut-run-context.xml:416(term)
msgid "<parameter>test_suite</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:423(title)
msgid "cut_run_context_get_n_tests ()"
msgstr ""

#: xml/cut-run-context.xml:424(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_tests         (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:437(title)
msgid "cut_run_context_get_n_successes ()"
msgstr ""

#: xml/cut-run-context.xml:438(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_successes     (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:451(title)
msgid "cut_run_context_get_n_assertions ()"
msgstr ""

#: xml/cut-run-context.xml:452(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_assertions    (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:465(title)
msgid "cut_run_context_get_n_failures ()"
msgstr ""

#: xml/cut-run-context.xml:466(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_failures      (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:479(title)
msgid "cut_run_context_get_n_errors ()"
msgstr ""

#: xml/cut-run-context.xml:480(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_errors        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:493(title)
msgid "cut_run_context_get_n_pendings ()"
msgstr ""

#: xml/cut-run-context.xml:494(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_pendings      (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:507(title)
msgid "cut_run_context_get_n_notifications ()"
msgstr ""

#: xml/cut-run-context.xml:508(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_notifications (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:521(title)
msgid "cut_run_context_get_n_omissions ()"
msgstr ""

#: xml/cut-run-context.xml:522(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_omissions     (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:535(title)
msgid "cut_run_context_get_results ()"
msgstr ""

#: xml/cut-run-context.xml:536(programlisting)
#, no-wrap
msgid "const <link linkend=\"GList\">GList</link>*        cut_run_context_get_results         (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:549(title)
msgid "cut_run_context_is_crashed ()"
msgstr ""

#: xml/cut-run-context.xml:550(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_context_is_crashed          (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:563(title)
msgid "cut_run_context_get_backtrace ()"
msgstr ""

#: xml/cut-run-context.xml:564(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_run_context_get_backtrace       (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:577(title)
msgid "cut_run_context_cancel ()"
msgstr ""

#: xml/cut-run-context.xml:578(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_run_context_cancel              (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:589(title)
msgid "cut_run_context_is_canceled ()"
msgstr ""

#: xml/cut-run-context.xml:590(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_context_is_canceled         (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:603(title)
msgid "cut_run_context_create_test_suite ()"
msgstr ""

#: xml/cut-run-context.xml:604(programlisting)
#, no-wrap
msgid "<link linkend=\"CutTestSuite\">CutTestSuite</link>*       cut_run_context_create_test_suite   (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:617(title)
msgid "cut_run_context_get_test_suite ()"
msgstr ""

#: xml/cut-run-context.xml:618(programlisting)
#, no-wrap
msgid "<link linkend=\"CutTestSuite\">CutTestSuite</link>*       cut_run_context_get_test_suite      (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:631(title)
msgid "cut_run_context_set_test_suite ()"
msgstr ""

#: xml/cut-run-context.xml:632(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_test_suite      (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"CutTestSuite\">CutTestSuite</link> *suite);"
msgstr ""

#: xml/cut-run-context.xml:640(term)
msgid "<parameter>suite</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:647(title)
msgid "cut_run_context_set_test_case_order ()"
msgstr ""

#: xml/cut-run-context.xml:648(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_test_case_order (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"CutOrder\">CutOrder</link> order);"
msgstr ""

#: xml/cut-run-context.xml:656(term)
msgid "<parameter>order</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:663(title)
msgid "cut_run_context_get_test_case_order ()"
msgstr ""

#: xml/cut-run-context.xml:664(programlisting)
#, no-wrap
msgid "<link linkend=\"CutOrder\">CutOrder</link>            cut_run_context_get_test_case_order (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:677(title)
msgid "cut_run_context_sort_test_cases ()"
msgstr ""

#: xml/cut-run-context.xml:678(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GList\">GList</link>*              cut_run_context_sort_test_cases     (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"GList\">GList</link> *test_cases);"
msgstr ""

#: xml/cut-run-context.xml:686(term)
msgid "<parameter>test_cases</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:695(title)
msgid "cut_run_context_add_listener ()"
msgstr ""

#: xml/cut-run-context.xml:696(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_add_listener        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"CutListener\">CutListener</link> *listener);"
msgstr ""

#: xml/cut-run-context.xml:711(title)
msgid "cut_run_context_remove_listener ()"
msgstr ""

#: xml/cut-run-context.xml:712(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_remove_listener     (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"CutListener\">CutListener</link> *listener);"
msgstr ""

#: xml/cut-run-context.xml:727(title)
msgid "cut_run_context_attach_listeners ()"
msgstr ""

#: xml/cut-run-context.xml:728(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_run_context_attach_listeners    (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:739(title)
msgid "cut_run_context_detach_listeners ()"
msgstr ""

#: xml/cut-run-context.xml:740(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_run_context_detach_listeners    (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:751(title)
msgid "cut_run_context_build_source_filename ()"
msgstr ""

#: xml/cut-run-context.xml:752(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              cut_run_context_build_source_filename\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *filename);"
msgstr ""

#: xml/cut-run-context.xml:761(term)
msgid "<parameter>filename</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:770(title)
msgid "cut_run_context_start ()"
msgstr ""

#: xml/cut-run-context.xml:771(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_context_start               (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:784(title)
msgid "cut_run_context_emit_error ()"
msgstr ""

#: xml/cut-run-context.xml:785(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_emit_error          (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         <link linkend=\"GError\">GError</link> *error,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *format,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-run-context.xml:812(title)
msgid "cut_run_context_set_command_line_args ()"
msgstr ""

#: xml/cut-run-context.xml:813(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_command_line_args\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"gchar\">gchar</link> **args);"
msgstr ""

#: xml/cut-run-context.xml:822(term)
msgid "<parameter>args</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:829(title)
msgid "cut_run_context_get_command_line_args ()"
msgstr ""

#: xml/cut-run-context.xml:830(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link>**       cut_run_context_get_command_line_args\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-sequence-matcher.xml:7(refentrytitle)
#: xml/cut-sequence-matcher.xml:13(refname)
#: xml/cut-sequence-matcher.xml:27(link) xml/cut-sequence-matcher.xml:39(link)
#: xml/cut-sequence-matcher.xml:47(link) xml/cut-sequence-matcher.xml:49(link)
#: xml/cut-sequence-matcher.xml:53(link) xml/cut-sequence-matcher.xml:55(link)
#: xml/cut-sequence-matcher.xml:60(link) xml/cut-sequence-matcher.xml:63(link)
#: xml/cut-sequence-matcher.xml:68(link) xml/cut-sequence-matcher.xml:69(link)
#: xml/cut-sequence-matcher.xml:70(link) xml/cut-sequence-matcher.xml:71(link)
#: xml/cut-sequence-matcher.xml:147(title)
#: xml/cut-sequence-matcher.xml:148(primary)
msgid "CutSequenceMatcher"
msgstr ""

#: xml/cut-sequence-matcher.xml:22(link) xml/cut-sequence-matcher.xml:28(link)
#: xml/cut-sequence-matcher.xml:31(link) xml/cut-sequence-matcher.xml:62(link)
#: xml/cut-sequence-matcher.xml:93(title)
#: xml/cut-sequence-matcher.xml:94(primary)
msgid "CutSequenceMatchInfo"
msgstr ""

#: xml/cut-sequence-matcher.xml:23(link) xml/cut-sequence-matcher.xml:32(link)
#: xml/cut-sequence-matcher.xml:38(link)
#: xml/cut-sequence-matcher.xml:104(title)
#: xml/cut-sequence-matcher.xml:105(primary)
msgid "CutSequenceMatchOperation"
msgstr ""

#: xml/cut-sequence-matcher.xml:24(link)
msgid "*CutJunkFilterFunc"
msgstr ""

#: xml/cut-sequence-matcher.xml:26(link) xml/cut-sequence-matcher.xml:33(link)
#: xml/cut-sequence-matcher.xml:136(primary)
msgid "CutSequenceMatchOperationType"
msgstr ""

#: xml/cut-sequence-matcher.xml:28(link)
#: xml/cut-sequence-matcher.xml:157(primary)
msgid "cut_sequence_match_info_new"
msgstr ""

#: xml/cut-sequence-matcher.xml:31(link)
#: xml/cut-sequence-matcher.xml:179(primary)
msgid "cut_sequence_match_info_free"
msgstr ""

#: xml/cut-sequence-matcher.xml:32(link)
#: xml/cut-sequence-matcher.xml:191(primary)
msgid "cut_sequence_match_operation_new"
msgstr ""

#: xml/cut-sequence-matcher.xml:38(link)
#: xml/cut-sequence-matcher.xml:222(primary)
msgid "cut_sequence_match_operation_free"
msgstr ""

#: xml/cut-sequence-matcher.xml:39(link)
#: xml/cut-sequence-matcher.xml:234(primary)
msgid "cut_sequence_matcher_new"
msgstr ""

#: xml/cut-sequence-matcher.xml:39(link) xml/cut-sequence-matcher.xml:40(link)
msgid "GSequence"
msgstr ""

#: xml/cut-sequence-matcher.xml:41(link)
msgid "GSequenceIterCompareFunc"
msgstr ""

#: xml/cut-sequence-matcher.xml:43(link)
msgid "GHashFunc"
msgstr ""

#: xml/cut-sequence-matcher.xml:44(link) xml/cut-value-equal.xml:27(link)
msgid "GEqualFunc"
msgstr ""

#: xml/cut-sequence-matcher.xml:45(link) xml/cut-sequence-matcher.xml:51(link)
#: xml/cut-sequence-matcher.xml:58(link)
#: xml/cut-sequence-matcher.xml:118(primary)
msgid "CutJunkFilterFunc"
msgstr ""

#: xml/cut-sequence-matcher.xml:47(link)
#: xml/cut-sequence-matcher.xml:276(primary)
msgid "cut_sequence_matcher_char_new"
msgstr ""

#: xml/cut-sequence-matcher.xml:49(link)
#: xml/cut-sequence-matcher.xml:294(primary)
msgid "cut_sequence_matcher_char_new_full"
msgstr ""

#: xml/cut-sequence-matcher.xml:53(link)
#: xml/cut-sequence-matcher.xml:320(primary)
msgid "cut_sequence_matcher_string_new"
msgstr ""

#: xml/cut-sequence-matcher.xml:55(link)
#: xml/cut-sequence-matcher.xml:338(primary)
msgid "cut_sequence_matcher_string_new_full"
msgstr ""

#: xml/cut-sequence-matcher.xml:60(link)
#: xml/cut-sequence-matcher.xml:365(primary)
msgid "cut_sequence_matcher_get_to_index"
msgstr ""

#: xml/cut-sequence-matcher.xml:62(link)
#: xml/cut-sequence-matcher.xml:383(primary)
msgid "cut_sequence_matcher_get_longest_match"
msgstr ""

#: xml/cut-sequence-matcher.xml:68(link)
#: xml/cut-sequence-matcher.xml:414(primary)
msgid "cut_sequence_matcher_get_matches"
msgstr ""

#: xml/cut-sequence-matcher.xml:69(link)
#: xml/cut-sequence-matcher.xml:428(primary)
msgid "cut_sequence_matcher_get_blocks"
msgstr ""

#: xml/cut-sequence-matcher.xml:70(link)
#: xml/cut-sequence-matcher.xml:442(primary)
msgid "cut_sequence_matcher_get_operations"
msgstr ""

#: xml/cut-sequence-matcher.xml:71(link)
#: xml/cut-sequence-matcher.xml:456(primary)
msgid "cut_sequence_matcher_get_ratio"
msgstr ""

#: xml/cut-sequence-matcher.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"                    <placeholder-2/>;\n"
"<placeholder-3/>            (<placeholder-4/>)                (<placeholder-5/> data,\n"
"                                                         <placeholder-6/> user_data);\n"
"enum                <placeholder-7/>;\n"
"                    <placeholder-8/>;\n"
"<placeholder-9/>* <placeholder-10/>       (<placeholder-11/> begin,\n"
"                                                         <placeholder-12/> end,\n"
"                                                         <placeholder-13/> size);\n"
"<placeholder-14/>                <placeholder-15/>        (<placeholder-16/> *info);\n"
"<placeholder-17/>* <placeholder-18/>\n"
"                                                        (<placeholder-19/> type,\n"
"                                                         <placeholder-20/> from_begin,\n"
"                                                         <placeholder-21/> from_end,\n"
"                                                         <placeholder-22/> to_begin,\n"
"                                                         <placeholder-23/> to_end);\n"
"<placeholder-24/>                <placeholder-25/>   (<placeholder-26/> *operation);\n"
"<placeholder-27/>* <placeholder-28/>            (<placeholder-29/> *from,\n"
"                                                         <placeholder-30/> *to,\n"
"                                                         <placeholder-31/> compare_func,\n"
"                                                         <placeholder-32/> compare_func_user_data,\n"
"                                                         <placeholder-33/> content_hash_func,\n"
"                                                         <placeholder-34/> content_equal_func,\n"
"                                                         <placeholder-35/> junk_filter_func,\n"
"                                                         <placeholder-36/> user_data);\n"
"<placeholder-37/>* <placeholder-38/>       (const <placeholder-39/> *from,\n"
"                                                         const <placeholder-40/> *to);\n"
"<placeholder-41/>* <placeholder-42/>  (const <placeholder-43/> *from,\n"
"                                                         const <placeholder-44/> *to,\n"
"                                                         <placeholder-45/> junk_filter_func,\n"
"                                                         <placeholder-46/> junk_filter_func_user_data);\n"
"<placeholder-47/>* <placeholder-48/>     (<placeholder-49/> **from,\n"
"                                                         <placeholder-50/> **to);\n"
"<placeholder-51/>* <placeholder-52/>\n"
"                                                        (<placeholder-53/> **from,\n"
"                                                         <placeholder-54/> **to,\n"
"                                                         <placeholder-55/> junk_filter_func,\n"
"                                                         <placeholder-56/> junk_filter_func_user_data);\n"
"const <placeholder-57/>*        <placeholder-58/>   (<placeholder-59/> *matcher,\n"
"                                                         <placeholder-60/> to_content);\n"
"<placeholder-61/>* <placeholder-62/>\n"
"                                                        (<placeholder-63/> *matcher,\n"
"                                                         <placeholder-64/> from_begin,\n"
"                                                         <placeholder-65/> from_end,\n"
"                                                         <placeholder-66/> to_begin,\n"
"                                                         <placeholder-67/> to_end);\n"
"const <placeholder-68/>*        <placeholder-69/>    (<placeholder-70/> *matcher);\n"
"const <placeholder-71/>*        <placeholder-72/>     (<placeholder-73/> *matcher);\n"
"const <placeholder-74/>*        <placeholder-75/> (<placeholder-76/> *matcher);\n"
"<placeholder-77/>             <placeholder-78/>      (<placeholder-79/> *matcher);\n"
msgstr ""

#: xml/cut-sequence-matcher.xml:94(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    gint from_index;\n"
"    gint to_index;\n"
"    gint size;\n"
"} CutSequenceMatchInfo;\n"
msgstr ""

#: xml/cut-sequence-matcher.xml:105(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutSequenceMatchOperationType type;\n"
"    gint from_begin;\n"
"    gint from_end;\n"
"    gint to_begin;\n"
"    gint to_end;\n"
"} CutSequenceMatchOperation;\n"
msgstr ""

#: xml/cut-sequence-matcher.xml:117(title)
msgid "CutJunkFilterFunc ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:118(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            (*CutJunkFilterFunc)                (<link linkend=\"gpointer\">gpointer</link> data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/cut-sequence-matcher.xml:135(title)
msgid "enum CutSequenceMatchOperationType"
msgstr ""

#: xml/cut-sequence-matcher.xml:136(programlisting)
#, no-wrap
msgid ""
"typedef enum {\n"
"    CUT_SEQUENCE_MATCH_OPERATION_EQUAL,\n"
"    CUT_SEQUENCE_MATCH_OPERATION_INSERT,\n"
"    CUT_SEQUENCE_MATCH_OPERATION_DELETE,\n"
"    CUT_SEQUENCE_MATCH_OPERATION_REPLACE\n"
"} CutSequenceMatchOperationType;\n"
msgstr ""

#: xml/cut-sequence-matcher.xml:148(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutSequenceMatcher;\n"
msgstr ""

#: xml/cut-sequence-matcher.xml:156(title)
msgid "cut_sequence_match_info_new ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:157(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatchInfo\">CutSequenceMatchInfo</link>* cut_sequence_match_info_new       (<link linkend=\"gint\">gint</link> begin,\n"
"                                                         <link linkend=\"gint\">gint</link> end,\n"
"                                                         <link linkend=\"gint\">gint</link> size);"
msgstr ""

#: xml/cut-sequence-matcher.xml:163(term)
msgid "<parameter>begin</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:166(term)
msgid "<parameter>end</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:169(term)
msgid "<parameter>size</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:178(title)
msgid "cut_sequence_match_info_free ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:179(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_sequence_match_info_free        (<link linkend=\"CutSequenceMatchInfo\">CutSequenceMatchInfo</link> *info);"
msgstr ""

#: xml/cut-sequence-matcher.xml:183(term)
msgid "<parameter>info</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:190(title)
msgid "cut_sequence_match_operation_new ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:191(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatchOperation\">CutSequenceMatchOperation</link>* cut_sequence_match_operation_new\n"
"                                                        (<link linkend=\"CutSequenceMatchOperationType\">CutSequenceMatchOperationType</link> type,\n"
"                                                         <link linkend=\"gint\">gint</link> from_begin,\n"
"                                                         <link linkend=\"gint\">gint</link> from_end,\n"
"                                                         <link linkend=\"gint\">gint</link> to_begin,\n"
"                                                         <link linkend=\"gint\">gint</link> to_end);"
msgstr ""

#: xml/cut-sequence-matcher.xml:203(term)
#: xml/cut-sequence-matcher.xml:395(term)
msgid "<parameter>from_begin</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:206(term)
#: xml/cut-sequence-matcher.xml:398(term)
msgid "<parameter>from_end</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:209(term)
#: xml/cut-sequence-matcher.xml:401(term)
msgid "<parameter>to_begin</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:212(term)
#: xml/cut-sequence-matcher.xml:404(term)
msgid "<parameter>to_end</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:221(title)
msgid "cut_sequence_match_operation_free ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:222(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_sequence_match_operation_free   (<link linkend=\"CutSequenceMatchOperation\">CutSequenceMatchOperation</link> *operation);"
msgstr ""

#: xml/cut-sequence-matcher.xml:226(term)
msgid "<parameter>operation</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:233(title)
msgid "cut_sequence_matcher_new ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:234(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link>* cut_sequence_matcher_new            (<link linkend=\"GSequence\">GSequence</link> *from,\n"
"                                                         <link linkend=\"GSequence\">GSequence</link> *to,\n"
"                                                         <link linkend=\"GSequenceIterCompareFunc\">GSequenceIterCompareFunc</link> compare_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> compare_func_user_data,\n"
"                                                         <link linkend=\"GHashFunc\">GHashFunc</link> content_hash_func,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> content_equal_func,\n"
"                                                         <link linkend=\"CutJunkFilterFunc\">CutJunkFilterFunc</link> junk_filter_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/cut-sequence-matcher.xml:254(term)
msgid "<parameter>compare_func_user_data</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:257(term)
msgid "<parameter>content_hash_func</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:260(term)
msgid "<parameter>content_equal_func</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:263(term)
#: xml/cut-sequence-matcher.xml:307(term)
#: xml/cut-sequence-matcher.xml:352(term)
msgid "<parameter>junk_filter_func</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:275(title)
msgid "cut_sequence_matcher_char_new ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:276(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link>* cut_sequence_matcher_char_new       (const <link linkend=\"gchar\">gchar</link> *from,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *to);"
msgstr ""

#: xml/cut-sequence-matcher.xml:293(title)
msgid "cut_sequence_matcher_char_new_full ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:294(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link>* cut_sequence_matcher_char_new_full  (const <link linkend=\"gchar\">gchar</link> *from,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *to,\n"
"                                                         <link linkend=\"CutJunkFilterFunc\">CutJunkFilterFunc</link> junk_filter_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> junk_filter_func_user_data);"
msgstr ""

#: xml/cut-sequence-matcher.xml:310(term)
#: xml/cut-sequence-matcher.xml:355(term)
msgid "<parameter>junk_filter_func_user_data</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:319(title)
msgid "cut_sequence_matcher_string_new ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:320(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link>* cut_sequence_matcher_string_new     (<link linkend=\"gchar\">gchar</link> **from,\n"
"                                                         <link linkend=\"gchar\">gchar</link> **to);"
msgstr ""

#: xml/cut-sequence-matcher.xml:337(title)
msgid "cut_sequence_matcher_string_new_full ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:338(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link>* cut_sequence_matcher_string_new_full\n"
"                                                        (<link linkend=\"gchar\">gchar</link> **from,\n"
"                                                         <link linkend=\"gchar\">gchar</link> **to,\n"
"                                                         <link linkend=\"CutJunkFilterFunc\">CutJunkFilterFunc</link> junk_filter_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> junk_filter_func_user_data);"
msgstr ""

#: xml/cut-sequence-matcher.xml:364(title)
msgid "cut_sequence_matcher_get_to_index ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:365(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"GList\">GList</link>*        cut_sequence_matcher_get_to_index   (<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link> *matcher,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> to_content);"
msgstr ""

#: xml/cut-sequence-matcher.xml:370(term)
#: xml/cut-sequence-matcher.xml:392(term)
#: xml/cut-sequence-matcher.xml:418(term)
#: xml/cut-sequence-matcher.xml:432(term)
#: xml/cut-sequence-matcher.xml:446(term)
#: xml/cut-sequence-matcher.xml:460(term)
msgid "<parameter>matcher</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:373(term)
msgid "<parameter>to_content</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:382(title)
msgid "cut_sequence_matcher_get_longest_match ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:383(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatchInfo\">CutSequenceMatchInfo</link>* cut_sequence_matcher_get_longest_match\n"
"                                                        (<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link> *matcher,\n"
"                                                         <link linkend=\"gint\">gint</link> from_begin,\n"
"                                                         <link linkend=\"gint\">gint</link> from_end,\n"
"                                                         <link linkend=\"gint\">gint</link> to_begin,\n"
"                                                         <link linkend=\"gint\">gint</link> to_end);"
msgstr ""

#: xml/cut-sequence-matcher.xml:413(title)
msgid "cut_sequence_matcher_get_matches ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:414(programlisting)
#, no-wrap
msgid "const <link linkend=\"GList\">GList</link>*        cut_sequence_matcher_get_matches    (<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link> *matcher);"
msgstr ""

#: xml/cut-sequence-matcher.xml:427(title)
msgid "cut_sequence_matcher_get_blocks ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:428(programlisting)
#, no-wrap
msgid "const <link linkend=\"GList\">GList</link>*        cut_sequence_matcher_get_blocks     (<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link> *matcher);"
msgstr ""

#: xml/cut-sequence-matcher.xml:441(title)
msgid "cut_sequence_matcher_get_operations ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:442(programlisting)
#, no-wrap
msgid "const <link linkend=\"GList\">GList</link>*        cut_sequence_matcher_get_operations (<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link> *matcher);"
msgstr ""

#: xml/cut-sequence-matcher.xml:455(title)
msgid "cut_sequence_matcher_get_ratio ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:456(programlisting)
#, no-wrap
msgid "<link linkend=\"gdouble\">gdouble</link>             cut_sequence_matcher_get_ratio      (<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link> *matcher);"
msgstr ""

#: xml/cut-stream-parser.xml:7(refentrytitle)
#: xml/cut-stream-parser.xml:13(refname) xml/cut-stream-parser.xml:22(link)
#: xml/cut-stream-parser.xml:23(link) xml/cut-stream-parser.xml:24(link)
#: xml/cut-stream-parser.xml:25(link) xml/cut-stream-parser.xml:50(title)
#: xml/cut-stream-parser.xml:51(primary)
msgid "CutStreamParser"
msgstr ""

#: xml/cut-stream-parser.xml:23(link) xml/cut-stream-parser.xml:60(primary)
msgid "cut_stream_parser_new"
msgstr ""

#: xml/cut-stream-parser.xml:24(link) xml/cut-stream-parser.xml:74(primary)
msgid "cut_test_result_parser_new"
msgstr ""

#: xml/cut-stream-parser.xml:25(link) xml/cut-stream-parser.xml:85(primary)
msgid "cut_stream_parser_parse"
msgstr ""

#: xml/cut-stream-parser.xml:27(link)
msgid "gsize"
msgstr ""

#: xml/cut-stream-parser.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*    <placeholder-3/>               (<placeholder-4/> *run_context);\n"
"<placeholder-5/>*    <placeholder-6/>          (void);\n"
"<placeholder-7/>            <placeholder-8/>             (<placeholder-9/> *parser,\n"
"                                                         const <placeholder-10/> *text,\n"
"                                                         <placeholder-11/> text_len,\n"
"                                                         <placeholder-12/> **error);\n"
msgstr ""

#: xml/cut-stream-parser.xml:51(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutStreamParser;\n"
msgstr ""

#: xml/cut-stream-parser.xml:59(title)
msgid "cut_stream_parser_new ()"
msgstr ""

#: xml/cut-stream-parser.xml:60(programlisting)
#, no-wrap
msgid "<link linkend=\"CutStreamParser\">CutStreamParser</link>*    cut_stream_parser_new               (<link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-stream-parser.xml:73(title)
msgid "cut_test_result_parser_new ()"
msgstr ""

#: xml/cut-stream-parser.xml:74(programlisting)
#, no-wrap
msgid "<link linkend=\"CutStreamParser\">CutStreamParser</link>*    cut_test_result_parser_new          (void);"
msgstr ""

#: xml/cut-stream-parser.xml:84(title)
msgid "cut_stream_parser_parse ()"
msgstr ""

#: xml/cut-stream-parser.xml:85(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_stream_parser_parse             (<link linkend=\"CutStreamParser\">CutStreamParser</link> *parser,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *text,\n"
"                                                         <link linkend=\"gsize\">gsize</link> text_len,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/cut-stream-parser.xml:92(term)
msgid "<parameter>parser</parameter>&nbsp;:"
msgstr ""

#: xml/cut-stream-parser.xml:95(term)
msgid "<parameter>text</parameter>&nbsp;:"
msgstr ""

#: xml/cut-stream-parser.xml:98(term)
msgid "<parameter>text_len</parameter>&nbsp;:"
msgstr ""

#: xml/cut-streamer-factory-builder.xml:7(refentrytitle)
#: xml/cut-streamer-factory-builder.xml:13(refname)
#: xml/cut-streamer-factory-builder.xml:22(link)
#: xml/cut-streamer-factory-builder.xml:44(title)
#: xml/cut-streamer-factory-builder.xml:45(primary)
msgid "CutStreamerFactoryBuilder"
msgstr ""

#: xml/cut-streamer-factory-builder.xml:45(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutFactoryBuilder object;\n"
"} CutStreamerFactoryBuilder;\n"
msgstr ""

#: xml/cut-streamer.xml:7(refentrytitle) xml/cut-streamer.xml:13(refname)
#: xml/cut-streamer.xml:22(link) xml/cut-streamer.xml:23(link)
#: xml/cut-streamer.xml:47(title) xml/cut-streamer.xml:48(primary)
msgid "CutStreamer"
msgstr ""

#: xml/cut-streamer.xml:23(link) xml/cut-streamer.xml:57(primary)
msgid "cut_streamer_new"
msgstr ""

#: xml/cut-streamer.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*        <placeholder-3/>                    (const <placeholder-4/> *name,\n"
"                                                         const <placeholder-5/> *first_property,\n"
"                                                         ...);\n"
msgstr ""

#: xml/cut-streamer.xml:48(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutStreamer;\n"
msgstr ""

#: xml/cut-streamer.xml:56(title)
msgid "cut_streamer_new ()"
msgstr ""

#: xml/cut-streamer.xml:57(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutStreamer\">CutStreamer</link>*        cut_streamer_new                    (const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-test-runner.xml:7(refentrytitle)
#: xml/cut-test-runner.xml:13(refname) xml/cut-test-runner.xml:22(link)
#: xml/cut-test-runner.xml:46(primary)
msgid "CutTestRunner"
msgstr ""

#: xml/cut-test-runner.xml:23(link) xml/cut-test-runner.xml:55(primary)
msgid "cut_test_runner_new"
msgstr ""

#: xml/cut-test-runner.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"struct              <placeholder-1/>;\n"
"<placeholder-2/>*      <placeholder-3/>                 (void);\n"
msgstr ""

#: xml/cut-test-runner.xml:45(title)
msgid "struct CutTestRunner"
msgstr ""

#: xml/cut-test-runner.xml:46(programlisting)
#, no-wrap
msgid ""
"struct CutTestRunner {\n"
"    CutRunContext object;\n"
"};\n"
msgstr ""

#: xml/cut-test-runner.xml:54(title)
msgid "cut_test_runner_new ()"
msgstr ""

#: xml/cut-test-runner.xml:55(programlisting)
#, no-wrap
msgid "<link linkend=\"CutRunContext\">CutRunContext</link>*      cut_test_runner_new                 (void);"
msgstr ""

#: xml/cut-ui-factory-builder.xml:7(refentrytitle)
#: xml/cut-ui-factory-builder.xml:13(refname)
#: xml/cut-ui-factory-builder.xml:22(link)
#: xml/cut-ui-factory-builder.xml:44(title)
#: xml/cut-ui-factory-builder.xml:45(primary)
msgid "CutUIFactoryBuilder"
msgstr ""

#: xml/cut-ui-factory-builder.xml:45(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutFactoryBuilder object;\n"
"} CutUIFactoryBuilder;\n"
msgstr ""

#: xml/cut-ui.xml:7(refentrytitle) xml/cut-ui.xml:13(refname)
#: xml/cut-ui.xml:22(link) xml/cut-ui.xml:28(link) xml/cut-ui.xml:51(title)
#: xml/cut-ui.xml:52(primary)
msgid "CutUI"
msgstr ""

#: xml/cut-ui.xml:23(link) xml/cut-ui.xml:58(primary)
msgid "cut_ui_init"
msgstr ""

#: xml/cut-ui.xml:24(link) xml/cut-ui.xml:64(primary)
msgid "cut_ui_quit"
msgstr ""

#: xml/cut-ui.xml:25(link) xml/cut-ui.xml:70(primary)
msgid "cut_ui_new"
msgstr ""

#: xml/cut-ui.xml:28(link) xml/cut-ui.xml:92(primary)
msgid "cut_ui_run"
msgstr ""

#: xml/cut-ui.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>                <placeholder-3/>                         (void);\n"
"<placeholder-4/>                <placeholder-5/>                         (void);\n"
"<placeholder-6/>*            <placeholder-7/>                          (const <placeholder-8/> *name,\n"
"                                                         const <placeholder-9/> *first_property,\n"
"                                                         ...);\n"
"<placeholder-10/>            <placeholder-11/>                          (<placeholder-12/> *ui,\n"
"                                                         <placeholder-13/> *run_context);\n"
msgstr ""

#: xml/cut-ui.xml:52(programlisting)
#, no-wrap
msgid "typedef struct _CutUI CutUI;"
msgstr ""

#: xml/cut-ui.xml:57(title)
msgid "cut_ui_init ()"
msgstr ""

#: xml/cut-ui.xml:58(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_ui_init                         (void);"
msgstr ""

#: xml/cut-ui.xml:63(title)
msgid "cut_ui_quit ()"
msgstr ""

#: xml/cut-ui.xml:64(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_ui_quit                         (void);"
msgstr ""

#: xml/cut-ui.xml:69(title)
msgid "cut_ui_new ()"
msgstr ""

#: xml/cut-ui.xml:70(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GObject\">GObject</link>*            cut_ui_new                          (const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-ui.xml:91(title)
msgid "cut_ui_run ()"
msgstr ""

#: xml/cut-ui.xml:92(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_ui_run                          (<link linkend=\"CutUI\">CutUI</link> *ui,\n"
"                                                         <link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-ui.xml:97(term)
msgid "<parameter>ui</parameter>&nbsp;:"
msgstr ""

#: xml/cut-value-equal.xml:7(refentrytitle)
#: xml/cut-value-equal.xml:13(refname)
msgid "cut-value-equal"
msgstr ""

#: xml/cut-value-equal.xml:22(link) xml/cut-value-equal.xml:50(primary)
msgid "cut_value_equal_init"
msgstr ""

#: xml/cut-value-equal.xml:23(link) xml/cut-value-equal.xml:56(primary)
msgid "cut_value_equal"
msgstr ""

#: xml/cut-value-equal.xml:23(link) xml/cut-value-equal.xml:24(link)
msgid "GValue"
msgstr ""

#: xml/cut-value-equal.xml:25(link) xml/cut-value-equal.xml:74(primary)
msgid "cut_value_register_equal_func"
msgstr ""

#: xml/cut-value-equal.xml:25(link) xml/cut-value-equal.xml:26(link)
msgid "GType"
msgstr ""

#: xml/cut-value-equal.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                (void);\n"
"<placeholder-3/>            <placeholder-4/>                     (const <placeholder-5/> *value1,\n"
"                                                         const <placeholder-6/> *value2);\n"
"<placeholder-7/>                <placeholder-8/>       (<placeholder-9/> type1,\n"
"                                                         <placeholder-10/> type2,\n"
"                                                         <placeholder-11/> equal_func);\n"
msgstr ""

#: xml/cut-value-equal.xml:49(title)
msgid "cut_value_equal_init ()"
msgstr ""

#: xml/cut-value-equal.xml:50(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_value_equal_init                (void);"
msgstr ""

#: xml/cut-value-equal.xml:55(title)
msgid "cut_value_equal ()"
msgstr ""

#: xml/cut-value-equal.xml:56(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_value_equal                     (const <link linkend=\"GValue\">GValue</link> *value1,\n"
"                                                         const <link linkend=\"GValue\">GValue</link> *value2);"
msgstr ""

#: xml/cut-value-equal.xml:61(term)
msgid "<parameter>value1</parameter>&nbsp;:"
msgstr ""

#: xml/cut-value-equal.xml:64(term)
msgid "<parameter>value2</parameter>&nbsp;:"
msgstr ""

#: xml/cut-value-equal.xml:73(title)
msgid "cut_value_register_equal_func ()"
msgstr ""

#: xml/cut-value-equal.xml:74(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_value_register_equal_func       (<link linkend=\"GType\">GType</link> type1,\n"
"                                                         <link linkend=\"GType\">GType</link> type2,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_func);"
msgstr ""

#: xml/cut-value-equal.xml:80(term)
msgid "<parameter>type1</parameter>&nbsp;:"
msgstr ""

#: xml/cut-value-equal.xml:83(term)
msgid "<parameter>type2</parameter>&nbsp;:"
msgstr ""

#: xml/cut-value-equal.xml:86(term)
msgid "<parameter>equal_func</parameter>&nbsp;:"
msgstr ""

#: xml/cut-xml-parser.xml:7(refentrytitle) xml/cut-xml-parser.xml:13(refname)
msgid "cut-xml-parser"
msgstr ""

#: xml/cut-xml-parser.xml:22(link) xml/cut-xml-parser.xml:46(primary)
msgid "cut_xml_parse_test_result_xml"
msgstr ""

#: xml/cut-xml-parser.xml:23(link)
msgid "gssize"
msgstr ""

#: xml/cut-xml-parser.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>*      <placeholder-2/>       (const <placeholder-3/> *xml,\n"
"                                                         <placeholder-4/> len);\n"
msgstr ""

#: xml/cut-xml-parser.xml:45(title)
msgid "cut_xml_parse_test_result_xml ()"
msgstr ""

#: xml/cut-xml-parser.xml:46(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutTestResult\">CutTestResult</link>*      cut_xml_parse_test_result_xml       (const <link linkend=\"gchar\">gchar</link> *xml,\n"
"                                                         <link linkend=\"gssize\">gssize</link> len);"
msgstr ""

#: xml/cut-xml-parser.xml:51(term)
msgid "<parameter>xml</parameter>&nbsp;:"
msgstr ""

#: xml/cut-xml-parser.xml:54(term)
msgid "<parameter>len</parameter>&nbsp;:"
msgstr ""

#: xml/cutter.xml:7(refentrytitle) xml/cutter.xml:13(refname)
msgid "Cutter"
msgstr ""

#: xml/cutter.xml:14(refpurpose)
msgid "An Unit Testing Framework for C."
msgstr "C言語用単体テストフレームワーク"

#: xml/cutter.xml:22(link) xml/cutter.xml:146(primary)
msgid "setup"
msgstr ""

#: xml/cutter.xml:23(link) xml/cutter.xml:155(primary)
msgid "teardown"
msgstr ""

#: xml/cutter.xml:24(link) xml/cutter.xml:165(primary)
msgid "startup"
msgstr ""

#: xml/cutter.xml:25(link) xml/cutter.xml:175(primary)
msgid "shutdown"
msgstr ""

#: xml/cutter.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                               (void);\n"
"<placeholder-3/>                <placeholder-4/>                            (void);\n"
"<placeholder-5/>                <placeholder-6/>                             (void);\n"
"<placeholder-7/>                <placeholder-8/>                            (void);\n"
msgstr ""

#: xml/cutter.xml:49(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;cutter.h&gt;\n"
"#include \"my-stack.h\"\n"
"\n"
"void\n"
"test_my_stack (void)\n"
"{\n"
"    MyStack *stack = my_stack_new();\n"
"\n"
"    cut_assert_not_null(stack);\n"
"    cut_assert(my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(0, my_stack_get_size(stack));\n"
"\n"
"    my_stack_push(stack, 10);\n"
"    cut_assert(!my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(1, my_stack_get_size(stack));\n"
"\n"
"    my_stack_push(stack, 20);\n"
"    cut_assert_equal_int(2, my_stack_get_size(stack));\n"
"\n"
"    cut_assert_equal(20, my_stack_pop(stack));\n"
"    cut_assert(!my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(1, my_stack_get_size(stack));\n"
"\n"
"    cut_assert_equal(10, my_stack_pop(stack));\n"
"    cut_assert(my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(0, my_stack_get_size(stack));\n"
"}\n"
msgstr ""

#: xml/cutter.xml:43(para)
msgid ""
"Easy to use. Cutter doesn't introduce any magic macros like "
"CUTTER_DEFINE_TEST_START and CUTTER_DEFINE_TEST_END into your test program. "
"You can write your test program like normal program. You only use <link "
"linkend=\"cut-assert-XXX\"><function>cut_assert_XXX()</function></link> to "
"check that your program works as you expect. <placeholder-1/>"
msgstr ""
"簡単に使えます。Cutterではテストプログラム中にCUTTER_DEFINE_TEST_STARTや"
"CUTTER_DEFINE_TEST_ENDなどといった不思議なマクロを使う必要がありません。通常"
"のプログラムと同じようにテストプログラムを書くことができます。ただし、プログ"
"ラムが期待した通り動作していることを検証するために<link linkend=\"cut-assert-"
"XXX\"><function>cut_assert_XXX()</function></link>を使う必要があります。"
"<placeholder-1/>"

#: xml/cutter.xml:83(programlisting)
#, no-wrap
msgid ""
"\n"
"...........................................................\n"
"\n"
"Finished in 0.213021 seconds\n"
"\n"
"59 test(s), 246 assertion(s), 0 failure(s), 0 error(s), 0 pending(s), 0 notification(s)\n"
msgstr ""

#: xml/cutter.xml:79(para)
msgid ""
"Simple but useful output. Cutter works quietly if tests are running without "
"any problems by default. The following is an output of self test: "
"<placeholder-1/> Cutter just outputs \".\" for a passed test and a summary "
"at the end. Cutter doesn't output each test name, how many assertions are "
"used for a test and so because we don't need the information on success."
msgstr ""
"簡素ですが有用な情報を出力をします。Cutterはデフォルトではテストが問題なく動"
"いているときは静かに動きます。以下は、Cutter自身のテストの出力です。"
"<placeholder-1/>Cutterはテストが1つパスしたことを示すためには「.」だけを出力"
"し、最後にテスト結果の要約を出力します。Cutterは各テストの名前や何個検証した"
"かなどの情報は表示しません。これは、テスト成功時にはこれらの情報は必要ないか"
"らです。"

#: xml/cutter.xml:96(programlisting)
#, no-wrap
msgid ""
"\n"
".....................F.....................................\n"
"\n"
"1) Failure: test_error\n"
"&lt;\"Strange\" == cut_test_result_get_test_name(result)&gt;\n"
"expected: &lt;Strange!!!&gt;\n"
" but was: &lt;dummy-error-test&gt;\n"
"test/test-cut-assertions.c:240: cut_assert_test_result()\n"
"\n"
"Finished in 0.223657 seconds\n"
"\n"
"59 test(s), 242 assertion(s), 1 failure(s), 0 error(s), 0 pending(s), 0 notification(s)\n"
msgstr ""

#: xml/cutter.xml:111(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal_string(\"Strange!!!\", cut_test_result_get_test_name(result));\n"
msgstr ""

#: xml/cutter.xml:94(para)
msgid ""
"Cutter outputs many information on failure: <placeholder-1/> The above "
"result is happened because I add a strange expected staring in Cutter's self "
"test: <placeholder-2/> The strange assertion is written in the 240th line in "
"test/test-cut-assertions.c and the line is in the <link linkend=\"cut-assert-"
"test-result\"><function>cut_assert_test_result()</function></link> function. "
"The function is called in test_error test. We expected "
"cut_test_result_get_test_name(result) should return \"Strange!!!\" but got "
"\"dummy-error-name\". We can get the above information from Cutter output. "
"This will help your debug."
msgstr ""
"Cutterは失敗時にはたくさんの情報を出力します。<placeholder-1/>上記の結果は"
"Cutterの自己テストにおかしな期待値を追加したために起きています。<placeholder-"
"2/>おかしな検証はtest/test-cut-assertions.cの240行目に書かれていて、その行は"
"<link linkend=\"cut-assert-test-result\"><function>cut_assert_test_result()</"
"function></link>関数内にあります。この関数はtest_errorテストから呼び出されて"
"います。cut_test_result_get_test_name(result)が\"Strange!!!\"を返すことを期待"
"していますが、実際は\"dummy-error-name\"が返ってきています。このような情報を"
"上記のCutterの出力から得ることができます。これはデバッグの手助けになるでしょ"
"う。"

#: xml/cutter.xml:122(para)
msgid ""
"Cutter's output format is pragmatic. ' but was:' is indented and aligned "
"with the above 'expected:'. This helps that you find difference between "
"expected value and actual value by your eyes easily. The problem line is "
"formated as 'FILENAME:LINE: FUNCTION' to integrate Emacs. In Emacs's "
"compilation-mode, if the format is appeared in *compilation* buffer, we can "
"jump to FILENAME at LINE with next-error command. (C-x `) This helps that "
"you find the problem line rapidly."
msgstr ""
"Cutterの出力形式は実用的です。' but was:'はその上の'expected:'と並ぶようにイ"
"ンデントされています。これは期待値と実測値をパッと見て簡単に比較できるように"
"するためです。問題のあった行は「ファイル名:行: 関数」というように整形されてい"
"ます。これはEmacsと連携するためです。Emacsのcompilation-modeではこの形式が"
"*compilation*バッファに表れると、next-errorコマンド(C-x `)で「ファイル名」の"
"「行」へジャンプすることができます。これは問題行を素早く見つける手助けをしま"
"す。"

#: xml/cutter.xml:132(para)
msgid "Cutter supports not only easy test writing but also easy debugging."
msgstr ""
"Cutterは簡単にテストを書くことを支援するだけではなく、簡単にデバッグをできる"
"ことも支援します。"

#: xml/cutter.xml:39(para)
msgid ""
"Cutter is an Unit Testing Framework for C and has the following features: "
"<placeholder-1/>"
msgstr ""
"Cutterは以下のような特徴をもったC用の単体テストフレームワークです。"
"<placeholder-1/>"

#: xml/cutter.xml:145(title)
msgid "setup ()"
msgstr ""

#: xml/cutter.xml:146(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                setup                               (void);"
msgstr ""

#: xml/cutter.xml:147(para)
msgid ""
"If you define <link linkend=\"setup\"><function>setup()</function></link> in "
"your test program, cutter will call your <link linkend=\"setup"
"\"><function>setup()</function></link> before each your test is run."
msgstr ""
"テストプログラム中で<link linkend=\"setup\"><function>setup()</function></"
"link>を定義していたら、cutterは各テストが実行される前に定義された<link "
"linkend=\"setup\"><function>setup()</function></link>を呼びだします。"

#: xml/cutter.xml:154(title)
msgid "teardown ()"
msgstr ""

#: xml/cutter.xml:155(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                teardown                            (void);"
msgstr ""

#: xml/cutter.xml:156(para)
msgid ""
"If you define <link linkend=\"teardown\"><function>teardown()</function></"
"link> in your test program, cutter will call your <link linkend=\"teardown"
"\"><function>teardown()</function></link> after each your test is run even "
"if a test is failed."
msgstr ""
"テストプログラム中で<link linkend=\"teardown\"><function>teardown()</"
"function></link>を定義していたら、cutterは各テストの後に、たとえテストが失敗"
"していた時でも、<link linkend=\"teardown\"><function>teardown()</function></"
"link>を呼びだします。"

#: xml/cutter.xml:164(title)
msgid "startup ()"
msgstr ""

#: xml/cutter.xml:165(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                startup                             (void);"
msgstr ""

#: xml/cutter.xml:166(para)
msgid ""
"If you define <link linkend=\"startup\"><function>startup()</function></"
"link> in your test program, cutter will call your <link linkend=\"startup"
"\"><function>startup()</function></link> before each your test case is run."
msgstr ""
"テストプログラム中で<link linkend=\"startup\"><function>startup()</"
"function></link>を定義していたら、cutterは各テストケースが実行される前に定義"
"された<link linkend=\"startup\"><function>startup()</function></link>を呼びだ"
"します。"

#: xml/cutter.xml:174(title)
msgid "shutdown ()"
msgstr ""

#: xml/cutter.xml:175(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                shutdown                            (void);"
msgstr ""

#: xml/cutter.xml:176(para)
msgid ""
"If you define <link linkend=\"shutdown\"><function>shutdown()</function></"
"link> in your test program, cutter will call your <link linkend=\"shutdown"
"\"><function>shutdown()</function></link> after each your test case is run."
msgstr ""
"テストプログラム中で<link linkend=\"shutdown\"><function>shutdown()</"
"function></link>を定義していたら、cutterは各テストケースが実行された後に定義"
"された<link linkend=\"shutdown\"><function>shutdown()</function></link>を呼び"
"だします。"

#: xml/cutter.xml:189(title)
msgid "See Also"
msgstr "参考"

#: xml/gbsearcharray.xml:7(refentrytitle) xml/gbsearcharray.xml:13(refname)
msgid "gbsearcharray"
msgstr ""

#: xml/gbsearcharray.xml:22(link) xml/gbsearcharray.xml:55(primary)
msgid "G_BSEARCH_ARRAY_CMP"
msgstr ""

#: xml/gbsearcharray.xml:23(link)
msgid "*GBSearchCompareFunc"
msgstr ""

#: xml/gbsearcharray.xml:24(link) xml/gbsearcharray.xml:85(primary)
msgid "GBSearchArrayFlags"
msgstr ""

#: xml/gbsearcharray.xml:25(link) xml/gbsearcharray.xml:96(primary)
msgid "g_bsearch_array_get_n_nodes"
msgstr ""

#: xml/gbsearcharray.xml:26(link) xml/gbsearcharray.xml:108(primary)
msgid "g_bsearch_array_lookup"
msgstr ""

#: xml/gbsearcharray.xml:27(link) xml/gbsearcharray.xml:126(primary)
msgid "g_bsearch_array_lookup_sibling"
msgstr ""

#: xml/gbsearcharray.xml:28(link) xml/gbsearcharray.xml:144(primary)
msgid "g_bsearch_array_lookup_insertion"
msgstr ""

#: xml/gbsearcharray.xml:29(link) xml/gbsearcharray.xml:162(primary)
msgid "G_BSEARCH_UPPER_POWER2"
msgstr ""

#: xml/gbsearcharray.xml:30(link) xml/gbsearcharray.xml:174(primary)
msgid "G_BSEARCH_ARRAY_NODES"
msgstr ""

#: xml/gbsearcharray.xml:31(link)
msgid "else"
msgstr ""

#: xml/gbsearcharray.xml:31(link) xml/gbsearcharray.xml:187(primary)
msgid "if"
msgstr ""

#: xml/gbsearcharray.xml:32(link)
msgid "return"
msgstr ""

#: xml/gbsearcharray.xml:32(link) xml/gbsearcharray.xml:198(primary)
msgid "MIN"
msgstr ""

#: xml/gbsearcharray.xml:32(link)
msgid "distance"
msgstr ""

#: xml/gbsearcharray.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>                 (v1,v2)\n"
"<placeholder-2/>                (<placeholder-3/>)              (<placeholder-4/> bsearch_node1);\n"
"enum                <placeholder-5/>;\n"
"#define             <placeholder-6/>         (barray)\n"
"#define             <placeholder-7/>              (barray, bconfig, key_node)\n"
"#define             <placeholder-8/>      (barray, bconfig, key_node)\n"
"#define             <placeholder-9/>    (barray, bconfig, key_node)\n"
"#define             <placeholder-10/>              (n)\n"
"#define             <placeholder-11/>               (barray)\n"
"<placeholder-12/>                <placeholder-13/>                                  ();\n"
"<placeholder-14/>              <placeholder-15/>                                 (<placeholder-16/> );\n"
msgstr ""

#: xml/gbsearcharray.xml:54(title)
msgid "G_BSEARCH_ARRAY_CMP()"
msgstr ""

#: xml/gbsearcharray.xml:55(programlisting)
#, no-wrap
msgid "#define G_BSEARCH_ARRAY_CMP(v1,v2) ((v1) &gt; (v2) ? +1 : (v1) == (v2) ? 0 : -1)\n"
msgstr ""

#: xml/gbsearcharray.xml:60(term)
msgid "<parameter>v1</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:63(term)
msgid "<parameter>v2</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:70(title)
msgid "GBSearchCompareFunc ()"
msgstr ""

#: xml/gbsearcharray.xml:71(primary)
msgid "GBSearchCompareFunc"
msgstr ""

#: xml/gbsearcharray.xml:71(programlisting)
#, no-wrap
msgid "<link linkend=\"gint\">gint</link>                (*GBSearchCompareFunc)              (<link linkend=\"gconstpointer\">gconstpointer</link> bsearch_node1);"
msgstr ""

#: xml/gbsearcharray.xml:75(term)
msgid "<parameter>bsearch_node1</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:84(title)
msgid "enum GBSearchArrayFlags"
msgstr ""

#: xml/gbsearcharray.xml:85(programlisting)
#, no-wrap
msgid ""
"typedef enum\n"
"{\n"
"  G_BSEARCH_ARRAY_ALIGN_POWER2  = 1 &lt;&lt; 0, /* align memory to power2 sizes */\n"
"  G_BSEARCH_ARRAY_AUTO_SHRINK  = 1 &lt;&lt; 1   /* shrink array upon removal */\n"
"} GBSearchArrayFlags;\n"
msgstr ""

#: xml/gbsearcharray.xml:95(title)
msgid "g_bsearch_array_get_n_nodes()"
msgstr ""

#: xml/gbsearcharray.xml:96(programlisting)
#, no-wrap
msgid "#define             g_bsearch_array_get_n_nodes(barray)"
msgstr ""

#: xml/gbsearcharray.xml:100(term) xml/gbsearcharray.xml:112(term)
#: xml/gbsearcharray.xml:130(term) xml/gbsearcharray.xml:148(term)
#: xml/gbsearcharray.xml:179(term)
msgid "<parameter>barray</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:107(title)
msgid "g_bsearch_array_lookup()"
msgstr ""

#: xml/gbsearcharray.xml:108(programlisting)
#, no-wrap
msgid "#define             g_bsearch_array_lookup(barray, bconfig, key_node)"
msgstr ""

#: xml/gbsearcharray.xml:115(term) xml/gbsearcharray.xml:133(term)
#: xml/gbsearcharray.xml:151(term)
msgid "<parameter>bconfig</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:118(term) xml/gbsearcharray.xml:136(term)
#: xml/gbsearcharray.xml:154(term)
msgid "<parameter>key_node</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:125(title)
msgid "g_bsearch_array_lookup_sibling()"
msgstr ""

#: xml/gbsearcharray.xml:126(programlisting)
#, no-wrap
msgid "#define             g_bsearch_array_lookup_sibling(barray, bconfig, key_node)"
msgstr ""

#: xml/gbsearcharray.xml:143(title)
msgid "g_bsearch_array_lookup_insertion()"
msgstr ""

#: xml/gbsearcharray.xml:144(programlisting)
#, no-wrap
msgid "#define             g_bsearch_array_lookup_insertion(barray, bconfig, key_node)"
msgstr ""

#: xml/gbsearcharray.xml:161(title)
msgid "G_BSEARCH_UPPER_POWER2()"
msgstr ""

#: xml/gbsearcharray.xml:162(programlisting)
#, no-wrap
msgid "#define             G_BSEARCH_UPPER_POWER2(n)"
msgstr ""

#: xml/gbsearcharray.xml:166(term)
msgid "<parameter>n</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:173(title)
msgid "G_BSEARCH_ARRAY_NODES()"
msgstr ""

#: xml/gbsearcharray.xml:174(programlisting)
#, no-wrap
msgid "#define G_BSEARCH_ARRAY_NODES(barray)    (((guint8*) (barray)) + sizeof (GBSearchArray))\n"
msgstr ""

#: xml/gbsearcharray.xml:186(title)
msgid "if ()"
msgstr ""

#: xml/gbsearcharray.xml:187(programlisting)
#, no-wrap
msgid "<link linkend=\"else\">else</link>                if                                  ();"
msgstr ""

#: xml/gbsearcharray.xml:197(title)
msgid "MIN ()"
msgstr ""

#: xml/gbsearcharray.xml:198(programlisting)
#, no-wrap
msgid "<link linkend=\"return\">return</link>              MIN                                 (<link linkend=\"distance\">distance</link> );"
msgstr ""

#: xml/gbsearcharray.xml:202(term)
msgid "<parameter>Param1</parameter>&nbsp;:"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: xml/gbsearcharray.xml:0(None)
msgid "translator-credits"
msgstr ""

#~ msgid "Tutorial"
#~ msgstr "チュートリアル"

#~ msgid "Object Hierarchy"
#~ msgstr "オブジェクト階層"

#~ msgid "Properties"
#~ msgstr "プロパティ"

#~ msgid "n-tests"
#~ msgstr "テスト数"

#~ msgid "Signals"
#~ msgstr "シグナル"

#~ msgid "Property Details"
#~ msgstr "プロパティ詳細"

#~ msgid "Signal Details"
#~ msgstr "シグナル詳細"

#~ msgid "description"
#~ msgstr "説明"

#~ msgid ""
#~ "format string, followed by parameters to insert into the format string "
#~ "(as with <link linkend=\"printf\"><function>printf()</function></link>)"
#~ msgstr ""
#~ "整形文字列。以降のパラメータが整形文字列に挿入されます。（<link linkend="
#~ "\"printf\"><function>printf()</function></link>と同じ）"
