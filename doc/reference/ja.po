# ja.po for Cutter Reference.
# Copyright (C) 2007-2008 Kouhei Sutou
# This file is distributed under the same license as the Cutter package.
# Kouhei Sutou <kou@cozmixng.org>, 2007.
#
msgid ""
msgstr ""
"Project-Id-Version: Cutter 1.0.5\n"
"POT-Creation-Date: 2008-10-13 22:20+0900\n"
"PO-Revision-Date: 2008-10-13 22:55+0900\n"
"Last-Translator: Kouhei Sutou <kou@cozmixng.org>\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\\n\n"

#: cutter-docs.sgml:7(title)
msgid "Cutter Reference Manual"
msgstr "Cutterリファレンスマニュアル"

#: cutter-docs.sgml:8(releaseinfo)
msgid "for Cutter &version;"
msgstr "Cutter &version;用"

#: cutter-docs.sgml:12(title)
msgid "Introduction"
msgstr "はじめに"

#: cutter-docs.sgml:14(title)
msgid "Getting start"
msgstr "はじめよう"

#: cutter-docs.sgml:23(title)
msgid "Reference"
msgstr "リファレンス"

#: cutter-docs.sgml:25(title)
msgid "Writing test"
msgstr "テスト作成"

#: cutter-docs.sgml:36(title)
msgid "Writing assertion"
msgstr "検証作成"

#: cutter-docs.sgml:75(title)
msgid "Index of all symbols"
msgstr "すべてのシンボル一覧"

#: cutter-docs.sgml:78(title)
msgid "Index of deprecated symbols"
msgstr "非推奨のシンボル一覧"

#: cutter-docs.sgml:81(title)
msgid "Index of new symbols in 1.0.5"
msgstr "1.0.5での新しいシンボル一覧"

#: cutter-docs.sgml:84(title)
msgid "Index of new symbols in 1.0.4"
msgstr "1.0.4での新しいシンボル一覧"

#: cutter-docs.sgml:87(title)
msgid "Index of new symbols in 1.0.3"
msgstr "1.0.3での新しいシンボル一覧"

#: cutter-docs.sgml:90(title)
msgid "Index of new symbols in 1.0.2"
msgstr "1.0.2での新しいシンボル一覧"

#: cutter-docs.sgml:93(title)
msgid "Index of new symbols in 1.0.1"
msgstr "1.0.1での新しいシンボル一覧"

#: cutter-docs.sgml:96(title)
msgid "Index of new symbols in 1.0"
msgstr "1.0での新しいシンボル一覧"

#: cutter-docs.sgml:99(title)
msgid "Index of new symbols in 0.9"
msgstr "0.9での新しいシンボル一覧"

#: cutter-docs.sgml:102(title)
msgid "Index of new symbols in 0.8"
msgstr "0.8での新しいシンボル一覧"

#: cutter-docs.sgml:105(title)
msgid "Index of new symbols in 0.7"
msgstr "0.7での新しいシンボル一覧"

#: cutter-docs.sgml:108(title)
msgid "Index of new symbols in 0.6"
msgstr "0.6での新しいシンボル一覧"

#: cutter-docs.sgml:111(title)
msgid "Index of new symbols in 0.5"
msgstr "0.5での新しいシンボル一覧"

#: cutter-docs.sgml:114(title)
msgid "Index of new symbols in 0.4"
msgstr "0.4での新しいシンボル一覧"

#: cutter-docs.sgml:117(title)
msgid "Index of new symbols in 0.3"
msgstr "0.3での新しいシンボル一覧"

#: xml/cut-analyzer.xml:7(refentrytitle) xml/cut-analyzer.xml:13(refname)
#: xml/cut-analyzer.xml:22(link) xml/cut-analyzer.xml:23(link)
#: xml/cut-analyzer.xml:24(link) xml/cut-analyzer.xml:27(link)
#: xml/cut-analyzer.xml:49(title) xml/cut-analyzer.xml:50(primary)
msgid "CutAnalyzer"
msgstr ""

#: xml/cut-analyzer.xml:8(manvolnum) xml/cut-assertions.xml:8(manvolnum)
#: xml/cut-backtrace-entry.xml:8(manvolnum)
#: xml/cut-cairo-chart-data.xml:8(manvolnum)
#: xml/cut-cairo-pie-chart.xml:8(manvolnum) xml/cut-cairo.xml:8(manvolnum)
#: xml/cut-contractor.xml:8(manvolnum) xml/cut-declare-helper.xml:8(manvolnum)
#: xml/cut-diff.xml:8(manvolnum) xml/cut-experimental.xml:8(manvolnum)
#: xml/cut-factory-builder.xml:8(manvolnum) xml/cut-features.xml:8(manvolnum)
#: xml/cut-file-stream-reader.xml:8(manvolnum) xml/cut-helper.xml:8(manvolnum)
#: xml/cut-iterated-test.xml:8(manvolnum)
#: xml/cut-listener-utils.xml:8(manvolnum) xml/cut-listener.xml:8(manvolnum)
#: xml/cut-mach-o-loader.xml:8(manvolnum) xml/cut-main.xml:8(manvolnum)
#: xml/cut-module-factory-utils.xml:8(manvolnum)
#: xml/cut-module-factory.xml:8(manvolnum)
#: xml/cut-multi-process.xml:8(manvolnum) xml/cut-pipeline.xml:8(manvolnum)
#: xml/cut-process.xml:8(manvolnum)
#: xml/cut-report-factory-builder.xml:8(manvolnum)
#: xml/cut-report.xml:8(manvolnum) xml/cut-run-context.xml:8(manvolnum)
#: xml/cut-runner.xml:8(manvolnum) xml/cut-sequence-matcher.xml:8(manvolnum)
#: xml/cut-stream-factory-builder.xml:8(manvolnum)
#: xml/cut-stream-parser.xml:8(manvolnum)
#: xml/cut-stream-reader.xml:8(manvolnum) xml/cut-stream.xml:8(manvolnum)
#: xml/cut-test-data.xml:8(manvolnum) xml/cut-test-iterator.xml:8(manvolnum)
#: xml/cut-test-runner.xml:8(manvolnum)
#: xml/cut-test-utils-helper.xml:8(manvolnum)
#: xml/cut-test-utils.xml:8(manvolnum) xml/cut-types.xml:8(manvolnum)
#: xml/cut-ui-factory-builder.xml:8(manvolnum) xml/cut-ui.xml:8(manvolnum)
#: xml/cut-version.xml:8(manvolnum) xml/cutter.xml:8(manvolnum)
#: xml/cuttest-assertions.xml:8(manvolnum)
#: xml/cuttest-event-receiver.xml:8(manvolnum)
#: xml/cuttest-utils.xml:8(manvolnum) xml/gbsearcharray.xml:8(manvolnum)
#: xml/gcut-assertions-helper.xml:8(manvolnum)
#: xml/gcut-assertions.xml:8(manvolnum) xml/gcut-enum.xml:8(manvolnum)
#: xml/gcut-error.xml:8(manvolnum) xml/gcut-hash-table.xml:8(manvolnum)
#: xml/gcut-list.xml:8(manvolnum) xml/gcut-main.xml:8(manvolnum)
#: xml/gcut-object.xml:8(manvolnum) xml/gcut-public.xml:8(manvolnum)
#: xml/gcut-test-utils.xml:8(manvolnum) xml/gcut-types.xml:8(manvolnum)
#: xml/gcut-value-equal.xml:8(manvolnum)
#: xml/gdkcut-pixbuf-assertions-helper.xml:8(manvolnum)
#: xml/gdkcut-pixbuf-assertions.xml:8(manvolnum)
#: xml/gdkcut-pixbuf.xml:8(manvolnum)
#: xml/gst-cutter-console-output.xml:8(manvolnum)
#: xml/gst-cutter-server.xml:8(manvolnum)
#: xml/gst-cutter-test-runner.xml:8(manvolnum) xml/stack.xml:8(manvolnum)
msgid "3"
msgstr ""

#: xml/cut-analyzer.xml:9(refmiscinfo) xml/cut-assertions.xml:9(refmiscinfo)
#: xml/cut-backtrace-entry.xml:9(refmiscinfo)
#: xml/cut-cairo-chart-data.xml:9(refmiscinfo)
#: xml/cut-cairo-pie-chart.xml:9(refmiscinfo) xml/cut-cairo.xml:9(refmiscinfo)
#: xml/cut-contractor.xml:9(refmiscinfo)
#: xml/cut-declare-helper.xml:9(refmiscinfo) xml/cut-diff.xml:9(refmiscinfo)
#: xml/cut-experimental.xml:9(refmiscinfo)
#: xml/cut-factory-builder.xml:9(refmiscinfo)
#: xml/cut-features.xml:9(refmiscinfo)
#: xml/cut-file-stream-reader.xml:9(refmiscinfo)
#: xml/cut-helper.xml:9(refmiscinfo) xml/cut-iterated-test.xml:9(refmiscinfo)
#: xml/cut-listener-utils.xml:9(refmiscinfo)
#: xml/cut-listener.xml:9(refmiscinfo)
#: xml/cut-mach-o-loader.xml:9(refmiscinfo) xml/cut-main.xml:9(refmiscinfo)
#: xml/cut-module-factory-utils.xml:9(refmiscinfo)
#: xml/cut-module-factory.xml:9(refmiscinfo)
#: xml/cut-multi-process.xml:9(refmiscinfo)
#: xml/cut-pipeline.xml:9(refmiscinfo) xml/cut-process.xml:9(refmiscinfo)
#: xml/cut-report-factory-builder.xml:9(refmiscinfo)
#: xml/cut-report.xml:9(refmiscinfo) xml/cut-run-context.xml:9(refmiscinfo)
#: xml/cut-runner.xml:9(refmiscinfo)
#: xml/cut-sequence-matcher.xml:9(refmiscinfo)
#: xml/cut-stream-factory-builder.xml:9(refmiscinfo)
#: xml/cut-stream-parser.xml:9(refmiscinfo)
#: xml/cut-stream-reader.xml:9(refmiscinfo) xml/cut-stream.xml:9(refmiscinfo)
#: xml/cut-test-data.xml:9(refmiscinfo)
#: xml/cut-test-iterator.xml:9(refmiscinfo)
#: xml/cut-test-runner.xml:9(refmiscinfo)
#: xml/cut-test-utils-helper.xml:9(refmiscinfo)
#: xml/cut-test-utils.xml:9(refmiscinfo) xml/cut-types.xml:9(refmiscinfo)
#: xml/cut-ui-factory-builder.xml:9(refmiscinfo) xml/cut-ui.xml:9(refmiscinfo)
#: xml/cut-version.xml:9(refmiscinfo) xml/cutter.xml:9(refmiscinfo)
#: xml/cuttest-assertions.xml:9(refmiscinfo)
#: xml/cuttest-event-receiver.xml:9(refmiscinfo)
#: xml/cuttest-utils.xml:9(refmiscinfo) xml/gbsearcharray.xml:9(refmiscinfo)
#: xml/gcut-assertions-helper.xml:9(refmiscinfo)
#: xml/gcut-assertions.xml:9(refmiscinfo) xml/gcut-enum.xml:9(refmiscinfo)
#: xml/gcut-error.xml:9(refmiscinfo) xml/gcut-hash-table.xml:9(refmiscinfo)
#: xml/gcut-list.xml:9(refmiscinfo) xml/gcut-main.xml:9(refmiscinfo)
#: xml/gcut-object.xml:9(refmiscinfo) xml/gcut-public.xml:9(refmiscinfo)
#: xml/gcut-test-utils.xml:9(refmiscinfo) xml/gcut-types.xml:9(refmiscinfo)
#: xml/gcut-value-equal.xml:9(refmiscinfo)
#: xml/gdkcut-pixbuf-assertions-helper.xml:9(refmiscinfo)
#: xml/gdkcut-pixbuf-assertions.xml:9(refmiscinfo)
#: xml/gdkcut-pixbuf.xml:9(refmiscinfo)
#: xml/gst-cutter-console-output.xml:9(refmiscinfo)
#: xml/gst-cutter-server.xml:9(refmiscinfo)
#: xml/gst-cutter-test-runner.xml:9(refmiscinfo) xml/stack.xml:9(refmiscinfo)
msgid "CUTTER Library"
msgstr "Cutterライブラリ"

#: xml/cut-analyzer.xml:19(title) xml/cut-assertions.xml:19(title)
#: xml/cut-backtrace-entry.xml:19(title)
#: xml/cut-cairo-chart-data.xml:19(title)
#: xml/cut-cairo-pie-chart.xml:19(title) xml/cut-cairo.xml:19(title)
#: xml/cut-contractor.xml:19(title) xml/cut-declare-helper.xml:19(title)
#: xml/cut-diff.xml:19(title) xml/cut-experimental.xml:19(title)
#: xml/cut-factory-builder.xml:19(title) xml/cut-features.xml:19(title)
#: xml/cut-file-stream-reader.xml:19(title) xml/cut-helper.xml:20(title)
#: xml/cut-iterated-test.xml:19(title) xml/cut-listener-utils.xml:19(title)
#: xml/cut-listener.xml:19(title) xml/cut-mach-o-loader.xml:19(title)
#: xml/cut-main.xml:19(title) xml/cut-module-factory-utils.xml:19(title)
#: xml/cut-module-factory.xml:19(title) xml/cut-multi-process.xml:20(title)
#: xml/cut-pipeline.xml:19(title) xml/cut-process.xml:19(title)
#: xml/cut-report-factory-builder.xml:19(title) xml/cut-report.xml:19(title)
#: xml/cut-run-context.xml:19(title) xml/cut-runner.xml:19(title)
#: xml/cut-sequence-matcher.xml:19(title)
#: xml/cut-stream-factory-builder.xml:19(title)
#: xml/cut-stream-parser.xml:19(title) xml/cut-stream-reader.xml:19(title)
#: xml/cut-stream.xml:19(title) xml/cut-test-data.xml:19(title)
#: xml/cut-test-iterator.xml:19(title) xml/cut-test-runner.xml:19(title)
#: xml/cut-test-utils-helper.xml:19(title) xml/cut-test-utils.xml:19(title)
#: xml/cut-types.xml:19(title) xml/cut-ui-factory-builder.xml:19(title)
#: xml/cut-ui.xml:19(title) xml/cut-version.xml:19(title)
#: xml/cutter.xml:19(title) xml/cuttest-assertions.xml:19(title)
#: xml/cuttest-event-receiver.xml:19(title) xml/cuttest-utils.xml:19(title)
#: xml/gbsearcharray.xml:19(title) xml/gcut-assertions-helper.xml:19(title)
#: xml/gcut-assertions.xml:20(title) xml/gcut-enum.xml:20(title)
#: xml/gcut-error.xml:20(title) xml/gcut-hash-table.xml:20(title)
#: xml/gcut-list.xml:20(title) xml/gcut-main.xml:19(title)
#: xml/gcut-object.xml:20(title) xml/gcut-public.xml:19(title)
#: xml/gcut-test-utils.xml:20(title) xml/gcut-types.xml:19(title)
#: xml/gcut-value-equal.xml:20(title)
#: xml/gdkcut-pixbuf-assertions-helper.xml:19(title)
#: xml/gdkcut-pixbuf-assertions.xml:20(title) xml/gdkcut-pixbuf.xml:19(title)
#: xml/gst-cutter-console-output.xml:19(title)
#: xml/gst-cutter-server.xml:19(title)
#: xml/gst-cutter-test-runner.xml:19(title) xml/stack.xml:19(title)
msgid "Synopsis"
msgstr "概要"

#: xml/cut-analyzer.xml:23(link) xml/cut-analyzer.xml:59(primary)
msgid "cut_analyzer_new"
msgstr ""

#: xml/cut-analyzer.xml:24(link) xml/cut-cairo-chart-data.xml:26(link)
#: xml/cut-contractor.xml:26(link) xml/cut-diff.xml:26(link)
#: xml/cut-diff.xml:27(link) xml/cut-mach-o-loader.xml:24(link)
#: xml/cut-mach-o-loader.xml:25(link) xml/cut-main.xml:25(link)
#: xml/cut-main.xml:26(link) xml/cut-main.xml:30(link)
#: xml/cut-module-factory-utils.xml:33(link) xml/cut-process.xml:30(link)
#: xml/cut-run-context.xml:36(link) xml/cut-run-context.xml:37(link)
#: xml/cut-run-context.xml:38(link) xml/cut-run-context.xml:74(link)
#: xml/cut-run-context.xml:79(link) xml/cut-run-context.xml:98(link)
#: xml/cut-run-context.xml:100(link) xml/cut-run-context.xml:101(link)
#: xml/cut-run-context.xml:115(link) xml/cut-run-context.xml:117(link)
#: xml/cut-run-context.xml:118(link) xml/cut-run-context.xml:121(link)
#: xml/cut-run-context.xml:122(link) xml/cut-run-context.xml:126(link)
#: xml/cut-run-context.xml:127(link) xml/cut-runner.xml:24(link)
#: xml/cut-sequence-matcher.xml:24(link) xml/cut-stream-parser.xml:25(link)
#: xml/cut-stream-parser.xml:29(link) xml/cut-stream-reader.xml:29(link)
#: xml/cut-stream-reader.xml:32(link) xml/cut-stream-reader.xml:35(link)
#: xml/cut-stream.xml:22(link) xml/cut-test-runner.xml:24(link)
#: xml/cut-test-runner.xml:27(link) xml/cut-test-runner.xml:29(link)
#: xml/cut-test-runner.xml:32(link) xml/cut-ui.xml:28(link)
#: xml/gcut-enum.xml:23(link) xml/gcut-enum.xml:28(link)
#: xml/gcut-error.xml:23(link) xml/gcut-hash-table.xml:23(link)
#: xml/gcut-hash-table.xml:30(link) xml/gcut-list.xml:23(link)
#: xml/gcut-list.xml:29(link) xml/gcut-list.xml:32(link)
#: xml/gcut-list.xml:35(link) xml/gcut-object.xml:23(link)
#: xml/gcut-value-equal.xml:23(link) xml/gdkcut-pixbuf.xml:22(link)
#: xml/gdkcut-pixbuf.xml:24(link)
msgid "gboolean"
msgstr ""

#: xml/cut-analyzer.xml:24(link) xml/cut-analyzer.xml:70(primary)
msgid "cut_analyzer_analyze"
msgstr ""

#: xml/cut-analyzer.xml:25(link) xml/cut-backtrace-entry.xml:23(link)
#: xml/cut-backtrace-entry.xml:25(link) xml/cut-backtrace-entry.xml:26(link)
#: xml/cut-backtrace-entry.xml:28(link) xml/cut-backtrace-entry.xml:30(link)
#: xml/cut-backtrace-entry.xml:34(link) xml/cut-backtrace-entry.xml:36(link)
#: xml/cut-backtrace-entry.xml:37(link) xml/cut-backtrace-entry.xml:39(link)
#: xml/cut-backtrace-entry.xml:40(link) xml/cut-backtrace-entry.xml:44(link)
#: xml/cut-cairo-chart-data.xml:24(link) xml/cut-cairo.xml:23(link)
#: xml/cut-contractor.xml:27(link) xml/cut-diff.xml:23(link)
#: xml/cut-diff.xml:24(link) xml/cut-diff.xml:25(link)
#: xml/cut-diff.xml:26(link) xml/cut-diff.xml:27(link)
#: xml/cut-factory-builder.xml:23(link) xml/cut-factory-builder.xml:24(link)
#: xml/cut-file-stream-reader.xml:26(link) xml/cut-iterated-test.xml:24(link)
#: xml/cut-mach-o-loader.xml:23(link)
#: xml/cut-module-factory-utils.xml:24(link)
#: xml/cut-module-factory-utils.xml:27(link)
#: xml/cut-module-factory-utils.xml:28(link)
#: xml/cut-module-factory-utils.xml:29(link)
#: xml/cut-module-factory-utils.xml:30(link)
#: xml/cut-module-factory-utils.xml:32(link)
#: xml/cut-module-factory-utils.xml:33(link)
#: xml/cut-module-factory-utils.xml:34(link)
#: xml/cut-module-factory-utils.xml:35(link)
#: xml/cut-module-factory-utils.xml:36(link)
#: xml/cut-module-factory.xml:23(link) xml/cut-module-factory.xml:24(link)
#: xml/cut-module-factory.xml:25(link) xml/cut-module-factory.xml:27(link)
#: xml/cut-module-factory.xml:28(link) xml/cut-module-factory.xml:29(link)
#: xml/cut-module-factory.xml:34(link) xml/cut-process.xml:28(link)
#: xml/cut-process.xml:29(link) xml/cut-process.xml:33(link)
#: xml/cut-report.xml:23(link) xml/cut-report.xml:24(link)
#: xml/cut-report.xml:26(link) xml/cut-report.xml:27(link)
#: xml/cut-report.xml:28(link) xml/cut-report.xml:29(link)
#: xml/cut-report.xml:30(link) xml/cut-report.xml:31(link)
#: xml/cut-report.xml:32(link) xml/cut-report.xml:33(link)
#: xml/cut-report.xml:34(link) xml/cut-run-context.xml:25(link)
#: xml/cut-run-context.xml:26(link) xml/cut-run-context.xml:29(link)
#: xml/cut-run-context.xml:30(link) xml/cut-run-context.xml:33(link)
#: xml/cut-run-context.xml:34(link) xml/cut-run-context.xml:43(link)
#: xml/cut-run-context.xml:44(link) xml/cut-run-context.xml:47(link)
#: xml/cut-run-context.xml:48(link) xml/cut-run-context.xml:52(link)
#: xml/cut-run-context.xml:53(link) xml/cut-run-context.xml:57(link)
#: xml/cut-run-context.xml:58(link) xml/cut-run-context.xml:73(link)
#: xml/cut-run-context.xml:75(link) xml/cut-run-context.xml:77(link)
#: xml/cut-run-context.xml:95(link) xml/cut-run-context.xml:97(link)
#: xml/cut-run-context.xml:106(link) xml/cut-run-context.xml:110(link)
#: xml/cut-run-context.xml:111(link) xml/cut-sequence-matcher.xml:47(link)
#: xml/cut-sequence-matcher.xml:48(link) xml/cut-sequence-matcher.xml:49(link)
#: xml/cut-sequence-matcher.xml:50(link) xml/cut-sequence-matcher.xml:53(link)
#: xml/cut-sequence-matcher.xml:54(link) xml/cut-sequence-matcher.xml:56(link)
#: xml/cut-sequence-matcher.xml:57(link) xml/cut-stream-parser.xml:26(link)
#: xml/cut-stream-reader.xml:33(link) xml/cut-stream.xml:22(link)
#: xml/cut-stream.xml:26(link) xml/cut-stream.xml:27(link)
#: xml/cut-test-data.xml:23(link) xml/cut-test-data.xml:27(link)
#: xml/cut-test-data.xml:29(link) xml/cut-test-data.xml:34(link)
#: xml/cut-test-iterator.xml:24(link) xml/cut-ui.xml:25(link)
#: xml/cut-ui.xml:26(link) xml/cuttest-assertions.xml:49(link)
#: xml/cuttest-assertions.xml:50(link) xml/cuttest-assertions.xml:51(link)
#: xml/cuttest-assertions.xml:52(link) xml/cuttest-assertions.xml:53(link)
#: xml/cuttest-utils.xml:25(link) xml/cuttest-utils.xml:27(link)
#: xml/gcut-assertions-helper.xml:25(link)
#: xml/gcut-assertions-helper.xml:26(link)
#: xml/gcut-assertions-helper.xml:27(link)
#: xml/gcut-assertions-helper.xml:32(link)
#: xml/gcut-assertions-helper.xml:33(link)
#: xml/gcut-assertions-helper.xml:34(link)
#: xml/gcut-assertions-helper.xml:39(link)
#: xml/gcut-assertions-helper.xml:40(link)
#: xml/gcut-assertions-helper.xml:41(link)
#: xml/gcut-assertions-helper.xml:46(link)
#: xml/gcut-assertions-helper.xml:47(link)
#: xml/gcut-assertions-helper.xml:48(link)
#: xml/gcut-assertions-helper.xml:54(link)
#: xml/gcut-assertions-helper.xml:55(link)
#: xml/gcut-assertions-helper.xml:56(link)
#: xml/gcut-assertions-helper.xml:62(link)
#: xml/gcut-assertions-helper.xml:63(link)
#: xml/gcut-assertions-helper.xml:64(link)
#: xml/gcut-assertions-helper.xml:65(link)
#: xml/gcut-assertions-helper.xml:71(link)
#: xml/gcut-assertions-helper.xml:72(link)
#: xml/gcut-assertions-helper.xml:73(link)
#: xml/gcut-assertions-helper.xml:74(link)
#: xml/gcut-assertions-helper.xml:81(link)
#: xml/gcut-assertions-helper.xml:82(link)
#: xml/gcut-assertions-helper.xml:83(link)
#: xml/gcut-assertions-helper.xml:89(link)
#: xml/gcut-assertions-helper.xml:90(link)
#: xml/gcut-assertions-helper.xml:91(link)
#: xml/gcut-assertions-helper.xml:95(link)
#: xml/gcut-assertions-helper.xml:96(link)
#: xml/gcut-assertions-helper.xml:101(link)
#: xml/gcut-assertions-helper.xml:102(link)
#: xml/gcut-assertions-helper.xml:103(link)
#: xml/gcut-assertions-helper.xml:109(link)
#: xml/gcut-assertions-helper.xml:110(link)
#: xml/gcut-assertions-helper.xml:111(link)
#: xml/gcut-assertions-helper.xml:112(link)
#: xml/gcut-assertions-helper.xml:118(link)
#: xml/gcut-assertions-helper.xml:119(link)
#: xml/gcut-assertions-helper.xml:120(link)
#: xml/gcut-assertions-helper.xml:121(link)
#: xml/gcut-assertions-helper.xml:127(link)
#: xml/gcut-assertions-helper.xml:128(link)
#: xml/gcut-assertions-helper.xml:129(link)
#: xml/gcut-assertions-helper.xml:130(link) xml/gcut-enum.xml:26(link)
#: xml/gcut-enum.xml:31(link) xml/gcut-error.xml:25(link)
#: xml/gcut-hash-table.xml:26(link) xml/gcut-hash-table.xml:32(link)
#: xml/gcut-list.xml:26(link) xml/gcut-list.xml:31(link)
#: xml/gcut-list.xml:34(link) xml/gcut-list.xml:37(link)
#: xml/gcut-list.xml:38(link) xml/gcut-list.xml:39(link)
#: xml/gcut-list.xml:41(link) xml/gcut-object.xml:26(link)
#: xml/gcut-object.xml:27(link) xml/gcut-test-utils.xml:27(link)
#: xml/gcut-test-utils.xml:31(link) xml/gcut-test-utils.xml:33(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:26(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:27(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:28(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:29(link)
#: xml/gdkcut-pixbuf.xml:30(link) xml/gdkcut-pixbuf.xml:33(link)
msgid "gchar"
msgstr ""

#: xml/cut-analyzer.xml:26(link) xml/cut-run-context.xml:105(link)
#: xml/cut-stream-parser.xml:28(link) xml/cut-stream-parser.xml:30(link)
#: xml/cut-stream.xml:23(link) xml/gcut-assertions-helper.xml:94(link)
#: xml/gcut-assertions-helper.xml:99(link)
#: xml/gcut-assertions-helper.xml:100(link) xml/gcut-error.xml:15(type)
#: xml/gcut-error.xml:23(link) xml/gcut-error.xml:24(link)
#: xml/gcut-error.xml:25(link) xml/gcut-public.xml:24(link)
#: xml/gcut-public.xml:25(link) xml/gdkcut-pixbuf.xml:34(link)
msgid "GError"
msgstr ""

#: xml/cut-analyzer.xml:27(link) xml/cut-contractor.xml:24(link)
#: xml/cut-contractor.xml:25(link) xml/cut-factory-builder.xml:28(link)
#: xml/cut-factory-builder.xml:29(link) xml/cut-mach-o-loader.xml:26(link)
#: xml/cut-module-factory-utils.xml:32(link) xml/cut-run-context.xml:71(link)
#: xml/cut-run-context.xml:87(link) xml/cut-run-context.xml:88(link)
#: xml/cut-sequence-matcher.xml:60(link) xml/cut-sequence-matcher.xml:68(link)
#: xml/cut-sequence-matcher.xml:69(link) xml/cut-sequence-matcher.xml:70(link)
#: xml/gcut-assertions-helper.xml:37(link)
#: xml/gcut-assertions-helper.xml:38(link)
#: xml/gcut-assertions-helper.xml:44(link)
#: xml/gcut-assertions-helper.xml:45(link)
#: xml/gcut-assertions-helper.xml:52(link)
#: xml/gcut-assertions-helper.xml:53(link)
#: xml/gcut-assertions-helper.xml:60(link)
#: xml/gcut-assertions-helper.xml:61(link)
#: xml/gcut-assertions-helper.xml:69(link)
#: xml/gcut-assertions-helper.xml:70(link)
#: xml/gcut-assertions-helper.xml:78(link)
#: xml/gcut-assertions-helper.xml:79(link) xml/gcut-list.xml:15(type)
#: xml/gcut-list.xml:23(link) xml/gcut-list.xml:24(link)
#: xml/gcut-list.xml:26(link) xml/gcut-list.xml:29(link)
#: xml/gcut-list.xml:30(link) xml/gcut-list.xml:31(link)
#: xml/gcut-list.xml:32(link) xml/gcut-list.xml:33(link)
#: xml/gcut-list.xml:34(link) xml/gcut-list.xml:35(link)
#: xml/gcut-list.xml:36(link) xml/gcut-list.xml:37(link)
#: xml/gcut-list.xml:38(link) xml/gcut-list.xml:39(link)
#: xml/gcut-list.xml:41(link) xml/gcut-public.xml:26(link)
#: xml/gcut-public.xml:27(link) xml/gcut-test-utils.xml:27(link)
#: xml/gcut-test-utils.xml:30(link)
msgid "GList"
msgstr ""

#: xml/cut-analyzer.xml:27(link) xml/cut-analyzer.xml:92(primary)
msgid "cut_analyzer_get_run_contexts"
msgstr ""

#: xml/cut-analyzer.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*        <placeholder-3/>                    (void);\n"
"<placeholder-4/>            <placeholder-5/>                (<placeholder-6/> *analyzer,\n"
"                                                         const <placeholder-7/> *log_directory,\n"
"                                                         <placeholder-8/> **error);\n"
"const <placeholder-9/>*        <placeholder-10/>       (<placeholder-11/> *analyzer);\n"
msgstr ""

#: xml/cut-analyzer.xml:40(title) xml/cut-assertions.xml:71(title)
#: xml/cut-backtrace-entry.xml:59(title)
#: xml/cut-cairo-chart-data.xml:42(title)
#: xml/cut-cairo-pie-chart.xml:45(title) xml/cut-cairo.xml:39(title)
#: xml/cut-contractor.xml:42(title) xml/cut-declare-helper.xml:35(title)
#: xml/cut-diff.xml:40(title) xml/cut-experimental.xml:38(title)
#: xml/cut-factory-builder.xml:42(title) xml/cut-features.xml:36(title)
#: xml/cut-file-stream-reader.xml:39(title) xml/cut-helper.xml:40(title)
#: xml/cut-iterated-test.xml:44(title) xml/cut-listener-utils.xml:37(title)
#: xml/cut-listener.xml:39(title) xml/cut-mach-o-loader.xml:39(title)
#: xml/cut-main.xml:43(title) xml/cut-module-factory-utils.xml:49(title)
#: xml/cut-module-factory.xml:47(title) xml/cut-multi-process.xml:87(title)
#: xml/cut-pipeline.xml:40(title) xml/cut-process.xml:47(title)
#: xml/cut-report-factory-builder.xml:35(title) xml/cut-report.xml:47(title)
#: xml/cut-run-context.xml:141(title) xml/cut-runner.xml:38(title)
#: xml/cut-sequence-matcher.xml:84(title)
#: xml/cut-stream-factory-builder.xml:35(title)
#: xml/cut-stream-parser.xml:43(title) xml/cut-stream-reader.xml:48(title)
#: xml/cut-stream.xml:41(title) xml/cut-test-data.xml:50(title)
#: xml/cut-test-iterator.xml:42(title) xml/cut-test-runner.xml:46(title)
#: xml/cut-test-utils-helper.xml:41(title) xml/cut-test-utils.xml:51(title)
#: xml/cut-types.xml:36(title) xml/cut-ui-factory-builder.xml:35(title)
#: xml/cut-ui.xml:42(title) xml/cut-version.xml:38(title)
#: xml/cutter.xml:42(title) xml/cuttest-assertions.xml:67(title)
#: xml/cuttest-event-receiver.xml:36(title) xml/cuttest-utils.xml:41(title)
#: xml/gbsearcharray.xml:45(title) xml/gcut-assertions-helper.xml:158(title)
#: xml/gcut-assertions.xml:66(title) xml/gcut-enum.xml:45(title)
#: xml/gcut-error.xml:38(title) xml/gcut-hash-table.xml:46(title)
#: xml/gcut-list.xml:55(title) xml/gcut-main.xml:38(title)
#: xml/gcut-object.xml:42(title) xml/gcut-public.xml:43(title)
#: xml/gcut-test-utils.xml:48(title) xml/gcut-types.xml:37(title)
#: xml/gcut-value-equal.xml:40(title)
#: xml/gdkcut-pixbuf-assertions-helper.xml:43(title)
#: xml/gdkcut-pixbuf-assertions.xml:36(title) xml/gdkcut-pixbuf.xml:47(title)
#: xml/gst-cutter-console-output.xml:35(title)
#: xml/gst-cutter-server.xml:35(title)
#: xml/gst-cutter-test-runner.xml:35(title) xml/stack.xml:42(title)
msgid "Description"
msgstr "説明"

#: xml/cut-analyzer.xml:47(title) xml/cut-assertions.xml:88(title)
#: xml/cut-backtrace-entry.xml:66(title)
#: xml/cut-cairo-chart-data.xml:49(title)
#: xml/cut-cairo-pie-chart.xml:52(title) xml/cut-cairo.xml:46(title)
#: xml/cut-contractor.xml:49(title) xml/cut-declare-helper.xml:42(title)
#: xml/cut-diff.xml:47(title) xml/cut-experimental.xml:47(title)
#: xml/cut-factory-builder.xml:49(title) xml/cut-features.xml:43(title)
#: xml/cut-file-stream-reader.xml:46(title) xml/cut-helper.xml:136(title)
#: xml/cut-iterated-test.xml:51(title) xml/cut-listener-utils.xml:44(title)
#: xml/cut-listener.xml:46(title) xml/cut-mach-o-loader.xml:46(title)
#: xml/cut-main.xml:50(title) xml/cut-module-factory-utils.xml:56(title)
#: xml/cut-module-factory.xml:54(title) xml/cut-multi-process.xml:108(title)
#: xml/cut-pipeline.xml:47(title) xml/cut-process.xml:54(title)
#: xml/cut-report-factory-builder.xml:42(title) xml/cut-report.xml:54(title)
#: xml/cut-run-context.xml:148(title) xml/cut-runner.xml:45(title)
#: xml/cut-sequence-matcher.xml:91(title)
#: xml/cut-stream-factory-builder.xml:42(title)
#: xml/cut-stream-parser.xml:50(title) xml/cut-stream-reader.xml:55(title)
#: xml/cut-stream.xml:48(title) xml/cut-test-data.xml:57(title)
#: xml/cut-test-iterator.xml:49(title) xml/cut-test-runner.xml:53(title)
#: xml/cut-test-utils-helper.xml:48(title) xml/cut-test-utils.xml:66(title)
#: xml/cut-types.xml:45(title) xml/cut-ui-factory-builder.xml:42(title)
#: xml/cut-ui.xml:49(title) xml/cut-version.xml:45(title)
#: xml/cutter.xml:147(title) xml/cuttest-assertions.xml:74(title)
#: xml/cuttest-event-receiver.xml:43(title) xml/cuttest-utils.xml:48(title)
#: xml/gbsearcharray.xml:52(title) xml/gcut-assertions-helper.xml:165(title)
#: xml/gcut-assertions.xml:75(title) xml/gcut-enum.xml:59(title)
#: xml/gcut-error.xml:52(title) xml/gcut-hash-table.xml:60(title)
#: xml/gcut-list.xml:69(title) xml/gcut-main.xml:45(title)
#: xml/gcut-object.xml:56(title) xml/gcut-public.xml:50(title)
#: xml/gcut-test-utils.xml:63(title) xml/gcut-types.xml:44(title)
#: xml/gcut-value-equal.xml:54(title)
#: xml/gdkcut-pixbuf-assertions-helper.xml:50(title)
#: xml/gdkcut-pixbuf-assertions.xml:45(title) xml/gdkcut-pixbuf.xml:54(title)
#: xml/gst-cutter-console-output.xml:42(title)
#: xml/gst-cutter-server.xml:42(title)
#: xml/gst-cutter-test-runner.xml:42(title) xml/stack.xml:49(title)
msgid "Details"
msgstr "詳細"

#: xml/cut-analyzer.xml:50(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutAnalyzer;\n"
msgstr ""

#: xml/cut-analyzer.xml:58(title)
msgid "cut_analyzer_new ()"
msgstr ""

#: xml/cut-analyzer.xml:59(programlisting)
#, no-wrap
msgid "<link linkend=\"CutAnalyzer\">CutAnalyzer</link>*        cut_analyzer_new                    (void);"
msgstr ""

#: xml/cut-analyzer.xml:63(term) xml/cut-analyzer.xml:85(term)
#: xml/cut-analyzer.xml:99(term) xml/cut-backtrace-entry.xml:97(term)
#: xml/cut-backtrace-entry.xml:108(term) xml/cut-backtrace-entry.xml:122(term)
#: xml/cut-backtrace-entry.xml:152(term) xml/cut-backtrace-entry.xml:182(term)
#: xml/cut-backtrace-entry.xml:212(term) xml/cut-backtrace-entry.xml:242(term)
#: xml/cut-backtrace-entry.xml:276(term) xml/cut-cairo-chart-data.xml:65(term)
#: xml/cut-cairo-chart-data.xml:80(term)
#: xml/cut-cairo-chart-data.xml:106(term) xml/cut-cairo-pie-chart.xml:75(term)
#: xml/cut-cairo-pie-chart.xml:129(term) xml/cut-cairo-pie-chart.xml:143(term)
#: xml/cut-cairo.xml:64(term) xml/cut-contractor.xml:65(term)
#: xml/cut-contractor.xml:79(term) xml/cut-contractor.xml:93(term)
#: xml/cut-contractor.xml:111(term) xml/cut-diff.xml:70(term)
#: xml/cut-diff.xml:84(term) xml/cut-diff.xml:98(term)
#: xml/cut-diff.xml:112(term) xml/cut-experimental.xml:71(term)
#: xml/cut-factory-builder.xml:68(term) xml/cut-factory-builder.xml:82(term)
#: xml/cut-factory-builder.xml:113(term) xml/cut-factory-builder.xml:127(term)
#: xml/cut-file-stream-reader.xml:79(term)
#: xml/cut-file-stream-reader.xml:93(term) xml/cut-iterated-test.xml:90(term)
#: xml/cut-iterated-test.xml:101(term) xml/cut-iterated-test.xml:115(term)
#: xml/cut-mach-o-loader.xml:65(term) xml/cut-mach-o-loader.xml:79(term)
#: xml/cut-mach-o-loader.xml:93(term) xml/cut-mach-o-loader.xml:107(term)
#: xml/cut-main.xml:79(term) xml/cut-main.xml:90(term)
#: xml/cut-main.xml:113(term) xml/cut-main.xml:124(term)
#: xml/cut-main.xml:138(term) xml/cut-module-factory-utils.xml:76(term)
#: xml/cut-module-factory-utils.xml:137(term)
#: xml/cut-module-factory-utils.xml:155(term)
#: xml/cut-module-factory-utils.xml:173(term)
#: xml/cut-module-factory.xml:85(term) xml/cut-module-factory.xml:111(term)
#: xml/cut-module-factory.xml:141(term) xml/cut-module-factory.xml:155(term)
#: xml/cut-multi-process.xml:183(term) xml/cut-multi-process.xml:215(term)
#: xml/cut-multi-process.xml:233(term) xml/cut-multi-process.xml:250(term)
#: xml/cut-multi-process.xml:267(term) xml/cut-multi-process.xml:303(term)
#: xml/cut-multi-process.xml:339(term) xml/cut-multi-process.xml:375(term)
#: xml/cut-multi-process.xml:413(term) xml/cut-multi-process.xml:450(term)
#: xml/cut-multi-process.xml:489(term) xml/cut-multi-process.xml:525(term)
#: xml/cut-multi-process.xml:560(term) xml/cut-multi-process.xml:576(term)
#: xml/cut-multi-process.xml:592(term) xml/cut-multi-process.xml:611(term)
#: xml/cut-multi-process.xml:649(term) xml/cut-multi-process.xml:683(term)
#: xml/cut-multi-process.xml:716(term) xml/cut-pipeline.xml:84(term)
#: xml/cut-pipeline.xml:95(term) xml/cut-pipeline.xml:109(term)
#: xml/cut-process.xml:70(term) xml/cut-process.xml:84(term)
#: xml/cut-process.xml:102(term) xml/cut-process.xml:116(term)
#: xml/cut-process.xml:130(term) xml/cut-process.xml:144(term)
#: xml/cut-process.xml:163(term) xml/cut-process.xml:177(term)
#: xml/cut-report.xml:81(term) xml/cut-report.xml:95(term)
#: xml/cut-report.xml:109(term) xml/cut-report.xml:127(term)
#: xml/cut-report.xml:141(term) xml/cut-report.xml:155(term)
#: xml/cut-report.xml:169(term) xml/cut-report.xml:183(term)
#: xml/cut-report.xml:197(term) xml/cut-run-context.xml:194(term)
#: xml/cut-run-context.xml:226(term) xml/cut-run-context.xml:256(term)
#: xml/cut-run-context.xml:286(term) xml/cut-run-context.xml:300(term)
#: xml/cut-run-context.xml:330(term) xml/cut-run-context.xml:360(term)
#: xml/cut-run-context.xml:392(term) xml/cut-run-context.xml:424(term)
#: xml/cut-run-context.xml:456(term) xml/cut-run-context.xml:470(term)
#: xml/cut-run-context.xml:484(term) xml/cut-run-context.xml:498(term)
#: xml/cut-run-context.xml:512(term) xml/cut-run-context.xml:526(term)
#: xml/cut-run-context.xml:540(term) xml/cut-run-context.xml:554(term)
#: xml/cut-run-context.xml:568(term) xml/cut-run-context.xml:582(term)
#: xml/cut-run-context.xml:596(term) xml/cut-run-context.xml:610(term)
#: xml/cut-run-context.xml:624(term) xml/cut-run-context.xml:654(term)
#: xml/cut-run-context.xml:668(term) xml/cut-run-context.xml:710(term)
#: xml/cut-run-context.xml:724(term) xml/cut-run-context.xml:738(term)
#: xml/cut-run-context.xml:784(term) xml/cut-run-context.xml:802(term)
#: xml/cut-run-context.xml:877(term) xml/cut-run-context.xml:891(term)
#: xml/cut-run-context.xml:921(term) xml/cut-run-context.xml:985(term)
#: xml/cut-run-context.xml:1015(term) xml/cut-run-context.xml:1045(term)
#: xml/cut-run-context.xml:1077(term) xml/cut-run-context.xml:1109(term)
#: xml/cut-runner.xml:73(term) xml/cut-sequence-matcher.xml:129(term)
#: xml/cut-sequence-matcher.xml:172(term)
#: xml/cut-sequence-matcher.xml:215(term)
#: xml/cut-sequence-matcher.xml:269(term)
#: xml/cut-sequence-matcher.xml:287(term)
#: xml/cut-sequence-matcher.xml:313(term)
#: xml/cut-sequence-matcher.xml:331(term)
#: xml/cut-sequence-matcher.xml:358(term)
#: xml/cut-sequence-matcher.xml:376(term)
#: xml/cut-sequence-matcher.xml:407(term)
#: xml/cut-sequence-matcher.xml:421(term)
#: xml/cut-sequence-matcher.xml:435(term)
#: xml/cut-sequence-matcher.xml:449(term)
#: xml/cut-sequence-matcher.xml:463(term) xml/cut-stream-parser.xml:69(term)
#: xml/cut-stream-parser.xml:80(term) xml/cut-stream-parser.xml:106(term)
#: xml/cut-stream-parser.xml:124(term) xml/cut-stream-reader.xml:91(term)
#: xml/cut-stream-reader.xml:102(term) xml/cut-stream-reader.xml:120(term)
#: xml/cut-stream-reader.xml:139(term) xml/cut-stream-reader.xml:161(term)
#: xml/cut-stream-reader.xml:175(term) xml/cut-stream.xml:66(term)
#: xml/cut-stream.xml:97(term) xml/cut-test-data.xml:84(term)
#: xml/cut-test-data.xml:95(term) xml/cut-test-data.xml:109(term)
#: xml/cut-test-data.xml:139(term) xml/cut-test-data.xml:173(term)
#: xml/cut-test-iterator.xml:82(term) xml/cut-test-iterator.xml:93(term)
#: xml/cut-test-runner.xml:69(term) xml/cut-test-runner.xml:91(term)
#: xml/cut-test-runner.xml:109(term) xml/cut-test-runner.xml:131(term)
#: xml/cut-test-runner.xml:149(term) xml/cut-ui.xml:85(term)
#: xml/cut-ui.xml:103(term) xml/cutter.xml:351(term)
#: xml/cuttest-event-receiver.xml:77(term) xml/cuttest-utils.xml:75(term)
#: xml/gbsearcharray.xml:78(term) xml/gbsearcharray.xml:191(term)
#: xml/gbsearcharray.xml:205(term) xml/gcut-enum.xml:79(term)
#: xml/gcut-enum.xml:101(term) xml/gcut-enum.xml:125(term)
#: xml/gcut-enum.xml:146(term) xml/gcut-error.xml:66(term)
#: xml/gcut-error.xml:83(term) xml/gcut-hash-table.xml:88(term)
#: xml/gcut-hash-table.xml:127(term) xml/gcut-hash-table.xml:149(term)
#: xml/gcut-hash-table.xml:169(term) xml/gcut-list.xml:96(term)
#: xml/gcut-list.xml:129(term) xml/gcut-list.xml:150(term)
#: xml/gcut-list.xml:168(term) xml/gcut-list.xml:189(term)
#: xml/gcut-list.xml:207(term) xml/gcut-list.xml:228(term)
#: xml/gcut-list.xml:246(term) xml/gcut-list.xml:263(term)
#: xml/gcut-list.xml:285(term) xml/gcut-list.xml:307(term)
#: xml/gcut-object.xml:79(term) xml/gcut-object.xml:97(term)
#: xml/gcut-object.xml:119(term) xml/gcut-public.xml:64(term)
#: xml/gcut-public.xml:82(term) xml/gcut-public.xml:104(term)
#: xml/gcut-public.xml:122(term) xml/gcut-test-utils.xml:138(term)
#: xml/gcut-test-utils.xml:193(term) xml/gcut-test-utils.xml:219(term)
#: xml/gcut-value-equal.xml:72(term) xml/gdkcut-pixbuf.xml:68(term)
#: xml/gdkcut-pixbuf.xml:90(term) xml/gdkcut-pixbuf.xml:112(term)
#: xml/gdkcut-pixbuf.xml:142(term) xml/stack.xml:62(term)
#: xml/stack.xml:88(term) xml/stack.xml:102(term) xml/stack.xml:132(term)
msgid "<emphasis>Returns</emphasis>&nbsp;:"
msgstr "<emphasis>戻り値</emphasis>&nbsp;:"

#: xml/cut-analyzer.xml:69(title)
msgid "cut_analyzer_analyze ()"
msgstr ""

#: xml/cut-analyzer.xml:70(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_analyzer_analyze                (<link linkend=\"CutAnalyzer\">CutAnalyzer</link> *analyzer,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *log_directory,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/cut-analyzer.xml:76(term) xml/cut-analyzer.xml:96(term)
msgid "<parameter>analyzer</parameter>&nbsp;:"
msgstr ""

#: xml/cut-analyzer.xml:79(term)
msgid "<parameter>log_directory</parameter>&nbsp;:"
msgstr ""

#: xml/cut-analyzer.xml:82(term) xml/cut-assertions.xml:237(term)
#: xml/cut-stream-parser.xml:103(term) xml/cut-stream-parser.xml:121(term)
#: xml/cut-stream.xml:60(term) xml/cut-test-utils.xml:343(term)
#: xml/gcut-assertions-helper.xml:526(term) xml/gcut-assertions.xml:385(term)
#: xml/gcut-assertions.xml:403(term) xml/gcut-error.xml:80(term)
#: xml/gcut-public.xml:79(term) xml/gcut-test-utils.xml:86(term)
#: xml/gdkcut-pixbuf.xml:139(term)
msgid "<parameter>error</parameter>&nbsp;:"
msgstr ""

#: xml/cut-analyzer.xml:91(title)
msgid "cut_analyzer_get_run_contexts ()"
msgstr ""

#: xml/cut-analyzer.xml:92(programlisting)
#, no-wrap
msgid "const <link linkend=\"GList\">GList</link>*        cut_analyzer_get_run_contexts       (<link linkend=\"CutAnalyzer\">CutAnalyzer</link> *analyzer);"
msgstr ""

#: xml/cut-assertions.xml:7(refentrytitle) xml/cut-assertions.xml:13(refname)
#: xml/cutter.xml:378(link)
msgid "Assertions"
msgstr "検証"

#: xml/cut-assertions.xml:14(refpurpose)
msgid "Checks that your program works as you expect."
msgstr "あなたのプログラムが期待通りに動作しているかを検証します。"

#: xml/cut-assertions.xml:22(link) xml/cut-assertions.xml:91(primary)
msgid "cut_assert"
msgstr ""

#: xml/cut-assertions.xml:23(link) xml/cut-assertions.xml:107(primary)
msgid "cut_assert_true"
msgstr ""

#: xml/cut-assertions.xml:24(link) xml/cut-assertions.xml:124(primary)
msgid "cut_assert_false"
msgstr ""

#: xml/cut-assertions.xml:25(link) xml/cut-assertions.xml:141(primary)
msgid "cut_assert_null"
msgstr ""

#: xml/cut-assertions.xml:26(link) xml/cut-assertions.xml:157(primary)
msgid "cut_assert_null_string"
msgstr ""

#: xml/cut-assertions.xml:27(link) xml/cut-assertions.xml:174(primary)
msgid "cut_assert_not_null"
msgstr ""

#: xml/cut-assertions.xml:28(link) xml/cut-assertions.xml:190(primary)
msgid "cut_assert_equal_int"
msgstr ""

#: xml/cut-assertions.xml:29(link) xml/cut-assertions.xml:209(primary)
msgid "cut_assert_equal_uint"
msgstr ""

#: xml/cut-assertions.xml:30(link) xml/cut-assertions.xml:228(primary)
msgid "cut_assert_equal_double"
msgstr ""

#: xml/cut-assertions.xml:31(link) xml/cut-assertions.xml:250(primary)
msgid "cut_assert_equal_string"
msgstr ""

#: xml/cut-assertions.xml:32(link) xml/cut-assertions.xml:270(primary)
msgid "cut_assert_equal_string_with_free"
msgstr ""

#: xml/cut-assertions.xml:33(link) xml/cut-assertions.xml:291(primary)
msgid "cut_assert_equal_string_or_null"
msgstr ""

#: xml/cut-assertions.xml:34(link) xml/cut-assertions.xml:312(primary)
msgid "cut_assert_equal_memory"
msgstr ""

#: xml/cut-assertions.xml:36(link) xml/cut-assertions.xml:339(primary)
msgid "cut_assert_equal_string_array"
msgstr ""

#: xml/cut-assertions.xml:37(link) xml/cut-assertions.xml:359(primary)
msgid "cut_assert_equal_string_array_with_free"
msgstr ""

#: xml/cut-assertions.xml:38(link) xml/cut-assertions.xml:380(primary)
msgid "cut_assert_operator"
msgstr ""

#: xml/cut-assertions.xml:39(link) xml/cut-assertions.xml:408(primary)
msgid "cut_assert_operator_int"
msgstr ""

#: xml/cut-assertions.xml:40(link) xml/cut-assertions.xml:436(primary)
msgid "cut_assert_operator_double"
msgstr ""

#: xml/cut-assertions.xml:41(link) xml/cut-assertions.xml:465(primary)
msgid "cut_assert_equal"
msgstr ""

#: xml/cut-assertions.xml:42(link) xml/cut-assertions.xml:493(primary)
msgid "cut_assert_errno"
msgstr ""

#: xml/cut-assertions.xml:43(link) xml/cut-assertions.xml:514(primary)
msgid "cut_assert_file_exist"
msgstr ""

#: xml/cut-assertions.xml:44(link) xml/cut-assertions.xml:539(primary)
msgid "cut_assert_path_exist"
msgstr ""

#: xml/cut-assertions.xml:45(link) xml/cut-assertions.xml:563(primary)
msgid "cut_assert_path_not_exist"
msgstr ""

#: xml/cut-assertions.xml:46(link) xml/cut-assertions.xml:587(primary)
msgid "cut_assert_match"
msgstr ""

#: xml/cut-assertions.xml:47(link) xml/cut-assertions.xml:614(primary)
msgid "cut_assert_match_with_free"
msgstr ""

#: xml/cut-assertions.xml:48(link) xml/cut-assertions.xml:635(primary)
msgid "cut_assert_equal_pointer"
msgstr ""

#: xml/cut-assertions.xml:49(link) xml/cut-assertions.xml:655(primary)
msgid "cut_assert_equal_fixture_data_string"
msgstr ""

#: xml/cut-assertions.xml:50(link) xml/cut-assertions.xml:674(primary)
msgid "cut_assert_equal_fixture_data_string_helper"
msgstr ""

#: xml/cut-assertions.xml:52(link) xml/cut-assertions.xml:693(primary)
msgid "cut_error"
msgstr ""

#: xml/cut-assertions.xml:53(link) xml/cut-assertions.xml:708(primary)
msgid "cut_error_errno"
msgstr ""

#: xml/cut-assertions.xml:54(link) xml/cut-assertions.xml:731(primary)
msgid "cut_fail"
msgstr ""

#: xml/cut-assertions.xml:55(link) xml/cut-assertions.xml:746(primary)
msgid "cut_pend"
msgstr ""

#: xml/cut-assertions.xml:56(link) xml/cut-assertions.xml:762(primary)
msgid "cut_pending"
msgstr ""

#: xml/cut-assertions.xml:57(link) xml/cut-assertions.xml:779(primary)
msgid "cut_notify"
msgstr ""

#: xml/cut-assertions.xml:58(link) xml/cut-assertions.xml:794(primary)
msgid "cut_omit"
msgstr ""

#: xml/cut-assertions.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>                          (expression, ...)\n"
"#define             <placeholder-2/>                     (expression, ...)\n"
"#define             <placeholder-3/>                    (expression, ...)\n"
"#define             <placeholder-4/>                     (expression, ...)\n"
"#define             <placeholder-5/>              (expression, ...)\n"
"#define             <placeholder-6/>                 (expression, ...)\n"
"#define             <placeholder-7/>                (expected, actual, ...)\n"
"#define             <placeholder-8/>               (expected, actual, ...)\n"
"#define             <placeholder-9/>             (expected, error, actual, ...)\n"
"#define             <placeholder-10/>             (expected, actual, ...)\n"
"#define             <placeholder-11/>   (expected, actual, ...)\n"
"#define             <placeholder-12/>     (expected, actual, ...)\n"
"#define             <placeholder-13/>             (expected, expected_size,\n"
"                                                         actual, actual_size, ...)\n"
"#define             <placeholder-14/>       (expected, actual, ...)\n"
"#define             <placeholder-15/>(expected, actual, ...)\n"
"#define             <placeholder-16/>                 (lhs, operator, rhs, ...)\n"
"#define             <placeholder-17/>             (lhs, operator, rhs, ...)\n"
"#define             <placeholder-18/>          (lhs, operator, rhs, ...)\n"
"#define             <placeholder-19/>                    (function, expected, actual, ...)\n"
"#define             <placeholder-20/>                    (...)\n"
"#define             <placeholder-21/>               (path, ...)\n"
"#define             <placeholder-22/>               (path, ...)\n"
"#define             <placeholder-23/>           (path, ...)\n"
"#define             <placeholder-24/>                    (pattern, actual, ...)\n"
"#define             <placeholder-25/>          (pattern, actual, ...)\n"
"#define             <placeholder-26/>            (expected, actual, ...)\n"
"#define             <placeholder-27/>(expected, path, ...)\n"
"#define             <placeholder-28/>(expected, path,\n"
"                                                         ...)\n"
"#define             <placeholder-29/>                           (format, ...)\n"
"#define             <placeholder-30/>                     (...)\n"
"#define             <placeholder-31/>                            (format, ...)\n"
"#define             <placeholder-32/>                            (format, ...)\n"
"#define             <placeholder-33/>                         (format, ...)\n"
"#define             <placeholder-34/>                          (format, ...)\n"
"#define             <placeholder-35/>                            (format, ...)\n"
msgstr ""

#: xml/cut-assertions.xml:72(para)
msgid ""
"To check that your program works as you expect, you use <link linkend=\"cut-"
"assert-XXX\"><function>cut_assert_XXX()</function></link> where you want to "
"check expected value is got."
msgstr ""
"あなたのプログラムが期待通りに動作しているかを検証するために、期待した値が得"
"られていることを検証したい箇所で<link linkend=\"cut-assert-XXX"
"\"><function>cut_assert_XXX()</function></link>を使います。"

#: xml/cut-assertions.xml:79(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal_int(3, 1 + 2);\n"
msgstr ""

#: xml/cut-assertions.xml:77(para) xml/cut-assertions.xml:384(para)
#: xml/cut-assertions.xml:412(para) xml/cut-assertions.xml:440(para)
#: xml/cut-assertions.xml:469(para) xml/cut-assertions.xml:497(para)
#: xml/cut-assertions.xml:519(para) xml/cut-assertions.xml:543(para)
#: xml/cut-assertions.xml:567(para) xml/cut-assertions.xml:591(para)
#: xml/cut-assertions.xml:709(para) xml/cut-assertions.xml:798(para)
#: xml/cut-experimental.xml:54(para) xml/cut-experimental.xml:82(para)
#: xml/cut-experimental.xml:114(para) xml/cut-experimental.xml:143(para)
#: xml/cut-helper.xml:175(para) xml/cut-helper.xml:220(para)
#: xml/cut-helper.xml:300(para) xml/cut-multi-process.xml:117(para)
#: xml/cut-multi-process.xml:137(para) xml/cutter.xml:193(para)
#: xml/cutter.xml:279(para) xml/cutter.xml:325(para)
#: xml/gcut-assertions.xml:526(para) xml/gcut-assertions.xml:558(para)
#: xml/gcut-assertions.xml:597(para) xml/gcut-assertions.xml:627(para)
#: xml/gcut-hash-table.xml:71(para) xml/gcut-hash-table.xml:107(para)
#: xml/gcut-list.xml:79(para) xml/gcut-list.xml:112(para)
#: xml/gcut-value-equal.xml:83(para)
msgid "e.g.: <placeholder-1/>"
msgstr "例: <placeholder-1/>"

#: xml/cut-assertions.xml:90(title)
msgid "cut_assert()"
msgstr ""

#: xml/cut-assertions.xml:91(programlisting)
#, no-wrap
msgid "#define             cut_assert(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:92(para)
msgid "Passes if <parameter>expression</parameter> is not 0 or NULL."
msgstr "<parameter>expression</parameter>が0でもNULLでもないときにパスします。"

#: xml/cut-assertions.xml:97(term) xml/cut-assertions.xml:113(term)
#: xml/cut-assertions.xml:130(term) xml/cut-assertions.xml:147(term)
#: xml/cut-assertions.xml:163(term) xml/cut-assertions.xml:180(term)
#: xml/cut-helper.xml:267(term) xml/cut-helper.xml:328(term)
msgid "<parameter>expression</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:98(simpara) xml/cut-assertions.xml:114(simpara)
#: xml/cut-assertions.xml:131(simpara) xml/cut-assertions.xml:148(simpara)
#: xml/cut-assertions.xml:181(simpara)
msgid "the expression to check."
msgstr "チェックする式。"

#: xml/cut-assertions.xml:100(term) xml/cut-assertions.xml:116(term)
#: xml/cut-assertions.xml:133(term) xml/cut-assertions.xml:150(term)
#: xml/cut-assertions.xml:166(term) xml/cut-assertions.xml:183(term)
#: xml/cut-assertions.xml:202(term) xml/cut-assertions.xml:221(term)
#: xml/cut-assertions.xml:243(term) xml/cut-assertions.xml:263(term)
#: xml/cut-assertions.xml:283(term) xml/cut-assertions.xml:305(term)
#: xml/cut-assertions.xml:332(term) xml/cut-assertions.xml:352(term)
#: xml/cut-assertions.xml:372(term) xml/cut-assertions.xml:401(term)
#: xml/cut-assertions.xml:429(term) xml/cut-assertions.xml:457(term)
#: xml/cut-assertions.xml:486(term) xml/cut-assertions.xml:506(term)
#: xml/cut-assertions.xml:531(term) xml/cut-assertions.xml:555(term)
#: xml/cut-assertions.xml:579(term) xml/cut-assertions.xml:606(term)
#: xml/cut-assertions.xml:627(term) xml/cut-assertions.xml:647(term)
#: xml/cut-assertions.xml:667(term) xml/cut-assertions.xml:685(term)
#: xml/cut-assertions.xml:702(term) xml/cut-assertions.xml:723(term)
#: xml/cut-assertions.xml:740(term) xml/cut-assertions.xml:756(term)
#: xml/cut-assertions.xml:773(term) xml/cut-assertions.xml:788(term)
#: xml/cut-assertions.xml:810(term) xml/cut-helper.xml:161(term)
#: xml/cut-module-factory.xml:82(term) xml/cut-report.xml:78(term)
#: xml/cut-run-context.xml:952(term) xml/cut-stream.xml:94(term)
#: xml/cut-test-utils-helper.xml:124(term) xml/cut-test-utils.xml:175(term)
#: xml/cut-test-utils.xml:252(term) xml/cut-test-utils.xml:271(term)
#: xml/cut-test-utils.xml:290(term) xml/cut-test-utils.xml:307(term)
#: xml/cut-ui.xml:82(term) xml/cutter.xml:265(term) xml/cutter.xml:307(term)
#: xml/cuttest-assertions.xml:172(term) xml/cuttest-assertions.xml:207(term)
#: xml/cuttest-assertions.xml:296(term)
#: xml/gcut-assertions-helper.xml:196(term)
#: xml/gcut-assertions-helper.xml:232(term)
#: xml/gcut-assertions-helper.xml:268(term)
#: xml/gcut-assertions-helper.xml:304(term)
#: xml/gcut-assertions-helper.xml:341(term)
#: xml/gcut-assertions-helper.xml:385(term)
#: xml/gcut-assertions-helper.xml:429(term)
#: xml/gcut-assertions-helper.xml:470(term)
#: xml/gcut-assertions-helper.xml:507(term)
#: xml/gcut-assertions-helper.xml:535(term)
#: xml/gcut-assertions-helper.xml:571(term)
#: xml/gcut-assertions-helper.xml:615(term)
#: xml/gcut-assertions-helper.xml:659(term)
#: xml/gcut-assertions-helper.xml:703(term)
#: xml/gcut-assertions-helper.xml:739(term)
#: xml/gcut-assertions-helper.xml:775(term) xml/gcut-assertions.xml:90(term)
#: xml/gcut-assertions.xml:111(term) xml/gcut-assertions.xml:130(term)
#: xml/gcut-assertions.xml:151(term) xml/gcut-assertions.xml:170(term)
#: xml/gcut-assertions.xml:191(term) xml/gcut-assertions.xml:212(term)
#: xml/gcut-assertions.xml:232(term) xml/gcut-assertions.xml:253(term)
#: xml/gcut-assertions.xml:275(term) xml/gcut-assertions.xml:302(term)
#: xml/gcut-assertions.xml:326(term) xml/gcut-assertions.xml:350(term)
#: xml/gcut-assertions.xml:371(term) xml/gcut-assertions.xml:388(term)
#: xml/gcut-assertions.xml:406(term) xml/gcut-assertions.xml:427(term)
#: xml/gcut-assertions.xml:444(term) xml/gcut-assertions.xml:458(term)
#: xml/gcut-assertions.xml:476(term) xml/gcut-assertions.xml:496(term)
#: xml/gcut-assertions.xml:514(term) xml/gcut-assertions.xml:546(term)
#: xml/gcut-assertions.xml:583(term) xml/gcut-assertions.xml:614(term)
#: xml/gcut-assertions.xml:657(term) xml/gcut-assertions.xml:677(term)
#: xml/gcut-assertions.xml:697(term) xml/gcut-test-utils.xml:135(term)
#: xml/gcut-test-utils.xml:156(term) xml/gcut-test-utils.xml:187(term)
#: xml/gcut-test-utils.xml:239(term)
#: xml/gdkcut-pixbuf-assertions-helper.xml:89(term)
#: xml/gdkcut-pixbuf-assertions.xml:73(term)
msgid "<parameter>...</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:101(simpara) xml/cut-assertions.xml:117(simpara)
#: xml/cut-assertions.xml:134(simpara) xml/cut-assertions.xml:151(simpara)
#: xml/cut-assertions.xml:167(simpara) xml/cut-assertions.xml:184(simpara)
#: xml/cut-assertions.xml:203(simpara) xml/cut-assertions.xml:222(simpara)
#: xml/cut-assertions.xml:244(simpara) xml/cut-assertions.xml:264(simpara)
#: xml/cut-assertions.xml:284(simpara) xml/cut-assertions.xml:306(simpara)
#: xml/cut-assertions.xml:333(simpara) xml/cut-assertions.xml:353(simpara)
#: xml/cut-assertions.xml:373(simpara) xml/cut-assertions.xml:402(simpara)
#: xml/cut-assertions.xml:430(simpara) xml/cut-assertions.xml:458(simpara)
#: xml/cut-assertions.xml:487(simpara) xml/cut-assertions.xml:507(simpara)
#: xml/cut-assertions.xml:532(simpara) xml/cut-assertions.xml:556(simpara)
#: xml/cut-assertions.xml:580(simpara) xml/cut-assertions.xml:607(simpara)
#: xml/cut-assertions.xml:628(simpara) xml/cut-assertions.xml:648(simpara)
#: xml/cut-assertions.xml:724(simpara) xml/cut-helper.xml:162(simpara)
#: xml/gcut-assertions.xml:91(simpara) xml/gcut-assertions.xml:112(simpara)
#: xml/gcut-assertions.xml:131(simpara) xml/gcut-assertions.xml:152(simpara)
#: xml/gcut-assertions.xml:171(simpara) xml/gcut-assertions.xml:192(simpara)
#: xml/gcut-assertions.xml:213(simpara) xml/gcut-assertions.xml:233(simpara)
#: xml/gcut-assertions.xml:254(simpara) xml/gcut-assertions.xml:276(simpara)
#: xml/gcut-assertions.xml:303(simpara) xml/gcut-assertions.xml:327(simpara)
#: xml/gcut-assertions.xml:351(simpara) xml/gcut-assertions.xml:372(simpara)
#: xml/gcut-assertions.xml:389(simpara) xml/gcut-assertions.xml:407(simpara)
#: xml/gcut-assertions.xml:428(simpara) xml/gcut-assertions.xml:497(simpara)
#: xml/gcut-assertions.xml:547(simpara) xml/gcut-assertions.xml:584(simpara)
#: xml/gcut-assertions.xml:615(simpara) xml/gcut-assertions.xml:658(simpara)
#: xml/gcut-assertions.xml:678(simpara) xml/gcut-assertions.xml:698(simpara)
#: xml/gdkcut-pixbuf-assertions.xml:74(simpara)
msgid ""
"optional format string, followed by parameters to insert into the format "
"string (as with <link linkend=\"printf\"><function>printf()</function></"
"link>)"
msgstr ""
"省略可能な整形文字列。以降のパラメータが整形文字列に挿入されます。（<link "
"linkend=\"printf\"><function>printf()</function></link>と同じ）"

#: xml/cut-assertions.xml:106(title)
msgid "cut_assert_true()"
msgstr ""

#: xml/cut-assertions.xml:107(programlisting)
#, no-wrap
msgid "#define             cut_assert_true(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:108(para)
msgid ""
"Passes if <parameter>expression</parameter> is TRUE value (not 0 or NULL)."
msgstr ""
"<parameter>expression</parameter>が真の値の（0でもNULLでもない）ときにパスし"
"ます。"

#: xml/cut-assertions.xml:120(para) xml/cut-assertions.xml:137(para)
#: xml/cut-assertions.xml:376(para) xml/cut-assertions.xml:535(para)
msgid "Since 0.9"
msgstr "0.9から"

#: xml/cut-assertions.xml:123(title)
msgid "cut_assert_false()"
msgstr ""

#: xml/cut-assertions.xml:124(programlisting)
#, no-wrap
msgid "#define             cut_assert_false(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:125(para)
msgid "Passes if <parameter>expression</parameter> is 0 or NULL."
msgstr "<parameter>expression</parameter>が0かNULLのときにパスします。"

#: xml/cut-assertions.xml:140(title)
msgid "cut_assert_null()"
msgstr ""

#: xml/cut-assertions.xml:141(programlisting)
#, no-wrap
msgid "#define             cut_assert_null(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:142(para) xml/cut-assertions.xml:158(para)
msgid "Passes if <parameter>expression</parameter> is NULL."
msgstr "<parameter>expression</parameter>がNULLのときにパスします。"

#: xml/cut-assertions.xml:156(title)
msgid "cut_assert_null_string()"
msgstr ""

#: xml/cut-assertions.xml:157(programlisting)
#, no-wrap
msgid "#define             cut_assert_null_string(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:164(simpara)
msgid "the expression that returns string."
msgstr "文字列を返す式。"

#: xml/cut-assertions.xml:170(para) xml/cut-assertions.xml:287(para)
msgid "Since 0.3"
msgstr "0.3から"

#: xml/cut-assertions.xml:173(title)
msgid "cut_assert_not_null()"
msgstr ""

#: xml/cut-assertions.xml:174(programlisting)
#, no-wrap
msgid "#define             cut_assert_not_null(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:175(para)
msgid "Passes if <parameter>expression</parameter> is not NULL."
msgstr "<parameter>expression</parameter>がNULLではないときにパスします。"

#: xml/cut-assertions.xml:189(title)
msgid "cut_assert_equal_int()"
msgstr ""

#: xml/cut-assertions.xml:190(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_int(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:191(para) xml/cut-assertions.xml:210(para)
#: xml/cut-assertions.xml:636(para) xml/gcut-assertions.xml:79(para)
#: xml/gcut-assertions.xml:100(para) xml/gcut-assertions.xml:119(para)
#: xml/gcut-assertions.xml:140(para) xml/gcut-assertions.xml:159(para)
#: xml/gcut-assertions.xml:180(para) xml/gcut-assertions.xml:201(para)
#: xml/gcut-assertions.xml:221(para) xml/gcut-assertions.xml:242(para)
#: xml/gcut-assertions.xml:360(para) xml/gcut-assertions.xml:416(para)
#: xml/gcut-assertions.xml:485(para) xml/gcut-assertions.xml:523(para)
#: xml/gcut-assertions.xml:555(para) xml/gcut-assertions.xml:666(para)
#: xml/gcut-assertions.xml:686(para)
msgid ""
"Passes if <parameter>expected</parameter> == <parameter>actual</parameter>."
msgstr ""
"<parameter>expected</parameter> == <parameter>actual</parameter>が成り立つと"
"きパスします。"

#: xml/cut-assertions.xml:196(term) xml/cut-assertions.xml:215(term)
#: xml/cut-assertions.xml:234(term) xml/cut-assertions.xml:257(term)
#: xml/cut-assertions.xml:277(term) xml/cut-assertions.xml:299(term)
#: xml/cut-assertions.xml:320(term) xml/cut-assertions.xml:346(term)
#: xml/cut-assertions.xml:366(term) xml/cut-assertions.xml:480(term)
#: xml/cut-assertions.xml:641(term) xml/cut-assertions.xml:661(term)
#: xml/cut-assertions.xml:679(term) xml/gcut-assertions-helper.xml:181(term)
#: xml/gcut-assertions-helper.xml:217(term)
#: xml/gcut-assertions-helper.xml:253(term)
#: xml/gcut-assertions-helper.xml:289(term)
#: xml/gcut-assertions-helper.xml:326(term)
#: xml/gcut-assertions-helper.xml:367(term)
#: xml/gcut-assertions-helper.xml:411(term)
#: xml/gcut-assertions-helper.xml:452(term)
#: xml/gcut-assertions-helper.xml:492(term)
#: xml/gcut-assertions-helper.xml:556(term)
#: xml/gcut-assertions-helper.xml:597(term)
#: xml/gcut-assertions-helper.xml:641(term)
#: xml/gcut-assertions-helper.xml:682(term)
#: xml/gcut-assertions-helper.xml:724(term)
#: xml/gcut-assertions-helper.xml:760(term) xml/gcut-assertions.xml:84(term)
#: xml/gcut-assertions.xml:105(term) xml/gcut-assertions.xml:124(term)
#: xml/gcut-assertions.xml:145(term) xml/gcut-assertions.xml:164(term)
#: xml/gcut-assertions.xml:185(term) xml/gcut-assertions.xml:206(term)
#: xml/gcut-assertions.xml:226(term) xml/gcut-assertions.xml:247(term)
#: xml/gcut-assertions.xml:269(term) xml/gcut-assertions.xml:292(term)
#: xml/gcut-assertions.xml:320(term) xml/gcut-assertions.xml:344(term)
#: xml/gcut-assertions.xml:365(term) xml/gcut-assertions.xml:421(term)
#: xml/gcut-assertions.xml:490(term) xml/gcut-assertions.xml:508(term)
#: xml/gcut-assertions.xml:540(term) xml/gcut-assertions.xml:577(term)
#: xml/gcut-assertions.xml:608(term) xml/gcut-assertions.xml:648(term)
#: xml/gcut-assertions.xml:671(term) xml/gcut-assertions.xml:691(term)
#: xml/gdkcut-pixbuf-assertions-helper.xml:68(term)
#: xml/gdkcut-pixbuf-assertions.xml:64(term)
msgid "<parameter>expected</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:197(simpara)
msgid "an expected integer value."
msgstr "期待する整数の値。"

#: xml/cut-assertions.xml:199(term) xml/cut-assertions.xml:218(term)
#: xml/cut-assertions.xml:240(term) xml/cut-assertions.xml:260(term)
#: xml/cut-assertions.xml:280(term) xml/cut-assertions.xml:302(term)
#: xml/cut-assertions.xml:326(term) xml/cut-assertions.xml:349(term)
#: xml/cut-assertions.xml:369(term) xml/cut-assertions.xml:483(term)
#: xml/cut-assertions.xml:603(term) xml/cut-assertions.xml:624(term)
#: xml/cut-assertions.xml:644(term) xml/gcut-assertions-helper.xml:184(term)
#: xml/gcut-assertions-helper.xml:220(term)
#: xml/gcut-assertions-helper.xml:256(term)
#: xml/gcut-assertions-helper.xml:292(term)
#: xml/gcut-assertions-helper.xml:329(term)
#: xml/gcut-assertions-helper.xml:370(term)
#: xml/gcut-assertions-helper.xml:414(term)
#: xml/gcut-assertions-helper.xml:455(term)
#: xml/gcut-assertions-helper.xml:495(term)
#: xml/gcut-assertions-helper.xml:559(term)
#: xml/gcut-assertions-helper.xml:600(term)
#: xml/gcut-assertions-helper.xml:644(term)
#: xml/gcut-assertions-helper.xml:685(term)
#: xml/gcut-assertions-helper.xml:727(term)
#: xml/gcut-assertions-helper.xml:763(term) xml/gcut-assertions.xml:87(term)
#: xml/gcut-assertions.xml:108(term) xml/gcut-assertions.xml:127(term)
#: xml/gcut-assertions.xml:148(term) xml/gcut-assertions.xml:167(term)
#: xml/gcut-assertions.xml:188(term) xml/gcut-assertions.xml:209(term)
#: xml/gcut-assertions.xml:229(term) xml/gcut-assertions.xml:250(term)
#: xml/gcut-assertions.xml:272(term) xml/gcut-assertions.xml:295(term)
#: xml/gcut-assertions.xml:323(term) xml/gcut-assertions.xml:347(term)
#: xml/gcut-assertions.xml:368(term) xml/gcut-assertions.xml:424(term)
#: xml/gcut-assertions.xml:493(term) xml/gcut-assertions.xml:511(term)
#: xml/gcut-assertions.xml:543(term) xml/gcut-assertions.xml:580(term)
#: xml/gcut-assertions.xml:611(term) xml/gcut-assertions.xml:651(term)
#: xml/gcut-assertions.xml:674(term) xml/gcut-assertions.xml:694(term)
#: xml/gdkcut-pixbuf-assertions-helper.xml:71(term)
#: xml/gdkcut-pixbuf-assertions.xml:67(term)
msgid "<parameter>actual</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:200(simpara)
msgid "an actual integer value."
msgstr "実際の整数の値。"

#: xml/cut-assertions.xml:208(title)
msgid "cut_assert_equal_uint()"
msgstr ""

#: xml/cut-assertions.xml:209(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_uint(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:216(simpara)
msgid "an expected unsigned integer value."
msgstr "期待する符号無し整数の値。"

#: xml/cut-assertions.xml:219(simpara)
msgid "an actual unsigned integer value."
msgstr "実際の符号無し符号整数の値。"

#: xml/cut-assertions.xml:227(title)
msgid "cut_assert_equal_double()"
msgstr ""

#: xml/cut-assertions.xml:228(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_double(expected, error, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:229(para)
msgid ""
"Passes if (<parameter>expected</parameter> - <parameter>error</parameter>) "
"&lt;= <parameter>actual</parameter> &lt;= (<parameter>expected</parameter> + "
"<parameter>error</parameter>)."
msgstr ""
"(<parameter>expected</parameter> - <parameter>error</parameter>) &lt;= "
"<parameter>actual</parameter> &lt;= (<parameter>expected</parameter> + "
"<parameter>error</parameter>)が成り立つときパスします。"

#: xml/cut-assertions.xml:235(simpara)
msgid "an expected float value."
msgstr "期待する浮動小数点数。"

#: xml/cut-assertions.xml:238(simpara)
msgid "a float value that specifies error range."
msgstr "誤差範囲を示す浮動小数点数。"

#: xml/cut-assertions.xml:241(simpara)
msgid "an actual float value."
msgstr "実際の浮動小数点数。"

#: xml/cut-assertions.xml:249(title)
msgid "cut_assert_equal_string()"
msgstr ""

#: xml/cut-assertions.xml:250(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:251(para) xml/cut-assertions.xml:271(para)
#: xml/cut-assertions.xml:293(para)
msgid ""
"Passes if both <parameter>expected</parameter> and <parameter>actual</"
"parameter> are NULL or strcmp(<parameter>expected</parameter>, "
"<parameter>actual</parameter>) == 0."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>がどちらとも"
"NULL、あるいはstrcmp(<parameter>expected</parameter>, <parameter>actual</"
"parameter>) == 0が成り立つときにパスします。"

#: xml/cut-assertions.xml:258(simpara) xml/cut-assertions.xml:278(simpara)
#: xml/cut-assertions.xml:300(simpara)
msgid "an expected string value."
msgstr "期待する文字列。"

#: xml/cut-assertions.xml:261(simpara) xml/cut-assertions.xml:303(simpara)
msgid "an actual string value."
msgstr "実際の文字列の値。"

#: xml/cut-assertions.xml:269(title)
msgid "cut_assert_equal_string_with_free()"
msgstr ""

#: xml/cut-assertions.xml:270(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string_with_free(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:281(simpara)
msgid "an actual string value that is freed."
msgstr "実際の文字列の値（メモリは開放される）。"

#: xml/cut-assertions.xml:290(title)
msgid "cut_assert_equal_string_or_null()"
msgstr ""

#: xml/cut-assertions.xml:291(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string_or_null(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:292(para)
msgid ""
"<literal>cut_assert_equal_string_or_null</literal> has been deprecated since "
"version 0.3 and should not be used in newly-written code. Use <link linkend="
"\"cut-assert-equal-string\"><function>cut_assert_equal_string()</function></"
"link> instead."
msgstr ""
"<literal>cut_assert_equal_string_or_null</literal>はバージョン0.3から非推奨に"
"なりました。新しく書くコードでは使わないでください。代わりに<link linkend="
"\"cut-assert-equal-string\"><function>cut_assert_equal_string()</function></"
"link>を使ってください。"

#: xml/cut-assertions.xml:311(title)
msgid "cut_assert_equal_memory()"
msgstr ""

#: xml/cut-assertions.xml:312(programlisting)
#, no-wrap
msgid ""
"#define             cut_assert_equal_memory(expected, expected_size,                \\\n"
"                                            actual, actual_size, ...)"
msgstr ""

#: xml/cut-assertions.xml:314(para)
msgid ""
"Passes if <parameter>expected_size</parameter> == <parameter>actual_size</"
"parameter> and memcmp(<parameter>expected</parameter>, <parameter>actual</"
"parameter>, <parameter>expected_size</parameter>) == 0."
msgstr ""
"<parameter>expected_size</parameter> == <parameter>actual_size</parameter>が"
"成り立ち、かつ、memcmp(<parameter>expected</parameter>, <parameter>actual</"
"parameter>, <parameter>expected_size</parameter>) == 0が成り立つときにパスし"
"ます。"

#: xml/cut-assertions.xml:321(simpara)
msgid "an expected data."
msgstr "期待するデータ。"

#: xml/cut-assertions.xml:323(term)
msgid "<parameter>expected_size</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:324(simpara)
msgid "a size of <parameter>expected</parameter>."
msgstr "<parameter>expected</parameter>のサイズ。"

#: xml/cut-assertions.xml:327(simpara)
msgid "an actual data."
msgstr "実際のデータ。"

#: xml/cut-assertions.xml:329(term)
msgid "<parameter>actual_size</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:330(simpara)
msgid "a size of <parameter>actual</parameter>."
msgstr "<parameter>actual</parameter>のサイズ。"

#: xml/cut-assertions.xml:338(title)
msgid "cut_assert_equal_string_array()"
msgstr ""

#: xml/cut-assertions.xml:339(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string_array(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:340(para) xml/cut-assertions.xml:360(para)
msgid ""
"Passes if both <parameter>expected</parameter> and <parameter>actual</"
"parameter> are not NULL and have same content (<link linkend=\"strcmp"
"\"><function>strcmp()</function></link> == 0) strings."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>がどちらとも"
"NULLではなく、どちらも同じ内容の文字列(<link linkend=\"strcmp"
"\"><function>strcmp()</function></link> == 0)を持つときにパスします。"

#: xml/cut-assertions.xml:347(simpara) xml/cut-assertions.xml:367(simpara)
msgid "an expected NULL-terminated array of strings."
msgstr "期待する文字列の配列。配列はNULL終端。"

#: xml/cut-assertions.xml:350(simpara)
msgid "an actual NULL-terminated array of strings that are freed."
msgstr "実際の文字列の配列。配列はNULL終端。"

#: xml/cut-assertions.xml:358(title)
msgid "cut_assert_equal_string_array_with_free()"
msgstr ""

#: xml/cut-assertions.xml:359(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string_array_with_free(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:370(simpara)
msgid "an actual NULL-terminated array of strings."
msgstr "実際の文字列の配列。配列はNULL終端。"

#: xml/cut-assertions.xml:379(title)
msgid "cut_assert_operator()"
msgstr ""

#: xml/cut-assertions.xml:380(programlisting)
#, no-wrap
msgid "#define             cut_assert_operator(lhs, operator, rhs, ...)"
msgstr ""

#: xml/cut-assertions.xml:381(para) xml/cut-assertions.xml:409(para)
#: xml/cut-assertions.xml:437(para)
msgid ""
"Passes if (<parameter>lhs</parameter> <parameter>operator</parameter> "
"<parameter>rhs</parameter>) is TRUE."
msgstr ""
"(<parameter>lhs</parameter> <parameter>operator</parameter> <parameter>rhs</"
"parameter>)が真のときにパスします。"

#: xml/cut-assertions.xml:386(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_operator(1, &lt;, 2) -&gt; (1 &lt; 2);\n"
msgstr ""

#: xml/cut-assertions.xml:392(term) xml/cut-assertions.xml:420(term)
#: xml/cut-assertions.xml:448(term)
msgid "<parameter>lhs</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:393(simpara)
msgid "a left hand side value."
msgstr "左辺値。"

#: xml/cut-assertions.xml:395(term) xml/cut-assertions.xml:423(term)
#: xml/cut-assertions.xml:451(term)
msgid "<parameter>operator</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:396(simpara) xml/cut-assertions.xml:424(simpara)
#: xml/cut-assertions.xml:452(simpara)
msgid "a binary operator."
msgstr "二項演算子。"

#: xml/cut-assertions.xml:398(term) xml/cut-assertions.xml:426(term)
#: xml/cut-assertions.xml:454(term)
msgid "<parameter>rhs</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:399(simpara)
msgid "a right hand side value."
msgstr "右辺値。"

#: xml/cut-assertions.xml:407(title)
msgid "cut_assert_operator_int()"
msgstr ""

#: xml/cut-assertions.xml:408(programlisting)
#, no-wrap
msgid "#define             cut_assert_operator_int(lhs, operator, rhs, ...)"
msgstr ""

#: xml/cut-assertions.xml:414(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_operator_int(1, &lt;, 2) -&gt; (1 &lt; 2);\n"
msgstr ""

#: xml/cut-assertions.xml:421(simpara)
msgid "a left hand side integer value."
msgstr "左辺の整数の値。"

#: xml/cut-assertions.xml:427(simpara)
msgid "a right hand side integer value."
msgstr "右辺の整数の値。"

#: xml/cut-assertions.xml:435(title)
msgid "cut_assert_operator_double()"
msgstr ""

#: xml/cut-assertions.xml:436(programlisting)
#, no-wrap
msgid "#define             cut_assert_operator_double(lhs, operator, rhs, ...)"
msgstr ""

#: xml/cut-assertions.xml:442(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_operator_double(1.1, &lt;, 2.2) -&gt; (1.1 &lt; 2.2);\n"
msgstr ""

#: xml/cut-assertions.xml:449(simpara)
msgid "a left hand side double value."
msgstr "左辺の浮動小数点値。"

#: xml/cut-assertions.xml:455(simpara)
msgid "a right hand side double value."
msgstr "右辺の浮動小数点値。"

#: xml/cut-assertions.xml:461(para) xml/cut-helper.xml:145(para)
#: xml/cut-helper.xml:165(para) xml/cut-helper.xml:201(para)
#: xml/cut-helper.xml:270(para) xml/cut-helper.xml:334(para)
#: xml/cut-multi-process.xml:379(para) xml/cut-multi-process.xml:399(para)
#: xml/cut-test-utils.xml:82(para) xml/cut-test-utils.xml:96(para)
#: xml/cut-test-utils.xml:124(para) xml/cut-test-utils.xml:143(para)
#: xml/cut-test-utils.xml:161(para) xml/cut-test-utils.xml:327(para)
#: xml/cut-test-utils.xml:346(para) xml/gcut-assertions.xml:279(para)
#: xml/gcut-assertions.xml:306(para) xml/gcut-assertions.xml:330(para)
#: xml/gcut-assertions.xml:354(para) xml/gcut-assertions.xml:431(para)
#: xml/gcut-assertions.xml:550(para) xml/gcut-assertions.xml:587(para)
#: xml/gcut-assertions.xml:618(para) xml/gcut-assertions.xml:661(para)
#: xml/gcut-assertions.xml:681(para) xml/gcut-assertions.xml:701(para)
#: xml/gcut-enum.xml:83(para) xml/gcut-enum.xml:104(para)
#: xml/gcut-enum.xml:128(para) xml/gcut-enum.xml:149(para)
#: xml/gcut-error.xml:86(para) xml/gcut-hash-table.xml:93(para)
#: xml/gcut-hash-table.xml:130(para) xml/gcut-hash-table.xml:153(para)
#: xml/gcut-hash-table.xml:172(para) xml/gcut-list.xml:100(para)
#: xml/gcut-list.xml:132(para) xml/gcut-list.xml:154(para)
#: xml/gcut-list.xml:171(para) xml/gcut-list.xml:193(para)
#: xml/gcut-list.xml:210(para) xml/gcut-list.xml:232(para)
#: xml/gcut-list.xml:249(para) xml/gcut-list.xml:266(para)
#: xml/gcut-list.xml:288(para) xml/gcut-list.xml:310(para)
#: xml/gcut-object.xml:83(para) xml/gcut-object.xml:100(para)
#: xml/gcut-test-utils.xml:159(para) xml/gcut-test-utils.xml:224(para)
#: xml/gcut-test-utils.xml:244(para) xml/gcut-value-equal.xml:76(para)
#: xml/gcut-value-equal.xml:105(para)
#: xml/gdkcut-pixbuf-assertions.xml:77(para)
msgid "Since 1.0.5"
msgstr "1.0.5から"

#: xml/cut-assertions.xml:464(title)
msgid "cut_assert_equal()"
msgstr ""

#: xml/cut-assertions.xml:465(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal(function, expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:466(para)
msgid ""
"Passes if <parameter>function</parameter>(<parameter>expected</parameter>, "
"<parameter>actual</parameter>) returns TRUE."
msgstr ""
"<parameter>function</parameter>(<parameter>expected</parameter>, "
"<parameter>actual</parameter>)が真を返すときパスします。"

#: xml/cut-assertions.xml:471(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal(!strcmp, \"abc\", \"abc\"); -&gt; Pass\n"
msgstr ""
"\n"
"cut_assert_equal(!strcmp, \"abc\", \"abc\"); -&gt; パス\n"

#: xml/cut-assertions.xml:477(term) xml/cut-backtrace-entry.xml:91(term)
#: xml/cut-backtrace-entry.xml:197(term) xml/cut-iterated-test.xml:84(term)
#: xml/cut-test-iterator.xml:76(term)
msgid "<parameter>function</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:478(simpara)
msgid ""
"a function that compares <parameter>actual</parameter> with "
"<parameter>expected</parameter>."
msgstr ""
"<parameter>actual</parameter>と<parameter>expected</parameter>を比較する関"
"数。"

#: xml/cut-assertions.xml:481(simpara)
msgid "an expected value."
msgstr "期待値。"

#: xml/cut-assertions.xml:484(simpara)
msgid "an actual value."
msgstr "実測値。"

#: xml/cut-assertions.xml:492(title)
msgid "cut_assert_errno()"
msgstr ""

#: xml/cut-assertions.xml:493(programlisting)
#, no-wrap
msgid "#define             cut_assert_errno(...)"
msgstr ""

#: xml/cut-assertions.xml:494(para)
msgid "Passes if errno is 0."
msgstr "errnoが0だとパスします。"

#: xml/cut-assertions.xml:499(programlisting)
#, no-wrap
msgid ""
"\n"
"count = write(stdout, buffer, strlen(buffer));\n"
"cut_assert_errno(\"Failed to write\");            -&gt; Pass when count != -1\n"
msgstr ""
"\n"
"count = write(stdout, buffer, strlen(buffer));\n"
"cut_assert_errno(\"Failed to write\");            -&gt; count != -1のときパス\n"

#: xml/cut-assertions.xml:510(para) xml/cut-assertions.xml:813(para)
#: xml/cut-experimental.xml:74(para) xml/cut-experimental.xml:106(para)
#: xml/cut-experimental.xml:135(para) xml/cut-experimental.xml:164(para)
#: xml/cutter.xml:175(para) xml/cutter.xml:185(para)
#: xml/gcut-assertions.xml:195(para) xml/gcut-assertions.xml:257(para)
msgid "Since 0.8"
msgstr "0.8から"

#: xml/cut-assertions.xml:513(title)
msgid "cut_assert_file_exist()"
msgstr ""

#: xml/cut-assertions.xml:514(programlisting)
#, no-wrap
msgid "#define             cut_assert_file_exist(path, ...)"
msgstr ""

#: xml/cut-assertions.xml:515(para)
msgid ""
"<literal>cut_assert_file_exist</literal> has been deprecated since version "
"1.0.2 and should not be used in newly-written code. Use <link linkend=\"cut-"
"assert-path-exist\"><function>cut_assert_path_exist()</function></link> "
"instead."
msgstr ""
"<literal>cut_assert_file_exist</literal>はバージョン1.0.2から非推奨になりまし"
"た。新しく書くコードでは使わないでください。代わりに<link linkend=\"cut-"
"assert-path-exist\"><function>cut_assert_path_exist()</function></link>を使っ"
"てください。"

#: xml/cut-assertions.xml:516(para) xml/cut-assertions.xml:540(para)
msgid ""
"Passes if <parameter>path</parameter> exists. It may or may not be a regular "
"file."
msgstr ""
"<parameter>path</parameter>が存在するときにパスします。普通のファイルかもしれ"
"ませんし、そうでないかもしれません。（例えばシンボリックリンクやディレクトリ"
"など）"

#: xml/cut-assertions.xml:521(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_file_exist(\"/tmp\");             -&gt; Pass on many environment\n"
"cut_assert_file_exist(\"/non-existent\");    -&gt; Fail\n"
msgstr ""
"\n"
"cut_assert_file_exist(\"/tmp\");             -&gt; 多くの環境ではパス\n"
"cut_assert_file_exist(\"/non-existent\");    -&gt; 失敗\n"

#: xml/cut-assertions.xml:528(term) xml/cut-assertions.xml:552(term)
#: xml/cut-assertions.xml:576(term) xml/cut-assertions.xml:664(term)
#: xml/cut-assertions.xml:682(term) xml/cut-test-utils.xml:249(term)
#: xml/cut-test-utils.xml:268(term) xml/cut-test-utils.xml:287(term)
#: xml/cut-test-utils.xml:304(term) xml/gcut-assertions.xml:441(term)
#: xml/gcut-assertions.xml:455(term) xml/gcut-assertions.xml:473(term)
msgid "<parameter>path</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:529(simpara) xml/cut-assertions.xml:553(simpara)
#: xml/cut-assertions.xml:577(simpara)
msgid "the path to test."
msgstr "テストするパス。"

#: xml/cut-assertions.xml:538(title)
msgid "cut_assert_path_exist()"
msgstr ""

#: xml/cut-assertions.xml:539(programlisting)
#, no-wrap
msgid "#define             cut_assert_path_exist(path, ...)"
msgstr ""

#: xml/cut-assertions.xml:545(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_path_exist(\"/tmp\");             -&gt; Pass on many environment\n"
"cut_assert_path_exist(\"/non-existent\");    -&gt; Fail\n"
msgstr ""
"\n"
"cut_assert_path_exist(\"/tmp\");             -&gt; 多くの環境ではパス\n"
"cut_assert_path_exist(\"/non-existent\");    -&gt; 失敗\n"

#: xml/cut-assertions.xml:559(para) xml/cut-assertions.xml:583(para)
#: xml/cut-assertions.xml:670(para) xml/cut-assertions.xml:727(para)
#: xml/cut-test-utils.xml:255(para) xml/cut-test-utils.xml:274(para)
#: xml/cut-test-utils.xml:293(para) xml/cut-test-utils.xml:310(para)
#: xml/gcut-assertions.xml:479(para)
msgid "Since 1.0.2"
msgstr "1.0.2から"

#: xml/cut-assertions.xml:562(title)
msgid "cut_assert_path_not_exist()"
msgstr ""

#: xml/cut-assertions.xml:563(programlisting)
#, no-wrap
msgid "#define             cut_assert_path_not_exist(path, ...)"
msgstr ""

#: xml/cut-assertions.xml:564(para)
msgid "Passes if <parameter>path</parameter> doesn't exist."
msgstr "<parameter>path</parameter>が存在しないとパスします。"

#: xml/cut-assertions.xml:569(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_path_not_exist(\"/non-existent\");    -&gt; Pass on many environment\n"
"cut_assert_path_not_exist(\"/tmp\");             -&gt; Fail\n"
msgstr ""
"\n"
"cut_assert_path_not_exist(\"/non-existent\");    -&gt; 多くの環境ではパス\n"
"cut_assert_path_not_exist(\"/tmp\");             -&gt; 失敗\n"

#: xml/cut-assertions.xml:586(title)
msgid "cut_assert_match()"
msgstr ""

#: xml/cut-assertions.xml:587(programlisting)
#, no-wrap
msgid "#define             cut_assert_match(pattern, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:588(para)
msgid ""
"Passes if <parameter>pattern</parameter> matches <parameter>string</"
"parameter>."
msgstr ""
"<parameter>pattern</parameter>が<parameter>string</parameter>にマッチしたとき"
"パスします。"

#: xml/cut-assertions.xml:593(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_match(\"^abc\", \"abc\");            -&gt; Pass\n"
"cut_assert_match(\"^abc\", \" abc\");           -&gt; Fail\n"
msgstr ""
"\n"
"cut_assert_match(\"^abc\", \"abc\");            -&gt; パス\n"
"cut_assert_match(\"^abc\", \" abc\");           -&gt; 失敗\n"

#: xml/cut-assertions.xml:600(term) xml/cut-assertions.xml:621(term)
msgid "<parameter>pattern</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:601(simpara) xml/cut-assertions.xml:622(simpara)
msgid "the regular expression as string."
msgstr "正規表現。（文字列で指定）"

#: xml/cut-assertions.xml:604(simpara)
msgid "the string to be matched."
msgstr "マッチされる文字列。"

#: xml/cut-assertions.xml:610(para) xml/cut-assertions.xml:631(para)
#: xml/cut-assertions.xml:651(para) xml/gcut-assertions.xml:410(para)
msgid "Since 1.0"
msgstr "1.0から"

#: xml/cut-assertions.xml:613(title)
msgid "cut_assert_match_with_free()"
msgstr ""

#: xml/cut-assertions.xml:614(programlisting)
#, no-wrap
msgid "#define             cut_assert_match_with_free(pattern, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:615(para)
msgid ""
"Passes if <parameter>pattern</parameter> matches <parameter>string</"
"parameter>. See <link linkend=\"cut-assert-match\"><function>cut_assert_match"
"()</function></link> for detail."
msgstr ""
"<parameter>pattern</parameter>が<parameter>string</parameter>にマッチしたとき"
"パスします。詳細は<link linkend=\\\"cut-assert-match\\"
"\"><function>cut_assert_match()</function></link>を見てください。"

#: xml/cut-assertions.xml:625(simpara)
msgid "the string to be matched that is freed."
msgstr "マッチされる文字列（メモリは開放される）。"

#: xml/cut-assertions.xml:634(title)
msgid "cut_assert_equal_pointer()"
msgstr ""

#: xml/cut-assertions.xml:635(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_pointer(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:642(simpara)
msgid "an expected pointer."
msgstr "期待するポインタ。"

#: xml/cut-assertions.xml:645(simpara)
msgid "an actual pointer."
msgstr "実際のポインタ。"

#: xml/cut-assertions.xml:654(title)
msgid "cut_assert_equal_fixture_data_string()"
msgstr ""

#: xml/cut-assertions.xml:655(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_fixture_data_string(expected, path, ...)"
msgstr ""

#: xml/cut-assertions.xml:656(para)
msgid ""
"Passes if <parameter>expected</parameter> == cut_get_fixture_data_string"
"(<parameter>path</parameter>, ...)."
msgstr ""
"<parameter>expected</parameter> == cut_get_fixture_data_string"
"(<parameter>path</parameter>, ...)が成り立つときパスします。"

#: xml/cut-assertions.xml:662(simpara)
msgid "an expected string."
msgstr "期待する文字列。"

#: xml/cut-assertions.xml:665(simpara) xml/cut-test-utils.xml:269(simpara)
#: xml/cut-test-utils.xml:288(simpara)
msgid "a first element of the path to the fixture data."
msgstr "フィクスチャデータのパスの最初の要素。"

#: xml/cut-assertions.xml:668(simpara) xml/cut-test-utils.xml:253(simpara)
#: xml/cut-test-utils.xml:272(simpara) xml/cut-test-utils.xml:291(simpara)
#: xml/cut-test-utils.xml:308(simpara) xml/gcut-assertions.xml:445(simpara)
#: xml/gcut-assertions.xml:477(simpara)
msgid "remaining elements in path."
msgstr "パスの残りの要素。"

#: xml/cut-assertions.xml:673(title)
msgid "cut_assert_equal_fixture_data_string_helper()"
msgstr ""

#: xml/cut-assertions.xml:674(programlisting)
#, no-wrap
msgid ""
"#define             cut_assert_equal_fixture_data_string_helper(expected, path,     \\\n"
"                                                                ...)"
msgstr ""

#: xml/cut-assertions.xml:692(title)
msgid "cut_error()"
msgstr ""

#: xml/cut-assertions.xml:693(programlisting)
#, no-wrap
msgid "#define             cut_error(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:694(para)
msgid "Raises an error with message."
msgstr "メッセージ付きでエラーを発生させます。"

#: xml/cut-assertions.xml:699(term) xml/cut-assertions.xml:737(term)
#: xml/cut-assertions.xml:753(term) xml/cut-assertions.xml:770(term)
#: xml/cut-assertions.xml:785(term) xml/cut-assertions.xml:807(term)
#: xml/cut-run-context.xml:949(term) xml/cut-test-utils-helper.xml:121(term)
#: xml/cut-test-utils.xml:172(term) xml/gcut-assertions-helper.xml:193(term)
#: xml/gcut-assertions-helper.xml:229(term)
#: xml/gcut-assertions-helper.xml:265(term)
msgid "<parameter>format</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:700(simpara) xml/cut-assertions.xml:738(simpara)
#: xml/cut-assertions.xml:754(simpara) xml/cut-assertions.xml:771(simpara)
#: xml/cut-assertions.xml:786(simpara) xml/cut-assertions.xml:808(simpara)
#: xml/cut-test-utils.xml:173(simpara)
msgid ""
"the message format. See the <link linkend=\"printf\"><function>printf()</"
"function></link> documentation."
msgstr ""
"整形文字列。<link linkend=\"printf\"><function>printf()</function></link>のド"
"キュメントを見てください。"

#: xml/cut-assertions.xml:703(simpara) xml/cut-assertions.xml:741(simpara)
#: xml/cut-assertions.xml:757(simpara) xml/cut-assertions.xml:774(simpara)
#: xml/cut-assertions.xml:789(simpara) xml/cut-assertions.xml:811(simpara)
#: xml/cut-test-utils.xml:176(simpara)
msgid "the parameters to insert into the format string."
msgstr "整形文字列に挿入されるパラメータ。"

#: xml/cut-assertions.xml:707(title)
msgid "cut_error_errno()"
msgstr ""

#: xml/cut-assertions.xml:708(programlisting)
#, no-wrap
msgid "#define             cut_error_errno(...)"
msgstr ""

#: xml/cut-assertions.xml:711(programlisting)
#, no-wrap
msgid ""
"\n"
"void\n"
"setup (void)\n"
"{\n"
"    mkdir(\"tmp\", 0700);\n"
"    cut_error_errno(\"Failed to make tmp directory\");\n"
"      -&gt; Error when tmp directory isn't made successfully.\n"
"}\n"
msgstr ""

#: xml/cut-assertions.xml:730(title)
msgid "cut_fail()"
msgstr ""

#: xml/cut-assertions.xml:731(programlisting)
#, no-wrap
msgid "#define             cut_fail(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:732(para)
msgid "Raises a failure with message."
msgstr "メッセージ付きでテストを失敗させます。"

#: xml/cut-assertions.xml:745(title)
msgid "cut_pend()"
msgstr ""

#: xml/cut-assertions.xml:746(programlisting)
#, no-wrap
msgid "#define             cut_pend(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:747(para) xml/cut-assertions.xml:764(para)
msgid "Marks the test is pending with message. The test is stopped."
msgstr ""
"メッセージ付きでこのテストが未解決であると印を付けます。テストはここで中断し"
"ます。"

#: xml/cut-assertions.xml:761(title)
msgid "cut_pending()"
msgstr ""

#: xml/cut-assertions.xml:762(programlisting)
#, no-wrap
msgid "#define             cut_pending(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:763(para)
msgid ""
"<literal>cut_pending</literal> has been deprecated since version 0.4 and "
"should not be used in newly-written code. Use <link linkend=\"cut-pend"
"\"><function>cut_pend()</function></link> instead."
msgstr ""
"<literal>cut_pending</literal>はバージョン0.4から非推奨になりました。新しく書"
"くコードでは使わないでください。代わりに<link linkend=\"cut-pend"
"\"><function>cut_pend()</function></link>を使ってください。"

#: xml/cut-assertions.xml:778(title)
msgid "cut_notify()"
msgstr ""

#: xml/cut-assertions.xml:779(programlisting)
#, no-wrap
msgid "#define             cut_notify(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:780(para)
msgid "Leaves a notification message. The test is continued."
msgstr "通知用のメッセージを残します。テストは続行します。"

#: xml/cut-assertions.xml:793(title)
msgid "cut_omit()"
msgstr ""

#: xml/cut-assertions.xml:794(programlisting)
#, no-wrap
msgid "#define             cut_omit(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:795(para)
msgid "Omit the test."
msgstr "このテストを省略します。"

#: xml/cut-assertions.xml:800(programlisting)
#, no-wrap
msgid ""
"\n"
"if (version &lt; 2.0)\n"
"  cut_omit(\"Require &gt;= 2.0\");\n"
msgstr ""

#: xml/cut-backtrace-entry.xml:7(refentrytitle)
#: xml/cut-backtrace-entry.xml:13(refname)
#: xml/cut-backtrace-entry.xml:22(link) xml/cut-backtrace-entry.xml:23(link)
#: xml/cut-backtrace-entry.xml:27(link) xml/cut-backtrace-entry.xml:28(link)
#: xml/cut-backtrace-entry.xml:29(link) xml/cut-backtrace-entry.xml:31(link)
#: xml/cut-backtrace-entry.xml:32(link) xml/cut-backtrace-entry.xml:34(link)
#: xml/cut-backtrace-entry.xml:35(link) xml/cut-backtrace-entry.xml:37(link)
#: xml/cut-backtrace-entry.xml:38(link) xml/cut-backtrace-entry.xml:40(link)
#: xml/cut-backtrace-entry.xml:41(link) xml/cut-backtrace-entry.xml:44(link)
#: xml/cut-backtrace-entry.xml:45(link) xml/cut-backtrace-entry.xml:68(title)
#: xml/cut-backtrace-entry.xml:69(primary)
msgid "CutBacktraceEntry"
msgstr ""

#: xml/cut-backtrace-entry.xml:23(link)
#: xml/cut-backtrace-entry.xml:78(primary)
msgid "cut_backtrace_entry_new"
msgstr ""

#: xml/cut-backtrace-entry.xml:24(link) xml/cut-backtrace-entry.xml:31(link)
#: xml/cut-backtrace-entry.xml:33(link) xml/cut-backtrace-entry.xml:43(link)
#: xml/cut-run-context.xml:60(link) xml/cut-run-context.xml:61(link)
#: xml/cut-run-context.xml:62(link) xml/cut-run-context.xml:63(link)
#: xml/cut-run-context.xml:64(link) xml/cut-run-context.xml:65(link)
#: xml/cut-run-context.xml:66(link) xml/cut-run-context.xml:67(link)
#: xml/cut-stream-reader.xml:27(link) xml/cut-test-data.xml:37(link)
#: xml/cuttest-assertions.xml:38(link) xml/cuttest-assertions.xml:39(link)
#: xml/cuttest-assertions.xml:40(link) xml/cuttest-assertions.xml:41(link)
#: xml/cuttest-assertions.xml:42(link) xml/cuttest-assertions.xml:43(link)
#: xml/cuttest-assertions.xml:44(link) xml/cuttest-assertions.xml:45(link)
#: xml/cuttest-assertions.xml:47(link) xml/gcut-enum.xml:29(link)
#: xml/gcut-enum.xml:30(link) xml/gcut-enum.xml:32(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:25(link)
#: xml/gdkcut-pixbuf.xml:26(link) xml/gdkcut-pixbuf.xml:29(link)
#: xml/gdkcut-pixbuf.xml:32(link)
msgid "guint"
msgstr ""

#: xml/cut-backtrace-entry.xml:27(link)
#: xml/cut-backtrace-entry.xml:104(primary)
msgid "cut_backtrace_entry_new_empty"
msgstr ""

#: xml/cut-backtrace-entry.xml:28(link)
#: xml/cut-backtrace-entry.xml:115(primary)
msgid "cut_backtrace_entry_get_file"
msgstr ""

#: xml/cut-backtrace-entry.xml:29(link) xml/cut-backtrace-entry.xml:32(link)
#: xml/cut-backtrace-entry.xml:35(link) xml/cut-backtrace-entry.xml:38(link)
#: xml/cut-backtrace-entry.xml:41(link) xml/cut-backtrace-entry.xml:45(link)
#: xml/cut-cairo-pie-chart.xml:25(link) xml/cut-cairo-pie-chart.xml:28(link)
#: xml/cut-cairo.xml:25(link) xml/cut-contractor.xml:28(link)
#: xml/cut-factory-builder.xml:25(link) xml/cut-iterated-test.xml:22(link)
#: xml/cut-iterated-test.xml:29(link) xml/cut-iterated-test.xml:31(link)
#: xml/cut-listener.xml:22(link) xml/cut-listener.xml:24(link)
#: xml/cut-main.xml:22(link) xml/cut-main.xml:24(link)
#: xml/cut-main.xml:27(link) xml/cut-module-factory-utils.xml:22(link)
#: xml/cut-module-factory-utils.xml:23(link)
#: xml/cut-module-factory-utils.xml:26(link)
#: xml/cut-module-factory-utils.xml:28(link)
#: xml/cut-module-factory-utils.xml:30(link)
#: xml/cut-module-factory-utils.xml:31(link)
#: xml/cut-module-factory.xml:31(link) xml/cut-multi-process.xml:27(link)
#: xml/cut-multi-process.xml:32(link) xml/cut-multi-process.xml:36(link)
#: xml/cut-multi-process.xml:40(link) xml/cut-multi-process.xml:43(link)
#: xml/cut-multi-process.xml:46(link) xml/cut-multi-process.xml:50(link)
#: xml/cut-multi-process.xml:55(link) xml/cut-multi-process.xml:60(link)
#: xml/cut-multi-process.xml:67(link) xml/cut-multi-process.xml:70(link)
#: xml/cut-multi-process.xml:73(link) xml/cut-process.xml:34(link)
#: xml/cut-run-context.xml:24(link) xml/cut-run-context.xml:27(link)
#: xml/cut-run-context.xml:32(link) xml/cut-run-context.xml:35(link)
#: xml/cut-run-context.xml:39(link) xml/cut-run-context.xml:42(link)
#: xml/cut-run-context.xml:45(link) xml/cut-run-context.xml:50(link)
#: xml/cut-run-context.xml:55(link) xml/cut-run-context.xml:72(link)
#: xml/cut-run-context.xml:76(link) xml/cut-run-context.xml:78(link)
#: xml/cut-run-context.xml:82(link) xml/cut-run-context.xml:84(link)
#: xml/cut-run-context.xml:89(link) xml/cut-run-context.xml:91(link)
#: xml/cut-run-context.xml:93(link) xml/cut-run-context.xml:94(link)
#: xml/cut-run-context.xml:99(link) xml/cut-run-context.xml:102(link)
#: xml/cut-run-context.xml:108(link) xml/cut-run-context.xml:113(link)
#: xml/cut-run-context.xml:116(link) xml/cut-run-context.xml:119(link)
#: xml/cut-run-context.xml:124(link) xml/cut-runner.xml:25(link)
#: xml/cut-sequence-matcher.xml:31(link) xml/cut-sequence-matcher.xml:38(link)
#: xml/cut-test-data.xml:28(link) xml/cut-test-data.xml:31(link)
#: xml/cut-test-data.xml:35(link) xml/cut-test-iterator.xml:22(link)
#: xml/cut-test-iterator.xml:28(link) xml/cut-types.xml:22(link)
#: xml/cut-ui.xml:23(link) xml/cut-ui.xml:24(link) xml/cutter.xml:22(link)
#: xml/cutter.xml:23(link) xml/cutter.xml:24(link) xml/cutter.xml:25(link)
#: xml/cuttest-assertions.xml:36(link) xml/cuttest-assertions.xml:46(link)
#: xml/cuttest-utils.xml:26(link) xml/gcut-assertions-helper.xml:22(link)
#: xml/gcut-assertions-helper.xml:29(link)
#: xml/gcut-assertions-helper.xml:36(link)
#: xml/gcut-assertions-helper.xml:43(link)
#: xml/gcut-assertions-helper.xml:50(link)
#: xml/gcut-assertions-helper.xml:58(link)
#: xml/gcut-assertions-helper.xml:67(link)
#: xml/gcut-assertions-helper.xml:76(link)
#: xml/gcut-assertions-helper.xml:85(link)
#: xml/gcut-assertions-helper.xml:93(link)
#: xml/gcut-assertions-helper.xml:98(link)
#: xml/gcut-assertions-helper.xml:105(link)
#: xml/gcut-assertions-helper.xml:114(link)
#: xml/gcut-assertions-helper.xml:123(link)
#: xml/gcut-assertions-helper.xml:132(link)
#: xml/gcut-assertions-helper.xml:139(link) xml/gcut-main.xml:22(link)
#: xml/gcut-main.xml:23(link) xml/gcut-main.xml:24(link)
#: xml/gcut-main.xml:25(link) xml/gcut-test-utils.xml:30(link)
#: xml/gcut-types.xml:22(link) xml/gcut-value-equal.xml:25(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:22(link) xml/stack.xml:24(link)
#: xml/stack.xml:27(link)
msgid "void"
msgstr ""

#: xml/cut-backtrace-entry.xml:29(link)
#: xml/cut-backtrace-entry.xml:129(primary)
msgid "cut_backtrace_entry_set_file"
msgstr ""

#: xml/cut-backtrace-entry.xml:31(link)
#: xml/cut-backtrace-entry.xml:145(primary)
msgid "cut_backtrace_entry_get_line"
msgstr ""

#: xml/cut-backtrace-entry.xml:32(link)
#: xml/cut-backtrace-entry.xml:159(primary)
msgid "cut_backtrace_entry_set_line"
msgstr ""

#: xml/cut-backtrace-entry.xml:34(link)
#: xml/cut-backtrace-entry.xml:175(primary)
msgid "cut_backtrace_entry_get_function"
msgstr ""

#: xml/cut-backtrace-entry.xml:35(link)
#: xml/cut-backtrace-entry.xml:189(primary)
msgid "cut_backtrace_entry_set_function"
msgstr ""

#: xml/cut-backtrace-entry.xml:37(link)
#: xml/cut-backtrace-entry.xml:205(primary)
msgid "cut_backtrace_entry_get_info"
msgstr ""

#: xml/cut-backtrace-entry.xml:38(link)
#: xml/cut-backtrace-entry.xml:219(primary)
msgid "cut_backtrace_entry_set_info"
msgstr ""

#: xml/cut-backtrace-entry.xml:40(link)
#: xml/cut-backtrace-entry.xml:235(primary)
msgid "cut_backtrace_entry_to_xml"
msgstr ""

#: xml/cut-backtrace-entry.xml:41(link)
#: xml/cut-backtrace-entry.xml:249(primary)
msgid "cut_backtrace_entry_to_xml_string"
msgstr ""

#: xml/cut-backtrace-entry.xml:42(link) xml/cut-backtrace-entry.xml:46(link)
#: xml/cut-test-data.xml:36(link) xml/gcut-types.xml:22(link)
msgid "GString"
msgstr ""

#: xml/cut-backtrace-entry.xml:44(link)
#: xml/cut-backtrace-entry.xml:269(primary)
msgid "cut_backtrace_entry_format"
msgstr ""

#: xml/cut-backtrace-entry.xml:45(link)
#: xml/cut-backtrace-entry.xml:283(primary)
msgid "cut_backtrace_entry_format_string"
msgstr ""

#: xml/cut-backtrace-entry.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*  <placeholder-3/>             (const <placeholder-4/> *file,\n"
"                                                         <placeholder-5/> line,\n"
"                                                         const <placeholder-6/> *function,\n"
"                                                         const <placeholder-7/> *info);\n"
"<placeholder-8/>*  <placeholder-9/>       (void);\n"
"const <placeholder-10/>*        <placeholder-11/>        (<placeholder-12/> *entry);\n"
"<placeholder-13/>                <placeholder-14/>        (<placeholder-15/> *entry,\n"
"                                                         const <placeholder-16/> *file);\n"
"<placeholder-17/>               <placeholder-18/>        (<placeholder-19/> *entry);\n"
"<placeholder-20/>                <placeholder-21/>        (<placeholder-22/> *entry,\n"
"                                                         <placeholder-23/> line);\n"
"const <placeholder-24/>*        <placeholder-25/>    (<placeholder-26/> *entry);\n"
"<placeholder-27/>                <placeholder-28/>    (<placeholder-29/> *entry,\n"
"                                                         const <placeholder-30/> *function);\n"
"const <placeholder-31/>*        <placeholder-32/>        (<placeholder-33/> *entry);\n"
"<placeholder-34/>                <placeholder-35/>        (<placeholder-36/> *entry,\n"
"                                                         const <placeholder-37/> *info);\n"
"<placeholder-38/>*              <placeholder-39/>          (<placeholder-40/> *entry);\n"
"<placeholder-41/>                <placeholder-42/>   (<placeholder-43/> *entry,\n"
"                                                         <placeholder-44/> *string,\n"
"                                                         <placeholder-45/> indent);\n"
"<placeholder-46/>*              <placeholder-47/>          (<placeholder-48/> *entry);\n"
"<placeholder-49/>                <placeholder-50/>   (<placeholder-51/> *entry,\n"
"                                                         <placeholder-52/> *string);\n"
msgstr ""

#: xml/cut-backtrace-entry.xml:69(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutBacktraceEntry;\n"
msgstr ""

#: xml/cut-backtrace-entry.xml:77(title)
msgid "cut_backtrace_entry_new ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:78(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link>*  cut_backtrace_entry_new             (const <link linkend=\"gchar\">gchar</link> *file,\n"
"                                                         <link linkend=\"guint\">guint</link> line,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *function,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *info);"
msgstr ""

#: xml/cut-backtrace-entry.xml:85(term) xml/cut-backtrace-entry.xml:137(term)
msgid "<parameter>file</parameter>&nbsp;:"
msgstr ""

#: xml/cut-backtrace-entry.xml:88(term) xml/cut-backtrace-entry.xml:167(term)
msgid "<parameter>line</parameter>&nbsp;:"
msgstr ""

#: xml/cut-backtrace-entry.xml:94(term) xml/cut-backtrace-entry.xml:227(term)
#: xml/cut-sequence-matcher.xml:183(term)
msgid "<parameter>info</parameter>&nbsp;:"
msgstr ""

#: xml/cut-backtrace-entry.xml:103(title)
msgid "cut_backtrace_entry_new_empty ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:104(programlisting)
#, no-wrap
msgid "<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link>*  cut_backtrace_entry_new_empty       (void);"
msgstr ""

#: xml/cut-backtrace-entry.xml:114(title)
msgid "cut_backtrace_entry_get_file ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:115(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_backtrace_entry_get_file        (<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link> *entry);"
msgstr ""

#: xml/cut-backtrace-entry.xml:119(term) xml/cut-backtrace-entry.xml:134(term)
#: xml/cut-backtrace-entry.xml:149(term) xml/cut-backtrace-entry.xml:164(term)
#: xml/cut-backtrace-entry.xml:179(term) xml/cut-backtrace-entry.xml:194(term)
#: xml/cut-backtrace-entry.xml:209(term) xml/cut-backtrace-entry.xml:224(term)
#: xml/cut-backtrace-entry.xml:239(term) xml/cut-backtrace-entry.xml:255(term)
#: xml/cut-backtrace-entry.xml:273(term) xml/cut-backtrace-entry.xml:288(term)
msgid "<parameter>entry</parameter>&nbsp;:"
msgstr ""

#: xml/cut-backtrace-entry.xml:128(title)
msgid "cut_backtrace_entry_set_file ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:129(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_backtrace_entry_set_file        (<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link> *entry,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *file);"
msgstr ""

#: xml/cut-backtrace-entry.xml:144(title)
msgid "cut_backtrace_entry_get_line ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:145(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_backtrace_entry_get_line        (<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link> *entry);"
msgstr ""

#: xml/cut-backtrace-entry.xml:158(title)
msgid "cut_backtrace_entry_set_line ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:159(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_backtrace_entry_set_line        (<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link> *entry,\n"
"                                                         <link linkend=\"guint\">guint</link> line);"
msgstr ""

#: xml/cut-backtrace-entry.xml:174(title)
msgid "cut_backtrace_entry_get_function ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:175(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_backtrace_entry_get_function    (<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link> *entry);"
msgstr ""

#: xml/cut-backtrace-entry.xml:188(title)
msgid "cut_backtrace_entry_set_function ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:189(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_backtrace_entry_set_function    (<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link> *entry,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *function);"
msgstr ""

#: xml/cut-backtrace-entry.xml:204(title)
msgid "cut_backtrace_entry_get_info ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:205(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_backtrace_entry_get_info        (<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link> *entry);"
msgstr ""

#: xml/cut-backtrace-entry.xml:218(title)
msgid "cut_backtrace_entry_set_info ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:219(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_backtrace_entry_set_info        (<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link> *entry,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *info);"
msgstr ""

#: xml/cut-backtrace-entry.xml:234(title)
msgid "cut_backtrace_entry_to_xml ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:235(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_backtrace_entry_to_xml          (<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link> *entry);"
msgstr ""

#: xml/cut-backtrace-entry.xml:248(title)
msgid "cut_backtrace_entry_to_xml_string ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:249(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_backtrace_entry_to_xml_string   (<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link> *entry,\n"
"                                                         <link linkend=\"GString\">GString</link> *string,\n"
"                                                         <link linkend=\"guint\">guint</link> indent);"
msgstr ""

#: xml/cut-backtrace-entry.xml:258(term) xml/cut-backtrace-entry.xml:291(term)
#: xml/cut-test-data.xml:189(term) xml/cut-test-utils-helper.xml:58(term)
#: xml/cut-test-utils-helper.xml:91(term)
#: xml/cut-test-utils-helper.xml:106(term) xml/cut-test-utils.xml:107(term)
#: xml/cut-test-utils.xml:121(term) xml/cut-test-utils.xml:137(term)
#: xml/gcut-types.xml:53(term)
msgid "<parameter>string</parameter>&nbsp;:"
msgstr ""

#: xml/cut-backtrace-entry.xml:261(term) xml/cut-test-data.xml:192(term)
msgid "<parameter>indent</parameter>&nbsp;:"
msgstr ""

#: xml/cut-backtrace-entry.xml:268(title)
msgid "cut_backtrace_entry_format ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:269(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_backtrace_entry_format          (<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link> *entry);"
msgstr ""

#: xml/cut-backtrace-entry.xml:282(title)
msgid "cut_backtrace_entry_format_string ()"
msgstr ""

#: xml/cut-backtrace-entry.xml:283(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_backtrace_entry_format_string   (<link linkend=\"CutBacktraceEntry\">CutBacktraceEntry</link> *entry,\n"
"                                                         <link linkend=\"GString\">GString</link> *string);"
msgstr ""

#: xml/cut-cairo-chart-data.xml:7(refentrytitle)
#: xml/cut-cairo-chart-data.xml:13(refname)
#: xml/cut-cairo-chart-data.xml:22(link) xml/cut-cairo-chart-data.xml:23(link)
#: xml/cut-cairo-chart-data.xml:25(link) xml/cut-cairo-chart-data.xml:26(link)
#: xml/cut-cairo-chart-data.xml:51(title)
#: xml/cut-cairo-chart-data.xml:52(primary)
msgid "CutCairoChartData"
msgstr ""

#: xml/cut-cairo-chart-data.xml:23(link)
#: xml/cut-cairo-chart-data.xml:61(primary)
msgid "cut_cairo_chart_data_new"
msgstr ""

#: xml/cut-cairo-chart-data.xml:24(link)
#: xml/cut-cairo-chart-data.xml:72(primary)
msgid "cut_cairo_chart_data_get_description"
msgstr ""

#: xml/cut-cairo-chart-data.xml:26(link)
#: xml/cut-cairo-chart-data.xml:87(primary)
msgid "cut_cairo_chart_data_get_rgb"
msgstr ""

#: xml/cut-cairo-chart-data.xml:27(link) xml/cut-cairo-chart-data.xml:28(link)
#: xml/cut-cairo-chart-data.xml:29(link) xml/cut-cairo-pie-chart.xml:23(link)
#: xml/cut-cairo-pie-chart.xml:24(link) xml/cut-cairo-pie-chart.xml:29(link)
#: xml/cut-cairo-pie-chart.xml:30(link) xml/cut-cairo-pie-chart.xml:31(link)
#: xml/cut-cairo-pie-chart.xml:32(link) xml/cut-run-context.xml:69(link)
#: xml/cut-run-context.xml:70(link) xml/cut-sequence-matcher.xml:71(link)
msgid "gdouble"
msgstr ""

#: xml/cut-cairo-chart-data.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*  <placeholder-3/>            (void);\n"
"const <placeholder-4/>*        <placeholder-5/>\n"
"                                                        (<placeholder-6/> *data);\n"
"<placeholder-7/>            <placeholder-8/>        (<placeholder-9/> *data,\n"
"                                                         <placeholder-10/> *red,\n"
"                                                         <placeholder-11/> *green,\n"
"                                                         <placeholder-12/> *blue);\n"
msgstr ""

#: xml/cut-cairo-chart-data.xml:52(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutCairoChartData;\n"
msgstr ""

#: xml/cut-cairo-chart-data.xml:60(title)
msgid "cut_cairo_chart_data_new ()"
msgstr ""

#: xml/cut-cairo-chart-data.xml:61(programlisting)
#, no-wrap
msgid "<link linkend=\"CutCairoChartData\">CutCairoChartData</link>*  cut_cairo_chart_data_new            (void);"
msgstr ""

#: xml/cut-cairo-chart-data.xml:71(title)
msgid "cut_cairo_chart_data_get_description ()"
msgstr ""

#: xml/cut-cairo-chart-data.xml:72(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link>*        cut_cairo_chart_data_get_description\n"
"                                                        (<link linkend=\"CutCairoChartData\">CutCairoChartData</link> *data);"
msgstr ""

#: xml/cut-cairo-chart-data.xml:77(term) xml/cut-cairo-chart-data.xml:94(term)
#: xml/cut-iterated-test.xml:58(term) xml/cut-iterated-test.xml:87(term)
#: xml/cut-iterated-test.xml:130(term) xml/cut-sequence-matcher.xml:123(term)
#: xml/cut-types.xml:57(term) xml/gcut-types.xml:56(term)
msgid "<parameter>data</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-chart-data.xml:86(title)
msgid "cut_cairo_chart_data_get_rgb ()"
msgstr ""

#: xml/cut-cairo-chart-data.xml:87(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_cairo_chart_data_get_rgb        (<link linkend=\"CutCairoChartData\">CutCairoChartData</link> *data,\n"
"                                                         <link linkend=\"gdouble\">gdouble</link> *red,\n"
"                                                         <link linkend=\"gdouble\">gdouble</link> *green,\n"
"                                                         <link linkend=\"gdouble\">gdouble</link> *blue);"
msgstr ""

#: xml/cut-cairo-chart-data.xml:97(term)
msgid "<parameter>red</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-chart-data.xml:100(term)
msgid "<parameter>green</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-chart-data.xml:103(term)
msgid "<parameter>blue</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:7(refentrytitle)
#: xml/cut-cairo-pie-chart.xml:13(refname)
#: xml/cut-cairo-pie-chart.xml:22(link) xml/cut-cairo-pie-chart.xml:23(link)
#: xml/cut-cairo-pie-chart.xml:25(link) xml/cut-cairo-pie-chart.xml:28(link)
#: xml/cut-cairo-pie-chart.xml:31(link) xml/cut-cairo-pie-chart.xml:32(link)
#: xml/cut-cairo-pie-chart.xml:54(title)
#: xml/cut-cairo-pie-chart.xml:55(primary)
msgid "CutCairoPieChart"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:23(link)
#: xml/cut-cairo-pie-chart.xml:64(primary)
msgid "cut_cairo_pie_chart_new"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:25(link)
#: xml/cut-cairo-pie-chart.xml:82(primary)
msgid "cut_cairo_pie_chart_draw"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:26(link) xml/cut-cairo.xml:22(link)
#: xml/cut-cairo.xml:25(link)
msgid "cairo_t"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:27(link)
#: xml/cut-file-stream-reader.xml:26(link) xml/cut-listener.xml:23(link)
#: xml/cut-listener.xml:26(link) xml/cut-main.xml:29(link)
#: xml/cut-main.xml:30(link) xml/cut-pipeline.xml:26(link)
#: xml/cut-pipeline.xml:27(link) xml/cut-run-context.xml:7(refentrytitle)
#: xml/cut-run-context.xml:13(refname) xml/cut-run-context.xml:23(link)
#: xml/cut-run-context.xml:24(link) xml/cut-run-context.xml:26(link)
#: xml/cut-run-context.xml:28(link) xml/cut-run-context.xml:31(link)
#: xml/cut-run-context.xml:32(link) xml/cut-run-context.xml:34(link)
#: xml/cut-run-context.xml:35(link) xml/cut-run-context.xml:37(link)
#: xml/cut-run-context.xml:38(link) xml/cut-run-context.xml:39(link)
#: xml/cut-run-context.xml:41(link) xml/cut-run-context.xml:42(link)
#: xml/cut-run-context.xml:44(link) xml/cut-run-context.xml:46(link)
#: xml/cut-run-context.xml:49(link) xml/cut-run-context.xml:51(link)
#: xml/cut-run-context.xml:54(link) xml/cut-run-context.xml:56(link)
#: xml/cut-run-context.xml:59(link) xml/cut-run-context.xml:60(link)
#: xml/cut-run-context.xml:61(link) xml/cut-run-context.xml:62(link)
#: xml/cut-run-context.xml:63(link) xml/cut-run-context.xml:64(link)
#: xml/cut-run-context.xml:65(link) xml/cut-run-context.xml:66(link)
#: xml/cut-run-context.xml:67(link) xml/cut-run-context.xml:68(link)
#: xml/cut-run-context.xml:69(link) xml/cut-run-context.xml:70(link)
#: xml/cut-run-context.xml:71(link) xml/cut-run-context.xml:72(link)
#: xml/cut-run-context.xml:74(link) xml/cut-run-context.xml:75(link)
#: xml/cut-run-context.xml:76(link) xml/cut-run-context.xml:78(link)
#: xml/cut-run-context.xml:79(link) xml/cut-run-context.xml:80(link)
#: xml/cut-run-context.xml:81(link) xml/cut-run-context.xml:82(link)
#: xml/cut-run-context.xml:84(link) xml/cut-run-context.xml:86(link)
#: xml/cut-run-context.xml:87(link) xml/cut-run-context.xml:89(link)
#: xml/cut-run-context.xml:91(link) xml/cut-run-context.xml:93(link)
#: xml/cut-run-context.xml:94(link) xml/cut-run-context.xml:96(link)
#: xml/cut-run-context.xml:98(link) xml/cut-run-context.xml:99(link)
#: xml/cut-run-context.xml:100(link) xml/cut-run-context.xml:102(link)
#: xml/cut-run-context.xml:109(link) xml/cut-run-context.xml:112(link)
#: xml/cut-run-context.xml:113(link) xml/cut-run-context.xml:114(link)
#: xml/cut-run-context.xml:115(link) xml/cut-run-context.xml:116(link)
#: xml/cut-run-context.xml:118(link) xml/cut-run-context.xml:120(link)
#: xml/cut-run-context.xml:123(link) xml/cut-run-context.xml:125(link)
#: xml/cut-run-context.xml:128(link) xml/cut-run-context.xml:162(primary)
#: xml/cut-stream-parser.xml:23(link) xml/cut-stream-reader.xml:26(link)
#: xml/cut-test-runner.xml:23(link) xml/cut-ui.xml:29(link)
#: xml/cuttest-assertions.xml:37(link) xml/cuttest-assertions.xml:46(link)
#: xml/cuttest-event-receiver.xml:23(link)
msgid "CutRunContext"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:28(link)
#: xml/cut-cairo-pie-chart.xml:102(primary)
msgid "cut_cairo_pie_chart_get_size"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:31(link)
#: xml/cut-cairo-pie-chart.xml:122(primary)
msgid "cut_cairo_pie_chart_get_width"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:32(link)
#: xml/cut-cairo-pie-chart.xml:136(primary)
msgid "cut_cairo_pie_chart_get_height"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*   <placeholder-3/>             (<placeholder-4/> width,\n"
"                                                         <placeholder-5/> height);\n"
"<placeholder-6/>                <placeholder-7/>            (<placeholder-8/> *chart,\n"
"                                                         <placeholder-9/> *cr,\n"
"                                                         <placeholder-10/> *run_context);\n"
"<placeholder-11/>                <placeholder-12/>        (<placeholder-13/> *chart,\n"
"                                                         <placeholder-14/> *width,\n"
"                                                         <placeholder-15/> *height);\n"
"<placeholder-16/>             <placeholder-17/>       (<placeholder-18/> *chart);\n"
"<placeholder-19/>             <placeholder-20/>      (<placeholder-21/> *chart);\n"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:55(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutCairoPieChart;\n"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:63(title)
msgid "cut_cairo_pie_chart_new ()"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:64(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutCairoPieChart\">CutCairoPieChart</link>*   cut_cairo_pie_chart_new             (<link linkend=\"gdouble\">gdouble</link> width,\n"
"                                                         <link linkend=\"gdouble\">gdouble</link> height);"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:69(term) xml/cut-cairo-pie-chart.xml:111(term)
msgid "<parameter>width</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:72(term) xml/cut-cairo-pie-chart.xml:114(term)
msgid "<parameter>height</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:81(title)
msgid "cut_cairo_pie_chart_draw ()"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:82(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_cairo_pie_chart_draw            (<link linkend=\"CutCairoPieChart\">CutCairoPieChart</link> *chart,\n"
"                                                         <link linkend=\"cairo-t\">cairo_t</link> *cr,\n"
"                                                         <link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:88(term) xml/cut-cairo-pie-chart.xml:108(term)
#: xml/cut-cairo-pie-chart.xml:126(term) xml/cut-cairo-pie-chart.xml:140(term)
msgid "<parameter>chart</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:91(term) xml/cut-cairo.xml:55(term)
#: xml/cut-cairo.xml:76(term)
msgid "<parameter>cr</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:94(term) xml/cut-listener.xml:57(term)
#: xml/cut-listener.xml:74(term) xml/cut-main.xml:135(term)
#: xml/cut-pipeline.xml:106(term) xml/cut-stream-parser.xml:66(term)
#: xml/cut-ui.xml:100(term) xml/cuttest-assertions.xml:109(term)
#: xml/cuttest-assertions.xml:148(term) xml/cuttest-assertions.xml:186(term)
#: xml/cuttest-assertions.xml:228(term) xml/cuttest-assertions.xml:272(term)
msgid "<parameter>run_context</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:101(title)
msgid "cut_cairo_pie_chart_get_size ()"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:102(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_cairo_pie_chart_get_size        (<link linkend=\"CutCairoPieChart\">CutCairoPieChart</link> *chart,\n"
"                                                         <link linkend=\"gdouble\">gdouble</link> *width,\n"
"                                                         <link linkend=\"gdouble\">gdouble</link> *height);"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:121(title)
msgid "cut_cairo_pie_chart_get_width ()"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:122(programlisting)
#, no-wrap
msgid "<link linkend=\"gdouble\">gdouble</link>             cut_cairo_pie_chart_get_width       (<link linkend=\"CutCairoPieChart\">CutCairoPieChart</link> *chart);"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:135(title)
msgid "cut_cairo_pie_chart_get_height ()"
msgstr ""

#: xml/cut-cairo-pie-chart.xml:136(programlisting)
#, no-wrap
msgid "<link linkend=\"gdouble\">gdouble</link>             cut_cairo_pie_chart_get_height      (<link linkend=\"CutCairoPieChart\">CutCairoPieChart</link> *chart);"
msgstr ""

#: xml/cut-cairo.xml:7(refentrytitle) xml/cut-cairo.xml:13(refname)
msgid "cut-cairo"
msgstr ""

#: xml/cut-cairo.xml:22(link)
msgid "PangoLayout"
msgstr ""

#: xml/cut-cairo.xml:22(link) xml/cut-cairo.xml:49(primary)
msgid "cut_cairo_create_pango_layout"
msgstr ""

#: xml/cut-cairo.xml:24(link) xml/cut-run-context.xml:40(link)
#: xml/cut-run-context.xml:41(link) xml/cut-run-context.xml:104(link)
#: xml/cut-sequence-matcher.xml:28(link) xml/cut-sequence-matcher.xml:29(link)
#: xml/cut-sequence-matcher.xml:30(link) xml/cut-sequence-matcher.xml:34(link)
#: xml/cut-sequence-matcher.xml:35(link) xml/cut-sequence-matcher.xml:36(link)
#: xml/cut-sequence-matcher.xml:37(link) xml/cut-sequence-matcher.xml:64(link)
#: xml/cut-sequence-matcher.xml:65(link) xml/cut-sequence-matcher.xml:66(link)
#: xml/cut-sequence-matcher.xml:67(link) xml/gbsearcharray.xml:23(link)
#: xml/gcut-assertions-helper.xml:107(link)
#: xml/gcut-assertions-helper.xml:108(link)
#: xml/gcut-assertions-helper.xml:116(link)
#: xml/gcut-assertions-helper.xml:117(link) xml/gcut-enum.xml:24(link)
#: xml/gcut-enum.xml:25(link) xml/gcut-enum.xml:27(link)
msgid "gint"
msgstr ""

#: xml/cut-cairo.xml:25(link) xml/cut-cairo.xml:71(primary)
msgid "cut_cairo_set_source_result_color"
msgstr ""

#: xml/cut-cairo.xml:26(link) xml/cut-run-context.xml:68(link)
#: xml/cuttest-assertions.xml:48(link)
msgid "CutTestResultStatus"
msgstr ""

#: xml/cut-cairo.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>*        <placeholder-2/>       (<placeholder-3/> *cr,\n"
"                                                         const <placeholder-4/> *utf8,\n"
"                                                         <placeholder-5/> font_size);\n"
"<placeholder-6/>                <placeholder-7/>   (<placeholder-8/> *cr,\n"
"                                                         <placeholder-9/> status);\n"
msgstr ""

#: xml/cut-cairo.xml:48(title)
msgid "cut_cairo_create_pango_layout ()"
msgstr ""

#: xml/cut-cairo.xml:49(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"PangoLayout\">PangoLayout</link>*        cut_cairo_create_pango_layout       (<link linkend=\"cairo-t\">cairo_t</link> *cr,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *utf8,\n"
"                                                         <link linkend=\"gint\">gint</link> font_size);"
msgstr ""

#: xml/cut-cairo.xml:58(term)
msgid "<parameter>utf8</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo.xml:61(term)
msgid "<parameter>font_size</parameter>&nbsp;:"
msgstr ""

#: xml/cut-cairo.xml:70(title)
msgid "cut_cairo_set_source_result_color ()"
msgstr ""

#: xml/cut-cairo.xml:71(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_cairo_set_source_result_color   (<link linkend=\"cairo-t\">cairo_t</link> *cr,\n"
"                                                         <link linkend=\"CutTestResultStatus\">CutTestResultStatus</link> status);"
msgstr ""

#: xml/cut-cairo.xml:79(term) xml/cuttest-assertions.xml:154(term)
#: xml/cuttest-assertions.xml:192(term) xml/cuttest-assertions.xml:278(term)
msgid "<parameter>status</parameter>&nbsp;:"
msgstr ""

#: xml/cut-contractor.xml:7(refentrytitle) xml/cut-contractor.xml:13(refname)
#: xml/cut-contractor.xml:22(link) xml/cut-contractor.xml:23(link)
#: xml/cut-contractor.xml:24(link) xml/cut-contractor.xml:25(link)
#: xml/cut-contractor.xml:26(link) xml/cut-contractor.xml:28(link)
#: xml/cut-contractor.xml:51(title) xml/cut-contractor.xml:52(primary)
msgid "CutContractor"
msgstr ""

#: xml/cut-contractor.xml:23(link) xml/cut-contractor.xml:61(primary)
msgid "cut_contractor_new"
msgstr ""

#: xml/cut-contractor.xml:24(link) xml/cut-contractor.xml:72(primary)
msgid "cut_contractor_build_factories"
msgstr ""

#: xml/cut-contractor.xml:25(link) xml/cut-contractor.xml:86(primary)
msgid "cut_contractor_build_all_factories"
msgstr ""

#: xml/cut-contractor.xml:26(link) xml/cut-contractor.xml:100(primary)
msgid "cut_contractor_has_builder"
msgstr ""

#: xml/cut-contractor.xml:28(link) xml/cut-contractor.xml:118(primary)
msgid "cut_contractor_set_option_context"
msgstr ""

#: xml/cut-contractor.xml:29(link) xml/cut-factory-builder.xml:27(link)
#: xml/cut-module-factory.xml:32(link)
msgid "GOptionContext"
msgstr ""

#: xml/cut-contractor.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*      <placeholder-3/>                  (void);\n"
"<placeholder-4/>*              <placeholder-5/>      (<placeholder-6/> *contractor);\n"
"<placeholder-7/>*              <placeholder-8/>  (<placeholder-9/> *contractor);\n"
"<placeholder-10/>            <placeholder-11/>          (<placeholder-12/> *contractor,\n"
"                                                         const <placeholder-13/> *type_name);\n"
"<placeholder-14/>                <placeholder-15/>   (<placeholder-16/> *contractor,\n"
"                                                         <placeholder-17/> *context);\n"
msgstr ""

#: xml/cut-contractor.xml:52(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutContractor;\n"
msgstr ""

#: xml/cut-contractor.xml:60(title)
msgid "cut_contractor_new ()"
msgstr ""

#: xml/cut-contractor.xml:61(programlisting)
#, no-wrap
msgid "<link linkend=\"CutContractor\">CutContractor</link>*      cut_contractor_new                  (void);"
msgstr ""

#: xml/cut-contractor.xml:71(title)
msgid "cut_contractor_build_factories ()"
msgstr ""

#: xml/cut-contractor.xml:72(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_contractor_build_factories      (<link linkend=\"CutContractor\">CutContractor</link> *contractor);"
msgstr ""

#: xml/cut-contractor.xml:76(term) xml/cut-contractor.xml:90(term)
#: xml/cut-contractor.xml:105(term) xml/cut-contractor.xml:123(term)
msgid "<parameter>contractor</parameter>&nbsp;:"
msgstr ""

#: xml/cut-contractor.xml:85(title)
msgid "cut_contractor_build_all_factories ()"
msgstr ""

#: xml/cut-contractor.xml:86(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_contractor_build_all_factories  (<link linkend=\"CutContractor\">CutContractor</link> *contractor);"
msgstr ""

#: xml/cut-contractor.xml:99(title)
msgid "cut_contractor_has_builder ()"
msgstr ""

#: xml/cut-contractor.xml:100(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_contractor_has_builder          (<link linkend=\"CutContractor\">CutContractor</link> *contractor,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *type_name);"
msgstr ""

#: xml/cut-contractor.xml:108(term)
msgid "<parameter>type_name</parameter>&nbsp;:"
msgstr ""

#: xml/cut-contractor.xml:117(title)
msgid "cut_contractor_set_option_context ()"
msgstr ""

#: xml/cut-contractor.xml:118(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_contractor_set_option_context   (<link linkend=\"CutContractor\">CutContractor</link> *contractor,\n"
"                                                         <link linkend=\"GOptionContext\">GOptionContext</link> *context);"
msgstr ""

#: xml/cut-contractor.xml:126(term) xml/cut-factory-builder.xml:98(term)
#: xml/cut-module-factory.xml:126(term) xml/cut-run-context.xml:176(term)
#: xml/cut-run-context.xml:191(term) xml/cut-run-context.xml:207(term)
#: xml/cut-run-context.xml:223(term) xml/cut-run-context.xml:238(term)
#: xml/cut-run-context.xml:253(term) xml/cut-run-context.xml:268(term)
#: xml/cut-run-context.xml:283(term) xml/cut-run-context.xml:297(term)
#: xml/cut-run-context.xml:312(term) xml/cut-run-context.xml:327(term)
#: xml/cut-run-context.xml:342(term) xml/cut-run-context.xml:357(term)
#: xml/cut-run-context.xml:373(term) xml/cut-run-context.xml:389(term)
#: xml/cut-run-context.xml:405(term) xml/cut-run-context.xml:421(term)
#: xml/cut-run-context.xml:437(term) xml/cut-run-context.xml:453(term)
#: xml/cut-run-context.xml:467(term) xml/cut-run-context.xml:481(term)
#: xml/cut-run-context.xml:495(term) xml/cut-run-context.xml:509(term)
#: xml/cut-run-context.xml:523(term) xml/cut-run-context.xml:537(term)
#: xml/cut-run-context.xml:551(term) xml/cut-run-context.xml:565(term)
#: xml/cut-run-context.xml:579(term) xml/cut-run-context.xml:593(term)
#: xml/cut-run-context.xml:607(term) xml/cut-run-context.xml:621(term)
#: xml/cut-run-context.xml:636(term) xml/cut-run-context.xml:651(term)
#: xml/cut-run-context.xml:665(term) xml/cut-run-context.xml:680(term)
#: xml/cut-run-context.xml:695(term) xml/cut-run-context.xml:707(term)
#: xml/cut-run-context.xml:721(term) xml/cut-run-context.xml:735(term)
#: xml/cut-run-context.xml:750(term) xml/cut-run-context.xml:766(term)
#: xml/cut-run-context.xml:781(term) xml/cut-run-context.xml:796(term)
#: xml/cut-run-context.xml:814(term) xml/cut-run-context.xml:830(term)
#: xml/cut-run-context.xml:845(term) xml/cut-run-context.xml:857(term)
#: xml/cut-run-context.xml:871(term) xml/cut-run-context.xml:888(term)
#: xml/cut-run-context.xml:902(term) xml/cut-run-context.xml:915(term)
#: xml/cut-run-context.xml:937(term) xml/cut-run-context.xml:966(term)
#: xml/cut-run-context.xml:982(term) xml/cut-run-context.xml:997(term)
#: xml/cut-run-context.xml:1012(term) xml/cut-run-context.xml:1027(term)
#: xml/cut-run-context.xml:1042(term) xml/cut-run-context.xml:1058(term)
#: xml/cut-run-context.xml:1074(term) xml/cut-run-context.xml:1090(term)
#: xml/cut-run-context.xml:1106(term) xml/gcut-public.xml:58(term)
#: xml/gcut-public.xml:76(term) xml/gcut-public.xml:95(term)
#: xml/gcut-public.xml:116(term)
msgid "<parameter>context</parameter>&nbsp;:"
msgstr ""

#: xml/cut-declare-helper.xml:7(refentrytitle)
#: xml/cut-declare-helper.xml:13(refname)
msgid "cut-declare-helper"
msgstr ""

#: xml/cut-declare-helper.xml:22(link) xml/cut-declare-helper.xml:44(title)
#: xml/cut-declare-helper.xml:45(primary)
msgid "CUT_HELPER"
msgstr ""

#: xml/cut-declare-helper.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
msgstr ""

#: xml/cut-declare-helper.xml:45(programlisting)
#, no-wrap
msgid "#define CUT_HELPER 1\n"
msgstr ""

#: xml/cut-diff.xml:7(refentrytitle) xml/cut-diff.xml:13(refname)
msgid "cut-diff"
msgstr ""

#: xml/cut-diff.xml:22(link) xml/cut-diff.xml:23(link)
#: xml/cut-diff.xml:25(link) xml/cut-diff.xml:49(title)
#: xml/cut-diff.xml:50(primary)
msgid "CutDiffer"
msgstr ""

#: xml/cut-diff.xml:23(link) xml/cut-diff.xml:59(primary)
msgid "cut_differ_readable_new"
msgstr ""

#: xml/cut-diff.xml:25(link) xml/cut-diff.xml:77(primary)
msgid "cut_differ_diff"
msgstr ""

#: xml/cut-diff.xml:26(link) xml/cut-diff.xml:91(primary)
msgid "cut_diff_is_interested"
msgstr ""

#: xml/cut-diff.xml:27(link) xml/cut-diff.xml:105(primary)
msgid "cut_diff_need_fold"
msgstr ""

#: xml/cut-diff.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*          <placeholder-3/>             (const <placeholder-4/> *from,\n"
"                                                         const <placeholder-5/> *to);\n"
"<placeholder-6/>*              <placeholder-7/>                     (<placeholder-8/> *differ);\n"
"<placeholder-9/>            <placeholder-10/>              (const <placeholder-11/> *diff);\n"
"<placeholder-12/>            <placeholder-13/>                  (const <placeholder-14/> *diff);\n"
msgstr ""

#: xml/cut-diff.xml:50(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutDiffer;\n"
msgstr ""

#: xml/cut-diff.xml:58(title)
msgid "cut_differ_readable_new ()"
msgstr ""

#: xml/cut-diff.xml:59(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutDiffer\">CutDiffer</link>*          cut_differ_readable_new             (const <link linkend=\"gchar\">gchar</link> *from,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *to);"
msgstr ""

#: xml/cut-diff.xml:64(term) xml/cut-sequence-matcher.xml:245(term)
#: xml/cut-sequence-matcher.xml:281(term)
#: xml/cut-sequence-matcher.xml:301(term)
#: xml/cut-sequence-matcher.xml:325(term)
#: xml/cut-sequence-matcher.xml:346(term)
#: xml/cut-test-utils-helper.xml:142(term) xml/cut-test-utils.xml:201(term)
#: xml/cut-test-utils.xml:220(term)
msgid "<parameter>from</parameter>&nbsp;:"
msgstr ""

#: xml/cut-diff.xml:67(term) xml/cut-sequence-matcher.xml:248(term)
#: xml/cut-sequence-matcher.xml:284(term)
#: xml/cut-sequence-matcher.xml:304(term)
#: xml/cut-sequence-matcher.xml:328(term)
#: xml/cut-sequence-matcher.xml:349(term)
#: xml/cut-test-utils-helper.xml:145(term) xml/cut-test-utils.xml:204(term)
#: xml/cut-test-utils.xml:223(term)
msgid "<parameter>to</parameter>&nbsp;:"
msgstr ""

#: xml/cut-diff.xml:76(title)
msgid "cut_differ_diff ()"
msgstr ""

#: xml/cut-diff.xml:77(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_differ_diff                     (<link linkend=\"CutDiffer\">CutDiffer</link> *differ);"
msgstr ""

#: xml/cut-diff.xml:81(term)
msgid "<parameter>differ</parameter>&nbsp;:"
msgstr ""

#: xml/cut-diff.xml:90(title)
msgid "cut_diff_is_interested ()"
msgstr ""

#: xml/cut-diff.xml:91(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_diff_is_interested              (const <link linkend=\"gchar\">gchar</link> *diff);"
msgstr ""

#: xml/cut-diff.xml:95(term) xml/cut-diff.xml:109(term)
msgid "<parameter>diff</parameter>&nbsp;:"
msgstr ""

#: xml/cut-diff.xml:104(title)
msgid "cut_diff_need_fold ()"
msgstr ""

#: xml/cut-diff.xml:105(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_diff_need_fold                  (const <link linkend=\"gchar\">gchar</link> *diff);"
msgstr ""

#: xml/cut-experimental.xml:7(refentrytitle)
#: xml/cut-experimental.xml:13(refname)
msgid "Experimental"
msgstr "実験"

#: xml/cut-experimental.xml:14(refpurpose)
msgid "Experimental API."
msgstr "実験的なAPI"

#: xml/cut-experimental.xml:22(link) xml/cut-experimental.xml:50(primary)
msgid "cut_fork"
msgstr ""

#: xml/cut-experimental.xml:23(link) xml/cut-experimental.xml:78(primary)
msgid "cut_wait_process"
msgstr ""

#: xml/cut-experimental.xml:24(link) xml/cut-experimental.xml:110(primary)
msgid "cut_fork_get_stdout_message"
msgstr ""

#: xml/cut-experimental.xml:25(link) xml/cut-experimental.xml:139(primary)
msgid "cut_fork_get_stderr_message"
msgstr ""

#: xml/cut-experimental.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>                            ()\n"
"#define             <placeholder-2/>                    (pid, usec_timeout)\n"
"#define             <placeholder-3/>         (pid)\n"
"#define             <placeholder-4/>         (pid)\n"
msgstr ""

#: xml/cut-experimental.xml:39(para)
msgid "This API may be changed in the future."
msgstr "将来、このAPIは変更されるかもしれません。"

#: xml/cut-experimental.xml:49(title)
msgid "cut_fork()"
msgstr ""

#: xml/cut-experimental.xml:50(programlisting)
#, no-wrap
msgid "#define             cut_fork()"
msgstr ""

#: xml/cut-experimental.xml:51(para)
msgid "Makes child process."
msgstr "子プロセスを生成します。"

#: xml/cut-experimental.xml:56(programlisting)
#, no-wrap
msgid ""
"\n"
"int pid;\n"
"pid = cut_fork();\n"
"cut_assert_errno();\n"
"\n"
"if (pid == 0) {\n"
"  do_something_for_child_process();\n"
"  _exit(EXIT_SUCCESS);\n"
"}\n"
"\n"
"do_something_for_parent_process();\n"
msgstr ""

#: xml/cut-experimental.xml:71(simpara) xml/cut-experimental.xml:133(simpara)
#: xml/cut-experimental.xml:162(simpara)
msgid "Process ID."
msgstr "プロセスID。"

#: xml/cut-experimental.xml:77(title)
msgid "cut_wait_process()"
msgstr ""

#: xml/cut-experimental.xml:78(programlisting)
#, no-wrap
msgid "#define             cut_wait_process(pid, usec_timeout)"
msgstr ""

#: xml/cut-experimental.xml:79(para)
msgid "Waits a process specified by <parameter>pid</parameter>."
msgstr "<parameter>pid</parameter>で指定されたプロセスの終了を待ちます。"

#: xml/cut-experimental.xml:84(programlisting)
#, no-wrap
msgid ""
"\n"
"int pid;\n"
"pid = cut_fork();\n"
"cut_assert_errno();\n"
"\n"
"if (pid == 0) {\n"
"  do_something_for_child_process();\n"
"  _exit(EXIT_SUCCESS);\n"
"}\n"
"\n"
"do_something_for_parent_process();\n"
"cut_assert_equal_int(EXIT_SUCCESS, cut_wait_process(pid, 100));\n"
msgstr ""

#: xml/cut-experimental.xml:100(term) xml/cut-experimental.xml:132(term)
#: xml/cut-experimental.xml:161(term)
msgid "<parameter>pid</parameter>&nbsp;:"
msgstr ""

#: xml/cut-experimental.xml:101(simpara)
msgid "Process ID to wait."
msgstr "終了を待つプロセスのID。"

#: xml/cut-experimental.xml:103(term) xml/cut-process.xml:99(term)
msgid "<parameter>usec_timeout</parameter>&nbsp;:"
msgstr ""

#: xml/cut-experimental.xml:104(simpara)
msgid "Timeout in usec."
msgstr "タイムアウトする時間。100万分の1秒単位で指定。"

#: xml/cut-experimental.xml:109(title)
msgid "cut_fork_get_stdout_message()"
msgstr ""

#: xml/cut-experimental.xml:110(programlisting)
#, no-wrap
msgid "#define             cut_fork_get_stdout_message(pid)"
msgstr ""

#: xml/cut-experimental.xml:111(para) xml/cut-experimental.xml:140(para)
msgid "Reads a message from a process specified by <parameter>pid</parameter>."
msgstr ""
"<parameter>pid</parameter>で指定されたプロセスからメッセージを読みます。"

#: xml/cut-experimental.xml:116(programlisting)
#, no-wrap
msgid ""
"\n"
"int pid;\n"
"pid = cut_fork();\n"
"cut_assert_errno();\n"
"\n"
"if (pid == 0) {\n"
"  g_print(\"I'm a child.\");\n"
"  _exit(EXIT_SUCCESS);\n"
"}\n"
"\n"
"cut_assert_equal_string(\"I'm a child.\", cut_fork_get_stdout_message(pid));\n"
"cut_assert_equal_int(EXIT_SUCCESS, cut_wait_process(pid, 100));\n"
msgstr ""

#: xml/cut-experimental.xml:138(title)
msgid "cut_fork_get_stderr_message()"
msgstr ""

#: xml/cut-experimental.xml:139(programlisting)
#, no-wrap
msgid "#define             cut_fork_get_stderr_message(pid)"
msgstr ""

#: xml/cut-experimental.xml:145(programlisting)
#, no-wrap
msgid ""
"\n"
"int pid;\n"
"pid = cut_fork();\n"
"cut_assert_errno();\n"
"\n"
"if (pid == 0) {\n"
"  g_print(\"I'm a child.\");\n"
"  _exit(EXIT_SUCCESS);\n"
"}\n"
"\n"
"cut_assert_equal_string(\"I'm a child.\", cut_fork_get_stderr_message(pid));\n"
"cut_assert_equal_int(EXIT_SUCCESS, cut_wait_process(pid, 100));\n"
msgstr ""

#: xml/cut-factory-builder.xml:7(refentrytitle)
#: xml/cut-factory-builder.xml:13(refname)
#: xml/cut-factory-builder.xml:22(link) xml/cut-factory-builder.xml:23(link)
#: xml/cut-factory-builder.xml:24(link) xml/cut-factory-builder.xml:26(link)
#: xml/cut-factory-builder.xml:28(link) xml/cut-factory-builder.xml:29(link)
#: xml/cut-factory-builder.xml:51(title)
#: xml/cut-factory-builder.xml:52(primary)
msgid "CutFactoryBuilder"
msgstr ""

#: xml/cut-factory-builder.xml:23(link)
#: xml/cut-factory-builder.xml:61(primary)
msgid "cut_factory_builder_get_type_name"
msgstr ""

#: xml/cut-factory-builder.xml:24(link)
#: xml/cut-factory-builder.xml:75(primary)
msgid "cut_factory_builder_get_module_dir"
msgstr ""

#: xml/cut-factory-builder.xml:25(link)
#: xml/cut-factory-builder.xml:89(primary)
msgid "cut_factory_builder_set_option_context"
msgstr ""

#: xml/cut-factory-builder.xml:28(link)
#: xml/cut-factory-builder.xml:106(primary)
msgid "cut_factory_builder_build"
msgstr ""

#: xml/cut-factory-builder.xml:29(link)
#: xml/cut-factory-builder.xml:120(primary)
msgid "cut_factory_builder_build_all"
msgstr ""

#: xml/cut-factory-builder.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"const <placeholder-2/>*        <placeholder-3/>   (<placeholder-4/> *builder);\n"
"const <placeholder-5/>*        <placeholder-6/>  (<placeholder-7/> *builder);\n"
"<placeholder-8/>                <placeholder-9/>\n"
"                                                        (<placeholder-10/> *builder,\n"
"                                                         <placeholder-11/> *context);\n"
"<placeholder-12/>*              <placeholder-13/>           (<placeholder-14/> *builder);\n"
"<placeholder-15/>*              <placeholder-16/>       (<placeholder-17/> *builder);\n"
msgstr ""

#: xml/cut-factory-builder.xml:52(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutFactoryBuilder;\n"
msgstr ""

#: xml/cut-factory-builder.xml:60(title)
msgid "cut_factory_builder_get_type_name ()"
msgstr ""

#: xml/cut-factory-builder.xml:61(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_factory_builder_get_type_name   (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder);"
msgstr ""

#: xml/cut-factory-builder.xml:65(term) xml/cut-factory-builder.xml:79(term)
#: xml/cut-factory-builder.xml:95(term) xml/cut-factory-builder.xml:110(term)
#: xml/cut-factory-builder.xml:124(term)
msgid "<parameter>builder</parameter>&nbsp;:"
msgstr ""

#: xml/cut-factory-builder.xml:74(title)
msgid "cut_factory_builder_get_module_dir ()"
msgstr ""

#: xml/cut-factory-builder.xml:75(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_factory_builder_get_module_dir  (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder);"
msgstr ""

#: xml/cut-factory-builder.xml:88(title)
msgid "cut_factory_builder_set_option_context ()"
msgstr ""

#: xml/cut-factory-builder.xml:89(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_factory_builder_set_option_context\n"
"                                                        (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder,\n"
"                                                         <link linkend=\"GOptionContext\">GOptionContext</link> *context);"
msgstr ""

#: xml/cut-factory-builder.xml:105(title)
msgid "cut_factory_builder_build ()"
msgstr ""

#: xml/cut-factory-builder.xml:106(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_factory_builder_build           (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder);"
msgstr ""

#: xml/cut-factory-builder.xml:119(title)
msgid "cut_factory_builder_build_all ()"
msgstr ""

#: xml/cut-factory-builder.xml:120(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_factory_builder_build_all       (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder);"
msgstr ""

#: xml/cut-features.xml:7(refentrytitle) xml/cut-features.xml:13(refname)
msgid "cut-features"
msgstr ""

#: xml/cut-features.xml:22(link) xml/cut-features.xml:45(title)
#: xml/cut-features.xml:46(primary)
msgid "CUT_SUPPORT_GLIB"
msgstr ""

#: xml/cut-features.xml:23(link) xml/cut-features.xml:52(title)
#: xml/cut-features.xml:53(primary)
msgid "CUT_SUPPORT_GDK_PIXBUF"
msgstr ""

#: xml/cut-features.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
"#define             <placeholder-2/>\n"
msgstr ""

#: xml/cut-features.xml:46(programlisting)
#, no-wrap
msgid "#define CUT_SUPPORT_GLIB 1\n"
msgstr ""

#: xml/cut-features.xml:53(programlisting)
#, no-wrap
msgid "#define CUT_SUPPORT_GDK_PIXBUF 1\n"
msgstr ""

#: xml/cut-file-stream-reader.xml:7(refentrytitle)
#: xml/cut-file-stream-reader.xml:13(refname)
#: xml/cut-file-stream-reader.xml:23(link)
#: xml/cut-file-stream-reader.xml:55(title)
#: xml/cut-file-stream-reader.xml:56(primary)
msgid "CutFileStreamReader"
msgstr ""

#: xml/cut-file-stream-reader.xml:22(link)
#: xml/cut-file-stream-reader.xml:48(title)
#: xml/cut-file-stream-reader.xml:49(primary)
msgid "CUT_FILE_STREAM_READER_ERROR"
msgstr ""

#: xml/cut-file-stream-reader.xml:24(link)
#: xml/cut-file-stream-reader.xml:65(primary)
msgid "CutFileStreamReaderError"
msgstr ""

#: xml/cut-file-stream-reader.xml:25(link) xml/cut-pipeline.xml:25(link)
#: xml/cut-run-context.xml:103(link) xml/cut-stream-reader.xml:25(link)
msgid "GQuark"
msgstr ""

#: xml/cut-file-stream-reader.xml:25(link)
#: xml/cut-file-stream-reader.xml:75(primary)
msgid "cut_file_stream_reader_error_quark"
msgstr ""

#: xml/cut-file-stream-reader.xml:26(link)
#: xml/cut-file-stream-reader.xml:86(primary)
msgid "cut_file_stream_reader_new"
msgstr ""

#: xml/cut-file-stream-reader.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
"                    <placeholder-2/>;\n"
"enum                <placeholder-3/>;\n"
"<placeholder-4/>              <placeholder-5/>  (void);\n"
"<placeholder-6/>*      <placeholder-7/>          (const <placeholder-8/> *file_name);\n"
msgstr ""

#: xml/cut-file-stream-reader.xml:49(programlisting)
#, no-wrap
msgid "#define CUT_FILE_STREAM_READER_ERROR           (cut_file_stream_reader_error_quark())\n"
msgstr ""

#: xml/cut-file-stream-reader.xml:56(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutStreamReader object;\n"
"} CutFileStreamReader;\n"
msgstr ""

#: xml/cut-file-stream-reader.xml:64(title)
msgid "enum CutFileStreamReaderError"
msgstr ""

#: xml/cut-file-stream-reader.xml:65(programlisting)
#, no-wrap
msgid ""
"typedef enum\n"
"{\n"
"    CUT_FILE_STREAM_READER_ERROR_FILE\n"
"} CutFileStreamReaderError;\n"
msgstr ""

#: xml/cut-file-stream-reader.xml:74(title)
msgid "cut_file_stream_reader_error_quark ()"
msgstr ""

#: xml/cut-file-stream-reader.xml:75(programlisting)
#, no-wrap
msgid "<link linkend=\"GQuark\">GQuark</link>              cut_file_stream_reader_error_quark  (void);"
msgstr ""

#: xml/cut-file-stream-reader.xml:85(title)
msgid "cut_file_stream_reader_new ()"
msgstr ""

#: xml/cut-file-stream-reader.xml:86(programlisting)
#, no-wrap
msgid "<link linkend=\"CutRunContext\">CutRunContext</link>*      cut_file_stream_reader_new          (const <link linkend=\"gchar\">gchar</link> *file_name);"
msgstr ""

#: xml/cut-file-stream-reader.xml:90(term)
msgid "<parameter>file_name</parameter>&nbsp;:"
msgstr ""

#: xml/cut-helper.xml:7(refentrytitle) xml/cut-helper.xml:13(refname)
msgid "Assertion writing helper"
msgstr "検証作成の補助"

#: xml/cut-helper.xml:14(refpurpose)
msgid "Symbols in this section help you writing your own assertions."
msgstr "このセクションにあるシンボルは独自検証を作成することを補助します。"

#: xml/cut-helper.xml:23(link) xml/cut-helper.xml:139(primary)
msgid "cut_test_pass"
msgstr ""

#: xml/cut-helper.xml:24(link) xml/cut-helper.xml:149(primary)
msgid "cut_test_fail"
msgstr ""

#: xml/cut-helper.xml:25(link) xml/cut-helper.xml:169(primary)
msgid "cut_test_fail_va_list"
msgstr ""

#: xml/cut-helper.xml:26(link) xml/cut-helper.xml:205(primary)
msgid "cut_trace"
msgstr ""

#: xml/cut-helper.xml:27(link) xml/cut-helper.xml:274(primary)
msgid "cut_trace_with_info_expression"
msgstr ""

#: xml/cut-helper.xml:22(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>                       ()\n"
"#define             <placeholder-2/>                       (system_message, ...)\n"
"#define             <placeholder-3/>               (system_message, user_message_format)\n"
"#define             <placeholder-4/>                           (expression)\n"
"#define             <placeholder-5/>      (expression, info_expression)\n"
msgstr ""

#: xml/cut-helper.xml:41(para)
msgid ""
"You will need to write your own assertions for writing easy to read test. "
"Symbols in this section help you writing your own assertions."
msgstr ""
"読みやすいテストを書くために独自の検証を作成する必要があるでしょう。このセク"
"ションのシンボルは独自の検証を作成を補助します。"

#: xml/cut-helper.xml:46(para)
msgid ""
"If you make your assertions module, note that you need to include &lt;cutter/"
"cut-helper.h&gt; not &lt;cutter.h&gt; and you can't make it as shared "
"library. You need to link it as static library. (So, libtool's convenience "
"library is also OK.)"
msgstr ""
"独自検証のモジュールを作る場合、&lt;cutter.h&gt;ではなく&lt;cutter/cut-"
"helper.h&gt;をincludeすること、共有ライブラリにできないことの2点に注意してく"
"ださい。静的ライブラリとしてリンクしてください。（つまり、libtoolのコンビニエ"
"ンスライブラリでもよいということです。）"

#: xml/cut-helper.xml:53(para)
msgid "e.g.:"
msgstr "例:"

#: xml/cut-helper.xml:58(programlisting)
#, no-wrap
msgid ""
"\n"
"#ifndef __MY_ASSERTIONS_H__\n"
"#define __MY_ASSERTIONS_H__\n"
"\n"
"#include &lt;cutter.h&gt;\n"
"\n"
"#ifdef __cplusplus\n"
"extern \"C\" {\n"
"#endif\n"
"\n"
"#define my_assert_equal_int(expected, actual, ...)               \\\n"
"    cut_trace_with_info_expression(                              \\\n"
"        my_assert_equal_int_helper((expected), (actual),         \\\n"
"                                   # expected, # actual,         \\\n"
"                                   ## __VA_ARGS__, NULL),        \\\n"
"        my_assert_equal_int(expected, actual, ## __VA_ARGS__))\n"
"\n"
"void my_assert_equal_int (long expected,\n"
"                          long actual,\n"
"                          const char *expression_expected,\n"
"                          const char *expression_actual,\n"
"                          const char *user_message_format,\n"
"                          ...);\n"
"\n"
"#ifdef __cplusplus\n"
"}\n"
"#endif\n"
"\n"
"#endif\n"
msgstr ""

#: xml/cut-helper.xml:56(para)
msgid "my-assertions.h: <placeholder-1/>"
msgstr ""

#: xml/cut-helper.xml:91(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;cutter/cut-helper.h&gt;\n"
"#if 0\n"
"          ^^^^^^^^^^^^^^^^^^^ important!\n"
"#endif\n"
"#include \"my-assertions.h\"\n"
"\n"
"void\n"
"my_assert_equal_int(glong expected,\n"
"                    glong actual,\n"
"                    const gchar *expression_expected,\n"
"                    const gchar *expression_actual,\n"
"                    const gchar *user_message_format,\n"
"                    ...)\n"
"{\n"
"    if (expected == actual) {\n"
"        cut_test_pass();\n"
"    } else {\n"
"        cut_test_fail_va_list(\n"
"            cut_take_printf(\"&lt;%s == %s&gt;\\n\"\n"
"                            \"expected: &lt;%ld&gt;\\n\"\n"
"                            \"  actual: &lt;%ld&gt;\",\n"
"                            expression_expected,\n"
"                            expression_actual,\n"
"                            expected, actual),\n"
"            user_message_format);\n"
"    }\n"
"}\n"
msgstr ""
"\n"
"#include &lt;cutter/cut-helper.h&gt;\n"
"#if 0\n"
"          ^^^^^^^^^^^^^^^^^^^ 重要！\n"
"#endif\n"
"#include \"my-assertions.h\"\n"
"\n"
"void\n"
"my_assert_equal_int(glong expected,\n"
"                    glong actual,\n"
"                    const gchar *expression_expected,\n"
"                    const gchar *expression_actual,\n"
"                    const gchar *user_message_format,\n"
"                    ...)\n"
"{\n"
"    if (expected == actual) {\n"
"        cut_test_pass();\n"
"    } else {\n"
"        cut_test_fail_va_list(\n"
"            cut_take_printf(\"&lt;%s == %s&gt;\\n\"\n"
"                            \"expected: &lt;%ld&gt;\\n\"\n"
"                            \"  actual: &lt;%ld&gt;\",\n"
"                            expression_expected,\n"
"                            expression_actual,\n"
"                            expected, actual),\n"
"            user_message_format);\n"
"    }\n"
"}\n"

#: xml/cut-helper.xml:89(para)
msgid "my-assertions.c: <placeholder-1/>"
msgstr ""

#: xml/cut-helper.xml:123(programlisting)
#, no-wrap
msgid ""
"\n"
"AM_CFLAGS = $(GCUTTER_CFLAGS)\n"
"LIBS = $(GCUTTER_LIBS)\n"
"noinst_LTLIBRARIES = libmy-assertions.la\n"
"libmy_assertions_la_SOURCES = my-assertions.c my-assertions.h\n"
"# NO AM_LDFLAGS\n"
msgstr ""
"\n"
"AM_CFLAGS = $(GCUTTER_CFLAGS)\n"
"LIBS = $(GCUTTER_LIBS)\n"
"noinst_LTLIBRARIES = libmy-assertions.la\n"
"libmy_assertions_la_SOURCES = my-assertions.c my-assertions.h\n"
"# AM_LDFLAGSを使わない\n"

#: xml/cut-helper.xml:121(para)
msgid "Makefile.am: <placeholder-1/>"
msgstr ""

#: xml/cut-helper.xml:138(title)
msgid "cut_test_pass()"
msgstr ""

#: xml/cut-helper.xml:139(programlisting)
#, no-wrap
msgid "#define             cut_test_pass()"
msgstr ""

#: xml/cut-helper.xml:140(para)
msgid ""
"Call <link linkend=\"cut-test-pass\"><function>cut_test_pass()</function></"
"link> if an assertion is passed. <link linkend=\"cut-test-pass"
"\"><function>cut_test_pass()</function></link> counts up n-assertions."
msgstr ""
"検証をパスしたら<link linkend=\"cut-test-pass\"><function>cut_test_pass()</"
"function></link>を呼んでください。<link linkend=\"cut-test-pass"
"\"><function>cut_test_pass()</function></link>は検証数を増やします。"

#: xml/cut-helper.xml:148(title)
msgid "cut_test_fail()"
msgstr ""

#: xml/cut-helper.xml:149(programlisting)
#, no-wrap
msgid "#define             cut_test_fail(system_message, ...)"
msgstr ""

#: xml/cut-helper.xml:150(para)
msgid ""
"Call <link linkend=\"cut-test-fail\"><function>cut_test_fail()</function></"
"link> if an assertion is failed. <link linkend=\"cut-test-fail"
"\"><function>cut_test_fail()</function></link> counts up n-failures and "
"terminate the current test."
msgstr ""
"検証が失敗したら<link linkend=\"cut-test-fail\"><function>cut_test_fail()</"
"function></link>を呼んでください。<link linkend=\"cut-test-fail"
"\"><function>cut_test_fail()</function></link>は失敗数を増やし、現在のテスト"
"を中断します。"

#: xml/cut-helper.xml:157(term) xml/cut-helper.xml:193(term)
#: xml/cuttest-assertions.xml:163(term) xml/cuttest-assertions.xml:201(term)
#: xml/cuttest-assertions.xml:287(term)
msgid "<parameter>system_message</parameter>&nbsp;:"
msgstr ""

#: xml/cut-helper.xml:158(simpara) xml/cut-helper.xml:194(simpara)
msgid "a failure message from testing system. (const char *)"
msgstr "テストフレームワーク指定の失敗メッセージ。（const char *）"

#: xml/cut-helper.xml:168(title)
msgid "cut_test_fail_va_list()"
msgstr ""

#: xml/cut-helper.xml:169(programlisting)
#, no-wrap
msgid "#define             cut_test_fail_va_list(system_message, user_message_format)"
msgstr ""

#: xml/cut-helper.xml:170(para)
msgid ""
"See <link linkend=\"cut-test-fail\"><function>cut_test_fail()</function></"
"link> for <link linkend=\"cut-test-fail-va-list"
"\"><function>cut_test_fail_va_list()</function></link>'s behavior. "
"<parameter>user_message_format</parameter> is the prior variable of variable "
"length arguments."
msgstr ""
"<link linkend=\"cut-test-fail-va-list\"><function>cut_test_fail_va_list()</"
"function></link>の動作については<link linkend=\"cut-test-fail"
"\"><function>cut_test_fail()</function></link>を見てください。"
"<parameter>user_message_format</parameter>は可変長引数の1つ前の引数です。"

#: xml/cut-helper.xml:177(programlisting)
#, no-wrap
msgid ""
"\n"
"void\n"
"my_assert(cut_boolean result,\n"
"          const gchar *user_message_format,\n"
"          ...)\n"
"{\n"
"    if (result) {\n"
"        cut_test_pass();\n"
"    } else {\n"
"        cut_test_fail_va_list(\"Fail!\", user_message_format);\n"
"    }\n"
"}\n"
msgstr ""

#: xml/cut-helper.xml:197(term) xml/gcut-assertions-helper.xml:301(term)
#: xml/gcut-assertions-helper.xml:338(term)
#: xml/gcut-assertions-helper.xml:382(term)
#: xml/gcut-assertions-helper.xml:426(term)
#: xml/gcut-assertions-helper.xml:467(term)
#: xml/gcut-assertions-helper.xml:504(term)
#: xml/gcut-assertions-helper.xml:532(term)
#: xml/gcut-assertions-helper.xml:568(term)
#: xml/gcut-assertions-helper.xml:612(term)
#: xml/gcut-assertions-helper.xml:656(term)
#: xml/gcut-assertions-helper.xml:700(term)
#: xml/gcut-assertions-helper.xml:736(term)
#: xml/gcut-assertions-helper.xml:772(term)
#: xml/gdkcut-pixbuf-assertions-helper.xml:86(term)
msgid "<parameter>user_message_format</parameter>&nbsp;:"
msgstr ""

#: xml/cut-helper.xml:198(simpara)
msgid "a failure message from user. (const char *)"
msgstr "ユーザ指定の失敗メッセージ。（const char *）"

#: xml/cut-helper.xml:204(title)
msgid "cut_trace()"
msgstr ""

#: xml/cut-helper.xml:205(programlisting)
#, no-wrap
msgid "#define             cut_trace(expression)"
msgstr ""

#: xml/cut-helper.xml:206(para)
msgid ""
"Mark the current file, line, function and <parameter>expression</parameter> "
"and show it when assertion is failed in <parameter>expression</parameter>. "
"Most of <parameter>expression</parameter> will be function call."
msgstr ""
"現在のファイル名、行番号、関数名、<parameter>expression</parameter>を記憶し、"
"<parameter>expression</parameter>内で検証が失敗した場合に表示します。"
"<parameter>expression</parameter>の多くは関数呼び出しになるでしょう。"

#: xml/cut-helper.xml:211(para)
msgid ""
"Note that you can't get return value of <parameter>expression</parameter>."
msgstr ""
"<parameter>expression</parameter>の戻り値を取得できないことに注意してくださ"
"い。"

#: xml/cut-helper.xml:214(para)
msgid ""
"Here is an example of <link linkend=\"cut-trace\"><function>cut_trace()</"
"function></link>. If cut_assert_not_null(object) is failed, you will get a "
"backtrace that contains two line; cut_assert_not_null(object) and "
"create_my_object(\"my-name\")."
msgstr ""
"<link linkend=\"cut-trace\"><function>cut_trace()</function></link>は以下の通"
"りです。もし、cut_assert_not_null(object)が失敗したら、バックトレースには2行"
"含まれます。cut_assert_not_null(object)とcreate_my_object(\"my-name\")です。"

#: xml/cut-helper.xml:222(programlisting)
#, no-wrap
msgid ""
"\n"
"static MyObject *object;\n"
"\n"
"static void\n"
"create_my_object(const char *name)\n"
"{\n"
"    object = my_object_new(name);\n"
"    cut_assert_not_null(object);\n"
"}\n"
"\n"
"void\n"
"test_my_object_name(void)\n"
"{\n"
"    cut_trace(create_my_object(\"my-name\"));\n"
"    cut_assert_equal_string(\"my-name\",\n"
"                            my_object_get_name(object));\n"
"}\n"
msgstr ""

#: xml/cut-helper.xml:243(programlisting)
#, no-wrap
msgid ""
"\n"
"static MyObject *object;\n"
"\n"
"static void\n"
"create_my_object_helper(const char *name)\n"
"{\n"
"    object = my_object_new(name);\n"
"    cut_assert_not_null(object);\n"
"}\n"
"\n"
"#define create_my_object(...)                        \\\n"
"    cut_trace(create_my_object_helper(__VA_ARGS__))\n"
"\n"
"void\n"
"test_my_object_name(void)\n"
"{\n"
"    create_my_object(\"my-name\");\n"
"    cut_assert_equal_string(\"my-name\",\n"
"                            my_object_get_name(object));\n"
"}\n"
msgstr ""

#: xml/cut-helper.xml:241(para)
msgid ""
"You will use <link linkend=\"cut-trace\"><function>cut_trace()</function></"
"link> with macro for test readability: <placeholder-1/>"
msgstr ""
"テストを読みやすくするために<link linkend=\"cut-trace\"><function>cut_trace()"
"</function></link>を使ったマクロを書くかもしれません: <placeholder-1/>"

#: xml/cut-helper.xml:268(simpara) xml/cut-helper.xml:329(simpara)
msgid "an expression to be traced."
msgstr "呼び出されたことを記録される式。"

#: xml/cut-helper.xml:273(title)
msgid "cut_trace_with_info_expression()"
msgstr ""

#: xml/cut-helper.xml:274(programlisting)
#, no-wrap
msgid "#define             cut_trace_with_info_expression(expression, info_expression)"
msgstr ""

#: xml/cut-helper.xml:275(para)
msgid ""
"It's difference between <link linkend=\"cut-trace\"><function>cut_trace()</"
"function></link> and <link linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link> that traced "
"expression is the same expression as <parameter>expression</parameter> or "
"not. <link linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link> is useful "
"when you want to hide some information in <parameter>expression</parameter> "
"for backtrace readability."
msgstr ""
"<link linkend=\"cut-trace\"><function>cut_trace()</function></link>と<link "
"linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link>の違いは記録さ"
"れる式が<parameter>expression</parameter>と同じかどうかです。<link linkend="
"\"cut-trace-with-info-expression\"><function>cut_trace_with_info_expression()"
"</function></link>はバックトレースの読みやすさのために<parameter>expression</"
"parameter>から情報を隠したいときに便利です。"

#: xml/cut-helper.xml:289(para)
msgid "cut_assert_not_null(object)"
msgstr ""

#: xml/cut-helper.xml:290(para)
msgid "create_my_object(\"my-name\") not create_my_object_helper(\"my-name\")"
msgstr ""
"create_my_object_helper(\"my-name\")ではなくcreate_my_object(\"my-name\")"

#: xml/cut-helper.xml:283(para)
msgid ""
"Here is an example of <link linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link>. If "
"cut_assert_not_null(object) is failed, you will get a backtrace that "
"contains two line: <placeholder-1/> If you use <link linkend=\"cut-trace"
"\"><function>cut_trace()</function></link> instead of <link linkend=\"cut-"
"trace-with-info-expression\"><function>cut_trace_with_info_expression()</"
"function></link>, you will get create_my_object_helper(\"my-name\"). You may "
"be confused about 'Where is create_my_object_helper(\"my-name\") from? <link "
"linkend=\"test-my-object-name\"><function>test_my_object_name()</function></"
"link> uses create_my_object(\"my-name\") but does not use "
"create_my_object_helper(\"my-name\").'."
msgstr ""
"<link linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link>の例です。"
"cut_assert_not_null(object)が失敗すると以下の2行を含んだバックトレースが得ら"
"れます:<placeholder-1/>もし、<link linkend=\"cut-trace-with-info-expression"
"\"><function>cut_trace_with_info_expression()</function></link>ではなく<link "
"linkend=\"cut-trace\"><function>cut_trace()</function></link>を使った場合は"
"create_my_object_helper(\"my-name\")になります。もし、create_my_object_helper"
"(\"my-name\")が得られたら以下のように混乱してしまうかもしれません。"
"「create_my_object_helper(\"my-name\")はどこからきたんだ？<link linkend="
"\"test-my-object-name\"><function>test_my_object_name()</function></link>は"
"create_my_object(\"my-name\")は使っているけど、create_my_object_helper(\"my-"
"name\")は使っていないぞ。」"

#: xml/cut-helper.xml:302(programlisting)
#, no-wrap
msgid ""
"\n"
"static MyObject *object;\n"
"\n"
"static void\n"
"create_my_object_helper(const char *name)\n"
"{\n"
"    object = my_object_new(name);\n"
"    cut_assert_not_null(object);\n"
"}\n"
"\n"
"#define create_my_object(...)                        \\\n"
"    cut_trace_with_info_expression(                  \\\n"
"        create_my_object_helper(__VA_ARGS__),        \\\n"
"        create_my_object(__VA_ARGS__))\n"
"\n"
"void\n"
"test_my_object_name(void)\n"
"{\n"
"    create_my_object(\"my-name\");\n"
"    cut_assert_equal_string(\"my-name\",\n"
"                            my_object_get_name(object));\n"
"}\n"
msgstr ""

#: xml/cut-helper.xml:331(term)
msgid "<parameter>info_expression</parameter>&nbsp;:"
msgstr ""

#: xml/cut-helper.xml:332(simpara)
msgid "a traced expression."
msgstr "呼び出されたと記録される式。"

#: xml/cut-iterated-test.xml:7(refentrytitle)
#: xml/cut-iterated-test.xml:13(refname) xml/cut-iterated-test.xml:23(link)
#: xml/cut-iterated-test.xml:24(link) xml/cut-iterated-test.xml:27(link)
#: xml/cut-iterated-test.xml:28(link) xml/cut-iterated-test.xml:29(link)
#: xml/cut-iterated-test.xml:31(link) xml/cut-iterated-test.xml:66(primary)
#: xml/cut-test-iterator.xml:29(link)
msgid "CutIteratedTest"
msgstr ""

#: xml/cut-iterated-test.xml:22(link)
msgid "*CutIteratedTestFunction"
msgstr ""

#: xml/cut-iterated-test.xml:22(link) xml/gbsearcharray.xml:23(link)
#: xml/gcut-types.xml:23(link)
msgid "gconstpointer"
msgstr ""

#: xml/cut-iterated-test.xml:24(link) xml/cut-iterated-test.xml:75(primary)
msgid "cut_iterated_test_new"
msgstr ""

#: xml/cut-iterated-test.xml:25(link) xml/cut-iterated-test.xml:54(primary)
#: xml/cut-test-iterator.xml:25(link)
msgid "CutIteratedTestFunction"
msgstr ""

#: xml/cut-iterated-test.xml:26(link) xml/cut-iterated-test.xml:28(link)
#: xml/cut-iterated-test.xml:30(link) xml/cut-test-data.xml:7(refentrytitle)
#: xml/cut-test-data.xml:13(refname) xml/cut-test-data.xml:22(link)
#: xml/cut-test-data.xml:23(link) xml/cut-test-data.xml:26(link)
#: xml/cut-test-data.xml:27(link) xml/cut-test-data.xml:28(link)
#: xml/cut-test-data.xml:30(link) xml/cut-test-data.xml:31(link)
#: xml/cut-test-data.xml:34(link) xml/cut-test-data.xml:35(link)
#: xml/cut-test-data.xml:59(title) xml/cut-test-data.xml:60(primary)
msgid "CutTestData"
msgstr ""

#: xml/cut-iterated-test.xml:27(link) xml/cut-iterated-test.xml:97(primary)
msgid "cut_iterated_test_new_empty"
msgstr ""

#: xml/cut-iterated-test.xml:28(link) xml/cut-iterated-test.xml:108(primary)
msgid "cut_iterated_test_get_data"
msgstr ""

#: xml/cut-iterated-test.xml:29(link) xml/cut-iterated-test.xml:122(primary)
msgid "cut_iterated_test_set_data"
msgstr ""

#: xml/cut-iterated-test.xml:31(link) xml/cut-iterated-test.xml:138(primary)
msgid "cut_iterated_test_clear_data"
msgstr ""

#: xml/cut-iterated-test.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                (<placeholder-2/>)          (<placeholder-3/> data);\n"
"struct              <placeholder-4/>;\n"
"<placeholder-5/>*    <placeholder-6/>               (const <placeholder-7/> *name,\n"
"                                                         <placeholder-8/> function,\n"
"                                                         <placeholder-9/> *data);\n"
"<placeholder-10/>*    <placeholder-11/>         (void);\n"
"<placeholder-12/>*        <placeholder-13/>          (<placeholder-14/> *test);\n"
"<placeholder-15/>                <placeholder-16/>          (<placeholder-17/> *test,\n"
"                                                         <placeholder-18/> *data);\n"
"<placeholder-19/>                <placeholder-20/>        (<placeholder-21/> *test);\n"
msgstr ""

#: xml/cut-iterated-test.xml:53(title)
msgid "CutIteratedTestFunction ()"
msgstr ""

#: xml/cut-iterated-test.xml:54(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                (*CutIteratedTestFunction)          (<link linkend=\"gconstpointer\">gconstpointer</link> data);"
msgstr ""

#: xml/cut-iterated-test.xml:65(title)
msgid "struct CutIteratedTest"
msgstr ""

#: xml/cut-iterated-test.xml:66(programlisting)
#, no-wrap
msgid ""
"struct CutIteratedTest {\n"
"    CutTest object;\n"
"};\n"
msgstr ""

#: xml/cut-iterated-test.xml:74(title)
msgid "cut_iterated_test_new ()"
msgstr ""

#: xml/cut-iterated-test.xml:75(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutIteratedTest\">CutIteratedTest</link>*    cut_iterated_test_new               (const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         <link linkend=\"CutIteratedTestFunction\">CutIteratedTestFunction</link> function,\n"
"                                                         <link linkend=\"CutTestData\">CutTestData</link> *data);"
msgstr ""

#: xml/cut-iterated-test.xml:81(term) xml/cut-listener-utils.xml:51(term)
#: xml/cut-listener-utils.xml:63(term) xml/cut-listener-utils.xml:78(term)
#: xml/cut-module-factory-utils.xml:152(term)
#: xml/cut-module-factory-utils.xml:170(term)
#: xml/cut-module-factory.xml:76(term) xml/cut-module-factory.xml:102(term)
#: xml/cut-report.xml:72(term) xml/cut-stream.xml:88(term)
#: xml/cut-test-data.xml:75(term) xml/cut-test-iterator.xml:73(term)
#: xml/cut-ui.xml:76(term)
msgid "<parameter>name</parameter>&nbsp;:"
msgstr ""

#: xml/cut-iterated-test.xml:96(title)
msgid "cut_iterated_test_new_empty ()"
msgstr ""

#: xml/cut-iterated-test.xml:97(programlisting)
#, no-wrap
msgid "<link linkend=\"CutIteratedTest\">CutIteratedTest</link>*    cut_iterated_test_new_empty         (void);"
msgstr ""

#: xml/cut-iterated-test.xml:107(title)
msgid "cut_iterated_test_get_data ()"
msgstr ""

#: xml/cut-iterated-test.xml:108(programlisting)
#, no-wrap
msgid "<link linkend=\"CutTestData\">CutTestData</link>*        cut_iterated_test_get_data          (<link linkend=\"CutIteratedTest\">CutIteratedTest</link> *test);"
msgstr ""

#: xml/cut-iterated-test.xml:112(term) xml/cut-iterated-test.xml:127(term)
#: xml/cut-iterated-test.xml:142(term) xml/cut-test-iterator.xml:108(term)
#: xml/cut-test-runner.xml:85(term)
msgid "<parameter>test</parameter>&nbsp;:"
msgstr ""

#: xml/cut-iterated-test.xml:121(title)
msgid "cut_iterated_test_set_data ()"
msgstr ""

#: xml/cut-iterated-test.xml:122(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_iterated_test_set_data          (<link linkend=\"CutIteratedTest\">CutIteratedTest</link> *test,\n"
"                                                         <link linkend=\"CutTestData\">CutTestData</link> *data);"
msgstr ""

#: xml/cut-iterated-test.xml:137(title)
msgid "cut_iterated_test_clear_data ()"
msgstr ""

#: xml/cut-iterated-test.xml:138(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_iterated_test_clear_data        (<link linkend=\"CutIteratedTest\">CutIteratedTest</link> *test);"
msgstr ""

#: xml/cut-listener-utils.xml:7(refentrytitle)
#: xml/cut-listener-utils.xml:13(refname)
msgid "cut-listener-utils"
msgstr ""

#: xml/cut-listener-utils.xml:22(link) xml/cut-listener-utils.xml:47(primary)
msgid "CUT_DEFINE_ADDITIONAL_LISTENER_VARIABLES"
msgstr ""

#: xml/cut-listener-utils.xml:23(link) xml/cut-listener-utils.xml:59(primary)
msgid "CUT_LISTENER_RETURN_DEFAULT_MODULE_DIR"
msgstr ""

#: xml/cut-listener-utils.xml:24(link) xml/cut-listener-utils.xml:74(primary)
msgid "CUT_DEFINE_LISTENER_MODULE"
msgstr ""

#: xml/cut-listener-utils.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>(name)\n"
"#define             <placeholder-2/>(name, NAME)\n"
"#define             <placeholder-3/>          (name, NAME)\n"
msgstr ""

#: xml/cut-listener-utils.xml:46(title)
msgid "CUT_DEFINE_ADDITIONAL_LISTENER_VARIABLES()"
msgstr ""

#: xml/cut-listener-utils.xml:47(programlisting)
#, no-wrap
msgid "#define             CUT_DEFINE_ADDITIONAL_LISTENER_VARIABLES(name)"
msgstr ""

#: xml/cut-listener-utils.xml:58(title)
msgid "CUT_LISTENER_RETURN_DEFAULT_MODULE_DIR()"
msgstr ""

#: xml/cut-listener-utils.xml:59(programlisting)
#, no-wrap
msgid "#define             CUT_LISTENER_RETURN_DEFAULT_MODULE_DIR(name, NAME)"
msgstr ""

#: xml/cut-listener-utils.xml:66(term) xml/cut-listener-utils.xml:81(term)
msgid "<parameter>NAME</parameter>&nbsp;:"
msgstr ""

#: xml/cut-listener-utils.xml:73(title)
msgid "CUT_DEFINE_LISTENER_MODULE()"
msgstr ""

#: xml/cut-listener-utils.xml:74(programlisting)
#, no-wrap
msgid "#define             CUT_DEFINE_LISTENER_MODULE(name, NAME)"
msgstr ""

#: xml/cut-listener.xml:7(refentrytitle) xml/cut-listener.xml:13(refname)
#: xml/cut-listener.xml:22(link) xml/cut-listener.xml:25(link)
#: xml/cut-run-context.xml:90(link) xml/cut-run-context.xml:92(link)
msgid "CutListener"
msgstr ""

#: xml/cut-listener.xml:22(link) xml/cut-listener.xml:49(primary)
msgid "cut_listener_attach_to_run_context"
msgstr ""

#: xml/cut-listener.xml:24(link) xml/cut-listener.xml:65(primary)
msgid "cut_listener_detach_from_run_context"
msgstr ""

#: xml/cut-listener.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>  (<placeholder-3/> *listener,\n"
"                                                         <placeholder-4/> *run_context);\n"
"<placeholder-5/>                <placeholder-6/>\n"
"                                                        (<placeholder-7/> *listener,\n"
"                                                         <placeholder-8/> *run_context);\n"
msgstr ""

#: xml/cut-listener.xml:48(title)
msgid "cut_listener_attach_to_run_context ()"
msgstr ""

#: xml/cut-listener.xml:49(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_listener_attach_to_run_context  (<link linkend=\"CutListener\">CutListener</link> *listener,\n"
"                                                         <link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-listener.xml:54(term) xml/cut-listener.xml:71(term)
#: xml/cut-run-context.xml:817(term) xml/cut-run-context.xml:833(term)
msgid "<parameter>listener</parameter>&nbsp;:"
msgstr ""

#: xml/cut-listener.xml:64(title)
msgid "cut_listener_detach_from_run_context ()"
msgstr ""

#: xml/cut-listener.xml:65(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_listener_detach_from_run_context\n"
"                                                        (<link linkend=\"CutListener\">CutListener</link> *listener,\n"
"                                                         <link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-mach-o-loader.xml:7(refentrytitle)
#: xml/cut-mach-o-loader.xml:13(refname) xml/cut-mach-o-loader.xml:22(link)
#: xml/cut-mach-o-loader.xml:23(link) xml/cut-mach-o-loader.xml:24(link)
#: xml/cut-mach-o-loader.xml:25(link) xml/cut-mach-o-loader.xml:26(link)
#: xml/cut-mach-o-loader.xml:48(title) xml/cut-mach-o-loader.xml:49(primary)
msgid "CutMachOLoader"
msgstr ""

#: xml/cut-mach-o-loader.xml:23(link) xml/cut-mach-o-loader.xml:58(primary)
msgid "cut_mach_o_loader_new"
msgstr ""

#: xml/cut-mach-o-loader.xml:24(link) xml/cut-mach-o-loader.xml:72(primary)
msgid "cut_mach_o_loader_is_mach_o"
msgstr ""

#: xml/cut-mach-o-loader.xml:25(link) xml/cut-mach-o-loader.xml:86(primary)
msgid "cut_mach_o_loader_support_attribute"
msgstr ""

#: xml/cut-mach-o-loader.xml:26(link) xml/cut-mach-o-loader.xml:100(primary)
msgid "cut_mach_o_loader_collect_symbols"
msgstr ""

#: xml/cut-mach-o-loader.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*     <placeholder-3/>               (const <placeholder-4/> *so_filename);\n"
"<placeholder-5/>            <placeholder-6/>         (<placeholder-7/> *loader);\n"
"<placeholder-8/>            <placeholder-9/> (<placeholder-10/> *loader);\n"
"<placeholder-11/>*              <placeholder-12/>   (<placeholder-13/> *loader);\n"
msgstr ""

#: xml/cut-mach-o-loader.xml:49(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutMachOLoader;\n"
msgstr ""

#: xml/cut-mach-o-loader.xml:57(title)
msgid "cut_mach_o_loader_new ()"
msgstr ""

#: xml/cut-mach-o-loader.xml:58(programlisting)
#, no-wrap
msgid "<link linkend=\"CutMachOLoader\">CutMachOLoader</link>*     cut_mach_o_loader_new               (const <link linkend=\"gchar\">gchar</link> *so_filename);"
msgstr ""

#: xml/cut-mach-o-loader.xml:62(term)
msgid "<parameter>so_filename</parameter>&nbsp;:"
msgstr ""

#: xml/cut-mach-o-loader.xml:71(title)
msgid "cut_mach_o_loader_is_mach_o ()"
msgstr ""

#: xml/cut-mach-o-loader.xml:72(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_mach_o_loader_is_mach_o         (<link linkend=\"CutMachOLoader\">CutMachOLoader</link> *loader);"
msgstr ""

#: xml/cut-mach-o-loader.xml:76(term) xml/cut-mach-o-loader.xml:90(term)
#: xml/cut-mach-o-loader.xml:104(term)
msgid "<parameter>loader</parameter>&nbsp;:"
msgstr ""

#: xml/cut-mach-o-loader.xml:85(title)
msgid "cut_mach_o_loader_support_attribute ()"
msgstr ""

#: xml/cut-mach-o-loader.xml:86(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_mach_o_loader_support_attribute (<link linkend=\"CutMachOLoader\">CutMachOLoader</link> *loader);"
msgstr ""

#: xml/cut-mach-o-loader.xml:99(title)
msgid "cut_mach_o_loader_collect_symbols ()"
msgstr ""

#: xml/cut-mach-o-loader.xml:100(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_mach_o_loader_collect_symbols   (<link linkend=\"CutMachOLoader\">CutMachOLoader</link> *loader);"
msgstr ""

#: xml/cut-main.xml:7(refentrytitle) xml/cut-main.xml:13(refname)
msgid "cut-main"
msgstr ""

#: xml/cut-main.xml:22(link) xml/cut-main.xml:53(primary)
msgid "cut_init"
msgstr ""

#: xml/cut-main.xml:22(link) xml/cut-multi-process.xml:42(link)
#: xml/cut-multi-process.xml:44(link) xml/cut-process.xml:24(link)
#: xml/cut-process.xml:25(link) xml/cut-process.xml:26(link)
#: xml/cut-process.xml:27(link) xml/stack.xml:25(link) xml/stack.xml:26(link)
#: xml/stack.xml:28(link) xml/stack.xml:29(link)
msgid "int"
msgstr ""

#: xml/cut-main.xml:23(link) xml/cut-main.xml:27(link)
#: xml/cut-main.xml:28(link) xml/cut-multi-process.xml:31(link)
#: xml/cut-multi-process.xml:33(link) xml/cut-multi-process.xml:34(link)
#: xml/cut-multi-process.xml:38(link) xml/cut-multi-process.xml:45(link)
#: xml/cut-multi-process.xml:47(link) xml/cut-multi-process.xml:48(link)
#: xml/cut-multi-process.xml:52(link) xml/cut-multi-process.xml:53(link)
#: xml/cut-multi-process.xml:57(link) xml/cut-multi-process.xml:58(link)
#: xml/cut-multi-process.xml:62(link) xml/gcut-assertions-helper.xml:135(link)
#: xml/gcut-assertions-helper.xml:136(link)
#: xml/gcut-assertions-helper.xml:137(link)
#: xml/gcut-assertions-helper.xml:142(link)
#: xml/gcut-assertions-helper.xml:143(link)
#: xml/gcut-assertions-helper.xml:144(link)
msgid "char"
msgstr ""

#: xml/cut-main.xml:24(link) xml/cut-main.xml:69(primary)
msgid "cut_quit"
msgstr ""

#: xml/cut-main.xml:25(link) xml/cut-main.xml:75(primary)
msgid "cut_run"
msgstr ""

#: xml/cut-main.xml:26(link) xml/cut-main.xml:86(primary)
msgid "cut_run_iteration"
msgstr ""

#: xml/cut-main.xml:27(link) xml/cut-main.xml:97(primary)
msgid "cut_set_cutter_command_path"
msgstr ""

#: xml/cut-main.xml:28(link) xml/cut-main.xml:109(primary)
msgid "cut_get_cutter_command_path"
msgstr ""

#: xml/cut-main.xml:29(link) xml/cut-main.xml:120(primary)
msgid "cut_create_run_context"
msgstr ""

#: xml/cut-main.xml:30(link) xml/cut-main.xml:131(primary)
msgid "cut_start_run_context"
msgstr ""

#: xml/cut-main.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                            (<placeholder-3/> *argc,\n"
"                                                         <placeholder-4/> ***argv);\n"
"<placeholder-5/>                <placeholder-6/>                            (void);\n"
"<placeholder-7/>            <placeholder-8/>                             (void);\n"
"<placeholder-9/>            <placeholder-10/>                   (void);\n"
"<placeholder-11/>                <placeholder-12/>         (const <placeholder-13/> *argv0);\n"
"const <placeholder-14/>*         <placeholder-15/>         (void);\n"
"<placeholder-16/>*      <placeholder-17/>              (void);\n"
"<placeholder-18/>            <placeholder-19/>               (<placeholder-20/> *run_context);\n"
msgstr ""

#: xml/cut-main.xml:52(title)
msgid "cut_init ()"
msgstr ""

#: xml/cut-main.xml:53(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_init                            (<link linkend=\"int\">int</link> *argc,\n"
"                                                         <link linkend=\"char\">char</link> ***argv);"
msgstr ""

#: xml/cut-main.xml:58(term)
msgid "<parameter>argc</parameter>&nbsp;:"
msgstr ""

#: xml/cut-main.xml:61(term)
msgid "<parameter>argv</parameter>&nbsp;:"
msgstr ""

#: xml/cut-main.xml:68(title)
msgid "cut_quit ()"
msgstr ""

#: xml/cut-main.xml:69(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_quit                            (void);"
msgstr ""

#: xml/cut-main.xml:74(title)
msgid "cut_run ()"
msgstr ""

#: xml/cut-main.xml:75(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run                             (void);"
msgstr ""

#: xml/cut-main.xml:85(title)
msgid "cut_run_iteration ()"
msgstr ""

#: xml/cut-main.xml:86(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_iteration                   (void);"
msgstr ""

#: xml/cut-main.xml:96(title)
msgid "cut_set_cutter_command_path ()"
msgstr ""

#: xml/cut-main.xml:97(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_set_cutter_command_path         (const <link linkend=\"char\">char</link> *argv0);"
msgstr ""

#: xml/cut-main.xml:101(term)
msgid "<parameter>argv0</parameter>&nbsp;:"
msgstr ""

#: xml/cut-main.xml:108(title)
msgid "cut_get_cutter_command_path ()"
msgstr ""

#: xml/cut-main.xml:109(programlisting)
#, no-wrap
msgid "const <link linkend=\"char\">char</link>*         cut_get_cutter_command_path         (void);"
msgstr ""

#: xml/cut-main.xml:119(title)
msgid "cut_create_run_context ()"
msgstr ""

#: xml/cut-main.xml:120(programlisting)
#, no-wrap
msgid "<link linkend=\"CutRunContext\">CutRunContext</link>*      cut_create_run_context              (void);"
msgstr ""

#: xml/cut-main.xml:130(title)
msgid "cut_start_run_context ()"
msgstr ""

#: xml/cut-main.xml:131(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_start_run_context               (<link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-module-factory-utils.xml:7(refentrytitle)
#: xml/cut-module-factory-utils.xml:13(refname)
msgid "cut-module-factory-utils"
msgstr ""

#: xml/cut-module-factory-utils.xml:22(link)
#: xml/cut-module-factory-utils.xml:59(primary)
msgid "cut_module_factory_init"
msgstr ""

#: xml/cut-module-factory-utils.xml:23(link)
#: xml/cut-module-factory-utils.xml:65(primary)
msgid "cut_module_factory_quit"
msgstr ""

#: xml/cut-module-factory-utils.xml:24(link)
#: xml/cut-module-factory-utils.xml:71(primary)
msgid "cut_module_factory_get_default_module_dir"
msgstr ""

#: xml/cut-module-factory-utils.xml:26(link)
#: xml/cut-module-factory-utils.xml:83(primary)
msgid "cut_module_factory_set_default_module_dir"
msgstr ""

#: xml/cut-module-factory-utils.xml:28(link)
#: xml/cut-module-factory-utils.xml:96(primary)
msgid "cut_module_factory_load"
msgstr ""

#: xml/cut-module-factory-utils.xml:30(link)
#: xml/cut-module-factory-utils.xml:112(primary)
msgid "cut_module_factory_load_all"
msgstr ""

#: xml/cut-module-factory-utils.xml:31(link)
#: xml/cut-module-factory-utils.xml:124(primary)
msgid "cut_module_factory_unload"
msgstr ""

#: xml/cut-module-factory-utils.xml:32(link)
#: xml/cut-module-factory-utils.xml:130(primary)
msgid "cut_module_factory_get_names"
msgstr ""

#: xml/cut-module-factory-utils.xml:33(link)
#: xml/cut-module-factory-utils.xml:144(primary)
msgid "cut_module_factory_exist_module"
msgstr ""

#: xml/cut-module-factory-utils.xml:35(link)
msgid "CutModule"
msgstr ""

#: xml/cut-module-factory-utils.xml:35(link)
#: xml/cut-module-factory-utils.xml:162(primary)
msgid "cut_module_factory_load_module"
msgstr ""

#: xml/cut-module-factory-utils.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>             (void);\n"
"<placeholder-3/>                <placeholder-4/>             (void);\n"
"const <placeholder-5/>*        <placeholder-6/>\n"
"                                                        (void);\n"
"<placeholder-7/>                <placeholder-8/>\n"
"                                                        (const <placeholder-9/> *dir);\n"
"<placeholder-10/>                <placeholder-11/>             (const <placeholder-12/> *dir,\n"
"                                                         const <placeholder-13/> *type);\n"
"<placeholder-14/>                <placeholder-15/>         (const <placeholder-16/> *base_dir);\n"
"<placeholder-17/>                <placeholder-18/>           (void);\n"
"<placeholder-19/>*              <placeholder-20/>        (const <placeholder-21/> *type);\n"
"<placeholder-22/>            <placeholder-23/>     (const <placeholder-24/> *type,\n"
"                                                         const <placeholder-25/> *name);\n"
"<placeholder-26/>*          <placeholder-27/>      (const <placeholder-28/> *type,\n"
"                                                         const <placeholder-29/> *name);\n"
msgstr ""

#: xml/cut-module-factory-utils.xml:58(title)
msgid "cut_module_factory_init ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:59(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_module_factory_init             (void);"
msgstr ""

#: xml/cut-module-factory-utils.xml:64(title)
msgid "cut_module_factory_quit ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:65(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_module_factory_quit             (void);"
msgstr ""

#: xml/cut-module-factory-utils.xml:70(title)
msgid "cut_module_factory_get_default_module_dir ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:71(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link>*        cut_module_factory_get_default_module_dir\n"
"                                                        (void);"
msgstr ""

#: xml/cut-module-factory-utils.xml:82(title)
msgid "cut_module_factory_set_default_module_dir ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:83(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_module_factory_set_default_module_dir\n"
"                                                        (const <link linkend=\"gchar\">gchar</link> *dir);"
msgstr ""

#: xml/cut-module-factory-utils.xml:88(term)
#: xml/cut-module-factory-utils.xml:101(term)
msgid "<parameter>dir</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory-utils.xml:95(title)
msgid "cut_module_factory_load ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:96(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_module_factory_load             (const <link linkend=\"gchar\">gchar</link> *dir,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *type);"
msgstr ""

#: xml/cut-module-factory-utils.xml:104(term)
#: xml/cut-module-factory-utils.xml:134(term)
#: xml/cut-module-factory-utils.xml:149(term)
#: xml/cut-module-factory-utils.xml:167(term)
#: xml/cut-module-factory.xml:73(term) xml/cut-module-factory.xml:99(term)
#: xml/cut-sequence-matcher.xml:200(term)
#: xml/gcut-assertions-helper.xml:364(term)
#: xml/gcut-assertions-helper.xml:408(term) xml/gcut-assertions.xml:317(term)
#: xml/gcut-assertions.xml:341(term) xml/gcut-list.xml:282(term)
#: xml/gcut-list.xml:304(term)
msgid "<parameter>type</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory-utils.xml:111(title)
msgid "cut_module_factory_load_all ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:112(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_module_factory_load_all         (const <link linkend=\"gchar\">gchar</link> *base_dir);"
msgstr ""

#: xml/cut-module-factory-utils.xml:116(term)
msgid "<parameter>base_dir</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory-utils.xml:123(title)
msgid "cut_module_factory_unload ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:124(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_module_factory_unload           (void);"
msgstr ""

#: xml/cut-module-factory-utils.xml:129(title)
msgid "cut_module_factory_get_names ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:130(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_module_factory_get_names        (const <link linkend=\"gchar\">gchar</link> *type);"
msgstr ""

#: xml/cut-module-factory-utils.xml:143(title)
msgid "cut_module_factory_exist_module ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:144(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_module_factory_exist_module     (const <link linkend=\"gchar\">gchar</link> *type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name);"
msgstr ""

#: xml/cut-module-factory-utils.xml:161(title)
msgid "cut_module_factory_load_module ()"
msgstr ""

#: xml/cut-module-factory-utils.xml:162(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutModule\">CutModule</link>*          cut_module_factory_load_module      (const <link linkend=\"gchar\">gchar</link> *type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name);"
msgstr ""

#: xml/cut-module-factory.xml:7(refentrytitle)
#: xml/cut-module-factory.xml:13(refname) xml/cut-module-factory.xml:22(link)
#: xml/cut-module-factory.xml:23(link) xml/cut-module-factory.xml:27(link)
#: xml/cut-module-factory.xml:31(link) xml/cut-module-factory.xml:33(link)
#: xml/cut-module-factory.xml:34(link) xml/cut-module-factory.xml:56(title)
#: xml/cut-module-factory.xml:57(primary)
msgid "CutModuleFactory"
msgstr ""

#: xml/cut-module-factory.xml:23(link) xml/cut-module-factory.xml:66(primary)
msgid "cut_module_factory_new"
msgstr ""

#: xml/cut-module-factory.xml:27(link) xml/cut-module-factory.xml:92(primary)
msgid "cut_module_factory_new_valist"
msgstr ""

#: xml/cut-module-factory.xml:30(link) xml/gcut-test-utils.xml:34(link)
msgid "va_list"
msgstr ""

#: xml/cut-module-factory.xml:31(link) xml/cut-module-factory.xml:118(primary)
msgid "cut_module_factory_set_option_group"
msgstr ""

#: xml/cut-module-factory.xml:33(link) xml/cut-ui.xml:25(link)
#: xml/gcut-assertions-helper.xml:124(link)
#: xml/gcut-assertions-helper.xml:125(link) xml/gcut-object.xml:15(type)
#: xml/gcut-object.xml:23(link) xml/gcut-object.xml:24(link)
#: xml/gcut-object.xml:26(link) xml/gcut-object.xml:27(link)
#: xml/gcut-public.xml:22(link) xml/gcut-public.xml:23(link)
msgid "GObject"
msgstr ""

#: xml/cut-module-factory.xml:33(link) xml/cut-module-factory.xml:134(primary)
msgid "cut_module_factory_create"
msgstr ""

#: xml/cut-module-factory.xml:34(link) xml/cut-module-factory.xml:148(primary)
msgid "cut_module_factory_get_name"
msgstr ""

#: xml/cut-module-factory.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*   <placeholder-3/>              (const <placeholder-4/> *type,\n"
"                                                         const <placeholder-5/> *name,\n"
"                                                         const <placeholder-6/> *first_property,\n"
"                                                         ...);\n"
"<placeholder-7/>*   <placeholder-8/>       (const <placeholder-9/> *type,\n"
"                                                         const <placeholder-10/> *name,\n"
"                                                         const <placeholder-11/> *first_property,\n"
"                                                         <placeholder-12/> var_args);\n"
"<placeholder-13/>                <placeholder-14/> (<placeholder-15/> *factory,\n"
"                                                         <placeholder-16/> *context);\n"
"<placeholder-17/>*            <placeholder-18/>           (<placeholder-19/> *factory);\n"
"const <placeholder-20/>*        <placeholder-21/>         (<placeholder-22/> *factory);\n"
msgstr ""

#: xml/cut-module-factory.xml:57(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutModuleFactory;\n"
msgstr ""

#: xml/cut-module-factory.xml:65(title)
msgid "cut_module_factory_new ()"
msgstr ""

#: xml/cut-module-factory.xml:66(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutModuleFactory\">CutModuleFactory</link>*   cut_module_factory_new              (const <link linkend=\"gchar\">gchar</link> *type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-module-factory.xml:79(term) xml/cut-module-factory.xml:105(term)
#: xml/cut-report.xml:75(term) xml/cut-stream.xml:91(term)
#: xml/cut-ui.xml:79(term)
msgid "<parameter>first_property</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory.xml:91(title)
msgid "cut_module_factory_new_valist ()"
msgstr ""

#: xml/cut-module-factory.xml:92(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutModuleFactory\">CutModuleFactory</link>*   cut_module_factory_new_valist       (const <link linkend=\"gchar\">gchar</link> *type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         <link linkend=\"va-list\">va_list</link> var_args);"
msgstr ""

#: xml/cut-module-factory.xml:108(term)
msgid "<parameter>var_args</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory.xml:117(title)
msgid "cut_module_factory_set_option_group ()"
msgstr ""

#: xml/cut-module-factory.xml:118(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_module_factory_set_option_group (<link linkend=\"CutModuleFactory\">CutModuleFactory</link> *factory,\n"
"                                                         <link linkend=\"GOptionContext\">GOptionContext</link> *context);"
msgstr ""

#: xml/cut-module-factory.xml:123(term) xml/cut-module-factory.xml:138(term)
#: xml/cut-module-factory.xml:152(term)
msgid "<parameter>factory</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory.xml:133(title)
msgid "cut_module_factory_create ()"
msgstr ""

#: xml/cut-module-factory.xml:134(programlisting)
#, no-wrap
msgid "<link linkend=\"GObject\">GObject</link>*            cut_module_factory_create           (<link linkend=\"CutModuleFactory\">CutModuleFactory</link> *factory);"
msgstr ""

#: xml/cut-module-factory.xml:147(title)
msgid "cut_module_factory_get_name ()"
msgstr ""

#: xml/cut-module-factory.xml:148(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_module_factory_get_name         (<link linkend=\"CutModuleFactory\">CutModuleFactory</link> *factory);"
msgstr ""

#: xml/cut-multi-process.xml:7(refentrytitle)
#: xml/cut-multi-process.xml:13(refname)
msgid "Multi Process"
msgstr "マルチプロセス"

#: xml/cut-multi-process.xml:14(refpurpose)
msgid "Utilities to run your tests on multi processes."
msgstr "マルチプロセスでテストを走らせるためののユーティリティ。"

#: xml/cut-multi-process.xml:23(link) xml/cut-multi-process.xml:26(link)
#: xml/cut-multi-process.xml:27(link) xml/cut-multi-process.xml:28(link)
#: xml/cut-multi-process.xml:29(link) xml/cut-multi-process.xml:30(link)
#: xml/cut-multi-process.xml:31(link) xml/cut-multi-process.xml:32(link)
#: xml/cut-multi-process.xml:35(link) xml/cut-multi-process.xml:37(link)
#: xml/cut-multi-process.xml:39(link) xml/cut-multi-process.xml:40(link)
#: xml/cut-multi-process.xml:42(link) xml/cut-multi-process.xml:43(link)
#: xml/cut-multi-process.xml:45(link) xml/cut-multi-process.xml:46(link)
#: xml/cut-multi-process.xml:49(link) xml/cut-multi-process.xml:51(link)
#: xml/cut-multi-process.xml:54(link) xml/cut-multi-process.xml:56(link)
#: xml/cut-multi-process.xml:59(link) xml/cut-multi-process.xml:61(link)
#: xml/cut-multi-process.xml:63(link) xml/cut-multi-process.xml:64(link)
#: xml/cut-multi-process.xml:65(link) xml/cut-multi-process.xml:66(link)
#: xml/cut-multi-process.xml:67(link) xml/cut-multi-process.xml:71(link)
#: xml/cut-multi-process.xml:110(title) xml/cut-multi-process.xml:111(primary)
msgid "CutSubProcess"
msgstr ""

#: xml/cut-multi-process.xml:24(link) xml/cut-multi-process.xml:70(link)
#: xml/cut-multi-process.xml:72(link) xml/cut-multi-process.xml:73(link)
#: xml/cut-multi-process.xml:74(link) xml/cut-multi-process.xml:131(title)
#: xml/cut-multi-process.xml:132(primary)
msgid "CutSubProcessGroup"
msgstr ""

#: xml/cut-multi-process.xml:25(link) xml/cut-multi-process.xml:159(primary)
msgid "cut_take_new_sub_process"
msgstr ""

#: xml/cut-multi-process.xml:26(link) xml/cut-multi-process.xml:28(link)
#: xml/cut-multi-process.xml:29(link) xml/cut-multi-process.xml:30(link)
#: xml/cut-multi-process.xml:39(link) xml/cut-multi-process.xml:41(link)
#: xml/cut-multi-process.xml:65(link) xml/cut-multi-process.xml:66(link)
#: xml/cut-multi-process.xml:68(link) xml/cut-multi-process.xml:72(link)
#: xml/cut-multi-process.xml:74(link) xml/cut-types.xml:23(link)
#: xml/cut-types.xml:62(title) xml/cut-types.xml:63(primary)
msgid "cut_boolean"
msgstr ""

#: xml/cut-multi-process.xml:26(link) xml/cut-multi-process.xml:174(primary)
msgid "cut_sub_process_run"
msgstr ""

#: xml/cut-multi-process.xml:27(link) xml/cut-multi-process.xml:191(primary)
msgid "cut_sub_process_run_async"
msgstr ""

#: xml/cut-multi-process.xml:28(link) xml/cut-multi-process.xml:205(primary)
msgid "cut_sub_process_wait"
msgstr ""

#: xml/cut-multi-process.xml:29(link) xml/cut-multi-process.xml:223(primary)
msgid "cut_sub_process_is_success"
msgstr ""

#: xml/cut-multi-process.xml:30(link) xml/cut-multi-process.xml:241(primary)
msgid "cut_sub_process_is_running"
msgstr ""

#: xml/cut-multi-process.xml:31(link) xml/cut-multi-process.xml:258(primary)
msgid "cut_sub_process_get_test_directory"
msgstr ""

#: xml/cut-multi-process.xml:32(link) xml/cut-multi-process.xml:274(primary)
msgid "cut_sub_process_set_test_directory"
msgstr ""

#: xml/cut-multi-process.xml:34(link) xml/cut-multi-process.xml:293(primary)
msgid "cut_sub_process_get_source_directory"
msgstr ""

#: xml/cut-multi-process.xml:36(link) xml/cut-multi-process.xml:310(primary)
msgid "cut_sub_process_set_source_directory"
msgstr ""

#: xml/cut-multi-process.xml:39(link) xml/cut-multi-process.xml:330(primary)
msgid "cut_sub_process_get_multi_thread"
msgstr ""

#: xml/cut-multi-process.xml:40(link) xml/cut-multi-process.xml:347(primary)
msgid "cut_sub_process_set_multi_thread"
msgstr ""

#: xml/cut-multi-process.xml:42(link) xml/cut-multi-process.xml:365(primary)
msgid "cut_sub_process_get_max_threads"
msgstr ""

#: xml/cut-multi-process.xml:43(link) xml/cut-multi-process.xml:383(primary)
msgid "cut_sub_process_set_max_threads"
msgstr ""

#: xml/cut-multi-process.xml:45(link) xml/cut-multi-process.xml:403(primary)
msgid "cut_sub_process_get_exclude_files"
msgstr ""

#: xml/cut-multi-process.xml:46(link) xml/cut-multi-process.xml:420(primary)
msgid "cut_sub_process_set_exclude_files"
msgstr ""

#: xml/cut-multi-process.xml:48(link) xml/cut-multi-process.xml:439(primary)
msgid "cut_sub_process_get_exclude_directories"
msgstr ""

#: xml/cut-multi-process.xml:50(link) xml/cut-multi-process.xml:458(primary)
msgid "cut_sub_process_set_exclude_directories"
msgstr ""

#: xml/cut-multi-process.xml:53(link) xml/cut-multi-process.xml:479(primary)
msgid "cut_sub_process_get_target_test_case_names"
msgstr ""

#: xml/cut-multi-process.xml:55(link) xml/cut-multi-process.xml:496(primary)
msgid "cut_sub_process_set_target_test_case_names"
msgstr ""

#: xml/cut-multi-process.xml:58(link) xml/cut-multi-process.xml:515(primary)
msgid "cut_sub_process_get_target_test_names"
msgstr ""

#: xml/cut-multi-process.xml:60(link) xml/cut-multi-process.xml:532(primary)
msgid "cut_sub_process_set_target_test_names"
msgstr ""

#: xml/cut-multi-process.xml:63(link) xml/cut-multi-process.xml:64(link)
msgid "double"
msgstr ""

#: xml/cut-multi-process.xml:63(link) xml/cut-multi-process.xml:551(primary)
msgid "cut_sub_process_get_elapsed"
msgstr ""

#: xml/cut-multi-process.xml:64(link) xml/cut-multi-process.xml:567(primary)
msgid "cut_sub_process_get_total_elapsed"
msgstr ""

#: xml/cut-multi-process.xml:65(link) xml/cut-multi-process.xml:583(primary)
msgid "cut_sub_process_is_crashed"
msgstr ""

#: xml/cut-multi-process.xml:66(link) xml/cut-multi-process.xml:600(primary)
msgid "cut_sub_process_get_fatal_failures"
msgstr ""

#: xml/cut-multi-process.xml:67(link) xml/cut-multi-process.xml:619(primary)
msgid "cut_sub_process_set_fatal_failures"
msgstr ""

#: xml/cut-multi-process.xml:69(link) xml/cut-multi-process.xml:642(primary)
msgid "cut_take_new_sub_process_group"
msgstr ""

#: xml/cut-multi-process.xml:70(link) xml/cut-multi-process.xml:656(primary)
msgid "cut_sub_process_group_add"
msgstr ""

#: xml/cut-multi-process.xml:72(link) xml/cut-multi-process.xml:673(primary)
msgid "cut_sub_process_group_run"
msgstr ""

#: xml/cut-multi-process.xml:73(link) xml/cut-multi-process.xml:691(primary)
msgid "cut_sub_process_group_run_async"
msgstr ""

#: xml/cut-multi-process.xml:74(link) xml/cut-multi-process.xml:706(primary)
msgid "cut_sub_process_group_wait"
msgstr ""

#: xml/cut-multi-process.xml:22(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"                    <placeholder-2/>;\n"
"#define             <placeholder-3/>            (test_directory)\n"
"<placeholder-4/>         <placeholder-5/>                 (<placeholder-6/> *sub_process);\n"
"<placeholder-7/>                <placeholder-8/>           (<placeholder-9/> *sub_process);\n"
"<placeholder-10/>         <placeholder-11/>                (<placeholder-12/> *sub_process);\n"
"<placeholder-13/>         <placeholder-14/>          (<placeholder-15/> *sub_process);\n"
"<placeholder-16/>         <placeholder-17/>          (<placeholder-18/> *sub_process);\n"
"const <placeholder-19/>*         <placeholder-20/>  (<placeholder-21/> *sub_process);\n"
"<placeholder-22/>                <placeholder-23/>  (<placeholder-24/> *sub_process,\n"
"                                                         const <placeholder-25/> *test_directory);\n"
"const <placeholder-26/>*         <placeholder-27/>\n"
"                                                        (<placeholder-28/> *sub_process);\n"
"<placeholder-29/>                <placeholder-30/>\n"
"                                                        (<placeholder-31/> *sub_process,\n"
"                                                         const <placeholder-32/> *source_directory);\n"
"<placeholder-33/>         <placeholder-34/>    (<placeholder-35/> *sub_process);\n"
"<placeholder-36/>                <placeholder-37/>    (<placeholder-38/> *sub_process,\n"
"                                                         <placeholder-39/> multi_thread);\n"
"<placeholder-40/>                 <placeholder-41/>     (<placeholder-42/> *sub_process);\n"
"<placeholder-43/>                <placeholder-44/>     (<placeholder-45/> *sub_process,\n"
"                                                         <placeholder-46/> max_threads);\n"
"const <placeholder-47/>**        <placeholder-48/>   (<placeholder-49/> *sub_process);\n"
"<placeholder-50/>                <placeholder-51/>   (<placeholder-52/> *sub_process,\n"
"                                                         const <placeholder-53/> **files);\n"
"const <placeholder-54/>**        <placeholder-55/>\n"
"                                                        (<placeholder-56/> *sub_process);\n"
"<placeholder-57/>                <placeholder-58/>\n"
"                                                        (<placeholder-59/> *sub_process,\n"
"                                                         const <placeholder-60/> **directories);\n"
"const <placeholder-61/>**        <placeholder-62/>\n"
"                                                        (<placeholder-63/> *sub_process);\n"
"<placeholder-64/>                <placeholder-65/>\n"
"                                                        (<placeholder-66/> *sub_process,\n"
"                                                         const <placeholder-67/> **names);\n"
"const <placeholder-68/>**        <placeholder-69/>\n"
"                                                        (<placeholder-70/> *sub_process);\n"
"<placeholder-71/>                <placeholder-72/>\n"
"                                                        (<placeholder-73/> *sub_process,\n"
"                                                         const <placeholder-74/> **names);\n"
"<placeholder-75/>              <placeholder-76/>         (<placeholder-77/> *sub_process);\n"
"<placeholder-78/>              <placeholder-79/>   (<placeholder-80/> *sub_process);\n"
"<placeholder-81/>         <placeholder-82/>          (<placeholder-83/> *sub_process);\n"
"<placeholder-84/>         <placeholder-85/>  (<placeholder-86/> *sub_process);\n"
"<placeholder-87/>                <placeholder-88/>  (<placeholder-89/> *sub_process,\n"
"                                                         <placeholder-90/> fatal_failures);\n"
"#define             <placeholder-91/>      ()\n"
"<placeholder-92/>                <placeholder-93/>           (<placeholder-94/> *group,\n"
"                                                         <placeholder-95/> *sub_process);\n"
"<placeholder-96/>         <placeholder-97/>           (<placeholder-98/> *group);\n"
"<placeholder-99/>                <placeholder-100/>     (<placeholder-101/> *group);\n"
"<placeholder-102/>         <placeholder-103/>          (<placeholder-104/> *group);\n"
msgstr ""

#: xml/cut-multi-process.xml:88(para)
msgid ""
"If your test target supports multi-process and/or multi-thread, you need to "
"test them. You can use <link linkend=\"CutSubProcess\"><type>CutSubProcess</"
"type></link> and <link linkend=\"CutSubProcessGroup"
"\"><type>CutSubProcessGroup</type></link> to do it."
msgstr ""
"もしテスト対象のソフトウェアがマルチプロセスやマルチスレッドでの使用をサポー"
"トしているなら、それらの機能をテストする必要があります。そのようなテストため"
"に、<link linkend=\"CutSubProcess\"><type>CutSubProcess</type></link>と<link "
"linkend=\"CutSubProcessGroup\"><type>CutSubProcessGroup</type></link>を使うこ"
"とができます。"

#: xml/cut-multi-process.xml:93(para)
msgid ""
"<link linkend=\"CutSubProcess\"><type>CutSubProcess</type></link> runs your "
"test on another process and forwards results of it to a test on your main "
"process. You will get results of test on another process as results of test "
"on your main process."
msgstr ""
"<link linkend=\"CutSubProcess\"><type>CutSubProcess</type></link>はテストを別"
"のプロセスで走らせ、その結果をメインプロセスに転送します。このため、別のプロ"
"セス上でのテスト結果もメインプロセス上でのテスト結果と同じように見えます。"

#: xml/cut-multi-process.xml:99(para)
msgid ""
"<link linkend=\"CutSubProcessGroup\"><type>CutSubProcessGroup</type></link> "
"is a convenience object to run some <link linkend=\"CutSubProcess"
"\"><type>CutSubProcess</type></link>."
msgstr ""
"<link linkend=\"CutSubProcessGroup\"><type>CutSubProcessGroup</type></link>は"
"いくつかの<link linkend=\"CutSubProcess\"><type>CutSubProcess</type></link>を"
"まとめて実行するための便利オブジェクトです。"

#: xml/cut-multi-process.xml:111(programlisting)
#, no-wrap
msgid "typedef struct _CutSubProcess CutSubProcess;"
msgstr ""

#: xml/cut-multi-process.xml:112(para)
msgid ""
"An object to represent sub cutter process. It contains sub cutter process's "
"parameters and results of sub cutter process."
msgstr ""
"サブcutterプロセスを表現するオブジェクトです。サブcutterプロセスのパラメタと"
"テスト結果を持っています。"

#: xml/cut-multi-process.xml:119(programlisting)
#, no-wrap
msgid ""
"\n"
"CutSubProcess *sub_process;\n"
"\n"
"sub_process = cut_take_new_sub_process(\"test-dir\");\n"
"cut_sub_process_set_multi_thread(sub_process, TRUE);\n"
"cut_assert_true(cut_sub_process_run(sub_process));\n"
msgstr ""

#: xml/cut-multi-process.xml:128(para) xml/cut-multi-process.xml:155(para)
#: xml/cut-multi-process.xml:170(para) xml/cut-multi-process.xml:187(para)
#: xml/cut-multi-process.xml:201(para) xml/cut-multi-process.xml:219(para)
#: xml/cut-multi-process.xml:237(para) xml/cut-multi-process.xml:254(para)
#: xml/cut-multi-process.xml:270(para) xml/cut-multi-process.xml:289(para)
#: xml/cut-multi-process.xml:306(para) xml/cut-multi-process.xml:326(para)
#: xml/cut-multi-process.xml:343(para) xml/cut-multi-process.xml:361(para)
#: xml/cut-multi-process.xml:416(para) xml/cut-multi-process.xml:435(para)
#: xml/cut-multi-process.xml:454(para) xml/cut-multi-process.xml:475(para)
#: xml/cut-multi-process.xml:492(para) xml/cut-multi-process.xml:511(para)
#: xml/cut-multi-process.xml:528(para) xml/cut-multi-process.xml:547(para)
#: xml/cut-multi-process.xml:563(para) xml/cut-multi-process.xml:579(para)
#: xml/cut-multi-process.xml:596(para) xml/cut-multi-process.xml:615(para)
#: xml/cut-multi-process.xml:638(para) xml/cut-multi-process.xml:652(para)
#: xml/cut-multi-process.xml:669(para) xml/cut-multi-process.xml:687(para)
#: xml/cut-multi-process.xml:702(para) xml/cut-multi-process.xml:720(para)
#: xml/cutter.xml:311(para) xml/cutter.xml:354(para) xml/cutter.xml:369(para)
#: xml/gcut-assertions.xml:375(para) xml/gcut-assertions.xml:500(para)
#: xml/gcut-test-utils.xml:121(para) xml/gcut-test-utils.xml:198(para)
msgid "Since 1.0.4"
msgstr "1.0.4から"

#: xml/cut-multi-process.xml:132(programlisting)
#, no-wrap
msgid "typedef struct _CutSubProcessGroup CutSubProcessGroup;"
msgstr ""

#: xml/cut-multi-process.xml:133(para)
msgid "An object to run sub cutter processes. This is just for convenience."
msgstr ""
"サブcutterプロセスを実行するオブジェクトです。このオブジェクトは便利にテスト"
"を書くために導入されています。"

#: xml/cut-multi-process.xml:139(programlisting)
#, no-wrap
msgid ""
"\n"
"CutSubProcess *sub_process1, *sub_process2, *sub_process3;\n"
"CutSubProcessGroup *group;\n"
"\n"
"sub_process1 = cut_take_new_sub_process(\"test-dir1\");\n"
"sub_process2 = cut_take_new_sub_process(\"test-dir2\");\n"
"sub_process3 = cut_take_new_sub_process(\"test-dir3\");\n"
"\n"
"group = cut_take_new_sub_process_group();\n"
"cut_sub_process_group_add(group, sub_process1);\n"
"cut_sub_process_group_add(group, sub_process2);\n"
"cut_sub_process_group_add(group, sub_process3);\n"
"cut_assert_true(cut_sub_process_group_run(group));\n"
msgstr ""

#: xml/cut-multi-process.xml:158(title)
msgid "cut_take_new_sub_process()"
msgstr ""

#: xml/cut-multi-process.xml:159(programlisting)
#, no-wrap
msgid "#define             cut_take_new_sub_process(test_directory)"
msgstr ""

#: xml/cut-multi-process.xml:160(para)
msgid ""
"Creates sub cutter process that runs tests under <parameter>test_directory</"
"parameter> and returns it. A created sub process is owned by Cutter."
msgstr ""
"<parameter>test_directory</parameter>以下のテストを実行するサブcutterプロセス"
"を作り、それを返します。返されたサブcutterプロセスの所有者はCutterです。"

#: xml/cut-multi-process.xml:167(term) xml/cut-multi-process.xml:286(term)
msgid "<parameter>test_directory</parameter>&nbsp;:"
msgstr ""

#: xml/cut-multi-process.xml:168(simpara)
msgid "a directory includes sub process test."
msgstr "サブcutterプロセスのテストがあるディレクトリ。"

#: xml/cut-multi-process.xml:173(title)
msgid "cut_sub_process_run ()"
msgstr ""

#: xml/cut-multi-process.xml:174(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_run                 (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:175(para)
msgid "Runs sub cutter process."
msgstr "サブcutterプロセスを実行します。"

#: xml/cut-multi-process.xml:180(term) xml/cut-multi-process.xml:198(term)
#: xml/cut-multi-process.xml:212(term) xml/cut-multi-process.xml:230(term)
#: xml/cut-multi-process.xml:247(term) xml/cut-multi-process.xml:264(term)
#: xml/cut-multi-process.xml:283(term) xml/cut-multi-process.xml:300(term)
#: xml/cut-multi-process.xml:320(term) xml/cut-multi-process.xml:336(term)
#: xml/cut-multi-process.xml:355(term) xml/cut-multi-process.xml:372(term)
#: xml/cut-multi-process.xml:392(term) xml/cut-multi-process.xml:410(term)
#: xml/cut-multi-process.xml:428(term) xml/cut-multi-process.xml:447(term)
#: xml/cut-multi-process.xml:468(term) xml/cut-multi-process.xml:486(term)
#: xml/cut-multi-process.xml:505(term) xml/cut-multi-process.xml:522(term)
#: xml/cut-multi-process.xml:541(term) xml/cut-multi-process.xml:557(term)
#: xml/cut-multi-process.xml:573(term) xml/cut-multi-process.xml:589(term)
#: xml/cut-multi-process.xml:608(term) xml/cut-multi-process.xml:632(term)
#: xml/cut-multi-process.xml:666(term)
msgid "<parameter>sub_process</parameter>&nbsp;:"
msgstr ""

#: xml/cut-multi-process.xml:181(simpara)
#: xml/cut-multi-process.xml:199(simpara)
#: xml/cut-multi-process.xml:213(simpara)
#: xml/cut-multi-process.xml:231(simpara)
#: xml/cut-multi-process.xml:248(simpara)
#: xml/cut-multi-process.xml:265(simpara)
#: xml/cut-multi-process.xml:284(simpara)
#: xml/cut-multi-process.xml:301(simpara)
#: xml/cut-multi-process.xml:321(simpara)
#: xml/cut-multi-process.xml:337(simpara)
#: xml/cut-multi-process.xml:356(simpara)
#: xml/cut-multi-process.xml:373(simpara)
#: xml/cut-multi-process.xml:393(simpara)
#: xml/cut-multi-process.xml:411(simpara)
#: xml/cut-multi-process.xml:429(simpara)
#: xml/cut-multi-process.xml:448(simpara)
#: xml/cut-multi-process.xml:469(simpara)
#: xml/cut-multi-process.xml:487(simpara)
#: xml/cut-multi-process.xml:506(simpara)
#: xml/cut-multi-process.xml:523(simpara)
#: xml/cut-multi-process.xml:542(simpara)
#: xml/cut-multi-process.xml:558(simpara)
#: xml/cut-multi-process.xml:574(simpara)
#: xml/cut-multi-process.xml:590(simpara)
#: xml/cut-multi-process.xml:609(simpara)
#: xml/cut-multi-process.xml:633(simpara)
#: xml/cut-multi-process.xml:667(simpara)
msgid "a <link linkend=\"CutSubProcess\"><type>CutSubProcess</type></link>."
msgstr ""
"<link linkend=\"CutSubProcess\"><type>CutSubProcess</type></link>オブジェク"
"ト。"

#: xml/cut-multi-process.xml:183(simpara)
#: xml/cut-multi-process.xml:215(simpara)
#: xml/cut-multi-process.xml:233(simpara)
msgid ""
"<link linkend=\"CUT-TRUE:CAPS\"><literal>CUT_TRUE</literal></link> if "
"<parameter>sub_process</parameter> is completed successfully, <link linkend="
"\"CUT-FALSE:CAPS\"><literal>CUT_FALSE</literal></link> otherwise."
msgstr ""
"もし、<parameter>sub_process</parameter>が正常に終了した場合は<link linkend="
"\"CUT-TRUE:CAPS\"><literal>CUT_TRUE</literal></link>、そうでない場合は<link "
"linkend=\"CUT-FALSE:CAPS\"><literal>CUT_FALSE</literal></link>。"

#: xml/cut-multi-process.xml:190(title)
msgid "cut_sub_process_run_async ()"
msgstr ""

#: xml/cut-multi-process.xml:191(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_sub_process_run_async           (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:192(para)
msgid ""
"Runs sub cutter process asynchronously. The result of "
"<parameter>sub_process</parameter> can be gotten by <link linkend=\"cut-sub-"
"process-wait\"><function>cut_sub_process_wait()</function></link>."
msgstr ""
"非同期でサブcutterコマンドを実行します。<parameter>sub_process</parameter>の"
"結果は<link linkend=\"cut-sub-process-wait\"><function>cut_sub_process_wait()"
"</function></link>で取得できます。"

#: xml/cut-multi-process.xml:204(title)
msgid "cut_sub_process_wait ()"
msgstr ""

#: xml/cut-multi-process.xml:205(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_wait                (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:206(para)
msgid ""
"Waits for sub cutter process that is ran asynchronously to complete and "
"returns the result."
msgstr "非同期で実行されたサブcutterプロセスの終了を待ち、結果を返します。"

#: xml/cut-multi-process.xml:222(title)
msgid "cut_sub_process_is_success ()"
msgstr ""

#: xml/cut-multi-process.xml:223(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_is_success          (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:224(para)
msgid ""
"Returns whether <parameter>sub_process</parameter> is completed successfully "
"or not."
msgstr "<parameter>sub_process</parameter>が正常に終了したかどうかを返します。"

#: xml/cut-multi-process.xml:240(title)
msgid "cut_sub_process_is_running ()"
msgstr ""

#: xml/cut-multi-process.xml:241(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_is_running          (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:242(para)
msgid "Returns whether <parameter>sub_process</parameter> is running or not."
msgstr "<parameter>sub_process</parameter>が実行中かどうかを返します。"

#: xml/cut-multi-process.xml:250(simpara)
msgid ""
"<link linkend=\"CUT-TRUE:CAPS\"><literal>CUT_TRUE</literal></link> if "
"<parameter>sub_process</parameter> is running, <link linkend=\"CUT-FALSE:CAPS"
"\"><literal>CUT_FALSE</literal></link> otherwise."
msgstr ""
"<parameter>sub_process</parameter>が実行中の場合は<link linkend=\"CUT-TRUE:"
"CAPS\"><literal>CUT_TRUE</literal></link>、そうでない場合は<link linkend="
"\"CUT-FALSE:CAPS\"><literal>CUT_FALSE</literal></link>。"

#: xml/cut-multi-process.xml:257(title)
msgid "cut_sub_process_get_test_directory ()"
msgstr ""

#: xml/cut-multi-process.xml:258(programlisting)
#, no-wrap
msgid "const <link linkend=\"char\">char</link>*         cut_sub_process_get_test_directory  (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:259(para)
msgid "Returns a test directory that has tests to be ran."
msgstr "実行対象のテストがあるディレクトリを返します。"

#: xml/cut-multi-process.xml:267(simpara)
#: xml/cut-multi-process.xml:287(simpara)
msgid "a test directory."
msgstr "テストディレクトリ"

#: xml/cut-multi-process.xml:273(title)
msgid "cut_sub_process_set_test_directory ()"
msgstr ""

#: xml/cut-multi-process.xml:274(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_test_directory  (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         const <link linkend=\"char\">char</link> *test_directory);"
msgstr ""

#: xml/cut-multi-process.xml:276(para)
msgid ""
"Sets <parameter>test_directory</parameter> as a test directory that has "
"tests to be ran. This is same as TEST_DIRECTORY required command line "
"argument."
msgstr ""
"実行対象のテストがあるディレクトリとして<parameter>test_directory</parameter>"
"を指定します。これは必須のコマンドライン引数であるTEST_DIRECTORYと同じ意味を"
"持ちます。"

#: xml/cut-multi-process.xml:292(title)
msgid "cut_sub_process_get_source_directory ()"
msgstr ""

#: xml/cut-multi-process.xml:293(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link>*         cut_sub_process_get_source_directory\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:295(para)
msgid "Returns a source directory that has source files."
msgstr "ソースファイルがあるディレクトリを返します。"

#: xml/cut-multi-process.xml:303(simpara)
#: xml/cut-multi-process.xml:324(simpara)
msgid "a source directory."
msgstr "ソースディレクトリ。"

#: xml/cut-multi-process.xml:309(title)
msgid "cut_sub_process_set_source_directory ()"
msgstr ""

#: xml/cut-multi-process.xml:310(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_source_directory\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         const <link linkend=\"char\">char</link> *source_directory);"
msgstr ""

#: xml/cut-multi-process.xml:313(para)
msgid ""
"Sets <parameter>source_directory</parameter> as a source directory that has "
"source files. This is same as --source-directory command line option."
msgstr ""
"ソースファイルがあるディレクトリとして<parameter>source_directory</parameter>"
"を指定します。これは--source-directoryコマンドラインオプションと同じ意味を持"
"ちます。"

#: xml/cut-multi-process.xml:323(term)
msgid "<parameter>source_directory</parameter>&nbsp;:"
msgstr ""

#: xml/cut-multi-process.xml:329(title)
msgid "cut_sub_process_get_multi_thread ()"
msgstr ""

#: xml/cut-multi-process.xml:330(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_get_multi_thread    (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:331(para)
msgid ""
"Returns whether <parameter>sub_process</parameter> is ran in multi-thread "
"mode."
msgstr ""
"<parameter>sub_process</parameter>をマルチスレッドモードで実行するかどうかを"
"返します。"

#: xml/cut-multi-process.xml:339(simpara)
msgid ""
"<link linkend=\"CUT-TRUE:CAPS\"><literal>CUT_TRUE</literal></link> if "
"<parameter>sub_process</parameter> is ran in multi-thread mode, <link "
"linkend=\"CUT-FALSE:CAPS\"><literal>CUT_FALSE</literal></link> otherwise."
msgstr ""
"<parameter>sub_process</parameter>がマルチスレッドモードで実行されるなら"
"<link linkend=\"CUT-TRUE:CAPS\"><literal>CUT_TRUE</literal></link>、そうでな"
"ければ<link linkend=\"CUT-FALSE:CAPS\"><literal>CUT_FALSE</literal></link>。"

#: xml/cut-multi-process.xml:346(title)
msgid "cut_sub_process_set_multi_thread ()"
msgstr ""

#: xml/cut-multi-process.xml:347(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_multi_thread    (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         <link linkend=\"cut-boolean\">cut_boolean</link> multi_thread);"
msgstr ""

#: xml/cut-multi-process.xml:349(para)
msgid ""
"Sets whether <parameter>sub_process</parameter> is ran in multi-thread mode "
"or not. This is same as --multi-thread command line option."
msgstr ""
"<parameter>sub_process</parameter>がマルチスレッドモードで実行されるかどうか"
"を指定します。これは--multi-threadコマンドラインオプションと同じ意味を持ちま"
"す。"

#: xml/cut-multi-process.xml:358(term)
msgid "<parameter>multi_thread</parameter>&nbsp;:"
msgstr ""

#: xml/cut-multi-process.xml:359(simpara)
msgid ""
"<link linkend=\"CUT-TRUE:CAPS\"><literal>CUT_TRUE</literal></link> to be ran "
"in multi-thread mode."
msgstr ""
"マルチスレッドモードで実行するなら<link linkend=\"CUT-TRUE:CAPS"
"\"><literal>CUT_TRUE</literal></link>。"

#: xml/cut-multi-process.xml:364(title)
msgid "cut_sub_process_get_max_threads ()"
msgstr ""

#: xml/cut-multi-process.xml:365(programlisting)
#, no-wrap
msgid "<link linkend=\"int\">int</link>                 cut_sub_process_get_max_threads     (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:366(para)
msgid ""
"Returns how many threads are used concurrently at a maximum in "
"<parameter>sub_process</parameter>."
msgstr ""
"<parameter>sub_process</parameter>中で同時に動く最大スレッド数を返します。"

#: xml/cut-multi-process.xml:375(simpara)
msgid ""
"max number of threads used concurrently at a maximum in "
"<parameter>sub_process</parameter>."
msgstr "<parameter>sub_process</parameter>中で同時に動く最大スレッド数。"

#: xml/cut-multi-process.xml:382(title)
msgid "cut_sub_process_set_max_threads ()"
msgstr ""

#: xml/cut-multi-process.xml:383(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_max_threads     (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         <link linkend=\"int\">int</link> max_threads);"
msgstr ""

#: xml/cut-multi-process.xml:385(para)
msgid ""
"Sets how many threads are used concurrently at a maximum in "
"<parameter>sub_process</parameter>. -1 means no limit. This is same as --max-"
"threads command line option."
msgstr ""
"<parameter>sub_process</parameter>中で同時に動く最大スレッド数を設定します。-"
"1は制限がないことを意味します。これは--max-threadsコマンドラインオプションと"
"同じ意味を持ちます。"

#: xml/cut-multi-process.xml:395(term) xml/cut-run-context.xml:315(term)
msgid "<parameter>max_threads</parameter>&nbsp;:"
msgstr ""

#: xml/cut-multi-process.xml:396(simpara)
msgid "max number of threads used concurrently at a maximum."
msgstr "同時に動く最大スレッド数。"

#: xml/cut-multi-process.xml:402(title)
msgid "cut_sub_process_get_exclude_files ()"
msgstr ""

#: xml/cut-multi-process.xml:403(programlisting)
#, no-wrap
msgid "const <link linkend=\"char\">char</link>**        cut_sub_process_get_exclude_files   (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:404(para)
msgid "Returns file names that are excluded from target test files."
msgstr "テスト対象ファイルから除外されるファイル名を返します。"

#: xml/cut-multi-process.xml:413(simpara)
#: xml/cut-multi-process.xml:432(simpara)
msgid "file names that are excluded from target test files."
msgstr "テスト対象ファイルから除外されるファイル名。"

#: xml/cut-multi-process.xml:419(title)
msgid "cut_sub_process_set_exclude_files ()"
msgstr ""

#: xml/cut-multi-process.xml:420(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_exclude_files   (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         const <link linkend=\"char\">char</link> **files);"
msgstr ""

#: xml/cut-multi-process.xml:422(para)
msgid ""
"Sets file names that are excluded from target test files. This is same as --"
"exclude-file command line option."
msgstr ""
"テスト対象から除外されるファイル名を指定します。これは--exclude-fileコマンド"
"ラインオプションと同じ意味を持ちます。"

#: xml/cut-multi-process.xml:431(term)
msgid "<parameter>files</parameter>&nbsp;:"
msgstr ""

#: xml/cut-multi-process.xml:438(title)
msgid "cut_sub_process_get_exclude_directories ()"
msgstr ""

#: xml/cut-multi-process.xml:439(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link>**        cut_sub_process_get_exclude_directories\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:441(para)
msgid "Returns directory names that are excluded from target test directories."
msgstr "テスト対象ディレクトリから除外されるディレクトリ名を返します。"

#: xml/cut-multi-process.xml:450(simpara)
#: xml/cut-multi-process.xml:472(simpara)
msgid "directory names that are excluded from target test directories."
msgstr "テスト対象ディレクトリから除外されるディレクトリ名。"

#: xml/cut-multi-process.xml:457(title)
msgid "cut_sub_process_set_exclude_directories ()"
msgstr ""

#: xml/cut-multi-process.xml:458(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_exclude_directories\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         const <link linkend=\"char\">char</link> **directories);"
msgstr ""

#: xml/cut-multi-process.xml:461(para)
msgid ""
"Sets directory names that are excluded from target test directories. This is "
"same as --exclude-directory command line option."
msgstr ""
"テスト対象ディレクトリから除外されるディレクトリ名を指定します。これは--"
"exclude-directoryコマンドラインオプションと同じ意味を持ちます。"

#: xml/cut-multi-process.xml:471(term)
msgid "<parameter>directories</parameter>&nbsp;:"
msgstr ""

#: xml/cut-multi-process.xml:478(title)
msgid "cut_sub_process_get_target_test_case_names ()"
msgstr ""

#: xml/cut-multi-process.xml:479(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link>**        cut_sub_process_get_target_test_case_names\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:481(para)
msgid "Returns test case names that are ran."
msgstr "実行されるテストケース名を返します。"

#: xml/cut-multi-process.xml:489(simpara)
#: xml/cut-multi-process.xml:509(simpara)
msgid "test case names that are ran."
msgstr "実行されるテストケース名。"

#: xml/cut-multi-process.xml:495(title)
msgid "cut_sub_process_set_target_test_case_names ()"
msgstr ""

#: xml/cut-multi-process.xml:496(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_target_test_case_names\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         const <link linkend=\"char\">char</link> **names);"
msgstr ""

#: xml/cut-multi-process.xml:499(para)
msgid ""
"Sets test case names that are ran. This is same as --test-case command line "
"option."
msgstr ""
"実行されるテストケース名を指定します。これは--test-caseコマンドラインオプショ"
"ンと同じ意味を持ちます。"

#: xml/cut-multi-process.xml:508(term) xml/cut-multi-process.xml:544(term)
#: xml/cut-run-context.xml:408(term) xml/cut-run-context.xml:440(term)
msgid "<parameter>names</parameter>&nbsp;:"
msgstr ""

#: xml/cut-multi-process.xml:514(title)
msgid "cut_sub_process_get_target_test_names ()"
msgstr ""

#: xml/cut-multi-process.xml:515(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"char\">char</link>**        cut_sub_process_get_target_test_names\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:517(para)
msgid "Returns test names that are ran."
msgstr "実行されるテスト名を返します。"

#: xml/cut-multi-process.xml:525(simpara)
#: xml/cut-multi-process.xml:545(simpara)
msgid "test names that are ran."
msgstr "実行されるテスト名。"

#: xml/cut-multi-process.xml:531(title)
msgid "cut_sub_process_set_target_test_names ()"
msgstr ""

#: xml/cut-multi-process.xml:532(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_target_test_names\n"
"                                                        (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         const <link linkend=\"char\">char</link> **names);"
msgstr ""

#: xml/cut-multi-process.xml:535(para)
msgid ""
"Sets test names that are ran. This is same as --test command line option."
msgstr ""
"実行されるテスト名を指定します。これは--testコマンドラインオプションと同じ意"
"味を持ちます。"

#: xml/cut-multi-process.xml:550(title)
msgid "cut_sub_process_get_elapsed ()"
msgstr ""

#: xml/cut-multi-process.xml:551(programlisting)
#, no-wrap
msgid "<link linkend=\"double\">double</link>              cut_sub_process_get_elapsed         (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:552(para)
msgid "Gets the time while <parameter>sub_process</parameter> was running."
msgstr "<parameter>sub_process</parameter>を実行していた間の時間を取得します。"

#: xml/cut-multi-process.xml:560(simpara)
msgid "the time while <parameter>sub_process</parameter> was running."
msgstr "<parameter>sub_process</parameter>を実行していた間の時間。"

#: xml/cut-multi-process.xml:566(title)
msgid "cut_sub_process_get_total_elapsed ()"
msgstr ""

#: xml/cut-multi-process.xml:567(programlisting)
#, no-wrap
msgid "<link linkend=\"double\">double</link>              cut_sub_process_get_total_elapsed   (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:568(para)
msgid "Gets the sum of times that are used by each test."
msgstr "各テストで使われた時間の合計を返します。"

#: xml/cut-multi-process.xml:576(simpara)
msgid "the sum of times that are used by each test."
msgstr "各テストで使われた時間の合計。"

#: xml/cut-multi-process.xml:582(title)
msgid "cut_sub_process_is_crashed ()"
msgstr ""

#: xml/cut-multi-process.xml:583(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_is_crashed          (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:584(para)
msgid "Returns whether <parameter>sub_process</parameter> was crashed or not."
msgstr "<parameter>sub_process</parameter>が異常終了したかどうかを返します。"

#: xml/cut-multi-process.xml:592(simpara)
msgid ""
"<link linkend=\"CUT-TRUE:CAPS\"><literal>CUT_TRUE</literal></link> if "
"<parameter>sub_process</parameter> was crashed, <link linkend=\"CUT-FALSE:"
"CAPS\"><literal>CUT_FALSE</literal></link> otherwise."
msgstr ""
"<parameter>sub_process</parameter>が異常終了したときは<link linkend=\"CUT-"
"TRUE:CAPS\"><literal>CUT_TRUE</literal></link>、そうでない場合は<link "
"linkend=\"CUT-FALSE:CAPS\"><literal>CUT_FALSE</literal></link>。"

#: xml/cut-multi-process.xml:599(title)
msgid "cut_sub_process_get_fatal_failures ()"
msgstr ""

#: xml/cut-multi-process.xml:600(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_get_fatal_failures  (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:601(para)
msgid ""
"Returns whether <parameter>sub_process</parameter> is ran in fatal-failures "
"mode. See <link linkend=\"cut-sub-process-set-fatal-failures"
"\"><function>cut_sub_process_set_fatal_failures()</function></link> more "
"details of fatal-failures mode."
msgstr ""
"<parameter>sub_process</parameter>が「失敗は致命的」モードで動くかどうかを返"
"します。「失敗は致命的」モードの詳細は<link linkend=\"cut-sub-process-set-"
"fatal-failures\"><function>cut_sub_process_set_fatal_failures()</function></"
"link>を見てください。"

#: xml/cut-multi-process.xml:611(simpara)
msgid ""
"<link linkend=\"CUT-TRUE:CAPS\"><literal>CUT_TRUE</literal></link> if "
"<parameter>sub_process</parameter> is ran in fatal-failures mode, <link "
"linkend=\"CUT-FALSE:CAPS\"><literal>CUT_FALSE</literal></link> otherwise."
msgstr ""
"<parameter>sub_process</parameter>が「失敗は致命的」モードで実行されるなら"
"<link linkend=\"CUT-TRUE:CAPS\"><literal>CUT_TRUE</literal></link>、そうでな"
"ければ<link linkend=\"CUT-FALSE:CAPS\"><literal>CUT_FALSE</literal></link>。"

#: xml/cut-multi-process.xml:618(title)
msgid "cut_sub_process_set_fatal_failures ()"
msgstr ""

#: xml/cut-multi-process.xml:619(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_set_fatal_failures  (<link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process,\n"
"                                                         <link linkend=\"cut-boolean\">cut_boolean</link> fatal_failures);"
msgstr ""

#: xml/cut-multi-process.xml:621(para)
msgid ""
"Sets whether <parameter>sub_process</parameter> is ran in fatal-failures "
"mode or not. In this mode, all failures are treated as fatal problems. It "
"means that test is aborted on failure. On some environments, breakpoint is "
"set."
msgstr ""
"<parameter>sub_process</parameter>が「失敗は致命的」モードで実行されるかどう"
"かを設定します。このモードではすべての失敗は致命的な問題として扱われます。つ"
"まり、失敗時にテストが異常終了します。いくつかの環境ではブレークポイントが設"
"定されます。"

#: xml/cut-multi-process.xml:627(para)
msgid "This is same as --fatal-failures command line option."
msgstr "--fatal-failuresコマンドラインオプションと同じ意味を持ちます。"

#: xml/cut-multi-process.xml:635(term) xml/cut-run-context.xml:1030(term)
msgid "<parameter>fatal_failures</parameter>&nbsp;:"
msgstr ""

#: xml/cut-multi-process.xml:636(simpara)
msgid ""
"<link linkend=\"CUT-TRUE:CAPS\"><literal>CUT_TRUE</literal></link> to be ran "
"in fatal-failures mode."
msgstr ""
"「失敗は致命的」モードで実行するなら<link linkend=\"CUT-TRUE:CAPS"
"\"><literal>CUT_TRUE</literal></link>。"

#: xml/cut-multi-process.xml:641(title)
msgid "cut_take_new_sub_process_group()"
msgstr ""

#: xml/cut-multi-process.xml:642(programlisting)
#, no-wrap
msgid "#define             cut_take_new_sub_process_group()"
msgstr ""

#: xml/cut-multi-process.xml:643(para)
msgid ""
"Creates a group of sub cutter process. A created group is owned by Cutter."
msgstr ""
"サブc<uterプロセスのグループを作ります。作られたグループの所有者はCutterで"
"す。"

#: xml/cut-multi-process.xml:649(simpara)
#: xml/cut-multi-process.xml:664(simpara)
#: xml/cut-multi-process.xml:681(simpara)
#: xml/cut-multi-process.xml:700(simpara)
#: xml/cut-multi-process.xml:714(simpara)
msgid ""
"a <link linkend=\"CutSubProcessGroup\"><type>CutSubProcessGroup</type></"
"link>."
msgstr ""
"<link linkend=\"CutSubProcessGroup\"><type>CutSubProcessGroup</type></link>オ"
"ブジェクト。"

#: xml/cut-multi-process.xml:655(title)
msgid "cut_sub_process_group_add ()"
msgstr ""

#: xml/cut-multi-process.xml:656(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_sub_process_group_add           (<link linkend=\"CutSubProcessGroup\">CutSubProcessGroup</link> *group,\n"
"                                                         <link linkend=\"CutSubProcess\">CutSubProcess</link> *sub_process);"
msgstr ""

#: xml/cut-multi-process.xml:658(para)
msgid ""
"Adds <parameter>sub_process</parameter> to <parameter>group</parameter>."
msgstr ""
"<parameter>sub_process</parameter>を<parameter>group</parameter>に追加しま"
"す。"

#: xml/cut-multi-process.xml:663(term) xml/cut-multi-process.xml:680(term)
#: xml/cut-multi-process.xml:699(term) xml/cut-multi-process.xml:713(term)
msgid "<parameter>group</parameter>&nbsp;:"
msgstr ""

#: xml/cut-multi-process.xml:672(title)
msgid "cut_sub_process_group_run ()"
msgstr ""

#: xml/cut-multi-process.xml:673(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_group_run           (<link linkend=\"CutSubProcessGroup\">CutSubProcessGroup</link> *group);"
msgstr ""

#: xml/cut-multi-process.xml:674(para)
msgid ""
"Runs all sub cutter processes of <parameter>group</parameter> and returns "
"the result of them."
msgstr ""
"<parameter>group</parameter>内のすべてのサブcutterプロセスを実行し、その結果"
"を返します。"

#: xml/cut-multi-process.xml:683(simpara)
#: xml/cut-multi-process.xml:716(simpara)
msgid ""
"<link linkend=\"CUT-TRUE:CAPS\"><literal>CUT_TRUE</literal></link> if all "
"sub cutter processes of <parameter>group</parameter> are completed "
"successfully, <link linkend=\"CUT-FALSE:CAPS\"><literal>CUT_FALSE</literal></"
"link> otherwise."
msgstr ""
"<parameter>group</parameter>内のすべてのサブcutterプロセスが正常終了したら"
"<link linkend=\"CUT-TRUE:CAPS\"><literal>CUT_TRUE</literal></link>、そうでな"
"い場合は<link linkend=\"CUT-FALSE:CAPS\"><literal>CUT_FALSE</literal></"
"link>。"

#: xml/cut-multi-process.xml:690(title)
msgid "cut_sub_process_group_run_async ()"
msgstr ""

#: xml/cut-multi-process.xml:691(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_sub_process_group_run_async     (<link linkend=\"CutSubProcessGroup\">CutSubProcessGroup</link> *group);"
msgstr ""

#: xml/cut-multi-process.xml:692(para)
msgid ""
"Runs all sub cutter processes of <parameter>group</parameter> "
"asynchronously. The result of them can be gotten by <link linkend=\"cut-sub-"
"process-group-wait\"><function>cut_sub_process_group_wait()</function></"
"link>."
msgstr ""
"<parameter>group</parameter>内のすべてのサブcutterプロセスを非同期で実行しま"
"す。実行結果は<link linkend=\"cut-sub-process-group-wait"
"\"><function>cut_sub_process_group_wait()</function></link>で取得できます。"

#: xml/cut-multi-process.xml:705(title)
msgid "cut_sub_process_group_wait ()"
msgstr ""

#: xml/cut-multi-process.xml:706(programlisting)
#, no-wrap
msgid "<link linkend=\"cut-boolean\">cut_boolean</link>         cut_sub_process_group_wait          (<link linkend=\"CutSubProcessGroup\">CutSubProcessGroup</link> *group);"
msgstr ""

#: xml/cut-multi-process.xml:707(para)
msgid ""
"Waits for all sub cutter processes of <parameter>group</parameter> that are "
"ran asynchronously to complete and returns the result."
msgstr ""
"<parameter>group</parameter>内の非同期で実行されたすべてのサブcutterプロセス"
"の終了を待ち、終了結果を返します。"

#: xml/cut-pipeline.xml:7(refentrytitle) xml/cut-pipeline.xml:13(refname)
#: xml/cut-pipeline.xml:23(link) xml/cut-pipeline.xml:56(title)
#: xml/cut-pipeline.xml:57(primary)
msgid "CutPipeline"
msgstr ""

#: xml/cut-pipeline.xml:22(link) xml/cut-pipeline.xml:49(title)
#: xml/cut-pipeline.xml:50(primary)
msgid "CUT_PIPELINE_ERROR"
msgstr ""

#: xml/cut-pipeline.xml:24(link) xml/cut-pipeline.xml:66(primary)
msgid "CutPipelineError"
msgstr ""

#: xml/cut-pipeline.xml:25(link) xml/cut-pipeline.xml:80(primary)
msgid "cut_pipeline_error_quark"
msgstr ""

#: xml/cut-pipeline.xml:26(link) xml/cut-pipeline.xml:91(primary)
msgid "cut_pipeline_new"
msgstr ""

#: xml/cut-pipeline.xml:27(link) xml/cut-pipeline.xml:102(primary)
msgid "cut_pipeline_new_from_run_context"
msgstr ""

#: xml/cut-pipeline.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
"                    <placeholder-2/>;\n"
"enum                <placeholder-3/>;\n"
"<placeholder-4/>              <placeholder-5/>            (void);\n"
"<placeholder-6/>*      <placeholder-7/>                    (void);\n"
"<placeholder-8/>*      <placeholder-9/>   (<placeholder-10/> *run_context);\n"
msgstr ""

#: xml/cut-pipeline.xml:50(programlisting)
#, no-wrap
msgid "#define CUT_PIPELINE_ERROR           (cut_pipeline_error_quark())\n"
msgstr ""

#: xml/cut-pipeline.xml:57(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutStreamReader object;\n"
"} CutPipeline;\n"
msgstr ""

#: xml/cut-pipeline.xml:65(title)
msgid "enum CutPipelineError"
msgstr ""

#: xml/cut-pipeline.xml:66(programlisting)
#, no-wrap
msgid ""
"typedef enum\n"
"{\n"
"    CUT_PIPELINE_ERROR_PIPE,\n"
"    CUT_PIPELINE_ERROR_COMMAND_LINE,\n"
"    CUT_PIPELINE_ERROR_SPAWN,\n"
"    CUT_PIPELINE_ERROR_CHILD_PID,\n"
"    CUT_PIPELINE_ERROR_IO_ERROR\n"
"} CutPipelineError;\n"
msgstr ""

#: xml/cut-pipeline.xml:79(title)
msgid "cut_pipeline_error_quark ()"
msgstr ""

#: xml/cut-pipeline.xml:80(programlisting)
#, no-wrap
msgid "<link linkend=\"GQuark\">GQuark</link>              cut_pipeline_error_quark            (void);"
msgstr ""

#: xml/cut-pipeline.xml:90(title)
msgid "cut_pipeline_new ()"
msgstr ""

#: xml/cut-pipeline.xml:91(programlisting)
#, no-wrap
msgid "<link linkend=\"CutRunContext\">CutRunContext</link>*      cut_pipeline_new                    (void);"
msgstr ""

#: xml/cut-pipeline.xml:101(title)
msgid "cut_pipeline_new_from_run_context ()"
msgstr ""

#: xml/cut-pipeline.xml:102(programlisting)
#, no-wrap
msgid "<link linkend=\"CutRunContext\">CutRunContext</link>*      cut_pipeline_new_from_run_context   (<link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-process.xml:7(refentrytitle) xml/cut-process.xml:13(refname)
#: xml/cut-process.xml:22(link) xml/cut-process.xml:23(link)
#: xml/cut-process.xml:24(link) xml/cut-process.xml:25(link)
#: xml/cut-process.xml:27(link) xml/cut-process.xml:28(link)
#: xml/cut-process.xml:29(link) xml/cut-process.xml:31(link)
#: xml/cut-process.xml:33(link) xml/cut-process.xml:34(link)
#: xml/cut-process.xml:56(title) xml/cut-process.xml:57(primary)
msgid "CutProcess"
msgstr ""

#: xml/cut-process.xml:23(link) xml/cut-process.xml:66(primary)
msgid "cut_process_new"
msgstr ""

#: xml/cut-process.xml:24(link) xml/cut-process.xml:77(primary)
msgid "cut_process_fork"
msgstr ""

#: xml/cut-process.xml:25(link) xml/cut-process.xml:91(primary)
msgid "cut_process_wait"
msgstr ""

#: xml/cut-process.xml:27(link) xml/cut-process.xml:109(primary)
msgid "cut_process_get_pid"
msgstr ""

#: xml/cut-process.xml:28(link) xml/cut-process.xml:123(primary)
msgid "cut_process_get_stdout_message"
msgstr ""

#: xml/cut-process.xml:29(link) xml/cut-process.xml:137(primary)
msgid "cut_process_get_stderr_message"
msgstr ""

#: xml/cut-process.xml:30(link) xml/cut-process.xml:151(primary)
msgid "cut_process_send_test_result_to_parent"
msgstr ""

#: xml/cut-process.xml:32(link)
msgid "CutTestResult"
msgstr ""

#: xml/cut-process.xml:33(link) xml/cut-process.xml:170(primary)
msgid "cut_process_get_result_from_child"
msgstr ""

#: xml/cut-process.xml:34(link) xml/cut-process.xml:184(primary)
msgid "cut_process_exit"
msgstr ""

#: xml/cut-process.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*         <placeholder-3/>                     (void);\n"
"<placeholder-4/>                 <placeholder-5/>                    (<placeholder-6/> *process);\n"
"<placeholder-7/>                 <placeholder-8/>                    (<placeholder-9/> *process,\n"
"                                                         unsigned <placeholder-10/> usec_timeout);\n"
"<placeholder-11/>                 <placeholder-12/>                 (<placeholder-13/> *process);\n"
"const <placeholder-14/>*        <placeholder-15/>      (<placeholder-16/> *process);\n"
"const <placeholder-17/>*        <placeholder-18/>      (<placeholder-19/> *process);\n"
"<placeholder-20/>            <placeholder-21/>\n"
"                                                        (<placeholder-22/> *process,\n"
"                                                         <placeholder-23/> *result);\n"
"const <placeholder-24/>*        <placeholder-25/>   (<placeholder-26/> *process);\n"
"<placeholder-27/>                <placeholder-28/>                    (<placeholder-29/> *process);\n"
msgstr ""

#: xml/cut-process.xml:57(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutProcess;\n"
msgstr ""

#: xml/cut-process.xml:65(title)
msgid "cut_process_new ()"
msgstr ""

#: xml/cut-process.xml:66(programlisting)
#, no-wrap
msgid "<link linkend=\"CutProcess\">CutProcess</link>*         cut_process_new                     (void);"
msgstr ""

#: xml/cut-process.xml:76(title)
msgid "cut_process_fork ()"
msgstr ""

#: xml/cut-process.xml:77(programlisting)
#, no-wrap
msgid "<link linkend=\"int\">int</link>                 cut_process_fork                    (<link linkend=\"CutProcess\">CutProcess</link> *process);"
msgstr ""

#: xml/cut-process.xml:81(term) xml/cut-process.xml:96(term)
#: xml/cut-process.xml:113(term) xml/cut-process.xml:127(term)
#: xml/cut-process.xml:141(term) xml/cut-process.xml:157(term)
#: xml/cut-process.xml:174(term) xml/cut-process.xml:188(term)
msgid "<parameter>process</parameter>&nbsp;:"
msgstr ""

#: xml/cut-process.xml:90(title)
msgid "cut_process_wait ()"
msgstr ""

#: xml/cut-process.xml:91(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"int\">int</link>                 cut_process_wait                    (<link linkend=\"CutProcess\">CutProcess</link> *process,\n"
"                                                         unsigned <link linkend=\"int\">int</link> usec_timeout);"
msgstr ""

#: xml/cut-process.xml:108(title)
msgid "cut_process_get_pid ()"
msgstr ""

#: xml/cut-process.xml:109(programlisting)
#, no-wrap
msgid "<link linkend=\"int\">int</link>                 cut_process_get_pid                 (<link linkend=\"CutProcess\">CutProcess</link> *process);"
msgstr ""

#: xml/cut-process.xml:122(title)
msgid "cut_process_get_stdout_message ()"
msgstr ""

#: xml/cut-process.xml:123(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_process_get_stdout_message      (<link linkend=\"CutProcess\">CutProcess</link> *process);"
msgstr ""

#: xml/cut-process.xml:136(title)
msgid "cut_process_get_stderr_message ()"
msgstr ""

#: xml/cut-process.xml:137(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_process_get_stderr_message      (<link linkend=\"CutProcess\">CutProcess</link> *process);"
msgstr ""

#: xml/cut-process.xml:150(title)
msgid "cut_process_send_test_result_to_parent ()"
msgstr ""

#: xml/cut-process.xml:151(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_process_send_test_result_to_parent\n"
"                                                        (<link linkend=\"CutProcess\">CutProcess</link> *process,\n"
"                                                         <link linkend=\"CutTestResult\">CutTestResult</link> *result);"
msgstr ""

#: xml/cut-process.xml:160(term)
msgid "<parameter>result</parameter>&nbsp;:"
msgstr ""

#: xml/cut-process.xml:169(title)
msgid "cut_process_get_result_from_child ()"
msgstr ""

#: xml/cut-process.xml:170(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_process_get_result_from_child   (<link linkend=\"CutProcess\">CutProcess</link> *process);"
msgstr ""

#: xml/cut-process.xml:183(title)
msgid "cut_process_exit ()"
msgstr ""

#: xml/cut-process.xml:184(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_process_exit                    (<link linkend=\"CutProcess\">CutProcess</link> *process);"
msgstr ""

#: xml/cut-report-factory-builder.xml:7(refentrytitle)
#: xml/cut-report-factory-builder.xml:13(refname)
#: xml/cut-report-factory-builder.xml:22(link)
#: xml/cut-report-factory-builder.xml:44(title)
#: xml/cut-report-factory-builder.xml:45(primary)
msgid "CutReportFactoryBuilder"
msgstr ""

#: xml/cut-report-factory-builder.xml:21(synopsis)
#: xml/cut-stream-factory-builder.xml:21(synopsis)
#: xml/cut-ui-factory-builder.xml:21(synopsis)
#: xml/gst-cutter-console-output.xml:21(synopsis)
#: xml/gst-cutter-server.xml:21(synopsis)
#: xml/gst-cutter-test-runner.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
msgstr ""

#: xml/cut-report-factory-builder.xml:45(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutFactoryBuilder object;\n"
"} CutReportFactoryBuilder;\n"
msgstr ""

#: xml/cut-report.xml:7(refentrytitle) xml/cut-report.xml:13(refname)
#: xml/cut-report.xml:22(link) xml/cut-report.xml:23(link)
#: xml/cut-report.xml:26(link) xml/cut-report.xml:27(link)
#: xml/cut-report.xml:28(link) xml/cut-report.xml:30(link)
#: xml/cut-report.xml:31(link) xml/cut-report.xml:32(link)
#: xml/cut-report.xml:33(link) xml/cut-report.xml:34(link)
#: xml/cut-report.xml:56(title) xml/cut-report.xml:57(primary)
msgid "CutReport"
msgstr ""

#: xml/cut-report.xml:23(link) xml/cut-report.xml:66(primary)
msgid "cut_report_new"
msgstr ""

#: xml/cut-report.xml:26(link) xml/cut-report.xml:88(primary)
msgid "cut_report_get_filename"
msgstr ""

#: xml/cut-report.xml:27(link) xml/cut-report.xml:102(primary)
msgid "cut_report_get_all_results"
msgstr ""

#: xml/cut-report.xml:28(link) xml/cut-report.xml:116(primary)
msgid "cut_report_get_test_result"
msgstr ""

#: xml/cut-report.xml:30(link) xml/cut-report.xml:134(primary)
msgid "cut_report_get_success_results"
msgstr ""

#: xml/cut-report.xml:31(link) xml/cut-report.xml:148(primary)
msgid "cut_report_get_error_results"
msgstr ""

#: xml/cut-report.xml:32(link) xml/cut-report.xml:162(primary)
msgid "cut_report_get_failure_results"
msgstr ""

#: xml/cut-report.xml:33(link) xml/cut-report.xml:176(primary)
msgid "cut_report_get_pending_results"
msgstr ""

#: xml/cut-report.xml:34(link) xml/cut-report.xml:190(primary)
msgid "cut_report_get_notification_results"
msgstr ""

#: xml/cut-report.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*          <placeholder-3/>                      (const <placeholder-4/> *name,\n"
"                                                         const <placeholder-5/> *first_property,\n"
"                                                         ...);\n"
"const <placeholder-6/>*        <placeholder-7/>             (<placeholder-8/> *report);\n"
"<placeholder-9/>*              <placeholder-10/>          (<placeholder-11/> *report);\n"
"<placeholder-12/>*              <placeholder-13/>          (<placeholder-14/> *report,\n"
"                                                         const <placeholder-15/> *test_name);\n"
"<placeholder-16/>*              <placeholder-17/>      (<placeholder-18/> *report);\n"
"<placeholder-19/>*              <placeholder-20/>        (<placeholder-21/> *report);\n"
"<placeholder-22/>*              <placeholder-23/>      (<placeholder-24/> *report);\n"
"<placeholder-25/>*              <placeholder-26/>      (<placeholder-27/> *report);\n"
"<placeholder-28/>*              <placeholder-29/> (<placeholder-30/> *report);\n"
msgstr ""

#: xml/cut-report.xml:57(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutReport;\n"
msgstr ""

#: xml/cut-report.xml:65(title)
msgid "cut_report_new ()"
msgstr ""

#: xml/cut-report.xml:66(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutReport\">CutReport</link>*          cut_report_new                      (const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-report.xml:87(title)
msgid "cut_report_get_filename ()"
msgstr ""

#: xml/cut-report.xml:88(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_report_get_filename             (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:92(term) xml/cut-report.xml:106(term)
#: xml/cut-report.xml:121(term) xml/cut-report.xml:138(term)
#: xml/cut-report.xml:152(term) xml/cut-report.xml:166(term)
#: xml/cut-report.xml:180(term) xml/cut-report.xml:194(term)
msgid "<parameter>report</parameter>&nbsp;:"
msgstr ""

#: xml/cut-report.xml:101(title)
msgid "cut_report_get_all_results ()"
msgstr ""

#: xml/cut-report.xml:102(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_all_results          (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:115(title)
msgid "cut_report_get_test_result ()"
msgstr ""

#: xml/cut-report.xml:116(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              cut_report_get_test_result          (<link linkend=\"CutReport\">CutReport</link> *report,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *test_name);"
msgstr ""

#: xml/cut-report.xml:124(term) xml/cuttest-assertions.xml:157(term)
#: xml/cuttest-assertions.xml:195(term) xml/cuttest-assertions.xml:281(term)
#: xml/cuttest-utils.xml:91(term)
msgid "<parameter>test_name</parameter>&nbsp;:"
msgstr ""

#: xml/cut-report.xml:133(title)
msgid "cut_report_get_success_results ()"
msgstr ""

#: xml/cut-report.xml:134(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_success_results      (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:147(title)
msgid "cut_report_get_error_results ()"
msgstr ""

#: xml/cut-report.xml:148(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_error_results        (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:161(title)
msgid "cut_report_get_failure_results ()"
msgstr ""

#: xml/cut-report.xml:162(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_failure_results      (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:175(title)
msgid "cut_report_get_pending_results ()"
msgstr ""

#: xml/cut-report.xml:176(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_pending_results      (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:189(title)
msgid "cut_report_get_notification_results ()"
msgstr ""

#: xml/cut-report.xml:190(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_notification_results (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-run-context.xml:22(link) xml/cut-run-context.xml:85(link)
#: xml/cut-run-context.xml:86(link) xml/cut-run-context.xml:151(primary)
msgid "CutOrder"
msgstr ""

#: xml/cut-run-context.xml:24(link) xml/cut-run-context.xml:171(primary)
msgid "cut_run_context_set_test_directory"
msgstr ""

#: xml/cut-run-context.xml:26(link) xml/cut-run-context.xml:187(primary)
msgid "cut_run_context_get_test_directory"
msgstr ""

#: xml/cut-run-context.xml:27(link) xml/cut-run-context.xml:201(primary)
msgid "cut_run_context_set_source_directory"
msgstr ""

#: xml/cut-run-context.xml:30(link) xml/cut-run-context.xml:218(primary)
msgid "cut_run_context_get_source_directory"
msgstr ""

#: xml/cut-run-context.xml:32(link) xml/cut-run-context.xml:233(primary)
msgid "cut_run_context_set_log_directory"
msgstr ""

#: xml/cut-run-context.xml:34(link) xml/cut-run-context.xml:249(primary)
msgid "cut_run_context_get_log_directory"
msgstr ""

#: xml/cut-run-context.xml:35(link) xml/cut-run-context.xml:263(primary)
msgid "cut_run_context_set_multi_thread"
msgstr ""

#: xml/cut-run-context.xml:37(link) xml/cut-run-context.xml:279(primary)
msgid "cut_run_context_get_multi_thread"
msgstr ""

#: xml/cut-run-context.xml:38(link) xml/cut-run-context.xml:293(primary)
msgid "cut_run_context_is_multi_thread"
msgstr ""

#: xml/cut-run-context.xml:39(link) xml/cut-run-context.xml:307(primary)
msgid "cut_run_context_set_max_threads"
msgstr ""

#: xml/cut-run-context.xml:41(link) xml/cut-run-context.xml:323(primary)
msgid "cut_run_context_get_max_threads"
msgstr ""

#: xml/cut-run-context.xml:42(link) xml/cut-run-context.xml:337(primary)
msgid "cut_run_context_set_exclude_files"
msgstr ""

#: xml/cut-run-context.xml:44(link) xml/cut-run-context.xml:353(primary)
msgid "cut_run_context_get_exclude_files"
msgstr ""

#: xml/cut-run-context.xml:45(link) xml/cut-run-context.xml:367(primary)
msgid "cut_run_context_set_exclude_directories"
msgstr ""

#: xml/cut-run-context.xml:48(link) xml/cut-run-context.xml:384(primary)
msgid "cut_run_context_get_exclude_directories"
msgstr ""

#: xml/cut-run-context.xml:50(link) xml/cut-run-context.xml:399(primary)
msgid "cut_run_context_set_target_test_case_names"
msgstr ""

#: xml/cut-run-context.xml:53(link) xml/cut-run-context.xml:416(primary)
msgid "cut_run_context_get_target_test_case_names"
msgstr ""

#: xml/cut-run-context.xml:55(link) xml/cut-run-context.xml:431(primary)
msgid "cut_run_context_set_target_test_names"
msgstr ""

#: xml/cut-run-context.xml:58(link) xml/cut-run-context.xml:448(primary)
msgid "cut_run_context_get_target_test_names"
msgstr ""

#: xml/cut-run-context.xml:60(link) xml/cut-run-context.xml:463(primary)
msgid "cut_run_context_get_n_tests"
msgstr ""

#: xml/cut-run-context.xml:61(link) xml/cut-run-context.xml:477(primary)
msgid "cut_run_context_get_n_successes"
msgstr ""

#: xml/cut-run-context.xml:62(link) xml/cut-run-context.xml:491(primary)
msgid "cut_run_context_get_n_assertions"
msgstr ""

#: xml/cut-run-context.xml:63(link) xml/cut-run-context.xml:505(primary)
msgid "cut_run_context_get_n_failures"
msgstr ""

#: xml/cut-run-context.xml:64(link) xml/cut-run-context.xml:519(primary)
msgid "cut_run_context_get_n_errors"
msgstr ""

#: xml/cut-run-context.xml:65(link) xml/cut-run-context.xml:533(primary)
msgid "cut_run_context_get_n_pendings"
msgstr ""

#: xml/cut-run-context.xml:66(link) xml/cut-run-context.xml:547(primary)
msgid "cut_run_context_get_n_notifications"
msgstr ""

#: xml/cut-run-context.xml:67(link) xml/cut-run-context.xml:561(primary)
msgid "cut_run_context_get_n_omissions"
msgstr ""

#: xml/cut-run-context.xml:68(link) xml/cut-run-context.xml:575(primary)
msgid "cut_run_context_get_status"
msgstr ""

#: xml/cut-run-context.xml:69(link) xml/cut-run-context.xml:589(primary)
msgid "cut_run_context_get_elapsed"
msgstr ""

#: xml/cut-run-context.xml:70(link) xml/cut-run-context.xml:603(primary)
msgid "cut_run_context_get_total_elapsed"
msgstr ""

#: xml/cut-run-context.xml:71(link) xml/cut-run-context.xml:617(primary)
msgid "cut_run_context_get_results"
msgstr ""

#: xml/cut-run-context.xml:72(link) xml/cut-run-context.xml:631(primary)
msgid "cut_run_context_crash"
msgstr ""

#: xml/cut-run-context.xml:74(link) xml/cut-run-context.xml:647(primary)
msgid "cut_run_context_is_crashed"
msgstr ""

#: xml/cut-run-context.xml:75(link) xml/cut-run-context.xml:661(primary)
msgid "cut_run_context_get_backtrace"
msgstr ""

#: xml/cut-run-context.xml:76(link) xml/cut-run-context.xml:675(primary)
msgid "cut_run_context_set_backtrace"
msgstr ""

#: xml/cut-run-context.xml:78(link) xml/cut-run-context.xml:691(primary)
msgid "cut_run_context_cancel"
msgstr ""

#: xml/cut-run-context.xml:79(link) xml/cut-run-context.xml:703(primary)
msgid "cut_run_context_is_canceled"
msgstr ""

#: xml/cut-run-context.xml:80(link) xml/cut-run-context.xml:81(link)
#: xml/cut-run-context.xml:83(link) xml/cut-test-runner.xml:33(link)
msgid "CutTestSuite"
msgstr ""

#: xml/cut-run-context.xml:80(link) xml/cut-run-context.xml:717(primary)
msgid "cut_run_context_create_test_suite"
msgstr ""

#: xml/cut-run-context.xml:81(link) xml/cut-run-context.xml:731(primary)
msgid "cut_run_context_get_test_suite"
msgstr ""

#: xml/cut-run-context.xml:82(link) xml/cut-run-context.xml:745(primary)
msgid "cut_run_context_set_test_suite"
msgstr ""

#: xml/cut-run-context.xml:84(link) xml/cut-run-context.xml:761(primary)
msgid "cut_run_context_set_test_case_order"
msgstr ""

#: xml/cut-run-context.xml:86(link) xml/cut-run-context.xml:777(primary)
msgid "cut_run_context_get_test_case_order"
msgstr ""

#: xml/cut-run-context.xml:87(link) xml/cut-run-context.xml:791(primary)
msgid "cut_run_context_sort_test_cases"
msgstr ""

#: xml/cut-run-context.xml:89(link) xml/cut-run-context.xml:809(primary)
msgid "cut_run_context_add_listener"
msgstr ""

#: xml/cut-run-context.xml:91(link) xml/cut-run-context.xml:825(primary)
msgid "cut_run_context_remove_listener"
msgstr ""

#: xml/cut-run-context.xml:93(link) xml/cut-run-context.xml:841(primary)
msgid "cut_run_context_attach_listeners"
msgstr ""

#: xml/cut-run-context.xml:94(link) xml/cut-run-context.xml:853(primary)
msgid "cut_run_context_detach_listeners"
msgstr ""

#: xml/cut-run-context.xml:95(link) xml/cut-run-context.xml:865(primary)
msgid "cut_run_context_build_source_filename"
msgstr ""

#: xml/cut-run-context.xml:98(link) xml/cut-run-context.xml:884(primary)
msgid "cut_run_context_start"
msgstr ""

#: xml/cut-run-context.xml:99(link) xml/cut-run-context.xml:898(primary)
msgid "cut_run_context_start_async"
msgstr ""

#: xml/cut-run-context.xml:100(link) xml/cut-run-context.xml:910(primary)
msgid "cut_run_context_emit_complete_run"
msgstr ""

#: xml/cut-run-context.xml:102(link) xml/cut-run-context.xml:928(primary)
msgid "cut_run_context_emit_error"
msgstr ""

#: xml/cut-run-context.xml:108(link) xml/cut-run-context.xml:960(primary)
msgid "cut_run_context_set_command_line_args"
msgstr ""

#: xml/cut-run-context.xml:111(link) xml/cut-run-context.xml:977(primary)
msgid "cut_run_context_get_command_line_args"
msgstr ""

#: xml/cut-run-context.xml:113(link) xml/cut-run-context.xml:992(primary)
msgid "cut_run_context_delegate_signals"
msgstr ""

#: xml/cut-run-context.xml:115(link) xml/cut-run-context.xml:1008(primary)
msgid "cut_run_context_is_completed"
msgstr ""

#: xml/cut-run-context.xml:116(link) xml/cut-run-context.xml:1022(primary)
msgid "cut_run_context_set_fatal_failures"
msgstr ""

#: xml/cut-run-context.xml:118(link) xml/cut-run-context.xml:1038(primary)
msgid "cut_run_context_get_fatal_failures"
msgstr ""

#: xml/cut-run-context.xml:119(link) xml/cut-run-context.xml:1052(primary)
msgid "cut_run_context_set_keep_opening_modules"
msgstr ""

#: xml/cut-run-context.xml:122(link) xml/cut-run-context.xml:1069(primary)
msgid "cut_run_context_get_keep_opening_modules"
msgstr ""

#: xml/cut-run-context.xml:124(link) xml/cut-run-context.xml:1084(primary)
msgid "cut_run_context_set_enable_convenience_attribute_definition"
msgstr ""

#: xml/cut-run-context.xml:127(link) xml/cut-run-context.xml:1101(primary)
msgid "cut_run_context_get_enable_convenience_attribute_definition"
msgstr ""

#: xml/cut-run-context.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"enum                <placeholder-1/>;\n"
"struct              <placeholder-2/>;\n"
"<placeholder-3/>                <placeholder-4/>  (<placeholder-5/> *context,\n"
"                                                         const <placeholder-6/> *directory);\n"
"const <placeholder-7/>*        <placeholder-8/>  (<placeholder-9/> *context);\n"
"<placeholder-10/>                <placeholder-11/>\n"
"                                                        (<placeholder-12/> *context,\n"
"                                                         const <placeholder-13/> *directory);\n"
"const <placeholder-14/>*        <placeholder-15/>\n"
"                                                        (<placeholder-16/> *context);\n"
"<placeholder-17/>                <placeholder-18/>   (<placeholder-19/> *context,\n"
"                                                         const <placeholder-20/> *directory);\n"
"const <placeholder-21/>*        <placeholder-22/>   (<placeholder-23/> *context);\n"
"<placeholder-24/>                <placeholder-25/>    (<placeholder-26/> *context,\n"
"                                                         <placeholder-27/> use_multi_thread);\n"
"<placeholder-28/>            <placeholder-29/>    (<placeholder-30/> *context);\n"
"<placeholder-31/>            <placeholder-32/>     (<placeholder-33/> *context);\n"
"<placeholder-34/>                <placeholder-35/>     (<placeholder-36/> *context,\n"
"                                                         <placeholder-37/> max_threads);\n"
"<placeholder-38/>                <placeholder-39/>     (<placeholder-40/> *context);\n"
"<placeholder-41/>                <placeholder-42/>   (<placeholder-43/> *context,\n"
"                                                         const <placeholder-44/> **filenames);\n"
"const <placeholder-45/>**       <placeholder-46/>   (<placeholder-47/> *context);\n"
"<placeholder-48/>                <placeholder-49/>\n"
"                                                        (<placeholder-50/> *context,\n"
"                                                         const <placeholder-51/> **directory_names);\n"
"const <placeholder-52/>**       <placeholder-53/>\n"
"                                                        (<placeholder-54/> *context);\n"
"<placeholder-55/>                <placeholder-56/>\n"
"                                                        (<placeholder-57/> *context,\n"
"                                                         const <placeholder-58/> **names);\n"
"const <placeholder-59/>**       <placeholder-60/>\n"
"                                                        (<placeholder-61/> *context);\n"
"<placeholder-62/>                <placeholder-63/>\n"
"                                                        (<placeholder-64/> *context,\n"
"                                                         const <placeholder-65/> **names);\n"
"const <placeholder-66/>**       <placeholder-67/>\n"
"                                                        (<placeholder-68/> *context);\n"
"<placeholder-69/>               <placeholder-70/>         (<placeholder-71/> *context);\n"
"<placeholder-72/>               <placeholder-73/>     (<placeholder-74/> *context);\n"
"<placeholder-75/>               <placeholder-76/>    (<placeholder-77/> *context);\n"
"<placeholder-78/>               <placeholder-79/>      (<placeholder-80/> *context);\n"
"<placeholder-81/>               <placeholder-82/>        (<placeholder-83/> *context);\n"
"<placeholder-84/>               <placeholder-85/>      (<placeholder-86/> *context);\n"
"<placeholder-87/>               <placeholder-88/> (<placeholder-89/> *context);\n"
"<placeholder-90/>               <placeholder-91/>     (<placeholder-92/> *context);\n"
"<placeholder-93/> <placeholder-94/>          (<placeholder-95/> *context);\n"
"<placeholder-96/>             <placeholder-97/>         (<placeholder-98/> *context);\n"
"<placeholder-99/>             <placeholder-100/>   (<placeholder-101/> *context);\n"
"const <placeholder-102/>*        <placeholder-103/>         (<placeholder-104/> *context);\n"
"<placeholder-105/>                <placeholder-106/>               (<placeholder-107/> *context,\n"
"                                                         const <placeholder-108/> *backtrace);\n"
"<placeholder-109/>            <placeholder-110/>          (<placeholder-111/> *context);\n"
"const <placeholder-112/>*        <placeholder-113/>       (<placeholder-114/> *context);\n"
"<placeholder-115/>                <placeholder-116/>       (<placeholder-117/> *context,\n"
"                                                         const <placeholder-118/> *backtrace);\n"
"<placeholder-119/>                <placeholder-120/>              (<placeholder-121/> *context);\n"
"<placeholder-122/>            <placeholder-123/>         (<placeholder-124/> *context);\n"
"<placeholder-125/>*       <placeholder-126/>   (<placeholder-127/> *context);\n"
"<placeholder-128/>*       <placeholder-129/>      (<placeholder-130/> *context);\n"
"<placeholder-131/>                <placeholder-132/>      (<placeholder-133/> *context,\n"
"                                                         <placeholder-134/> *suite);\n"
"<placeholder-135/>                <placeholder-136/> (<placeholder-137/> *context,\n"
"                                                         <placeholder-138/> order);\n"
"<placeholder-139/>            <placeholder-140/> (<placeholder-141/> *context);\n"
"<placeholder-142/>*              <placeholder-143/>     (<placeholder-144/> *context,\n"
"                                                         <placeholder-145/> *test_cases);\n"
"<placeholder-146/>                <placeholder-147/>        (<placeholder-148/> *context,\n"
"                                                         <placeholder-149/> *listener);\n"
"<placeholder-150/>                <placeholder-151/>     (<placeholder-152/> *context,\n"
"                                                         <placeholder-153/> *listener);\n"
"<placeholder-154/>                <placeholder-155/>    (<placeholder-156/> *context);\n"
"<placeholder-157/>                <placeholder-158/>    (<placeholder-159/> *context);\n"
"<placeholder-160/>*              <placeholder-161/>\n"
"                                                        (<placeholder-162/> *context,\n"
"                                                         const <placeholder-163/> *filename);\n"
"<placeholder-164/>            <placeholder-165/>               (<placeholder-166/> *context);\n"
"<placeholder-167/>                <placeholder-168/>         (<placeholder-169/> *context);\n"
"<placeholder-170/>            <placeholder-171/>   (<placeholder-172/> *context,\n"
"                                                         <placeholder-173/> success);\n"
"<placeholder-174/>                <placeholder-175/>          (<placeholder-176/> *context,\n"
"                                                         <placeholder-177/> domain,\n"
"                                                         <placeholder-178/> code,\n"
"                                                         <placeholder-179/> *sub_error,\n"
"                                                         const <placeholder-180/> *format,\n"
"                                                         ...);\n"
"<placeholder-181/>                <placeholder-182/>\n"
"                                                        (<placeholder-183/> *context,\n"
"                                                         <placeholder-184/> **args);\n"
"const <placeholder-185/>**       <placeholder-186/>\n"
"                                                        (<placeholder-187/> *context);\n"
"<placeholder-188/>                <placeholder-189/>    (<placeholder-190/> *context,\n"
"                                                         <placeholder-191/> *other_context);\n"
"<placeholder-192/>            <placeholder-193/>        (<placeholder-194/> *context);\n"
"<placeholder-195/>                <placeholder-196/>  (<placeholder-197/> *context,\n"
"                                                         <placeholder-198/> fatal_failures);\n"
"<placeholder-199/>            <placeholder-200/>  (<placeholder-201/> *context);\n"
"<placeholder-202/>                <placeholder-203/>\n"
"                                                        (<placeholder-204/> *context,\n"
"                                                         <placeholder-205/> keep_opening);\n"
"<placeholder-206/>            <placeholder-207/>\n"
"                                                        (<placeholder-208/> *context);\n"
"<placeholder-209/>                <placeholder-210/>\n"
"                                                        (<placeholder-211/> *context,\n"
"                                                         <placeholder-212/> enable_convenience_attribute_definition);\n"
"<placeholder-213/>            <placeholder-214/>\n"
"                                                        (<placeholder-215/> *context);\n"
msgstr ""

#: xml/cut-run-context.xml:150(title)
msgid "enum CutOrder"
msgstr ""

#: xml/cut-run-context.xml:151(programlisting)
#, no-wrap
msgid ""
"typedef enum {\n"
"    CUT_ORDER_NONE_SPECIFIED,\n"
"    CUT_ORDER_NAME_ASCENDING,\n"
"    CUT_ORDER_NAME_DESCENDING\n"
"} CutOrder;\n"
msgstr ""

#: xml/cut-run-context.xml:161(title)
msgid "struct CutRunContext"
msgstr ""

#: xml/cut-run-context.xml:162(programlisting)
#, no-wrap
msgid ""
"struct CutRunContext {\n"
"    GObject object;\n"
"};\n"
msgstr ""

#: xml/cut-run-context.xml:170(title)
msgid "cut_run_context_set_test_directory ()"
msgstr ""

#: xml/cut-run-context.xml:171(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_test_directory  (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *directory);"
msgstr ""

#: xml/cut-run-context.xml:179(term) xml/cut-run-context.xml:210(term)
#: xml/cut-run-context.xml:241(term)
msgid "<parameter>directory</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:186(title)
msgid "cut_run_context_get_test_directory ()"
msgstr ""

#: xml/cut-run-context.xml:187(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_run_context_get_test_directory  (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:200(title)
msgid "cut_run_context_set_source_directory ()"
msgstr ""

#: xml/cut-run-context.xml:201(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_source_directory\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *directory);"
msgstr ""

#: xml/cut-run-context.xml:217(title)
msgid "cut_run_context_get_source_directory ()"
msgstr ""

#: xml/cut-run-context.xml:218(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link>*        cut_run_context_get_source_directory\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:232(title)
msgid "cut_run_context_set_log_directory ()"
msgstr ""

#: xml/cut-run-context.xml:233(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_log_directory   (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *directory);"
msgstr ""

#: xml/cut-run-context.xml:248(title)
msgid "cut_run_context_get_log_directory ()"
msgstr ""

#: xml/cut-run-context.xml:249(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_run_context_get_log_directory   (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:262(title)
msgid "cut_run_context_set_multi_thread ()"
msgstr ""

#: xml/cut-run-context.xml:263(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_multi_thread    (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"gboolean\">gboolean</link> use_multi_thread);"
msgstr ""

#: xml/cut-run-context.xml:271(term)
msgid "<parameter>use_multi_thread</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:278(title)
msgid "cut_run_context_get_multi_thread ()"
msgstr ""

#: xml/cut-run-context.xml:279(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_context_get_multi_thread    (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:292(title)
msgid "cut_run_context_is_multi_thread ()"
msgstr ""

#: xml/cut-run-context.xml:293(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_context_is_multi_thread     (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:306(title)
msgid "cut_run_context_set_max_threads ()"
msgstr ""

#: xml/cut-run-context.xml:307(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_max_threads     (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"gint\">gint</link> max_threads);"
msgstr ""

#: xml/cut-run-context.xml:322(title)
msgid "cut_run_context_get_max_threads ()"
msgstr ""

#: xml/cut-run-context.xml:323(programlisting)
#, no-wrap
msgid "<link linkend=\"gint\">gint</link>                cut_run_context_get_max_threads     (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:336(title)
msgid "cut_run_context_set_exclude_files ()"
msgstr ""

#: xml/cut-run-context.xml:337(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_exclude_files   (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> **filenames);"
msgstr ""

#: xml/cut-run-context.xml:345(term)
msgid "<parameter>filenames</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:352(title)
msgid "cut_run_context_get_exclude_files ()"
msgstr ""

#: xml/cut-run-context.xml:353(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>**       cut_run_context_get_exclude_files   (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:366(title)
msgid "cut_run_context_set_exclude_directories ()"
msgstr ""

#: xml/cut-run-context.xml:367(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_exclude_directories\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> **directory_names);"
msgstr ""

#: xml/cut-run-context.xml:376(term)
msgid "<parameter>directory_names</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:383(title)
msgid "cut_run_context_get_exclude_directories ()"
msgstr ""

#: xml/cut-run-context.xml:384(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link>**       cut_run_context_get_exclude_directories\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:398(title)
msgid "cut_run_context_set_target_test_case_names ()"
msgstr ""

#: xml/cut-run-context.xml:399(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_target_test_case_names\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> **names);"
msgstr ""

#: xml/cut-run-context.xml:415(title)
msgid "cut_run_context_get_target_test_case_names ()"
msgstr ""

#: xml/cut-run-context.xml:416(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link>**       cut_run_context_get_target_test_case_names\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:430(title)
msgid "cut_run_context_set_target_test_names ()"
msgstr ""

#: xml/cut-run-context.xml:431(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_target_test_names\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> **names);"
msgstr ""

#: xml/cut-run-context.xml:447(title)
msgid "cut_run_context_get_target_test_names ()"
msgstr ""

#: xml/cut-run-context.xml:448(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link>**       cut_run_context_get_target_test_names\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:462(title)
msgid "cut_run_context_get_n_tests ()"
msgstr ""

#: xml/cut-run-context.xml:463(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_tests         (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:476(title)
msgid "cut_run_context_get_n_successes ()"
msgstr ""

#: xml/cut-run-context.xml:477(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_successes     (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:490(title)
msgid "cut_run_context_get_n_assertions ()"
msgstr ""

#: xml/cut-run-context.xml:491(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_assertions    (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:504(title)
msgid "cut_run_context_get_n_failures ()"
msgstr ""

#: xml/cut-run-context.xml:505(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_failures      (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:518(title)
msgid "cut_run_context_get_n_errors ()"
msgstr ""

#: xml/cut-run-context.xml:519(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_errors        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:532(title)
msgid "cut_run_context_get_n_pendings ()"
msgstr ""

#: xml/cut-run-context.xml:533(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_pendings      (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:546(title)
msgid "cut_run_context_get_n_notifications ()"
msgstr ""

#: xml/cut-run-context.xml:547(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_notifications (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:560(title)
msgid "cut_run_context_get_n_omissions ()"
msgstr ""

#: xml/cut-run-context.xml:561(programlisting)
#, no-wrap
msgid "<link linkend=\"guint\">guint</link>               cut_run_context_get_n_omissions     (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:574(title)
msgid "cut_run_context_get_status ()"
msgstr ""

#: xml/cut-run-context.xml:575(programlisting)
#, no-wrap
msgid "<link linkend=\"CutTestResultStatus\">CutTestResultStatus</link> cut_run_context_get_status          (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:588(title)
msgid "cut_run_context_get_elapsed ()"
msgstr ""

#: xml/cut-run-context.xml:589(programlisting)
#, no-wrap
msgid "<link linkend=\"gdouble\">gdouble</link>             cut_run_context_get_elapsed         (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:602(title)
msgid "cut_run_context_get_total_elapsed ()"
msgstr ""

#: xml/cut-run-context.xml:603(programlisting)
#, no-wrap
msgid "<link linkend=\"gdouble\">gdouble</link>             cut_run_context_get_total_elapsed   (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:616(title)
msgid "cut_run_context_get_results ()"
msgstr ""

#: xml/cut-run-context.xml:617(programlisting)
#, no-wrap
msgid "const <link linkend=\"GList\">GList</link>*        cut_run_context_get_results         (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:630(title)
msgid "cut_run_context_crash ()"
msgstr ""

#: xml/cut-run-context.xml:631(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_crash               (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *backtrace);"
msgstr ""

#: xml/cut-run-context.xml:639(term) xml/cut-run-context.xml:683(term)
#: xml/cuttest-assertions.xml:169(term) xml/cuttest-assertions.xml:204(term)
#: xml/cuttest-assertions.xml:293(term)
msgid "<parameter>backtrace</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:646(title)
msgid "cut_run_context_is_crashed ()"
msgstr ""

#: xml/cut-run-context.xml:647(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_context_is_crashed          (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:660(title)
msgid "cut_run_context_get_backtrace ()"
msgstr ""

#: xml/cut-run-context.xml:661(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_run_context_get_backtrace       (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:674(title)
msgid "cut_run_context_set_backtrace ()"
msgstr ""

#: xml/cut-run-context.xml:675(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_backtrace       (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *backtrace);"
msgstr ""

#: xml/cut-run-context.xml:690(title)
msgid "cut_run_context_cancel ()"
msgstr ""

#: xml/cut-run-context.xml:691(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_run_context_cancel              (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:702(title)
msgid "cut_run_context_is_canceled ()"
msgstr ""

#: xml/cut-run-context.xml:703(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_context_is_canceled         (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:716(title)
msgid "cut_run_context_create_test_suite ()"
msgstr ""

#: xml/cut-run-context.xml:717(programlisting)
#, no-wrap
msgid "<link linkend=\"CutTestSuite\">CutTestSuite</link>*       cut_run_context_create_test_suite   (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:730(title)
msgid "cut_run_context_get_test_suite ()"
msgstr ""

#: xml/cut-run-context.xml:731(programlisting)
#, no-wrap
msgid "<link linkend=\"CutTestSuite\">CutTestSuite</link>*       cut_run_context_get_test_suite      (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:744(title)
msgid "cut_run_context_set_test_suite ()"
msgstr ""

#: xml/cut-run-context.xml:745(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_test_suite      (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"CutTestSuite\">CutTestSuite</link> *suite);"
msgstr ""

#: xml/cut-run-context.xml:753(term)
msgid "<parameter>suite</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:760(title)
msgid "cut_run_context_set_test_case_order ()"
msgstr ""

#: xml/cut-run-context.xml:761(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_test_case_order (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"CutOrder\">CutOrder</link> order);"
msgstr ""

#: xml/cut-run-context.xml:769(term)
msgid "<parameter>order</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:776(title)
msgid "cut_run_context_get_test_case_order ()"
msgstr ""

#: xml/cut-run-context.xml:777(programlisting)
#, no-wrap
msgid "<link linkend=\"CutOrder\">CutOrder</link>            cut_run_context_get_test_case_order (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:790(title)
msgid "cut_run_context_sort_test_cases ()"
msgstr ""

#: xml/cut-run-context.xml:791(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GList\">GList</link>*              cut_run_context_sort_test_cases     (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"GList\">GList</link> *test_cases);"
msgstr ""

#: xml/cut-run-context.xml:799(term)
msgid "<parameter>test_cases</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:808(title)
msgid "cut_run_context_add_listener ()"
msgstr ""

#: xml/cut-run-context.xml:809(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_add_listener        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"CutListener\">CutListener</link> *listener);"
msgstr ""

#: xml/cut-run-context.xml:824(title)
msgid "cut_run_context_remove_listener ()"
msgstr ""

#: xml/cut-run-context.xml:825(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_remove_listener     (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"CutListener\">CutListener</link> *listener);"
msgstr ""

#: xml/cut-run-context.xml:840(title)
msgid "cut_run_context_attach_listeners ()"
msgstr ""

#: xml/cut-run-context.xml:841(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_run_context_attach_listeners    (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:852(title)
msgid "cut_run_context_detach_listeners ()"
msgstr ""

#: xml/cut-run-context.xml:853(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_run_context_detach_listeners    (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:864(title)
msgid "cut_run_context_build_source_filename ()"
msgstr ""

#: xml/cut-run-context.xml:865(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              cut_run_context_build_source_filename\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *filename);"
msgstr ""

#: xml/cut-run-context.xml:874(term)
msgid "<parameter>filename</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:883(title)
msgid "cut_run_context_start ()"
msgstr ""

#: xml/cut-run-context.xml:884(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_context_start               (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:897(title)
msgid "cut_run_context_start_async ()"
msgstr ""

#: xml/cut-run-context.xml:898(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_run_context_start_async         (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:909(title)
msgid "cut_run_context_emit_complete_run ()"
msgstr ""

#: xml/cut-run-context.xml:910(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_run_context_emit_complete_run   (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"gboolean\">gboolean</link> success);"
msgstr ""

#: xml/cut-run-context.xml:918(term)
msgid "<parameter>success</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:927(title)
msgid "cut_run_context_emit_error ()"
msgstr ""

#: xml/cut-run-context.xml:928(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_emit_error          (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"GQuark\">GQuark</link> domain,\n"
"                                                         <link linkend=\"gint\">gint</link> code,\n"
"                                                         <link linkend=\"GError\">GError</link> *sub_error,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *format,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-run-context.xml:940(term)
msgid "<parameter>domain</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:943(term)
msgid "<parameter>code</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:946(term)
msgid "<parameter>sub_error</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:959(title)
msgid "cut_run_context_set_command_line_args ()"
msgstr ""

#: xml/cut-run-context.xml:960(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_command_line_args\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"gchar\">gchar</link> **args);"
msgstr ""

#: xml/cut-run-context.xml:969(term) xml/gcut-test-utils.xml:213(term)
msgid "<parameter>args</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:976(title)
msgid "cut_run_context_get_command_line_args ()"
msgstr ""

#: xml/cut-run-context.xml:977(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link>**       cut_run_context_get_command_line_args\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:991(title)
msgid "cut_run_context_delegate_signals ()"
msgstr ""

#: xml/cut-run-context.xml:992(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_delegate_signals    (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"CutRunContext\">CutRunContext</link> *other_context);"
msgstr ""

#: xml/cut-run-context.xml:1000(term)
msgid "<parameter>other_context</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:1007(title)
msgid "cut_run_context_is_completed ()"
msgstr ""

#: xml/cut-run-context.xml:1008(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_context_is_completed        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:1021(title)
msgid "cut_run_context_set_fatal_failures ()"
msgstr ""

#: xml/cut-run-context.xml:1022(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_fatal_failures  (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"gboolean\">gboolean</link> fatal_failures);"
msgstr ""

#: xml/cut-run-context.xml:1037(title)
msgid "cut_run_context_get_fatal_failures ()"
msgstr ""

#: xml/cut-run-context.xml:1038(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_context_get_fatal_failures  (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:1051(title)
msgid "cut_run_context_set_keep_opening_modules ()"
msgstr ""

#: xml/cut-run-context.xml:1052(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_keep_opening_modules\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"gboolean\">gboolean</link> keep_opening);"
msgstr ""

#: xml/cut-run-context.xml:1061(term)
msgid "<parameter>keep_opening</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:1068(title)
msgid "cut_run_context_get_keep_opening_modules ()"
msgstr ""

#: xml/cut-run-context.xml:1069(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_run_context_get_keep_opening_modules\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-run-context.xml:1083(title)
msgid "cut_run_context_set_enable_convenience_attribute_definition ()"
msgstr ""

#: xml/cut-run-context.xml:1084(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_run_context_set_enable_convenience_attribute_definition\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context,\n"
"                                                         <link linkend=\"gboolean\">gboolean</link> enable_convenience_attribute_definition);"
msgstr ""

#: xml/cut-run-context.xml:1093(term)
msgid "<parameter>enable_convenience_attribute_definition</parameter>&nbsp;:"
msgstr ""

#: xml/cut-run-context.xml:1100(title)
msgid "cut_run_context_get_enable_convenience_attribute_definition ()"
msgstr ""

#: xml/cut-run-context.xml:1101(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_run_context_get_enable_convenience_attribute_definition\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *context);"
msgstr ""

#: xml/cut-runner.xml:7(refentrytitle) xml/cut-runner.xml:13(refname)
msgid "cut-runner"
msgstr ""

#: xml/cut-runner.xml:22(link) xml/cut-runner.xml:24(link)
#: xml/cut-runner.xml:25(link) xml/cut-runner.xml:47(title)
#: xml/cut-runner.xml:48(primary)
msgid "CutRunner"
msgstr ""

#: xml/cut-runner.xml:23(link) xml/cut-runner.xml:53(title)
#: xml/cut-runner.xml:54(primary)
msgid "CutRunnerIface"
msgstr ""

#: xml/cut-runner.xml:24(link) xml/cut-runner.xml:66(primary)
msgid "cut_runner_run"
msgstr ""

#: xml/cut-runner.xml:25(link) xml/cut-runner.xml:80(primary)
msgid "cut_runner_run_async"
msgstr ""

#: xml/cut-runner.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"                    <placeholder-2/>;\n"
"<placeholder-3/>            <placeholder-4/>                      (<placeholder-5/> *runner);\n"
"<placeholder-6/>                <placeholder-7/>                (<placeholder-8/> *runner);\n"
msgstr ""

#: xml/cut-runner.xml:48(programlisting)
#, no-wrap
msgid "typedef struct _CutRunner CutRunner;"
msgstr ""

#: xml/cut-runner.xml:54(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GTypeInterface base_iface;\n"
"\n"
"    gboolean (*run)       (CutRunner   *runner);\n"
"    void     (*run_async) (CutRunner   *runner);\n"
"} CutRunnerIface;\n"
msgstr ""

#: xml/cut-runner.xml:65(title)
msgid "cut_runner_run ()"
msgstr ""

#: xml/cut-runner.xml:66(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_runner_run                      (<link linkend=\"CutRunner\">CutRunner</link> *runner);"
msgstr ""

#: xml/cut-runner.xml:70(term) xml/cut-runner.xml:84(term)
#: xml/cut-test-runner.xml:82(term) xml/cut-test-runner.xml:103(term)
#: xml/cut-test-runner.xml:122(term) xml/cut-test-runner.xml:143(term)
msgid "<parameter>runner</parameter>&nbsp;:"
msgstr ""

#: xml/cut-runner.xml:79(title)
msgid "cut_runner_run_async ()"
msgstr ""

#: xml/cut-runner.xml:80(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_runner_run_async                (<link linkend=\"CutRunner\">CutRunner</link> *runner);"
msgstr ""

#: xml/cut-sequence-matcher.xml:7(refentrytitle)
#: xml/cut-sequence-matcher.xml:13(refname)
#: xml/cut-sequence-matcher.xml:27(link) xml/cut-sequence-matcher.xml:39(link)
#: xml/cut-sequence-matcher.xml:47(link) xml/cut-sequence-matcher.xml:49(link)
#: xml/cut-sequence-matcher.xml:53(link) xml/cut-sequence-matcher.xml:55(link)
#: xml/cut-sequence-matcher.xml:60(link) xml/cut-sequence-matcher.xml:63(link)
#: xml/cut-sequence-matcher.xml:68(link) xml/cut-sequence-matcher.xml:69(link)
#: xml/cut-sequence-matcher.xml:70(link) xml/cut-sequence-matcher.xml:71(link)
#: xml/cut-sequence-matcher.xml:147(title)
#: xml/cut-sequence-matcher.xml:148(primary)
msgid "CutSequenceMatcher"
msgstr ""

#: xml/cut-sequence-matcher.xml:22(link) xml/cut-sequence-matcher.xml:28(link)
#: xml/cut-sequence-matcher.xml:31(link) xml/cut-sequence-matcher.xml:62(link)
#: xml/cut-sequence-matcher.xml:93(title)
#: xml/cut-sequence-matcher.xml:94(primary)
msgid "CutSequenceMatchInfo"
msgstr ""

#: xml/cut-sequence-matcher.xml:23(link) xml/cut-sequence-matcher.xml:32(link)
#: xml/cut-sequence-matcher.xml:38(link)
#: xml/cut-sequence-matcher.xml:104(title)
#: xml/cut-sequence-matcher.xml:105(primary)
msgid "CutSequenceMatchOperation"
msgstr ""

#: xml/cut-sequence-matcher.xml:24(link)
msgid "*CutJunkFilterFunc"
msgstr ""

#: xml/cut-sequence-matcher.xml:24(link) xml/cut-sequence-matcher.xml:25(link)
#: xml/cut-sequence-matcher.xml:42(link) xml/cut-sequence-matcher.xml:46(link)
#: xml/cut-sequence-matcher.xml:52(link) xml/cut-sequence-matcher.xml:59(link)
#: xml/cut-sequence-matcher.xml:61(link) xml/cut-stream.xml:24(link)
#: xml/cut-test-data.xml:24(link) xml/cut-test-data.xml:30(link)
#: xml/cut-test-data.xml:32(link) xml/gcut-hash-table.xml:29(link)
#: xml/gcut-list.xml:28(link) xml/gcut-object.xml:29(link)
#: xml/gcut-types.xml:24(link)
msgid "gpointer"
msgstr ""

#: xml/cut-sequence-matcher.xml:26(link) xml/cut-sequence-matcher.xml:33(link)
#: xml/cut-sequence-matcher.xml:136(primary)
msgid "CutSequenceMatchOperationType"
msgstr ""

#: xml/cut-sequence-matcher.xml:28(link)
#: xml/cut-sequence-matcher.xml:157(primary)
msgid "cut_sequence_match_info_new"
msgstr ""

#: xml/cut-sequence-matcher.xml:31(link)
#: xml/cut-sequence-matcher.xml:179(primary)
msgid "cut_sequence_match_info_free"
msgstr ""

#: xml/cut-sequence-matcher.xml:32(link)
#: xml/cut-sequence-matcher.xml:191(primary)
msgid "cut_sequence_match_operation_new"
msgstr ""

#: xml/cut-sequence-matcher.xml:38(link)
#: xml/cut-sequence-matcher.xml:222(primary)
msgid "cut_sequence_match_operation_free"
msgstr ""

#: xml/cut-sequence-matcher.xml:39(link)
#: xml/cut-sequence-matcher.xml:234(primary)
msgid "cut_sequence_matcher_new"
msgstr ""

#: xml/cut-sequence-matcher.xml:39(link) xml/cut-sequence-matcher.xml:40(link)
msgid "GSequence"
msgstr ""

#: xml/cut-sequence-matcher.xml:41(link)
msgid "GSequenceIterCompareFunc"
msgstr ""

#: xml/cut-sequence-matcher.xml:43(link)
msgid "GHashFunc"
msgstr ""

#: xml/cut-sequence-matcher.xml:44(link)
#: xml/gcut-assertions-helper.xml:80(link)
#: xml/gcut-assertions-helper.xml:126(link) xml/gcut-hash-table.xml:25(link)
#: xml/gcut-list.xml:25(link) xml/gcut-object.xml:25(link)
#: xml/gcut-value-equal.xml:27(link)
msgid "GEqualFunc"
msgstr ""

#: xml/cut-sequence-matcher.xml:45(link) xml/cut-sequence-matcher.xml:51(link)
#: xml/cut-sequence-matcher.xml:58(link)
#: xml/cut-sequence-matcher.xml:118(primary)
msgid "CutJunkFilterFunc"
msgstr ""

#: xml/cut-sequence-matcher.xml:47(link)
#: xml/cut-sequence-matcher.xml:276(primary)
msgid "cut_sequence_matcher_char_new"
msgstr ""

#: xml/cut-sequence-matcher.xml:49(link)
#: xml/cut-sequence-matcher.xml:294(primary)
msgid "cut_sequence_matcher_char_new_full"
msgstr ""

#: xml/cut-sequence-matcher.xml:53(link)
#: xml/cut-sequence-matcher.xml:320(primary)
msgid "cut_sequence_matcher_string_new"
msgstr ""

#: xml/cut-sequence-matcher.xml:55(link)
#: xml/cut-sequence-matcher.xml:338(primary)
msgid "cut_sequence_matcher_string_new_full"
msgstr ""

#: xml/cut-sequence-matcher.xml:60(link)
#: xml/cut-sequence-matcher.xml:365(primary)
msgid "cut_sequence_matcher_get_to_index"
msgstr ""

#: xml/cut-sequence-matcher.xml:62(link)
#: xml/cut-sequence-matcher.xml:383(primary)
msgid "cut_sequence_matcher_get_longest_match"
msgstr ""

#: xml/cut-sequence-matcher.xml:68(link)
#: xml/cut-sequence-matcher.xml:414(primary)
msgid "cut_sequence_matcher_get_matches"
msgstr ""

#: xml/cut-sequence-matcher.xml:69(link)
#: xml/cut-sequence-matcher.xml:428(primary)
msgid "cut_sequence_matcher_get_blocks"
msgstr ""

#: xml/cut-sequence-matcher.xml:70(link)
#: xml/cut-sequence-matcher.xml:442(primary)
msgid "cut_sequence_matcher_get_operations"
msgstr ""

#: xml/cut-sequence-matcher.xml:71(link)
#: xml/cut-sequence-matcher.xml:456(primary)
msgid "cut_sequence_matcher_get_ratio"
msgstr ""

#: xml/cut-sequence-matcher.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"                    <placeholder-2/>;\n"
"<placeholder-3/>            (<placeholder-4/>)                (<placeholder-5/> data,\n"
"                                                         <placeholder-6/> user_data);\n"
"enum                <placeholder-7/>;\n"
"                    <placeholder-8/>;\n"
"<placeholder-9/>* <placeholder-10/>       (<placeholder-11/> begin,\n"
"                                                         <placeholder-12/> end,\n"
"                                                         <placeholder-13/> size);\n"
"<placeholder-14/>                <placeholder-15/>        (<placeholder-16/> *info);\n"
"<placeholder-17/>* <placeholder-18/>\n"
"                                                        (<placeholder-19/> type,\n"
"                                                         <placeholder-20/> from_begin,\n"
"                                                         <placeholder-21/> from_end,\n"
"                                                         <placeholder-22/> to_begin,\n"
"                                                         <placeholder-23/> to_end);\n"
"<placeholder-24/>                <placeholder-25/>   (<placeholder-26/> *operation);\n"
"<placeholder-27/>* <placeholder-28/>            (<placeholder-29/> *from,\n"
"                                                         <placeholder-30/> *to,\n"
"                                                         <placeholder-31/> compare_func,\n"
"                                                         <placeholder-32/> compare_func_user_data,\n"
"                                                         <placeholder-33/> content_hash_func,\n"
"                                                         <placeholder-34/> content_equal_func,\n"
"                                                         <placeholder-35/> junk_filter_func,\n"
"                                                         <placeholder-36/> user_data);\n"
"<placeholder-37/>* <placeholder-38/>       (const <placeholder-39/> *from,\n"
"                                                         const <placeholder-40/> *to);\n"
"<placeholder-41/>* <placeholder-42/>  (const <placeholder-43/> *from,\n"
"                                                         const <placeholder-44/> *to,\n"
"                                                         <placeholder-45/> junk_filter_func,\n"
"                                                         <placeholder-46/> junk_filter_func_user_data);\n"
"<placeholder-47/>* <placeholder-48/>     (<placeholder-49/> **from,\n"
"                                                         <placeholder-50/> **to);\n"
"<placeholder-51/>* <placeholder-52/>\n"
"                                                        (<placeholder-53/> **from,\n"
"                                                         <placeholder-54/> **to,\n"
"                                                         <placeholder-55/> junk_filter_func,\n"
"                                                         <placeholder-56/> junk_filter_func_user_data);\n"
"const <placeholder-57/>*        <placeholder-58/>   (<placeholder-59/> *matcher,\n"
"                                                         <placeholder-60/> to_content);\n"
"<placeholder-61/>* <placeholder-62/>\n"
"                                                        (<placeholder-63/> *matcher,\n"
"                                                         <placeholder-64/> from_begin,\n"
"                                                         <placeholder-65/> from_end,\n"
"                                                         <placeholder-66/> to_begin,\n"
"                                                         <placeholder-67/> to_end);\n"
"const <placeholder-68/>*        <placeholder-69/>    (<placeholder-70/> *matcher);\n"
"const <placeholder-71/>*        <placeholder-72/>     (<placeholder-73/> *matcher);\n"
"const <placeholder-74/>*        <placeholder-75/> (<placeholder-76/> *matcher);\n"
"<placeholder-77/>             <placeholder-78/>      (<placeholder-79/> *matcher);\n"
msgstr ""

#: xml/cut-sequence-matcher.xml:94(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    gint from_index;\n"
"    gint to_index;\n"
"    gint size;\n"
"} CutSequenceMatchInfo;\n"
msgstr ""

#: xml/cut-sequence-matcher.xml:105(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutSequenceMatchOperationType type;\n"
"    gint from_begin;\n"
"    gint from_end;\n"
"    gint to_begin;\n"
"    gint to_end;\n"
"} CutSequenceMatchOperation;\n"
msgstr ""

#: xml/cut-sequence-matcher.xml:117(title)
msgid "CutJunkFilterFunc ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:118(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            (*CutJunkFilterFunc)                (<link linkend=\"gpointer\">gpointer</link> data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/cut-sequence-matcher.xml:126(term)
#: xml/cut-sequence-matcher.xml:266(term) xml/cut-stream.xml:63(term)
#: xml/gcut-hash-table.xml:124(term) xml/gcut-list.xml:126(term)
#: xml/gcut-object.xml:116(term) xml/gcut-types.xml:59(term)
msgid "<parameter>user_data</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:135(title)
msgid "enum CutSequenceMatchOperationType"
msgstr ""

#: xml/cut-sequence-matcher.xml:136(programlisting)
#, no-wrap
msgid ""
"typedef enum {\n"
"    CUT_SEQUENCE_MATCH_OPERATION_EQUAL,\n"
"    CUT_SEQUENCE_MATCH_OPERATION_INSERT,\n"
"    CUT_SEQUENCE_MATCH_OPERATION_DELETE,\n"
"    CUT_SEQUENCE_MATCH_OPERATION_REPLACE\n"
"} CutSequenceMatchOperationType;\n"
msgstr ""

#: xml/cut-sequence-matcher.xml:148(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutSequenceMatcher;\n"
msgstr ""

#: xml/cut-sequence-matcher.xml:156(title)
msgid "cut_sequence_match_info_new ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:157(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatchInfo\">CutSequenceMatchInfo</link>* cut_sequence_match_info_new       (<link linkend=\"gint\">gint</link> begin,\n"
"                                                         <link linkend=\"gint\">gint</link> end,\n"
"                                                         <link linkend=\"gint\">gint</link> size);"
msgstr ""

#: xml/cut-sequence-matcher.xml:163(term)
msgid "<parameter>begin</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:166(term)
msgid "<parameter>end</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:169(term) xml/cut-test-utils.xml:140(term)
#: xml/cut-test-utils.xml:158(term)
msgid "<parameter>size</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:178(title)
msgid "cut_sequence_match_info_free ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:179(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_sequence_match_info_free        (<link linkend=\"CutSequenceMatchInfo\">CutSequenceMatchInfo</link> *info);"
msgstr ""

#: xml/cut-sequence-matcher.xml:190(title)
msgid "cut_sequence_match_operation_new ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:191(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatchOperation\">CutSequenceMatchOperation</link>* cut_sequence_match_operation_new\n"
"                                                        (<link linkend=\"CutSequenceMatchOperationType\">CutSequenceMatchOperationType</link> type,\n"
"                                                         <link linkend=\"gint\">gint</link> from_begin,\n"
"                                                         <link linkend=\"gint\">gint</link> from_end,\n"
"                                                         <link linkend=\"gint\">gint</link> to_begin,\n"
"                                                         <link linkend=\"gint\">gint</link> to_end);"
msgstr ""

#: xml/cut-sequence-matcher.xml:203(term)
#: xml/cut-sequence-matcher.xml:395(term)
msgid "<parameter>from_begin</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:206(term)
#: xml/cut-sequence-matcher.xml:398(term)
msgid "<parameter>from_end</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:209(term)
#: xml/cut-sequence-matcher.xml:401(term)
msgid "<parameter>to_begin</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:212(term)
#: xml/cut-sequence-matcher.xml:404(term)
msgid "<parameter>to_end</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:221(title)
msgid "cut_sequence_match_operation_free ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:222(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_sequence_match_operation_free   (<link linkend=\"CutSequenceMatchOperation\">CutSequenceMatchOperation</link> *operation);"
msgstr ""

#: xml/cut-sequence-matcher.xml:226(term)
msgid "<parameter>operation</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:233(title)
msgid "cut_sequence_matcher_new ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:234(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link>* cut_sequence_matcher_new            (<link linkend=\"GSequence\">GSequence</link> *from,\n"
"                                                         <link linkend=\"GSequence\">GSequence</link> *to,\n"
"                                                         <link linkend=\"GSequenceIterCompareFunc\">GSequenceIterCompareFunc</link> compare_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> compare_func_user_data,\n"
"                                                         <link linkend=\"GHashFunc\">GHashFunc</link> content_hash_func,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> content_equal_func,\n"
"                                                         <link linkend=\"CutJunkFilterFunc\">CutJunkFilterFunc</link> junk_filter_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/cut-sequence-matcher.xml:251(term)
msgid "<parameter>compare_func</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:254(term)
msgid "<parameter>compare_func_user_data</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:257(term)
msgid "<parameter>content_hash_func</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:260(term)
msgid "<parameter>content_equal_func</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:263(term)
#: xml/cut-sequence-matcher.xml:307(term)
#: xml/cut-sequence-matcher.xml:352(term)
msgid "<parameter>junk_filter_func</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:275(title)
msgid "cut_sequence_matcher_char_new ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:276(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link>* cut_sequence_matcher_char_new       (const <link linkend=\"gchar\">gchar</link> *from,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *to);"
msgstr ""

#: xml/cut-sequence-matcher.xml:293(title)
msgid "cut_sequence_matcher_char_new_full ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:294(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link>* cut_sequence_matcher_char_new_full  (const <link linkend=\"gchar\">gchar</link> *from,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *to,\n"
"                                                         <link linkend=\"CutJunkFilterFunc\">CutJunkFilterFunc</link> junk_filter_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> junk_filter_func_user_data);"
msgstr ""

#: xml/cut-sequence-matcher.xml:310(term)
#: xml/cut-sequence-matcher.xml:355(term)
msgid "<parameter>junk_filter_func_user_data</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:319(title)
msgid "cut_sequence_matcher_string_new ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:320(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link>* cut_sequence_matcher_string_new     (<link linkend=\"gchar\">gchar</link> **from,\n"
"                                                         <link linkend=\"gchar\">gchar</link> **to);"
msgstr ""

#: xml/cut-sequence-matcher.xml:337(title)
msgid "cut_sequence_matcher_string_new_full ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:338(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link>* cut_sequence_matcher_string_new_full\n"
"                                                        (<link linkend=\"gchar\">gchar</link> **from,\n"
"                                                         <link linkend=\"gchar\">gchar</link> **to,\n"
"                                                         <link linkend=\"CutJunkFilterFunc\">CutJunkFilterFunc</link> junk_filter_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> junk_filter_func_user_data);"
msgstr ""

#: xml/cut-sequence-matcher.xml:364(title)
msgid "cut_sequence_matcher_get_to_index ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:365(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"GList\">GList</link>*        cut_sequence_matcher_get_to_index   (<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link> *matcher,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> to_content);"
msgstr ""

#: xml/cut-sequence-matcher.xml:370(term)
#: xml/cut-sequence-matcher.xml:392(term)
#: xml/cut-sequence-matcher.xml:418(term)
#: xml/cut-sequence-matcher.xml:432(term)
#: xml/cut-sequence-matcher.xml:446(term)
#: xml/cut-sequence-matcher.xml:460(term)
msgid "<parameter>matcher</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:373(term)
msgid "<parameter>to_content</parameter>&nbsp;:"
msgstr ""

#: xml/cut-sequence-matcher.xml:382(title)
msgid "cut_sequence_matcher_get_longest_match ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:383(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutSequenceMatchInfo\">CutSequenceMatchInfo</link>* cut_sequence_matcher_get_longest_match\n"
"                                                        (<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link> *matcher,\n"
"                                                         <link linkend=\"gint\">gint</link> from_begin,\n"
"                                                         <link linkend=\"gint\">gint</link> from_end,\n"
"                                                         <link linkend=\"gint\">gint</link> to_begin,\n"
"                                                         <link linkend=\"gint\">gint</link> to_end);"
msgstr ""

#: xml/cut-sequence-matcher.xml:413(title)
msgid "cut_sequence_matcher_get_matches ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:414(programlisting)
#, no-wrap
msgid "const <link linkend=\"GList\">GList</link>*        cut_sequence_matcher_get_matches    (<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link> *matcher);"
msgstr ""

#: xml/cut-sequence-matcher.xml:427(title)
msgid "cut_sequence_matcher_get_blocks ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:428(programlisting)
#, no-wrap
msgid "const <link linkend=\"GList\">GList</link>*        cut_sequence_matcher_get_blocks     (<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link> *matcher);"
msgstr ""

#: xml/cut-sequence-matcher.xml:441(title)
msgid "cut_sequence_matcher_get_operations ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:442(programlisting)
#, no-wrap
msgid "const <link linkend=\"GList\">GList</link>*        cut_sequence_matcher_get_operations (<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link> *matcher);"
msgstr ""

#: xml/cut-sequence-matcher.xml:455(title)
msgid "cut_sequence_matcher_get_ratio ()"
msgstr ""

#: xml/cut-sequence-matcher.xml:456(programlisting)
#, no-wrap
msgid "<link linkend=\"gdouble\">gdouble</link>             cut_sequence_matcher_get_ratio      (<link linkend=\"CutSequenceMatcher\">CutSequenceMatcher</link> *matcher);"
msgstr ""

#: xml/cut-stream-factory-builder.xml:7(refentrytitle)
#: xml/cut-stream-factory-builder.xml:13(refname)
#: xml/cut-stream-factory-builder.xml:22(link)
#: xml/cut-stream-factory-builder.xml:44(title)
#: xml/cut-stream-factory-builder.xml:45(primary)
msgid "CutStreamFactoryBuilder"
msgstr ""

#: xml/cut-stream-factory-builder.xml:45(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutFactoryBuilder object;\n"
"} CutStreamFactoryBuilder;\n"
msgstr ""

#: xml/cut-stream-parser.xml:7(refentrytitle)
#: xml/cut-stream-parser.xml:13(refname) xml/cut-stream-parser.xml:22(link)
#: xml/cut-stream-parser.xml:23(link) xml/cut-stream-parser.xml:24(link)
#: xml/cut-stream-parser.xml:25(link) xml/cut-stream-parser.xml:29(link)
#: xml/cut-stream-parser.xml:52(title) xml/cut-stream-parser.xml:53(primary)
msgid "CutStreamParser"
msgstr ""

#: xml/cut-stream-parser.xml:23(link) xml/cut-stream-parser.xml:62(primary)
msgid "cut_stream_parser_new"
msgstr ""

#: xml/cut-stream-parser.xml:24(link) xml/cut-stream-parser.xml:76(primary)
msgid "cut_test_result_parser_new"
msgstr ""

#: xml/cut-stream-parser.xml:25(link) xml/cut-stream-parser.xml:87(primary)
msgid "cut_stream_parser_parse"
msgstr ""

#: xml/cut-stream-parser.xml:27(link) xml/cut-stream-reader.xml:34(link)
msgid "gsize"
msgstr ""

#: xml/cut-stream-parser.xml:29(link) xml/cut-stream-parser.xml:113(primary)
msgid "cut_stream_parser_end_parse"
msgstr ""

#: xml/cut-stream-parser.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*    <placeholder-3/>               (<placeholder-4/> *run_context);\n"
"<placeholder-5/>*    <placeholder-6/>          (void);\n"
"<placeholder-7/>            <placeholder-8/>             (<placeholder-9/> *parser,\n"
"                                                         const <placeholder-10/> *text,\n"
"                                                         <placeholder-11/> text_len,\n"
"                                                         <placeholder-12/> **error);\n"
"<placeholder-13/>            <placeholder-14/>         (<placeholder-15/> *stream_parser,\n"
"                                                         <placeholder-16/> **error);\n"
msgstr ""

#: xml/cut-stream-parser.xml:53(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutStreamParser;\n"
msgstr ""

#: xml/cut-stream-parser.xml:61(title)
msgid "cut_stream_parser_new ()"
msgstr ""

#: xml/cut-stream-parser.xml:62(programlisting)
#, no-wrap
msgid "<link linkend=\"CutStreamParser\">CutStreamParser</link>*    cut_stream_parser_new               (<link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-stream-parser.xml:75(title)
msgid "cut_test_result_parser_new ()"
msgstr ""

#: xml/cut-stream-parser.xml:76(programlisting)
#, no-wrap
msgid "<link linkend=\"CutStreamParser\">CutStreamParser</link>*    cut_test_result_parser_new          (void);"
msgstr ""

#: xml/cut-stream-parser.xml:86(title)
msgid "cut_stream_parser_parse ()"
msgstr ""

#: xml/cut-stream-parser.xml:87(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_stream_parser_parse             (<link linkend=\"CutStreamParser\">CutStreamParser</link> *parser,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *text,\n"
"                                                         <link linkend=\"gsize\">gsize</link> text_len,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/cut-stream-parser.xml:94(term)
msgid "<parameter>parser</parameter>&nbsp;:"
msgstr ""

#: xml/cut-stream-parser.xml:97(term)
msgid "<parameter>text</parameter>&nbsp;:"
msgstr ""

#: xml/cut-stream-parser.xml:100(term)
msgid "<parameter>text_len</parameter>&nbsp;:"
msgstr ""

#: xml/cut-stream-parser.xml:112(title)
msgid "cut_stream_parser_end_parse ()"
msgstr ""

#: xml/cut-stream-parser.xml:113(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_stream_parser_end_parse         (<link linkend=\"CutStreamParser\">CutStreamParser</link> *stream_parser,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/cut-stream-parser.xml:118(term)
msgid "<parameter>stream_parser</parameter>&nbsp;:"
msgstr ""

#: xml/cut-stream-reader.xml:7(refentrytitle)
#: xml/cut-stream-reader.xml:13(refname) xml/cut-stream-reader.xml:23(link)
#: xml/cut-stream-reader.xml:27(link) xml/cut-stream-reader.xml:30(link)
#: xml/cut-stream-reader.xml:32(link) xml/cut-stream-reader.xml:35(link)
#: xml/cut-stream-reader.xml:64(title) xml/cut-stream-reader.xml:65(primary)
msgid "CutStreamReader"
msgstr ""

#: xml/cut-stream-reader.xml:22(link) xml/cut-stream-reader.xml:57(title)
#: xml/cut-stream-reader.xml:58(primary)
msgid "CUT_STREAM_READER_ERROR"
msgstr ""

#: xml/cut-stream-reader.xml:24(link) xml/cut-stream-reader.xml:74(primary)
msgid "CutStreamReaderError"
msgstr ""

#: xml/cut-stream-reader.xml:25(link) xml/cut-stream-reader.xml:87(primary)
msgid "cut_stream_reader_error_quark"
msgstr ""

#: xml/cut-stream-reader.xml:26(link) xml/cut-stream-reader.xml:98(primary)
msgid "cut_stream_reader_new"
msgstr ""

#: xml/cut-stream-reader.xml:27(link) xml/cut-stream-reader.xml:109(primary)
msgid "cut_stream_reader_watch_io_channel"
msgstr ""

#: xml/cut-stream-reader.xml:28(link) xml/cut-stream-reader.xml:31(link)
msgid "GIOChannel"
msgstr ""

#: xml/cut-stream-reader.xml:29(link) xml/cut-stream-reader.xml:127(primary)
msgid "cut_stream_reader_read_from_io_channel"
msgstr ""

#: xml/cut-stream-reader.xml:32(link) xml/cut-stream-reader.xml:146(primary)
msgid "cut_stream_reader_read"
msgstr ""

#: xml/cut-stream-reader.xml:35(link) xml/cut-stream-reader.xml:168(primary)
msgid "cut_stream_reader_end_read"
msgstr ""

#: xml/cut-stream-reader.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
"                    <placeholder-2/>;\n"
"enum                <placeholder-3/>;\n"
"<placeholder-4/>              <placeholder-5/>       (void);\n"
"<placeholder-6/>*      <placeholder-7/>               (void);\n"
"<placeholder-8/>               <placeholder-9/>  (<placeholder-10/> *stream_reader,\n"
"                                                         <placeholder-11/> *channel);\n"
"<placeholder-12/>            <placeholder-13/>\n"
"                                                        (<placeholder-14/> *stream_reader,\n"
"                                                         <placeholder-15/> *channel);\n"
"<placeholder-16/>            <placeholder-17/>              (<placeholder-18/> *stream_reader,\n"
"                                                         const <placeholder-19/> *stream,\n"
"                                                         <placeholder-20/> length);\n"
"<placeholder-21/>            <placeholder-22/>          (<placeholder-23/> *stream_reader);\n"
msgstr ""

#: xml/cut-stream-reader.xml:58(programlisting)
#, no-wrap
msgid "#define CUT_STREAM_READER_ERROR           (cut_stream_reader_error_quark())\n"
msgstr ""

#: xml/cut-stream-reader.xml:65(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutRunContext object;\n"
"} CutStreamReader;\n"
msgstr ""

#: xml/cut-stream-reader.xml:73(title)
msgid "enum CutStreamReaderError"
msgstr ""

#: xml/cut-stream-reader.xml:74(programlisting)
#, no-wrap
msgid ""
"typedef enum\n"
"{\n"
"    CUT_STREAM_READER_ERROR_READ,\n"
"    CUT_STREAM_READER_ERROR_PARSE,\n"
"    CUT_STREAM_READER_ERROR_END_PARSE,\n"
"    CUT_STREAM_READER_ERROR_IO_ERROR\n"
"} CutStreamReaderError;\n"
msgstr ""

#: xml/cut-stream-reader.xml:86(title)
msgid "cut_stream_reader_error_quark ()"
msgstr ""

#: xml/cut-stream-reader.xml:87(programlisting)
#, no-wrap
msgid "<link linkend=\"GQuark\">GQuark</link>              cut_stream_reader_error_quark       (void);"
msgstr ""

#: xml/cut-stream-reader.xml:97(title)
msgid "cut_stream_reader_new ()"
msgstr ""

#: xml/cut-stream-reader.xml:98(programlisting)
#, no-wrap
msgid "<link linkend=\"CutRunContext\">CutRunContext</link>*      cut_stream_reader_new               (void);"
msgstr ""

#: xml/cut-stream-reader.xml:108(title)
msgid "cut_stream_reader_watch_io_channel ()"
msgstr ""

#: xml/cut-stream-reader.xml:109(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"guint\">guint</link>               cut_stream_reader_watch_io_channel  (<link linkend=\"CutStreamReader\">CutStreamReader</link> *stream_reader,\n"
"                                                         <link linkend=\"GIOChannel\">GIOChannel</link> *channel);"
msgstr ""

#: xml/cut-stream-reader.xml:114(term) xml/cut-stream-reader.xml:133(term)
#: xml/cut-stream-reader.xml:152(term) xml/cut-stream-reader.xml:172(term)
msgid "<parameter>stream_reader</parameter>&nbsp;:"
msgstr ""

#: xml/cut-stream-reader.xml:117(term) xml/cut-stream-reader.xml:136(term)
msgid "<parameter>channel</parameter>&nbsp;:"
msgstr ""

#: xml/cut-stream-reader.xml:126(title)
msgid "cut_stream_reader_read_from_io_channel ()"
msgstr ""

#: xml/cut-stream-reader.xml:127(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_stream_reader_read_from_io_channel\n"
"                                                        (<link linkend=\"CutStreamReader\">CutStreamReader</link> *stream_reader,\n"
"                                                         <link linkend=\"GIOChannel\">GIOChannel</link> *channel);"
msgstr ""

#: xml/cut-stream-reader.xml:145(title)
msgid "cut_stream_reader_read ()"
msgstr ""

#: xml/cut-stream-reader.xml:146(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_stream_reader_read              (<link linkend=\"CutStreamReader\">CutStreamReader</link> *stream_reader,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *stream,\n"
"                                                         <link linkend=\"gsize\">gsize</link> length);"
msgstr ""

#: xml/cut-stream-reader.xml:155(term)
msgid "<parameter>stream</parameter>&nbsp;:"
msgstr ""

#: xml/cut-stream-reader.xml:158(term)
msgid "<parameter>length</parameter>&nbsp;:"
msgstr ""

#: xml/cut-stream-reader.xml:167(title)
msgid "cut_stream_reader_end_read ()"
msgstr ""

#: xml/cut-stream-reader.xml:168(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_stream_reader_end_read          (<link linkend=\"CutStreamReader\">CutStreamReader</link> *stream_reader);"
msgstr ""

#: xml/cut-stream.xml:7(refentrytitle) xml/cut-stream.xml:13(refname)
#: xml/cut-stream.xml:25(link) xml/cut-stream.xml:26(link)
#: xml/cut-stream.xml:72(title) xml/cut-stream.xml:73(primary)
msgid "CutStream"
msgstr ""

#: xml/cut-stream.xml:22(link)
msgid "*CutStreamFunction"
msgstr ""

#: xml/cut-stream.xml:26(link) xml/cut-stream.xml:82(primary)
msgid "cut_stream_new"
msgstr ""

#: xml/cut-stream.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            (<placeholder-2/>)                (const <placeholder-3/> *message,\n"
"                                                         <placeholder-4/> **error,\n"
"                                                         <placeholder-5/> user_data);\n"
"                    <placeholder-6/>;\n"
"<placeholder-7/>*          <placeholder-8/>                      (const <placeholder-9/> *name,\n"
"                                                         const <placeholder-10/> *first_property,\n"
"                                                         ...);\n"
msgstr ""

#: xml/cut-stream.xml:50(title)
msgid "CutStreamFunction ()"
msgstr ""

#: xml/cut-stream.xml:51(primary)
msgid "CutStreamFunction"
msgstr ""

#: xml/cut-stream.xml:51(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            (*CutStreamFunction)                (const <link linkend=\"gchar\">gchar</link> *message,\n"
"                                                         <link linkend=\"GError\">GError</link> **error,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/cut-stream.xml:57(term) xml/cut-test-utils-helper.xml:139(term)
#: xml/cut-test-utils.xml:217(term) xml/cuttest-assertions.xml:166(term)
#: xml/cuttest-assertions.xml:290(term)
msgid "<parameter>message</parameter>&nbsp;:"
msgstr ""

#: xml/cut-stream.xml:73(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutStream;\n"
msgstr ""

#: xml/cut-stream.xml:81(title)
msgid "cut_stream_new ()"
msgstr ""

#: xml/cut-stream.xml:82(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutStream\">CutStream</link>*          cut_stream_new                      (const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-test-data.xml:23(link) xml/cut-test-data.xml:69(primary)
msgid "cut_test_data_new"
msgstr ""

#: xml/cut-test-data.xml:25(link) xml/cut-test-data.xml:33(link)
#: xml/cut-types.xml:48(primary) xml/gcut-public.xml:28(link)
msgid "CutDestroyFunction"
msgstr ""

#: xml/cut-test-data.xml:26(link) xml/cut-test-data.xml:91(primary)
msgid "cut_test_data_new_empty"
msgstr ""

#: xml/cut-test-data.xml:27(link) xml/cut-test-data.xml:102(primary)
msgid "cut_test_data_get_name"
msgstr ""

#: xml/cut-test-data.xml:28(link) xml/cut-test-data.xml:116(primary)
msgid "cut_test_data_set_name"
msgstr ""

#: xml/cut-test-data.xml:30(link) xml/cut-test-data.xml:132(primary)
msgid "cut_test_data_get_value"
msgstr ""

#: xml/cut-test-data.xml:31(link) xml/cut-test-data.xml:146(primary)
msgid "cut_test_data_set_value"
msgstr ""

#: xml/cut-test-data.xml:34(link) xml/cut-test-data.xml:166(primary)
msgid "cut_test_data_to_xml"
msgstr ""

#: xml/cut-test-data.xml:35(link) xml/cut-test-data.xml:180(primary)
msgid "cut_test_data_to_xml_string"
msgstr ""

#: xml/cut-test-data.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*        <placeholder-3/>                   (const <placeholder-4/> *name,\n"
"                                                         <placeholder-5/> value,\n"
"                                                         <placeholder-6/> destroy_function);\n"
"<placeholder-7/>*        <placeholder-8/>             (void);\n"
"const <placeholder-9/>*        <placeholder-10/>              (<placeholder-11/> *test_data);\n"
"<placeholder-12/>                <placeholder-13/>              (<placeholder-14/> *test_data,\n"
"                                                         const <placeholder-15/> *name_data);\n"
"<placeholder-16/>            <placeholder-17/>             (<placeholder-18/> *test_data);\n"
"<placeholder-19/>                <placeholder-20/>             (<placeholder-21/> *test_data,\n"
"                                                         <placeholder-22/> value,\n"
"                                                         <placeholder-23/> destroy_function);\n"
"<placeholder-24/>*              <placeholder-25/>                (<placeholder-26/> *test_data);\n"
"<placeholder-27/>                <placeholder-28/>         (<placeholder-29/> *test_data,\n"
"                                                         <placeholder-30/> *string,\n"
"                                                         <placeholder-31/> indent);\n"
msgstr ""

#: xml/cut-test-data.xml:60(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutTestData;\n"
msgstr ""

#: xml/cut-test-data.xml:68(title)
msgid "cut_test_data_new ()"
msgstr ""

#: xml/cut-test-data.xml:69(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutTestData\">CutTestData</link>*        cut_test_data_new                   (const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> value,\n"
"                                                         <link linkend=\"CutDestroyFunction\">CutDestroyFunction</link> destroy_function);"
msgstr ""

#: xml/cut-test-data.xml:78(term) xml/cut-test-data.xml:155(term)
#: xml/gcut-test-utils.xml:132(term) xml/gcut-test-utils.xml:153(term)
#: xml/stack.xml:117(term)
msgid "<parameter>value</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-data.xml:81(term) xml/cut-test-data.xml:158(term)
#: xml/cut-test-utils-helper.xml:61(term) xml/cut-test-utils.xml:79(term)
#: xml/gcut-test-utils.xml:103(term)
msgid "<parameter>destroy_function</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-data.xml:90(title)
msgid "cut_test_data_new_empty ()"
msgstr ""

#: xml/cut-test-data.xml:91(programlisting)
#, no-wrap
msgid "<link linkend=\"CutTestData\">CutTestData</link>*        cut_test_data_new_empty             (void);"
msgstr ""

#: xml/cut-test-data.xml:101(title)
msgid "cut_test_data_get_name ()"
msgstr ""

#: xml/cut-test-data.xml:102(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_test_data_get_name              (<link linkend=\"CutTestData\">CutTestData</link> *test_data);"
msgstr ""

#: xml/cut-test-data.xml:106(term) xml/cut-test-data.xml:121(term)
#: xml/cut-test-data.xml:136(term) xml/cut-test-data.xml:152(term)
#: xml/cut-test-data.xml:170(term) xml/cut-test-data.xml:186(term)
msgid "<parameter>test_data</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-data.xml:115(title)
msgid "cut_test_data_set_name ()"
msgstr ""

#: xml/cut-test-data.xml:116(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_test_data_set_name              (<link linkend=\"CutTestData\">CutTestData</link> *test_data,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name_data);"
msgstr ""

#: xml/cut-test-data.xml:124(term)
msgid "<parameter>name_data</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-data.xml:131(title)
msgid "cut_test_data_get_value ()"
msgstr ""

#: xml/cut-test-data.xml:132(programlisting)
#, no-wrap
msgid "<link linkend=\"gpointer\">gpointer</link>            cut_test_data_get_value             (<link linkend=\"CutTestData\">CutTestData</link> *test_data);"
msgstr ""

#: xml/cut-test-data.xml:145(title)
msgid "cut_test_data_set_value ()"
msgstr ""

#: xml/cut-test-data.xml:146(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_test_data_set_value             (<link linkend=\"CutTestData\">CutTestData</link> *test_data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> value,\n"
"                                                         <link linkend=\"CutDestroyFunction\">CutDestroyFunction</link> destroy_function);"
msgstr ""

#: xml/cut-test-data.xml:165(title)
msgid "cut_test_data_to_xml ()"
msgstr ""

#: xml/cut-test-data.xml:166(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_test_data_to_xml                (<link linkend=\"CutTestData\">CutTestData</link> *test_data);"
msgstr ""

#: xml/cut-test-data.xml:179(title)
msgid "cut_test_data_to_xml_string ()"
msgstr ""

#: xml/cut-test-data.xml:180(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_test_data_to_xml_string         (<link linkend=\"CutTestData\">CutTestData</link> *test_data,\n"
"                                                         <link linkend=\"GString\">GString</link> *string,\n"
"                                                         <link linkend=\"guint\">guint</link> indent);"
msgstr ""

#: xml/cut-test-iterator.xml:7(refentrytitle)
#: xml/cut-test-iterator.xml:13(refname) xml/cut-test-iterator.xml:23(link)
#: xml/cut-test-iterator.xml:24(link) xml/cut-test-iterator.xml:27(link)
#: xml/cut-test-iterator.xml:28(link) xml/cut-test-iterator.xml:58(primary)
#: xml/cut-test-runner.xml:30(link)
msgid "CutTestIterator"
msgstr ""

#: xml/cut-test-iterator.xml:22(link)
msgid "*CutDataSetupFunction"
msgstr ""

#: xml/cut-test-iterator.xml:24(link) xml/cut-test-iterator.xml:67(primary)
msgid "cut_test_iterator_new"
msgstr ""

#: xml/cut-test-iterator.xml:26(link) xml/cut-test-iterator.xml:52(primary)
msgid "CutDataSetupFunction"
msgstr ""

#: xml/cut-test-iterator.xml:27(link) xml/cut-test-iterator.xml:89(primary)
msgid "cut_test_iterator_new_empty"
msgstr ""

#: xml/cut-test-iterator.xml:28(link) xml/cut-test-iterator.xml:100(primary)
msgid "cut_test_iterator_add_test"
msgstr ""

#: xml/cut-test-iterator.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                (<placeholder-2/>)             (void);\n"
"struct              <placeholder-3/>;\n"
"<placeholder-4/>*    <placeholder-5/>               (const <placeholder-6/> *name,\n"
"                                                         <placeholder-7/> function,\n"
"                                                         <placeholder-8/> data_setup_function);\n"
"<placeholder-9/>*    <placeholder-10/>         (void);\n"
"<placeholder-11/>                <placeholder-12/>          (<placeholder-13/> *test_iterator,\n"
"                                                         <placeholder-14/> *test);\n"
msgstr ""

#: xml/cut-test-iterator.xml:51(title)
msgid "CutDataSetupFunction ()"
msgstr ""

#: xml/cut-test-iterator.xml:52(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                (*CutDataSetupFunction)             (void);"
msgstr ""

#: xml/cut-test-iterator.xml:57(title)
msgid "struct CutTestIterator"
msgstr ""

#: xml/cut-test-iterator.xml:58(programlisting)
#, no-wrap
msgid ""
"struct CutTestIterator {\n"
"    CutTestContainer object;\n"
"};\n"
msgstr ""

#: xml/cut-test-iterator.xml:66(title)
msgid "cut_test_iterator_new ()"
msgstr ""

#: xml/cut-test-iterator.xml:67(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutTestIterator\">CutTestIterator</link>*    cut_test_iterator_new               (const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         <link linkend=\"CutIteratedTestFunction\">CutIteratedTestFunction</link> function,\n"
"                                                         <link linkend=\"CutDataSetupFunction\">CutDataSetupFunction</link> data_setup_function);"
msgstr ""

#: xml/cut-test-iterator.xml:79(term)
msgid "<parameter>data_setup_function</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-iterator.xml:88(title)
msgid "cut_test_iterator_new_empty ()"
msgstr ""

#: xml/cut-test-iterator.xml:89(programlisting)
#, no-wrap
msgid "<link linkend=\"CutTestIterator\">CutTestIterator</link>*    cut_test_iterator_new_empty         (void);"
msgstr ""

#: xml/cut-test-iterator.xml:99(title)
msgid "cut_test_iterator_add_test ()"
msgstr ""

#: xml/cut-test-iterator.xml:100(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_test_iterator_add_test          (<link linkend=\"CutTestIterator\">CutTestIterator</link> *test_iterator,\n"
"                                                         <link linkend=\"CutIteratedTest\">CutIteratedTest</link> *test);"
msgstr ""

#: xml/cut-test-iterator.xml:105(term) xml/cut-test-runner.xml:125(term)
msgid "<parameter>test_iterator</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-runner.xml:7(refentrytitle)
#: xml/cut-test-runner.xml:13(refname) xml/cut-test-runner.xml:22(link)
#: xml/cut-test-runner.xml:24(link) xml/cut-test-runner.xml:27(link)
#: xml/cut-test-runner.xml:29(link) xml/cut-test-runner.xml:32(link)
#: xml/cut-test-runner.xml:56(primary)
msgid "CutTestRunner"
msgstr ""

#: xml/cut-test-runner.xml:23(link) xml/cut-test-runner.xml:65(primary)
msgid "cut_test_runner_new"
msgstr ""

#: xml/cut-test-runner.xml:24(link) xml/cut-test-runner.xml:76(primary)
msgid "cut_test_runner_run_test"
msgstr ""

#: xml/cut-test-runner.xml:25(link)
msgid "CutTest"
msgstr ""

#: xml/cut-test-runner.xml:26(link) xml/cut-test-runner.xml:31(link)
#: xml/gcut-assertions-helper.xml:22(link)
#: xml/gcut-assertions-helper.xml:29(link)
#: xml/gcut-assertions-helper.xml:36(link)
#: xml/gcut-assertions-helper.xml:43(link)
#: xml/gcut-assertions-helper.xml:51(link)
#: xml/gcut-assertions-helper.xml:58(link)
#: xml/gcut-assertions-helper.xml:67(link)
#: xml/gcut-assertions-helper.xml:77(link)
#: xml/gcut-assertions-helper.xml:86(link)
#: xml/gcut-assertions-helper.xml:93(link)
#: xml/gcut-assertions-helper.xml:98(link)
#: xml/gcut-assertions-helper.xml:105(link)
#: xml/gcut-assertions-helper.xml:114(link)
#: xml/gcut-assertions-helper.xml:123(link)
#: xml/gcut-assertions-helper.xml:132(link)
#: xml/gcut-assertions-helper.xml:139(link) xml/gcut-public.xml:22(link)
#: xml/gcut-public.xml:24(link) xml/gcut-public.xml:26(link)
#: xml/gcut-public.xml:29(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:22(link)
msgid "CutTestContext"
msgstr ""

#: xml/cut-test-runner.xml:27(link) xml/cut-test-runner.xml:98(primary)
msgid "cut_test_runner_run_test_case"
msgstr ""

#: xml/cut-test-runner.xml:28(link) xml/cuttest-utils.xml:26(link)
msgid "CutTestCase"
msgstr ""

#: xml/cut-test-runner.xml:29(link) xml/cut-test-runner.xml:116(primary)
msgid "cut_test_runner_run_test_iterator"
msgstr ""

#: xml/cut-test-runner.xml:32(link) xml/cut-test-runner.xml:138(primary)
msgid "cut_test_runner_run_test_suite"
msgstr ""

#: xml/cut-test-runner.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"struct              <placeholder-1/>;\n"
"<placeholder-2/>*      <placeholder-3/>                 (void);\n"
"<placeholder-4/>            <placeholder-5/>            (<placeholder-6/> *runner,\n"
"                                                         <placeholder-7/> *test,\n"
"                                                         <placeholder-8/> *test_context);\n"
"<placeholder-9/>            <placeholder-10/>       (<placeholder-11/> *runner,\n"
"                                                         <placeholder-12/> *test_case);\n"
"<placeholder-13/>            <placeholder-14/>   (<placeholder-15/> *runner,\n"
"                                                         <placeholder-16/> *test_iterator,\n"
"                                                         <placeholder-17/> *test_context);\n"
"<placeholder-18/>            <placeholder-19/>      (<placeholder-20/> *runner,\n"
"                                                         <placeholder-21/> *test_suite);\n"
msgstr ""

#: xml/cut-test-runner.xml:55(title)
msgid "struct CutTestRunner"
msgstr ""

#: xml/cut-test-runner.xml:56(programlisting)
#, no-wrap
msgid ""
"struct CutTestRunner {\n"
"    CutRunContext object;\n"
"};\n"
msgstr ""

#: xml/cut-test-runner.xml:64(title)
msgid "cut_test_runner_new ()"
msgstr ""

#: xml/cut-test-runner.xml:65(programlisting)
#, no-wrap
msgid "<link linkend=\"CutRunContext\">CutRunContext</link>*      cut_test_runner_new                 (void);"
msgstr ""

#: xml/cut-test-runner.xml:75(title)
msgid "cut_test_runner_run_test ()"
msgstr ""

#: xml/cut-test-runner.xml:76(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_test_runner_run_test            (<link linkend=\"CutTestRunner\">CutTestRunner</link> *runner,\n"
"                                                         <link linkend=\"CutTest\">CutTest</link> *test,\n"
"                                                         <link linkend=\"CutTestContext\">CutTestContext</link> *test_context);"
msgstr ""

#: xml/cut-test-runner.xml:88(term) xml/cut-test-runner.xml:128(term)
#: xml/cut-test-utils-helper.xml:55(term)
#: xml/cut-test-utils-helper.xml:73(term)
#: xml/cut-test-utils-helper.xml:88(term)
#: xml/cut-test-utils-helper.xml:103(term)
#: xml/cut-test-utils-helper.xml:118(term)
#: xml/cut-test-utils-helper.xml:136(term)
#: xml/cut-test-utils-helper.xml:157(term) xml/cutter.xml:365(term)
#: xml/gcut-assertions-helper.xml:178(term)
#: xml/gcut-assertions-helper.xml:214(term)
#: xml/gcut-assertions-helper.xml:250(term)
#: xml/gcut-assertions-helper.xml:286(term)
#: xml/gcut-assertions-helper.xml:323(term)
#: xml/gcut-assertions-helper.xml:361(term)
#: xml/gcut-assertions-helper.xml:405(term)
#: xml/gcut-assertions-helper.xml:449(term)
#: xml/gcut-assertions-helper.xml:489(term)
#: xml/gcut-assertions-helper.xml:523(term)
#: xml/gcut-assertions-helper.xml:553(term)
#: xml/gcut-assertions-helper.xml:591(term)
#: xml/gcut-assertions-helper.xml:635(term)
#: xml/gcut-assertions-helper.xml:679(term)
#: xml/gcut-assertions-helper.xml:721(term)
#: xml/gcut-assertions-helper.xml:757(term)
#: xml/gdkcut-pixbuf-assertions-helper.xml:65(term)
msgid "<parameter>test_context</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-runner.xml:97(title)
msgid "cut_test_runner_run_test_case ()"
msgstr ""

#: xml/cut-test-runner.xml:98(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_test_runner_run_test_case       (<link linkend=\"CutTestRunner\">CutTestRunner</link> *runner,\n"
"                                                         <link linkend=\"CutTestCase\">CutTestCase</link> *test_case);"
msgstr ""

#: xml/cut-test-runner.xml:106(term) xml/cuttest-utils.xml:88(term)
msgid "<parameter>test_case</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-runner.xml:115(title)
msgid "cut_test_runner_run_test_iterator ()"
msgstr ""

#: xml/cut-test-runner.xml:116(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_test_runner_run_test_iterator   (<link linkend=\"CutTestRunner\">CutTestRunner</link> *runner,\n"
"                                                         <link linkend=\"CutTestIterator\">CutTestIterator</link> *test_iterator,\n"
"                                                         <link linkend=\"CutTestContext\">CutTestContext</link> *test_context);"
msgstr ""

#: xml/cut-test-runner.xml:137(title)
msgid "cut_test_runner_run_test_suite ()"
msgstr ""

#: xml/cut-test-runner.xml:138(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_test_runner_run_test_suite      (<link linkend=\"CutTestRunner\">CutTestRunner</link> *runner,\n"
"                                                         <link linkend=\"CutTestSuite\">CutTestSuite</link> *test_suite);"
msgstr ""

#: xml/cut-test-runner.xml:146(term)
msgid "<parameter>test_suite</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-utils-helper.xml:7(refentrytitle)
#: xml/cut-test-utils-helper.xml:13(refname)
msgid "cut-test-utils-helper"
msgstr ""

#: xml/cut-test-utils-helper.xml:22(link)
#: xml/cut-test-utils-helper.xml:51(primary)
msgid "cut_take_helper"
msgstr ""

#: xml/cut-test-utils-helper.xml:23(link)
#: xml/cut-test-utils-helper.xml:69(primary)
msgid "cut_take_memory_helper"
msgstr ""

#: xml/cut-test-utils-helper.xml:24(link)
#: xml/cut-test-utils-helper.xml:84(primary)
msgid "cut_take_string_helper"
msgstr ""

#: xml/cut-test-utils-helper.xml:25(link)
#: xml/cut-test-utils-helper.xml:99(primary)
msgid "cut_take_strdup_helper"
msgstr ""

#: xml/cut-test-utils-helper.xml:26(link)
#: xml/cut-test-utils-helper.xml:114(primary)
msgid "cut_take_printf_helper"
msgstr ""

#: xml/cut-test-utils-helper.xml:27(link)
#: xml/cut-test-utils-helper.xml:132(primary)
msgid "cut_append_diff_helper"
msgstr ""

#: xml/cut-test-utils-helper.xml:28(link)
#: xml/cut-test-utils-helper.xml:153(primary)
msgid "cut_inspect_string_array_helper"
msgstr ""

#: xml/cut-test-utils-helper.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>                     (test_context, string, destroy_function)\n"
"#define             <placeholder-2/>              (test_context, object)\n"
"#define             <placeholder-3/>              (test_context, string)\n"
"#define             <placeholder-4/>              (test_context, string)\n"
"#define             <placeholder-5/>              (test_context, format, ...)\n"
"#define             <placeholder-6/>              (test_context, message, from, to)\n"
"#define             <placeholder-7/>     (test_context, strings)\n"
msgstr ""

#: xml/cut-test-utils-helper.xml:50(title)
msgid "cut_take_helper()"
msgstr ""

#: xml/cut-test-utils-helper.xml:51(programlisting)
#, no-wrap
msgid "#define             cut_take_helper(test_context, string, destroy_function)"
msgstr ""

#: xml/cut-test-utils-helper.xml:68(title)
msgid "cut_take_memory_helper()"
msgstr ""

#: xml/cut-test-utils-helper.xml:69(programlisting)
#, no-wrap
msgid "#define             cut_take_memory_helper(test_context, object)"
msgstr ""

#: xml/cut-test-utils-helper.xml:76(term) xml/cut-test-utils.xml:76(term)
#: xml/gcut-object.xml:94(term) xml/gcut-object.xml:110(term)
#: xml/gcut-public.xml:61(term) xml/gcut-test-utils.xml:72(term)
msgid "<parameter>object</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-utils-helper.xml:83(title)
msgid "cut_take_string_helper()"
msgstr ""

#: xml/cut-test-utils-helper.xml:84(programlisting)
#, no-wrap
msgid "#define             cut_take_string_helper(test_context, string)"
msgstr ""

#: xml/cut-test-utils-helper.xml:98(title)
msgid "cut_take_strdup_helper()"
msgstr ""

#: xml/cut-test-utils-helper.xml:99(programlisting)
#, no-wrap
msgid "#define             cut_take_strdup_helper(test_context, string)"
msgstr ""

#: xml/cut-test-utils-helper.xml:113(title)
msgid "cut_take_printf_helper()"
msgstr ""

#: xml/cut-test-utils-helper.xml:114(programlisting)
#, no-wrap
msgid "#define             cut_take_printf_helper(test_context, format, ...)"
msgstr ""

#: xml/cut-test-utils-helper.xml:131(title)
msgid "cut_append_diff_helper()"
msgstr ""

#: xml/cut-test-utils-helper.xml:132(programlisting)
#, no-wrap
msgid "#define             cut_append_diff_helper(test_context, message, from, to)"
msgstr ""

#: xml/cut-test-utils-helper.xml:152(title)
msgid "cut_inspect_string_array_helper()"
msgstr ""

#: xml/cut-test-utils-helper.xml:153(programlisting)
#, no-wrap
msgid "#define             cut_inspect_string_array_helper(test_context, strings)"
msgstr ""

#: xml/cut-test-utils-helper.xml:160(term) xml/cut-test-utils.xml:189(term)
#: xml/cut-test-utils.xml:236(term)
msgid "<parameter>strings</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-utils.xml:7(refentrytitle) xml/cut-test-utils.xml:13(refname)
msgid "Test Utilities"
msgstr "テストユーティリティ"

#: xml/cut-test-utils.xml:14(refpurpose)
msgid "Utilities to write tests more easily."
msgstr "テストをもっと簡単に書くためのユーティリティ。"

#: xml/cut-test-utils.xml:22(link) xml/cut-test-utils.xml:69(primary)
msgid "cut_take"
msgstr ""

#: xml/cut-test-utils.xml:23(link) xml/cut-test-utils.xml:86(primary)
msgid "cut_take_memory"
msgstr ""

#: xml/cut-test-utils.xml:24(link) xml/cut-test-utils.xml:100(primary)
msgid "cut_take_string"
msgstr ""

#: xml/cut-test-utils.xml:25(link) xml/cut-test-utils.xml:113(primary)
msgid "cut_take_strdup"
msgstr ""

#: xml/cut-test-utils.xml:26(link) xml/cut-test-utils.xml:128(primary)
msgid "cut_take_strndup"
msgstr ""

#: xml/cut-test-utils.xml:27(link) xml/cut-test-utils.xml:147(primary)
msgid "cut_take_memdup"
msgstr ""

#: xml/cut-test-utils.xml:28(link) xml/cut-test-utils.xml:165(primary)
msgid "cut_take_printf"
msgstr ""

#: xml/cut-test-utils.xml:29(link) xml/cut-test-utils.xml:181(primary)
msgid "cut_take_string_array"
msgstr ""

#: xml/cut-test-utils.xml:30(link) xml/cut-test-utils.xml:195(primary)
msgid "cut_take_diff"
msgstr ""

#: xml/cut-test-utils.xml:31(link) xml/cut-test-utils.xml:210(primary)
msgid "cut_append_diff"
msgstr ""

#: xml/cut-test-utils.xml:32(link) xml/cut-test-utils.xml:230(primary)
msgid "cut_inspect_string_array"
msgstr ""

#: xml/cut-test-utils.xml:33(link) xml/cut-test-utils.xml:242(primary)
msgid "cut_set_fixture_data_dir"
msgstr ""

#: xml/cut-test-utils.xml:34(link) xml/cut-test-utils.xml:259(primary)
msgid "cut_build_fixture_data_path"
msgstr ""

#: xml/cut-test-utils.xml:35(link) xml/cut-test-utils.xml:278(primary)
msgid "cut_get_fixture_data_string"
msgstr ""

#: xml/cut-test-utils.xml:36(link) xml/cut-test-utils.xml:297(primary)
msgid "cut_remove_path"
msgstr ""

#: xml/cut-test-utils.xml:37(link) xml/cut-test-utils.xml:314(primary)
msgid "cut_equal_string"
msgstr ""

#: xml/cut-test-utils.xml:38(link) xml/cut-test-utils.xml:331(primary)
msgid "cut_equal_double"
msgstr ""

#: xml/cut-test-utils.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>                            (object, destroy_function)\n"
"#define             <placeholder-2/>                     (memory)\n"
"#define             <placeholder-3/>                     (string)\n"
"#define             <placeholder-4/>                     (string)\n"
"#define             <placeholder-5/>                    (string, size)\n"
"#define             <placeholder-6/>                     (memory, size)\n"
"#define             <placeholder-7/>                     (format, ...)\n"
"#define             <placeholder-8/>               (strings)\n"
"#define             <placeholder-9/>                       (from, to)\n"
"#define             <placeholder-10/>                     (message, from, to)\n"
"#define             <placeholder-11/>            (strings)\n"
"#define             <placeholder-12/>            (path, ...)\n"
"#define             <placeholder-13/>         (path, ...)\n"
"#define             <placeholder-14/>         (path, ...)\n"
"#define             <placeholder-15/>                     (path, ...)\n"
"#define             <placeholder-16/>                    (string1, string2)\n"
"#define             <placeholder-17/>                    (double1, double2, error)\n"
msgstr ""

#: xml/cut-test-utils.xml:52(para) xml/gcut-test-utils.xml:49(para)
msgid ""
"To write tests, you need to write codes that set up/tear down test "
"environment, prepare expected and actual values and so on. Cutter provides "
"test utilities to you write your tests more easily."
msgstr ""
"テストを書くためには、テスト環境を前処理・後処理するコードや、検証する結果を"
"準備するコードなどたくさんのコードを書く必要があります。Cutterはもっと簡単に"
"テストを書くためにユーティリティを提供します。"

#: xml/cut-test-utils.xml:58(para)
msgid "The utilities work without GLib support."
msgstr "このユーティリティはGLibサポート無しでも使えます。"

#: xml/cut-test-utils.xml:68(title)
msgid "cut_take()"
msgstr ""

#: xml/cut-test-utils.xml:69(programlisting)
#, no-wrap
msgid "#define             cut_take(object, destroy_function)"
msgstr ""

#: xml/cut-test-utils.xml:70(para)
msgid ""
"Passes ownership of the object to Cutter and returns the object itself. "
"<parameter>object</parameter> is destroyed by <parameter>destroy_func</"
"parameter>."
msgstr ""
"オブジェクトの所有権をCutterに渡し、オブジェクト自身を返します。"
"<parameter>object</parameter>は<parameter>destroy_func</parameter>を用いて破"
"棄されます。"

#: xml/cut-test-utils.xml:77(simpara)
msgid "the object to be owned by Cutter."
msgstr "Cutterが所有権をもつことになるオブジェクト。"

#: xml/cut-test-utils.xml:80(simpara)
msgid "the destroy function for the object."
msgstr "オブジェクト用の破棄関数。"

#: xml/cut-test-utils.xml:85(title)
msgid "cut_take_memory()"
msgstr ""

#: xml/cut-test-utils.xml:86(programlisting)
#, no-wrap
msgid "#define             cut_take_memory(memory)"
msgstr ""

#: xml/cut-test-utils.xml:87(para)
msgid ""
"Passes ownership of the memory to Cutter and returns the memory itself. "
"<parameter>memory</parameter> is destroyed by <link linkend=\"free"
"\"><function>free()</function></link>."
msgstr ""
"メモリの所有権をCutterに渡し、メモリ自身を返します。<parameter>memory</"
"parameter>は<link linkend=\"free\"><function>free()</function></link>で破棄さ"
"れます。"

#: xml/cut-test-utils.xml:93(term) xml/cut-test-utils.xml:155(term)
msgid "<parameter>memory</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-utils.xml:94(simpara)
msgid "the memory to be owned by Cutter. (void *)"
msgstr "Cutterが所有権を持つことになるメモリ。（void *）"

#: xml/cut-test-utils.xml:99(title)
msgid "cut_take_string()"
msgstr ""

#: xml/cut-test-utils.xml:100(programlisting)
#, no-wrap
msgid "#define             cut_take_string(string)"
msgstr ""

#: xml/cut-test-utils.xml:101(para)
msgid "Passes ownership of the string to Cutter and returns the string itself."
msgstr "文字列の所有権をCutterに渡し、文字列それ自身を返します。"

#: xml/cut-test-utils.xml:108(simpara)
msgid "the string to be owned by Cutter."
msgstr "Cutterが所有権も持つことになる文字列。"

#: xml/cut-test-utils.xml:112(title)
msgid "cut_take_strdup()"
msgstr ""

#: xml/cut-test-utils.xml:113(programlisting)
#, no-wrap
msgid "#define             cut_take_strdup(string)"
msgstr ""

#: xml/cut-test-utils.xml:114(para)
msgid ""
"Duplicates the string, passes ownership of the duplicated string to Cutter "
"and returns the duplicated string."
msgstr ""

#: xml/cut-test-utils.xml:122(simpara) xml/cut-test-utils.xml:138(simpara)
msgid "the string to be duplicated. (const char *)"
msgstr "複製される文字列。（const char *）"

#: xml/cut-test-utils.xml:127(title)
msgid "cut_take_strndup()"
msgstr ""

#: xml/cut-test-utils.xml:128(programlisting)
#, no-wrap
msgid "#define             cut_take_strndup(string, size)"
msgstr ""

#: xml/cut-test-utils.xml:129(para)
msgid ""
"Duplicates the first <parameter>size</parameter> bytes of the string, passes "
"ownership of the duplicated string to Cutter and returns the duplicated "
"string. The duplicated string is always nul-terminated."
msgstr ""
"文字列の先頭<parameter>size</parameter>バイトを複製し、その所有権ををCutterに"
"渡し、複製された文字列を返します。複製された文字列は常にNULL終端しています。"

#: xml/cut-test-utils.xml:141(simpara) xml/cut-test-utils.xml:159(simpara)
msgid "the number of bytes to duplicate. (size_t)"
msgstr "複製するバイト数。（size_t）"

#: xml/cut-test-utils.xml:146(title)
msgid "cut_take_memdup()"
msgstr ""

#: xml/cut-test-utils.xml:147(programlisting)
#, no-wrap
msgid "#define             cut_take_memdup(memory, size)"
msgstr ""

#: xml/cut-test-utils.xml:148(para)
msgid ""
"Duplicates <parameter>size</parameter> bytes of the memory, passes ownership "
"of the duplicated memory to Cutter and returns the duplicated memory."
msgstr ""
"メモリの<parameter>size</parameter>バイトを複製し、その所有権をCutterに渡し、"
"複製されたメモリを返します。"

#: xml/cut-test-utils.xml:156(simpara)
msgid "the memory to be duplicated. (void *)"
msgstr "複製されるメモリ。（void *）"

#: xml/cut-test-utils.xml:164(title)
msgid "cut_take_printf()"
msgstr ""

#: xml/cut-test-utils.xml:165(programlisting)
#, no-wrap
msgid "#define             cut_take_printf(format, ...)"
msgstr ""

#: xml/cut-test-utils.xml:166(para)
msgid ""
"Formats a string like <link linkend=\"printf\"><function>printf()</"
"function></link> but the formatted string is owned by Cutter."
msgstr ""
"<link linkend=\"printf\"><function>printf()</function></link>のように文字列を"
"整形しますが、整形された文字列はCutterが所有します。"

#: xml/cut-test-utils.xml:180(title)
msgid "cut_take_string_array()"
msgstr ""

#: xml/cut-test-utils.xml:181(programlisting)
#, no-wrap
msgid "#define             cut_take_string_array(strings)"
msgstr ""

#: xml/cut-test-utils.xml:182(para)
msgid ""
"Passes ownership of the array of strings (char **) to Cutter and returns an "
"array of strings that has same contents of <parameter>strings</parameter>."
msgstr ""
"文字列の配列（char **）の所有権をCutterに渡し、<parameter>strings</parameter>"
"と同じ内容の文字列の配列を返します。"

#: xml/cut-test-utils.xml:190(simpara)
msgid "the array of strings to be owned by Cutter."
msgstr "Cutterが所有する文字列の配列。"

#: xml/cut-test-utils.xml:194(title)
msgid "cut_take_diff()"
msgstr ""

#: xml/cut-test-utils.xml:195(programlisting)
#, no-wrap
msgid "#define             cut_take_diff(from, to)"
msgstr ""

#: xml/cut-test-utils.xml:196(para)
msgid ""
"Computes diff between <parameter>from</parameter> and <parameter>to</"
"parameter> that is owned by Cutter."
msgstr ""
"<parameter>from</parameter>と<parameter>to</parameter>のdiffを計算します。"
"diffの所有者はCutterです。"

#: xml/cut-test-utils.xml:202(simpara) xml/cut-test-utils.xml:221(simpara)
msgid "the original string."
msgstr "元の文字列。"

#: xml/cut-test-utils.xml:205(simpara) xml/cut-test-utils.xml:224(simpara)
msgid "the modified string."
msgstr "修正された文字列。"

#: xml/cut-test-utils.xml:209(title)
msgid "cut_append_diff()"
msgstr ""

#: xml/cut-test-utils.xml:210(programlisting)
#, no-wrap
msgid "#define             cut_append_diff(message, from, to)"
msgstr ""

#: xml/cut-test-utils.xml:211(para)
msgid ""
"Computes diff between <parameter>from</parameter> and <parameter>to</"
"parameter> and append the diff to <parameter>message</parameter>. Returned "
"string is owned by Cutter."
msgstr ""
"<parameter>from</parameter>と<parameter>to</parameter>のdiffを計算し、その"
"diffを<parameter>message</parameter>に追加します。戻り値の文字列の所有者は"
"Cutterです。"

#: xml/cut-test-utils.xml:218(simpara)
msgid "the string to be appended diff."
msgstr "diffが追加される文字列。"

#: xml/cut-test-utils.xml:226(para) xml/cutter.xml:271(para)
#: xml/gcut-assertions.xml:94(para) xml/gcut-assertions.xml:134(para)
#: xml/gcut-assertions.xml:174(para) xml/gcut-assertions.xml:216(para)
#: xml/gcut-assertions.xml:236(para) xml/gcut-assertions.xml:392(para)
#: xml/gcut-assertions.xml:447(para) xml/gcut-test-utils.xml:75(para)
#: xml/gcut-test-utils.xml:89(para) xml/gcut-test-utils.xml:107(para)
#: xml/gcut-test-utils.xml:142(para) xml/gcut-test-utils.xml:172(para)
msgid "Since 1.0.3"
msgstr "1.0.3から"

#: xml/cut-test-utils.xml:229(title)
msgid "cut_inspect_string_array()"
msgstr ""

#: xml/cut-test-utils.xml:230(programlisting)
#, no-wrap
msgid "#define             cut_inspect_string_array(strings)"
msgstr ""

#: xml/cut-test-utils.xml:231(para)
msgid ""
"Formats <parameter>strings</parameter> as human readable string that is "
"owned by Cutter."
msgstr ""
"<parameter>strings</parameter>を人が読みやすい文字列に整形します。整形された"
"文字列の所有者はCutterです。"

#: xml/cut-test-utils.xml:237(simpara)
msgid "the array of strings to be inspected."
msgstr "対象となる文字列の配列。"

#: xml/cut-test-utils.xml:241(title)
msgid "cut_set_fixture_data_dir()"
msgstr ""

#: xml/cut-test-utils.xml:242(programlisting)
#, no-wrap
msgid "#define             cut_set_fixture_data_dir(path, ...)"
msgstr ""

#: xml/cut-test-utils.xml:243(para)
msgid ""
"Set fixture data directory that is used by <link linkend=\"cut-get-fixture-"
"data-string\"><function>cut_get_fixture_data_string()</function></link> and "
"so on."
msgstr ""
"<link linkend=\"cut-get-fixture-data-string"
"\"><function>cut_get_fixture_data_string()</function></link>などで使われる"
"フィクスチャデータのディレクトリを指定します。"

#: xml/cut-test-utils.xml:250(simpara)
msgid "a first element of the path to the fixture data directory."
msgstr "フィクスチャデータディレクトリのパスの最初の要素。"

#: xml/cut-test-utils.xml:258(title)
msgid "cut_build_fixture_data_path()"
msgstr ""

#: xml/cut-test-utils.xml:259(programlisting)
#, no-wrap
msgid "#define             cut_build_fixture_data_path(path, ...)"
msgstr ""

#: xml/cut-test-utils.xml:260(para)
msgid ""
"Builds a path to the fixture data. If <parameter>path</parameter> is "
"relative path, the path is handled as a relative path from a directory that "
"is specified by <link linkend=\"cut-set-fixture-data-dir"
"\"><function>cut_set_fixture_data_dir()</function></link> or the current "
"directory."
msgstr ""
"フィクスチャデータへのパスを生成します。もし、<parameter>path</parameter>が相"
"対パスなら、パスは<link linkend=\"cut-set-fixture-data-dir"
"\"><function>cut_set_fixture_data_dir()</function></link>で指定したディレクト"
"リか、現在のディレクトリからの相対パスとして処理されます。"

#: xml/cut-test-utils.xml:277(title)
msgid "cut_get_fixture_data_string()"
msgstr ""

#: xml/cut-test-utils.xml:278(programlisting)
#, no-wrap
msgid "#define             cut_get_fixture_data_string(path, ...)"
msgstr ""

#: xml/cut-test-utils.xml:279(para)
msgid ""
"Reads the fixture data at \"<parameter>path</parameter>/...\" and returns it "
"as a string that is owned by Cutter. The description of <link linkend=\"cut-"
"build-fixture-data-path\"><function>cut_build_fixture_data_path()</"
"function></link> shows how the fixture data path is determined."
msgstr ""
"\"<parameter>path</parameter>/...\"にあるフィクスチャデータを読み込み、文字列"
"として返します。文字列はCutterが所持します。<link linkend=\"cut-build-"
"fixture-data-path\"><function>cut_build_fixture_data_path()</function></link>"
"の説明にはフィクスチャデータのパスがどのように決定されるかが書かれています。"

#: xml/cut-test-utils.xml:296(title)
msgid "cut_remove_path()"
msgstr ""

#: xml/cut-test-utils.xml:297(programlisting)
#, no-wrap
msgid "#define             cut_remove_path(path, ...)"
msgstr ""

#: xml/cut-test-utils.xml:298(para)
msgid ""
"Removes <parameter>path</parameter> and it's children recursively. It "
"doesn't report any errors."
msgstr ""
"<parameter>path</parameter>と、その下にあるパスを再帰的に削除します。いかなる"
"エラーも報告しません。"

#: xml/cut-test-utils.xml:305(simpara)
msgid "a first element of the path to be removed."
msgstr "削除するパスの最初の要素。"

#: xml/cut-test-utils.xml:313(title)
msgid "cut_equal_string()"
msgstr ""

#: xml/cut-test-utils.xml:314(programlisting)
#, no-wrap
msgid "#define             cut_equal_string(string1, string2)"
msgstr ""

#: xml/cut-test-utils.xml:315(para)
msgid ""
"Compare <parameter>string1</parameter> to <parameter>string2</parameter>. "
"<parameter>string1</parameter> and/or <parameter>string2</parameter> maybe "
"NULL."
msgstr ""
"<parameter>string1</parameter>と<parameter>string2</parameter>を比較します。"
"<parameter>string1</parameter>あるいは<parameter>string2</parameter>、または"
"両方がNULLでもかまいません。"

#: xml/cut-test-utils.xml:321(term)
msgid "<parameter>string1</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-utils.xml:322(simpara) xml/cut-test-utils.xml:325(simpara)
msgid "a string. (char *)"
msgstr "文字列。 (char *)"

#: xml/cut-test-utils.xml:324(term)
msgid "<parameter>string2</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-utils.xml:330(title)
msgid "cut_equal_double()"
msgstr ""

#: xml/cut-test-utils.xml:331(programlisting)
#, no-wrap
msgid "#define             cut_equal_double(double1, double2, error)"
msgstr ""

#: xml/cut-test-utils.xml:332(para)
msgid ""
"Compare <parameter>double1</parameter> to <parameter>double2</parameter> "
"with <parameter>error</parameter> range."
msgstr ""
"<parameter>double1</parameter>と<parameter>double2</parameter>を誤差範囲"
"<parameter>error</parameter>で比較します。"

#: xml/cut-test-utils.xml:337(term)
msgid "<parameter>double1</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-utils.xml:338(simpara) xml/cut-test-utils.xml:341(simpara)
msgid "a double value."
msgstr "浮動小数点値。"

#: xml/cut-test-utils.xml:340(term)
msgid "<parameter>double2</parameter>&nbsp;:"
msgstr ""

#: xml/cut-test-utils.xml:344(simpara)
msgid "a double value that specifies error range."
msgstr "誤差範囲を示す浮動小数点数。"

#: xml/cut-types.xml:7(refentrytitle) xml/cut-types.xml:13(refname)
msgid "Types"
msgstr "型"

#: xml/cut-types.xml:14(refpurpose)
msgid "Types that is used in test."
msgstr "テストで使う型です。"

#: xml/cut-types.xml:22(link)
msgid "*CutDestroyFunction"
msgstr ""

#: xml/cut-types.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                (<placeholder-2/>)               (<placeholder-3/> *data);\n"
"typedef             <placeholder-4/>;\n"
msgstr ""

#: xml/cut-types.xml:37(para)
msgid "There are some types to be used in test."
msgstr "テストで使う型がいくつかあります。"

#: xml/cut-types.xml:47(title)
msgid "CutDestroyFunction ()"
msgstr ""

#: xml/cut-types.xml:48(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                (*CutDestroyFunction)               (<link linkend=\"void\">void</link> *data);"
msgstr ""

#: xml/cut-types.xml:49(para)
msgid ""
"Specifies the type of function which is called when a data element is "
"destroyed. It is passed the pointer to the data element and should free any "
"memory and resources allocated for it."
msgstr ""
"データが破棄されるときに呼ばれる関数の型です。データのポインタを受け取り、そ"
"のデータ用に割り当てられたメモリとリソースを開放します。"

#: xml/cut-types.xml:58(simpara)
msgid "the data element to be destroyed."
msgstr "破棄するデータ。"

#: xml/cut-types.xml:63(programlisting)
#, no-wrap
msgid "typedef int cut_boolean;\n"
msgstr ""

#: xml/cut-ui-factory-builder.xml:7(refentrytitle)
#: xml/cut-ui-factory-builder.xml:13(refname)
#: xml/cut-ui-factory-builder.xml:22(link)
#: xml/cut-ui-factory-builder.xml:44(title)
#: xml/cut-ui-factory-builder.xml:45(primary)
msgid "CutUIFactoryBuilder"
msgstr ""

#: xml/cut-ui-factory-builder.xml:45(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutFactoryBuilder object;\n"
"} CutUIFactoryBuilder;\n"
msgstr ""

#: xml/cut-ui.xml:7(refentrytitle) xml/cut-ui.xml:13(refname)
#: xml/cut-ui.xml:22(link) xml/cut-ui.xml:28(link) xml/cut-ui.xml:51(title)
#: xml/cut-ui.xml:52(primary)
msgid "CutUI"
msgstr ""

#: xml/cut-ui.xml:23(link) xml/cut-ui.xml:58(primary)
msgid "cut_ui_init"
msgstr ""

#: xml/cut-ui.xml:24(link) xml/cut-ui.xml:64(primary)
msgid "cut_ui_quit"
msgstr ""

#: xml/cut-ui.xml:25(link) xml/cut-ui.xml:70(primary)
msgid "cut_ui_new"
msgstr ""

#: xml/cut-ui.xml:28(link) xml/cut-ui.xml:92(primary)
msgid "cut_ui_run"
msgstr ""

#: xml/cut-ui.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>                <placeholder-3/>                         (void);\n"
"<placeholder-4/>                <placeholder-5/>                         (void);\n"
"<placeholder-6/>*            <placeholder-7/>                          (const <placeholder-8/> *name,\n"
"                                                         const <placeholder-9/> *first_property,\n"
"                                                         ...);\n"
"<placeholder-10/>            <placeholder-11/>                          (<placeholder-12/> *ui,\n"
"                                                         <placeholder-13/> *run_context);\n"
msgstr ""

#: xml/cut-ui.xml:52(programlisting)
#, no-wrap
msgid "typedef struct _CutUI CutUI;"
msgstr ""

#: xml/cut-ui.xml:57(title)
msgid "cut_ui_init ()"
msgstr ""

#: xml/cut-ui.xml:58(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_ui_init                         (void);"
msgstr ""

#: xml/cut-ui.xml:63(title)
msgid "cut_ui_quit ()"
msgstr ""

#: xml/cut-ui.xml:64(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_ui_quit                         (void);"
msgstr ""

#: xml/cut-ui.xml:69(title)
msgid "cut_ui_new ()"
msgstr ""

#: xml/cut-ui.xml:70(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GObject\">GObject</link>*            cut_ui_new                          (const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-ui.xml:91(title)
msgid "cut_ui_run ()"
msgstr ""

#: xml/cut-ui.xml:92(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_ui_run                          (<link linkend=\"CutUI\">CutUI</link> *ui,\n"
"                                                         <link linkend=\"CutRunContext\">CutRunContext</link> *run_context);"
msgstr ""

#: xml/cut-ui.xml:97(term)
msgid "<parameter>ui</parameter>&nbsp;:"
msgstr ""

#: xml/cut-version.xml:7(refentrytitle) xml/cut-version.xml:13(refname)
msgid "cut-version"
msgstr ""

#: xml/cut-version.xml:22(link) xml/cut-version.xml:47(title)
#: xml/cut-version.xml:48(primary)
msgid "CUTTER_VERSION_MAJOR"
msgstr ""

#: xml/cut-version.xml:23(link) xml/cut-version.xml:54(title)
#: xml/cut-version.xml:55(primary)
msgid "CUTTER_VERSION_MINOR"
msgstr ""

#: xml/cut-version.xml:24(link) xml/cut-version.xml:61(title)
#: xml/cut-version.xml:62(primary)
msgid "CUTTER_VERSION_MICRO"
msgstr ""

#: xml/cut-version.xml:25(link) xml/cut-version.xml:68(title)
#: xml/cut-version.xml:69(primary)
msgid "CUTTER_VERSION_STRING"
msgstr ""

#: xml/cut-version.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
"#define             <placeholder-2/>\n"
"#define             <placeholder-3/>\n"
"#define             <placeholder-4/>\n"
msgstr ""

#: xml/cut-version.xml:48(programlisting)
#, no-wrap
msgid "#define CUTTER_VERSION_MAJOR 1\n"
msgstr ""

#: xml/cut-version.xml:55(programlisting)
#, no-wrap
msgid "#define CUTTER_VERSION_MINOR 0\n"
msgstr ""

#: xml/cut-version.xml:62(programlisting)
#, no-wrap
msgid "#define CUTTER_VERSION_MICRO 5\n"
msgstr ""

#: xml/cut-version.xml:69(programlisting)
#, no-wrap
msgid "#define CUTTER_VERSION_STRING \"1.0.5\"\n"
msgstr ""

#: xml/cutter.xml:7(refentrytitle) xml/cutter.xml:13(refname)
msgid "Cutter"
msgstr ""

#: xml/cutter.xml:14(refpurpose)
msgid "An Unit Testing Framework for C."
msgstr "C言語用単体テストフレームワーク"

#: xml/cutter.xml:22(link) xml/cutter.xml:150(primary)
msgid "setup"
msgstr ""

#: xml/cutter.xml:23(link) xml/cutter.xml:159(primary)
msgid "teardown"
msgstr ""

#: xml/cutter.xml:24(link) xml/cutter.xml:169(primary)
msgid "startup"
msgstr ""

#: xml/cutter.xml:25(link) xml/cutter.xml:179(primary)
msgid "shutdown"
msgstr ""

#: xml/cutter.xml:26(link) xml/cutter.xml:189(primary)
msgid "cut_add_data"
msgstr ""

#: xml/cutter.xml:27(link) xml/cutter.xml:275(primary)
msgid "cut_set_attributes"
msgstr ""

#: xml/cutter.xml:28(link) xml/cutter.xml:315(primary)
msgid "cut_get_current_test_context"
msgstr ""

#: xml/cutter.xml:29(link) xml/cutter.xml:358(primary)
msgid "cut_set_current_test_context"
msgstr ""

#: xml/cutter.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                               (void);\n"
"<placeholder-3/>                <placeholder-4/>                            (void);\n"
"<placeholder-5/>                <placeholder-6/>                             (void);\n"
"<placeholder-7/>                <placeholder-8/>                            (void);\n"
"#define             <placeholder-9/>                        (first_data_name, ...)\n"
"#define             <placeholder-10/>                  (first_attribute_name, ...)\n"
"#define             <placeholder-11/>        ()\n"
"#define             <placeholder-12/>        (test_context)\n"
msgstr ""

#: xml/cutter.xml:53(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;cutter.h&gt;\n"
"#include \"my-stack.h\"\n"
"\n"
"void\n"
"test_my_stack (void)\n"
"{\n"
"    MyStack *stack = my_stack_new();\n"
"\n"
"    cut_assert_not_null(stack);\n"
"    cut_assert(my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(0, my_stack_get_size(stack));\n"
"\n"
"    my_stack_push(stack, 10);\n"
"    cut_assert(!my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(1, my_stack_get_size(stack));\n"
"\n"
"    my_stack_push(stack, 20);\n"
"    cut_assert_equal_int(2, my_stack_get_size(stack));\n"
"\n"
"    cut_assert_equal(20, my_stack_pop(stack));\n"
"    cut_assert(!my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(1, my_stack_get_size(stack));\n"
"\n"
"    cut_assert_equal(10, my_stack_pop(stack));\n"
"    cut_assert(my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(0, my_stack_get_size(stack));\n"
"}\n"
msgstr ""

#: xml/cutter.xml:47(para)
msgid ""
"Easy to use. Cutter doesn't introduce any magic macros like "
"CUTTER_DEFINE_TEST_START and CUTTER_DEFINE_TEST_END into your test program. "
"You can write your test program like normal program. You only use <link "
"linkend=\"cut-assert-XXX\"><function>cut_assert_XXX()</function></link> to "
"check that your program works as you expect. <placeholder-1/>"
msgstr ""
"簡単に使えます。Cutterではテストプログラム中にCUTTER_DEFINE_TEST_STARTや"
"CUTTER_DEFINE_TEST_ENDなどといった不思議なマクロを使う必要がありません。通常"
"のプログラムと同じようにテストプログラムを書くことができます。ただし、プログ"
"ラムが期待した通り動作していることを検証するために<link linkend=\"cut-assert-"
"XXX\"><function>cut_assert_XXX()</function></link>を使う必要があります。"
"<placeholder-1/>"

#: xml/cutter.xml:87(programlisting)
#, no-wrap
msgid ""
"\n"
"...........................................................\n"
"\n"
"Finished in 0.213021 seconds\n"
"\n"
"59 test(s), 246 assertion(s), 0 failure(s), 0 error(s), 0 pending(s), 0 notification(s)\n"
msgstr ""

#: xml/cutter.xml:83(para)
msgid ""
"Simple but useful output. Cutter works quietly if tests are running without "
"any problems by default. The following is an output of self test: "
"<placeholder-1/> Cutter just outputs \".\" for a passed test and a summary "
"at the end. Cutter doesn't output each test name, how many assertions are "
"used for a test and so because we don't need the information on success."
msgstr ""
"簡素ですが有用な情報を出力をします。Cutterはデフォルトではテストが問題なく動"
"いているときは静かに動きます。以下は、Cutter自身のテストの出力です。"
"<placeholder-1/>Cutterはテストが1つパスしたことを示すためには「.」だけを出力"
"し、最後にテスト結果の要約を出力します。Cutterは各テストの名前や何個検証した"
"かなどの情報は表示しません。これは、テスト成功時にはこれらの情報は必要ないか"
"らです。"

#: xml/cutter.xml:100(programlisting)
#, no-wrap
msgid ""
"\n"
".....................F.....................................\n"
"\n"
"1) Failure: test_error\n"
"&lt;\"Strange\" == cut_test_result_get_test_name(result)&gt;\n"
"expected: &lt;Strange!!!&gt;\n"
" but was: &lt;dummy-error-test&gt;\n"
"test/test-cut-assertions.c:240: cut_assert_test_result()\n"
"\n"
"Finished in 0.223657 seconds\n"
"\n"
"59 test(s), 242 assertion(s), 1 failure(s), 0 error(s), 0 pending(s), 0 notification(s)\n"
msgstr ""

#: xml/cutter.xml:115(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal_string(\"Strange!!!\", cut_test_result_get_test_name(result));\n"
msgstr ""

#: xml/cutter.xml:98(para)
msgid ""
"Cutter outputs many information on failure: <placeholder-1/> The above "
"result is happened because I add a strange expected staring in Cutter's self "
"test: <placeholder-2/> The strange assertion is written in the 240th line in "
"test/test-cut-assertions.c and the line is in the <link linkend=\"cut-assert-"
"test-result\"><function>cut_assert_test_result()</function></link> function. "
"The function is called in test_error test. We expected "
"cut_test_result_get_test_name(result) should return \"Strange!!!\" but got "
"\"dummy-error-name\". We can get the above information from Cutter output. "
"This will help your debug."
msgstr ""
"Cutterは失敗時にはたくさんの情報を出力します。<placeholder-1/>上記の結果は"
"Cutterの自己テストにおかしな期待値を追加したために起きています。<placeholder-"
"2/>おかしな検証はtest/test-cut-assertions.cの240行目に書かれていて、その行は"
"<link linkend=\"cut-assert-test-result\"><function>cut_assert_test_result()</"
"function></link>関数内にあります。この関数はtest_errorテストから呼び出されて"
"います。cut_test_result_get_test_name(result)が\"Strange!!!\"を返すことを期待"
"していますが、実際は\"dummy-error-name\"が返ってきています。このような情報を"
"上記のCutterの出力から得ることができます。これはデバッグの手助けになるでしょ"
"う。"

#: xml/cutter.xml:126(para)
msgid ""
"Cutter's output format is pragmatic. ' but was:' is indented and aligned "
"with the above 'expected:'. This helps that you find difference between "
"expected value and actual value by your eyes easily. The problem line is "
"formated as 'FILENAME:LINE: FUNCTION' to integrate Emacs. In Emacs's "
"compilation-mode, if the format is appeared in *compilation* buffer, we can "
"jump to FILENAME at LINE with next-error command. (C-x `) This helps that "
"you find the problem line rapidly."
msgstr ""
"Cutterの出力形式は実用的です。' but was:'はその上の'expected:'と並ぶようにイ"
"ンデントされています。これは期待値と実測値をパッと見て簡単に比較できるように"
"するためです。問題のあった行は「ファイル名:行: 関数」というように整形されてい"
"ます。これはEmacsと連携するためです。Emacsのcompilation-modeではこの形式が"
"*compilation*バッファに表れると、next-errorコマンド(C-x `)で「ファイル名」の"
"「行」へジャンプすることができます。これは問題行を素早く見つける手助けをしま"
"す。"

#: xml/cutter.xml:136(para)
msgid "Cutter supports not only easy test writing but also easy debugging."
msgstr ""
"Cutterは簡単にテストを書くことを支援するだけではなく、簡単にデバッグをできる"
"ことも支援します。"

#: xml/cutter.xml:43(para)
msgid ""
"Cutter is a Unit Testing Framework for C and has the following features: "
"<placeholder-1/>"
msgstr ""
"Cutterは以下のような特徴をもったC用の単体テストフレームワークです。"
"<placeholder-1/>"

#: xml/cutter.xml:149(title)
msgid "setup ()"
msgstr ""

#: xml/cutter.xml:150(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                setup                               (void);"
msgstr ""

#: xml/cutter.xml:151(para)
msgid ""
"If you define <link linkend=\"setup\"><function>setup()</function></link> in "
"your test program, cutter will call your <link linkend=\"setup"
"\"><function>setup()</function></link> before each your test is run."
msgstr ""
"テストプログラム中で<link linkend=\"setup\"><function>setup()</function></"
"link>を定義していたら、cutterは各テストが実行される前に定義された<link "
"linkend=\"setup\"><function>setup()</function></link>を呼びだします。"

#: xml/cutter.xml:158(title)
msgid "teardown ()"
msgstr ""

#: xml/cutter.xml:159(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                teardown                            (void);"
msgstr ""

#: xml/cutter.xml:160(para)
msgid ""
"If you define <link linkend=\"teardown\"><function>teardown()</function></"
"link> in your test program, cutter will call your <link linkend=\"teardown"
"\"><function>teardown()</function></link> after each your test is run even "
"if a test is failed."
msgstr ""
"テストプログラム中で<link linkend=\"teardown\"><function>teardown()</"
"function></link>を定義していたら、cutterは各テストの後に、たとえテストが失敗"
"していた時でも、<link linkend=\"teardown\"><function>teardown()</function></"
"link>を呼びだします。"

#: xml/cutter.xml:168(title)
msgid "startup ()"
msgstr ""

#: xml/cutter.xml:169(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                startup                             (void);"
msgstr ""

#: xml/cutter.xml:170(para)
msgid ""
"If you define <link linkend=\"startup\"><function>startup()</function></"
"link> in your test program, cutter will call your <link linkend=\"startup"
"\"><function>startup()</function></link> before each your test case is run."
msgstr ""
"テストプログラム中で<link linkend=\"startup\"><function>startup()</"
"function></link>を定義していたら、cutterは各テストケースが実行される前に定義"
"された<link linkend=\"startup\"><function>startup()</function></link>を呼びだ"
"します。"

#: xml/cutter.xml:178(title)
msgid "shutdown ()"
msgstr ""

#: xml/cutter.xml:179(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                shutdown                            (void);"
msgstr ""

#: xml/cutter.xml:180(para)
msgid ""
"If you define <link linkend=\"shutdown\"><function>shutdown()</function></"
"link> in your test program, cutter will call your <link linkend=\"shutdown"
"\"><function>shutdown()</function></link> after each your test case is run."
msgstr ""
"テストプログラム中で<link linkend=\"shutdown\"><function>shutdown()</"
"function></link>を定義していたら、cutterは各テストケースが実行された後に定義"
"された<link linkend=\"shutdown\"><function>shutdown()</function></link>を呼び"
"だします。"

#: xml/cutter.xml:188(title)
msgid "cut_add_data()"
msgstr ""

#: xml/cutter.xml:189(programlisting)
#, no-wrap
msgid "#define             cut_add_data(first_data_name, ...)"
msgstr ""

#: xml/cutter.xml:190(para)
msgid "Adds data to use data driven test."
msgstr "データ駆動テストで使うデータを追加します。"

#: xml/cutter.xml:195(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;cutter.h&gt;\n"
"\n"
"void data_translate (void);\n"
"void test_translate (const void *data);\n"
"\n"
"static const char*\n"
"translate (int input)\n"
"{\n"
"   switch(input) {\n"
"   case 1:\n"
"       return \"first\";\n"
"   case 111:\n"
"       return \"a hundred eleven\";\n"
"   default:\n"
"       return \"unsupported\";\n"
"   }\n"
"}\n"
"\n"
"typedef struct _TranslateTestData\n"
"{\n"
"    char *translated;\n"
"    int input;\n"
"} TranslateTestData;\n"
"\n"
"static TranslateTestData *\n"
"translate_test_data_new (char *translated, int input)\n"
"{\n"
"    TranslateTestData *data;\n"
"\n"
"    data = malloc(sizeof(TranslateTestData));\n"
"    data-&gt;translated = strdup(translated);\n"
"    data-&gt;input = input;\n"
"\n"
"    return data;\n"
"}\n"
"\n"
"static void\n"
"translate_test_data_free (TranslateTestData *data)\n"
"{\n"
"    free(data-&gt;translated);\n"
"    free(data);\n"
"}\n"
"\n"
"void\n"
"data_translate(void)\n"
"{\n"
"    cut_add_data(\"simple data\",\n"
"                 translate_test_data_new(\"first\", 1),\n"
"                 translate_test_data_free,\n"
"                 \"complex data\",\n"
"                 translate_test_data_new(\"a hundred eleven\", 111),\n"
"                 translate_test_data_free);\n"
"}\n"
"\n"
"void\n"
"test_translate(const void *data)\n"
"{\n"
"     const TranslateTestData *test_data = data;\n"
"\n"
"     cut_assert_equal_string(test_data-&gt;translated,\n"
"                             translate(test_data-&gt;input));\n"
"}\n"
msgstr ""

#: xml/cutter.xml:262(term)
msgid "<parameter>first_data_name</parameter>&nbsp;:"
msgstr ""

#: xml/cutter.xml:263(simpara)
msgid "The first data name."
msgstr "最初のデータ名。"

#: xml/cutter.xml:266(simpara)
msgid ""
"The data and destroy function of the first data, followed optionally by more "
"name/data/destroy_function(<link linkend=\"CutDestroyFunction"
"\"><type>CutDestroyFunction</type></link>) triples."
msgstr ""
"最初のデータとデータ破棄関数。続けて任意の数の「名前・データ・データ破棄関数"
"(<link linkend=\"CutDestroyFunction\"><type>CutDestroyFunction</type></"
"link>)」の三つ組を指定します。"

#: xml/cutter.xml:274(title)
msgid "cut_set_attributes()"
msgstr ""

#: xml/cutter.xml:275(programlisting)
#, no-wrap
msgid "#define             cut_set_attributes(first_attribute_name, ...)"
msgstr ""

#: xml/cutter.xml:276(para)
msgid "Sets attributes of the test."
msgstr "テストの属性を設定します。"

#: xml/cutter.xml:281(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;cutter.h&gt;\n"
"\n"
"void attributes_repeat (void);\n"
"void test_repeat (void);\n"
"\n"
"void\n"
"attributes_repeat(void)\n"
"{\n"
"    cut_set_attributes(\"description\", \"a test for repeat function\",\n"
"                       \"bug\", \"111\",\n"
"                       \"priority\", \"high\");\n"
"}\n"
"\n"
"void\n"
"test_repeat(void)\n"
"{\n"
"     cut_assert_equal_string_with_free(\"XXX\", repeat(\"X\", 3));\n"
"}\n"
msgstr ""

#: xml/cutter.xml:304(term)
msgid "<parameter>first_attribute_name</parameter>&nbsp;:"
msgstr ""

#: xml/cutter.xml:305(simpara)
msgid "The first attribute name."
msgstr "最初の属性名。"

#: xml/cutter.xml:308(simpara)
msgid ""
"The value of the first attribute, followed optionally by more name/value "
"pairs."
msgstr "最初の属性の値。その後に名前・値のペア（省略可能）が続く。"

#: xml/cutter.xml:314(title)
msgid "cut_get_current_test_context()"
msgstr ""

#: xml/cutter.xml:315(programlisting)
#, no-wrap
msgid "#define             cut_get_current_test_context()"
msgstr ""

#: xml/cutter.xml:316(para)
msgid ""
"Returns the current test context. The current test context is a thread local "
"object. It means that you don't need to care this if you don't create a new "
"thread in your test. This is only needed to care if you create a new thread. "
"You need to pass the current test context in your test thread to the current "
"test context in a created thread."
msgstr ""
"現在のテストコンテキストを返します。「現在のテストコンテキスト」はスレッド"
"ローカルなオブジェクトです。もしテストの中で新しいスレッドを作らない場合はテ"
"ストコンテキストを気にする必要はありません。新しいスレッドを作る場合だけ必要"
"になります。テストのスレッドが持っている「現在のテストコンテキスト」を新しく"
"作ったスレッドに渡す必要がありません。"

#: xml/cutter.xml:327(programlisting)
#, no-wrap
msgid ""
"\n"
"int\n"
"your_thread_function(void *data)\n"
"{\n"
"    CutTestContext *test_context = data;\n"
"    cut_set_current_test_context(test_context);\n"
"    ....\n"
"}\n"
"\n"
"void\n"
"run_your_thread(void)\n"
"{\n"
"    int result;\n"
"    pthread_t your_thread;\n"
"\n"
"    result = pthread_create(&amp;your_thread, NULL,\n"
"                            your_thread_function,\n"
"                            cut_get_current_test_context());\n"
"    ...\n"
"}\n"
msgstr ""

#: xml/cutter.xml:351(simpara)
msgid "a <link linkend=\"CutTestContext\"><type>CutTestContext</type></link>."
msgstr ""
"<link linkend=\"CutTestContext\"><type>CutTestContext</type></link>オブジェク"
"ト。"

#: xml/cutter.xml:357(title)
msgid "cut_set_current_test_context()"
msgstr ""

#: xml/cutter.xml:358(programlisting)
#, no-wrap
msgid "#define             cut_set_current_test_context(test_context)"
msgstr ""

#: xml/cutter.xml:359(para)
msgid ""
"Set <parameter>test_context</parameter> as the current test context. See "
"<link linkend=\"cut-get-current-test-context"
"\"><function>cut_get_current_test_context()</function></link> for more "
"details."
msgstr ""
"現在のテストコンテキストを<parameter>test_context</parameter>にします。詳細は"
"<link linkend=\"cut-get-current-test-context"
"\"><function>cut_get_current_test_context()</function></link>を見てください。"

#: xml/cutter.xml:366(simpara)
msgid ""
"the <link linkend=\"CutTestContext\"><type>CutTestContext</type></link> to "
"be the current test context."
msgstr ""
"現在のテストコンテキストになる<link linkend=\"CutTestContext"
"\"><type>CutTestContext</type></link>。"

#: xml/cutter.xml:377(title)
msgid "See Also"
msgstr "参考"

#: xml/cuttest-assertions.xml:7(refentrytitle)
#: xml/cuttest-assertions.xml:13(refname)
msgid "cuttest-assertions"
msgstr ""

#: xml/cuttest-assertions.xml:22(link) xml/cuttest-assertions.xml:77(primary)
msgid "cut_take_result_summary_list"
msgstr ""

#: xml/cuttest-assertions.xml:23(link) xml/cuttest-assertions.xml:89(primary)
msgid "cut_take_result_string_list"
msgstr ""

#: xml/cuttest-assertions.xml:24(link) xml/cuttest-assertions.xml:101(primary)
msgid "cut_assert_test_result_summary"
msgstr ""

#: xml/cuttest-assertions.xml:29(link) xml/cuttest-assertions.xml:141(primary)
msgid "cut_assert_test_result_with_message"
msgstr ""

#: xml/cuttest-assertions.xml:33(link) xml/cuttest-assertions.xml:180(primary)
msgid "cut_assert_test_result"
msgstr ""

#: xml/cuttest-assertions.xml:36(link) xml/cuttest-assertions.xml:215(primary)
msgid "cut_assert_test_result_summary_helper"
msgstr ""

#: xml/cuttest-assertions.xml:46(link) xml/cuttest-assertions.xml:260(primary)
msgid "cut_assert_test_result_helper"
msgstr ""

#: xml/cuttest-assertions.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>        (list)\n"
"#define             <placeholder-2/>         (list)\n"
"#define             <placeholder-3/>      (run_context, n_tests,\n"
"                                                         n_assertions, n_successes,\n"
"                                                         n_failures, n_errors,\n"
"                                                         n_pendings, n_notifications,\n"
"                                                         n_omissions)\n"
"#define             <placeholder-4/> (run_context, i, status,\n"
"                                                         test_name, user_message,\n"
"                                                         system_message, message,\n"
"                                                         backtrace, ...)\n"
"#define             <placeholder-5/>              (run_context, i, status, test_name,\n"
"                                                         user_message, system_message,\n"
"                                                         backtrace, ...)\n"
"<placeholder-6/>                <placeholder-7/>\n"
"                                                        (<placeholder-8/> *run_context,\n"
"                                                         <placeholder-9/> n_tests,\n"
"                                                         <placeholder-10/> n_assertions,\n"
"                                                         <placeholder-11/> n_successes,\n"
"                                                         <placeholder-12/> n_failures,\n"
"                                                         <placeholder-13/> n_errors,\n"
"                                                         <placeholder-14/> n_pendings,\n"
"                                                         <placeholder-15/> n_notifications,\n"
"                                                         <placeholder-16/> n_omissions);\n"
"<placeholder-17/>                <placeholder-18/>       (<placeholder-19/> *run_context,\n"
"                                                         <placeholder-20/> i,\n"
"                                                         <placeholder-21/> status,\n"
"                                                         const <placeholder-22/> *test_name,\n"
"                                                         const <placeholder-23/> *user_message,\n"
"                                                         const <placeholder-24/> *system_message,\n"
"                                                         const <placeholder-25/> *message,\n"
"                                                         const <placeholder-26/> *backtrace,\n"
"                                                         ...);\n"
msgstr ""

#: xml/cuttest-assertions.xml:76(title)
msgid "cut_take_result_summary_list()"
msgstr ""

#: xml/cuttest-assertions.xml:77(programlisting)
#, no-wrap
msgid "#define             cut_take_result_summary_list(list)"
msgstr ""

#: xml/cuttest-assertions.xml:81(term) xml/cuttest-assertions.xml:93(term)
#: xml/gcut-list.xml:120(term) xml/gcut-list.xml:165(term)
#: xml/gcut-list.xml:204(term) xml/gcut-list.xml:243(term)
#: xml/gcut-list.xml:260(term) xml/gcut-list.xml:279(term)
#: xml/gcut-list.xml:301(term) xml/gcut-public.xml:98(term)
#: xml/gcut-test-utils.xml:100(term) xml/gcut-test-utils.xml:169(term)
msgid "<parameter>list</parameter>&nbsp;:"
msgstr ""

#: xml/cuttest-assertions.xml:88(title)
msgid "cut_take_result_string_list()"
msgstr ""

#: xml/cuttest-assertions.xml:89(programlisting)
#, no-wrap
msgid "#define             cut_take_result_string_list(list)"
msgstr ""

#: xml/cuttest-assertions.xml:100(title)
msgid "cut_assert_test_result_summary()"
msgstr ""

#: xml/cuttest-assertions.xml:101(programlisting)
#, no-wrap
msgid ""
"#define             cut_assert_test_result_summary(run_context, n_tests,            \\\n"
"                                                   n_assertions, n_successes,       \\\n"
"                                                   n_failures, n_errors,            \\\n"
"                                                   n_pendings, n_notifications,     \\\n"
"                                                   n_omissions)"
msgstr ""

#: xml/cuttest-assertions.xml:112(term) xml/cuttest-assertions.xml:231(term)
msgid "<parameter>n_tests</parameter>&nbsp;:"
msgstr ""

#: xml/cuttest-assertions.xml:115(term) xml/cuttest-assertions.xml:234(term)
msgid "<parameter>n_assertions</parameter>&nbsp;:"
msgstr ""

#: xml/cuttest-assertions.xml:118(term) xml/cuttest-assertions.xml:237(term)
msgid "<parameter>n_successes</parameter>&nbsp;:"
msgstr ""

#: xml/cuttest-assertions.xml:121(term) xml/cuttest-assertions.xml:240(term)
msgid "<parameter>n_failures</parameter>&nbsp;:"
msgstr ""

#: xml/cuttest-assertions.xml:124(term) xml/cuttest-assertions.xml:243(term)
msgid "<parameter>n_errors</parameter>&nbsp;:"
msgstr ""

#: xml/cuttest-assertions.xml:127(term) xml/cuttest-assertions.xml:246(term)
msgid "<parameter>n_pendings</parameter>&nbsp;:"
msgstr ""

#: xml/cuttest-assertions.xml:130(term) xml/cuttest-assertions.xml:249(term)
msgid "<parameter>n_notifications</parameter>&nbsp;:"
msgstr ""

#: xml/cuttest-assertions.xml:133(term) xml/cuttest-assertions.xml:252(term)
msgid "<parameter>n_omissions</parameter>&nbsp;:"
msgstr ""

#: xml/cuttest-assertions.xml:140(title)
msgid "cut_assert_test_result_with_message()"
msgstr ""

#: xml/cuttest-assertions.xml:141(programlisting)
#, no-wrap
msgid ""
"#define             cut_assert_test_result_with_message(run_context, i, status,     \\\n"
"                                                        test_name, user_message,    \\\n"
"                                                        system_message, message,    \\\n"
"                                                        backtrace, ...)"
msgstr ""

#: xml/cuttest-assertions.xml:151(term) xml/cuttest-assertions.xml:189(term)
#: xml/cuttest-assertions.xml:275(term)
msgid "<parameter>i</parameter>&nbsp;:"
msgstr ""

#: xml/cuttest-assertions.xml:160(term) xml/cuttest-assertions.xml:198(term)
#: xml/cuttest-assertions.xml:284(term)
msgid "<parameter>user_message</parameter>&nbsp;:"
msgstr ""

#: xml/cuttest-assertions.xml:179(title)
msgid "cut_assert_test_result()"
msgstr ""

#: xml/cuttest-assertions.xml:180(programlisting)
#, no-wrap
msgid ""
"#define             cut_assert_test_result(run_context, i, status, test_name,       \\\n"
"                                           user_message, system_message,            \\\n"
"                                           backtrace, ...)"
msgstr ""

#: xml/cuttest-assertions.xml:214(title)
msgid "cut_assert_test_result_summary_helper ()"
msgstr ""

#: xml/cuttest-assertions.xml:215(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_test_result_summary_helper\n"
"                                                        (<link linkend=\"CutRunContext\">CutRunContext</link> *run_context,\n"
"                                                         <link linkend=\"guint\">guint</link> n_tests,\n"
"                                                         <link linkend=\"guint\">guint</link> n_assertions,\n"
"                                                         <link linkend=\"guint\">guint</link> n_successes,\n"
"                                                         <link linkend=\"guint\">guint</link> n_failures,\n"
"                                                         <link linkend=\"guint\">guint</link> n_errors,\n"
"                                                         <link linkend=\"guint\">guint</link> n_pendings,\n"
"                                                         <link linkend=\"guint\">guint</link> n_notifications,\n"
"                                                         <link linkend=\"guint\">guint</link> n_omissions);"
msgstr ""

#: xml/cuttest-assertions.xml:259(title)
msgid "cut_assert_test_result_helper ()"
msgstr ""

#: xml/cuttest-assertions.xml:260(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_assert_test_result_helper       (<link linkend=\"CutRunContext\">CutRunContext</link> *run_context,\n"
"                                                         <link linkend=\"guint\">guint</link> i,\n"
"                                                         <link linkend=\"CutTestResultStatus\">CutTestResultStatus</link> status,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *test_name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *user_message,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *system_message,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *message,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *backtrace,\n"
"                                                         ...);"
msgstr ""

#: xml/cuttest-event-receiver.xml:7(refentrytitle)
#: xml/cuttest-event-receiver.xml:13(refname)
#: xml/cuttest-event-receiver.xml:22(link)
#: xml/cuttest-event-receiver.xml:45(title)
#: xml/cuttest-event-receiver.xml:46(primary)
msgid "CuttestEventReceiver"
msgstr ""

#: xml/cuttest-event-receiver.xml:23(link)
#: xml/cuttest-event-receiver.xml:73(primary)
msgid "cuttest_event_receiver_new"
msgstr ""

#: xml/cuttest-event-receiver.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*      <placeholder-3/>          (void);\n"
msgstr ""

#: xml/cuttest-event-receiver.xml:46(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutRunContext object;\n"
"\n"
"    guint n_start_runs;\n"
"    GList *ready_test_suites;\n"
"    GList *start_test_suites;\n"
"    GList *ready_test_cases;\n"
"    GList *start_test_cases;\n"
"    GList *ready_test_iterators;\n"
"    GList *start_test_iterators;\n"
"    GList *start_tests;\n"
"    GList *start_iterated_tests;\n"
"    GList *pass_assertions;\n"
"    GList *complete_iterated_tests;\n"
"    GList *complete_tests;\n"
"    GList *complete_test_iterators;\n"
"    GList *complete_test_cases;\n"
"    GList *complete_test_suites;\n"
"    GList *complete_runs;\n"
"    GList *crasheds;\n"
"} CuttestEventReceiver;\n"
msgstr ""

#: xml/cuttest-event-receiver.xml:72(title)
msgid "cuttest_event_receiver_new ()"
msgstr ""

#: xml/cuttest-event-receiver.xml:73(programlisting)
#, no-wrap
msgid "<link linkend=\"CutRunContext\">CutRunContext</link>*      cuttest_event_receiver_new          (void);"
msgstr ""

#: xml/cuttest-utils.xml:7(refentrytitle) xml/cuttest-utils.xml:13(refname)
msgid "cuttest-utils"
msgstr ""

#: xml/cuttest-utils.xml:22(link) xml/cuttest-utils.xml:50(title)
#: xml/cuttest-utils.xml:51(primary)
msgid "ISO8601_PATTERN_WITHOUT_YEAR"
msgstr ""

#: xml/cuttest-utils.xml:23(link) xml/cuttest-utils.xml:56(title)
#: xml/cuttest-utils.xml:57(primary)
msgid "ISO8601_PATTERN"
msgstr ""

#: xml/cuttest-utils.xml:24(link) xml/cuttest-utils.xml:63(title)
#: xml/cuttest-utils.xml:64(primary)
msgid "CUTTEST_TEST_DIR_KEY"
msgstr ""

#: xml/cuttest-utils.xml:25(link) xml/cuttest-utils.xml:71(primary)
msgid "cuttest_get_base_dir"
msgstr ""

#: xml/cuttest-utils.xml:26(link) xml/cuttest-utils.xml:82(primary)
msgid "cuttest_add_test"
msgstr ""

#: xml/cuttest-utils.xml:28(link)
msgid "CutTestFunction"
msgstr ""

#: xml/cuttest-utils.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>\n"
"#define             <placeholder-2/>\n"
"#define             <placeholder-3/>\n"
"const <placeholder-4/>*        <placeholder-5/>                (void);\n"
"<placeholder-6/>                <placeholder-7/>                    (<placeholder-8/> *test_case,\n"
"                                                         const <placeholder-9/> *test_name,\n"
"                                                         <placeholder-10/> test_function);\n"
msgstr ""

#: xml/cuttest-utils.xml:51(programlisting)
#, no-wrap
msgid "#define             ISO8601_PATTERN_WITHOUT_YEAR"
msgstr ""

#: xml/cuttest-utils.xml:57(programlisting)
#, no-wrap
msgid "#define ISO8601_PATTERN \"\\\\d{4}-\" ISO8601_PATTERN_WITHOUT_YEAR\n"
msgstr ""

#: xml/cuttest-utils.xml:64(programlisting)
#, no-wrap
msgid "#define CUTTEST_TEST_DIR_KEY \"CUTTEST_TEST_DIR\"\n"
msgstr ""

#: xml/cuttest-utils.xml:70(title)
msgid "cuttest_get_base_dir ()"
msgstr ""

#: xml/cuttest-utils.xml:71(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cuttest_get_base_dir                (void);"
msgstr ""

#: xml/cuttest-utils.xml:81(title)
msgid "cuttest_add_test ()"
msgstr ""

#: xml/cuttest-utils.xml:82(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cuttest_add_test                    (<link linkend=\"CutTestCase\">CutTestCase</link> *test_case,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *test_name,\n"
"                                                         <link linkend=\"CutTestFunction\">CutTestFunction</link> test_function);"
msgstr ""

#: xml/cuttest-utils.xml:94(term)
msgid "<parameter>test_function</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:7(refentrytitle) xml/gbsearcharray.xml:13(refname)
msgid "gbsearcharray"
msgstr ""

#: xml/gbsearcharray.xml:22(link) xml/gbsearcharray.xml:55(primary)
msgid "G_BSEARCH_ARRAY_CMP"
msgstr ""

#: xml/gbsearcharray.xml:23(link)
msgid "*GBSearchCompareFunc"
msgstr ""

#: xml/gbsearcharray.xml:24(link) xml/gbsearcharray.xml:85(primary)
msgid "GBSearchArrayFlags"
msgstr ""

#: xml/gbsearcharray.xml:25(link) xml/gbsearcharray.xml:96(primary)
msgid "g_bsearch_array_get_n_nodes"
msgstr ""

#: xml/gbsearcharray.xml:26(link) xml/gbsearcharray.xml:108(primary)
msgid "g_bsearch_array_lookup"
msgstr ""

#: xml/gbsearcharray.xml:27(link) xml/gbsearcharray.xml:126(primary)
msgid "g_bsearch_array_lookup_sibling"
msgstr ""

#: xml/gbsearcharray.xml:28(link) xml/gbsearcharray.xml:144(primary)
msgid "g_bsearch_array_lookup_insertion"
msgstr ""

#: xml/gbsearcharray.xml:29(link) xml/gbsearcharray.xml:162(primary)
msgid "G_BSEARCH_UPPER_POWER2"
msgstr ""

#: xml/gbsearcharray.xml:30(link) xml/gbsearcharray.xml:174(primary)
msgid "G_BSEARCH_ARRAY_NODES"
msgstr ""

#: xml/gbsearcharray.xml:31(link)
msgid "else"
msgstr ""

#: xml/gbsearcharray.xml:31(link) xml/gbsearcharray.xml:187(primary)
msgid "if"
msgstr ""

#: xml/gbsearcharray.xml:32(link)
msgid "return"
msgstr ""

#: xml/gbsearcharray.xml:32(link) xml/gbsearcharray.xml:198(primary)
msgid "MIN"
msgstr ""

#: xml/gbsearcharray.xml:32(link)
msgid "distance"
msgstr ""

#: xml/gbsearcharray.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>                 (v1,v2)\n"
"<placeholder-2/>                (<placeholder-3/>)              (<placeholder-4/> bsearch_node1);\n"
"enum                <placeholder-5/>;\n"
"#define             <placeholder-6/>         (barray)\n"
"#define             <placeholder-7/>              (barray, bconfig, key_node)\n"
"#define             <placeholder-8/>      (barray, bconfig, key_node)\n"
"#define             <placeholder-9/>    (barray, bconfig, key_node)\n"
"#define             <placeholder-10/>              (n)\n"
"#define             <placeholder-11/>               (barray)\n"
"<placeholder-12/>                <placeholder-13/>                                  ();\n"
"<placeholder-14/>              <placeholder-15/>                                 (<placeholder-16/> );\n"
msgstr ""

#: xml/gbsearcharray.xml:54(title)
msgid "G_BSEARCH_ARRAY_CMP()"
msgstr ""

#: xml/gbsearcharray.xml:55(programlisting)
#, no-wrap
msgid "#define G_BSEARCH_ARRAY_CMP(v1,v2) ((v1) &gt; (v2) ? +1 : (v1) == (v2) ? 0 : -1)\n"
msgstr ""

#: xml/gbsearcharray.xml:60(term)
msgid "<parameter>v1</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:63(term)
msgid "<parameter>v2</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:70(title)
msgid "GBSearchCompareFunc ()"
msgstr ""

#: xml/gbsearcharray.xml:71(primary)
msgid "GBSearchCompareFunc"
msgstr ""

#: xml/gbsearcharray.xml:71(programlisting)
#, no-wrap
msgid "<link linkend=\"gint\">gint</link>                (*GBSearchCompareFunc)              (<link linkend=\"gconstpointer\">gconstpointer</link> bsearch_node1);"
msgstr ""

#: xml/gbsearcharray.xml:75(term)
msgid "<parameter>bsearch_node1</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:84(title)
msgid "enum GBSearchArrayFlags"
msgstr ""

#: xml/gbsearcharray.xml:85(programlisting)
#, no-wrap
msgid ""
"typedef enum\n"
"{\n"
"  G_BSEARCH_ARRAY_ALIGN_POWER2  = 1 &lt;&lt; 0, /* align memory to power2 sizes */\n"
"  G_BSEARCH_ARRAY_AUTO_SHRINK  = 1 &lt;&lt; 1   /* shrink array upon removal */\n"
"} GBSearchArrayFlags;\n"
msgstr ""

#: xml/gbsearcharray.xml:95(title)
msgid "g_bsearch_array_get_n_nodes()"
msgstr ""

#: xml/gbsearcharray.xml:96(programlisting)
#, no-wrap
msgid "#define             g_bsearch_array_get_n_nodes(barray)"
msgstr ""

#: xml/gbsearcharray.xml:100(term) xml/gbsearcharray.xml:112(term)
#: xml/gbsearcharray.xml:130(term) xml/gbsearcharray.xml:148(term)
#: xml/gbsearcharray.xml:179(term)
msgid "<parameter>barray</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:107(title)
msgid "g_bsearch_array_lookup()"
msgstr ""

#: xml/gbsearcharray.xml:108(programlisting)
#, no-wrap
msgid "#define             g_bsearch_array_lookup(barray, bconfig, key_node)"
msgstr ""

#: xml/gbsearcharray.xml:115(term) xml/gbsearcharray.xml:133(term)
#: xml/gbsearcharray.xml:151(term)
msgid "<parameter>bconfig</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:118(term) xml/gbsearcharray.xml:136(term)
#: xml/gbsearcharray.xml:154(term)
msgid "<parameter>key_node</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:125(title)
msgid "g_bsearch_array_lookup_sibling()"
msgstr ""

#: xml/gbsearcharray.xml:126(programlisting)
#, no-wrap
msgid "#define             g_bsearch_array_lookup_sibling(barray, bconfig, key_node)"
msgstr ""

#: xml/gbsearcharray.xml:143(title)
msgid "g_bsearch_array_lookup_insertion()"
msgstr ""

#: xml/gbsearcharray.xml:144(programlisting)
#, no-wrap
msgid "#define             g_bsearch_array_lookup_insertion(barray, bconfig, key_node)"
msgstr ""

#: xml/gbsearcharray.xml:161(title)
msgid "G_BSEARCH_UPPER_POWER2()"
msgstr ""

#: xml/gbsearcharray.xml:162(programlisting)
#, no-wrap
msgid "#define             G_BSEARCH_UPPER_POWER2(n)"
msgstr ""

#: xml/gbsearcharray.xml:166(term)
msgid "<parameter>n</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:173(title)
msgid "G_BSEARCH_ARRAY_NODES()"
msgstr ""

#: xml/gbsearcharray.xml:174(programlisting)
#, no-wrap
msgid "#define G_BSEARCH_ARRAY_NODES(barray)    (((guint8*) (barray)) + sizeof (GBSearchArray))\n"
msgstr ""

#: xml/gbsearcharray.xml:186(title)
msgid "if ()"
msgstr ""

#: xml/gbsearcharray.xml:187(programlisting)
#, no-wrap
msgid "<link linkend=\"else\">else</link>                if                                  ();"
msgstr ""

#: xml/gbsearcharray.xml:197(title)
msgid "MIN ()"
msgstr ""

#: xml/gbsearcharray.xml:198(programlisting)
#, no-wrap
msgid "<link linkend=\"return\">return</link>              MIN                                 (<link linkend=\"distance\">distance</link> );"
msgstr ""

#: xml/gbsearcharray.xml:202(term)
msgid "<parameter>Param1</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-assertions-helper.xml:7(refentrytitle)
#: xml/gcut-assertions-helper.xml:13(refname)
msgid "gcut-assertions-helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:22(link)
#: xml/gcut-assertions-helper.xml:168(primary)
msgid "gcut_assert_equal_type_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:23(link)
#: xml/gcut-assertions-helper.xml:24(link)
#: xml/gcut-assertions-helper.xml:59(link)
#: xml/gcut-assertions-helper.xml:68(link)
#: xml/gcut-assertions-helper.xml:106(link)
#: xml/gcut-assertions-helper.xml:115(link) xml/gcut-enum.xml:23(link)
#: xml/gcut-enum.xml:26(link) xml/gcut-enum.xml:28(link)
#: xml/gcut-enum.xml:31(link) xml/gcut-list.xml:40(link)
#: xml/gcut-list.xml:42(link) xml/gcut-value-equal.xml:25(link)
#: xml/gcut-value-equal.xml:26(link)
msgid "GType"
msgstr ""

#: xml/gcut-assertions-helper.xml:29(link)
#: xml/gcut-assertions-helper.xml:204(primary)
msgid "gcut_assert_equal_value_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:30(link)
#: xml/gcut-assertions-helper.xml:31(link) xml/gcut-value-equal.xml:15(type)
#: xml/gcut-value-equal.xml:23(link) xml/gcut-value-equal.xml:24(link)
msgid "GValue"
msgstr ""

#: xml/gcut-assertions-helper.xml:36(link)
#: xml/gcut-assertions-helper.xml:240(primary)
msgid "gcut_assert_equal_list_int_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:43(link)
#: xml/gcut-assertions-helper.xml:276(primary)
msgid "gcut_assert_equal_list_uint_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:50(link)
#: xml/gcut-assertions-helper.xml:312(primary)
msgid "gcut_assert_equal_list_string_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:58(link)
#: xml/gcut-assertions-helper.xml:349(primary)
msgid "gcut_assert_equal_list_enum_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:67(link)
#: xml/gcut-assertions-helper.xml:393(primary)
msgid "gcut_assert_equal_list_flags_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:76(link)
#: xml/gcut-assertions-helper.xml:437(primary)
msgid "gcut_assert_equal_list_object_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:85(link)
#: xml/gcut-assertions-helper.xml:478(primary)
msgid "gcut_assert_equal_hash_table_string_string_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:87(link)
#: xml/gcut-assertions-helper.xml:88(link) xml/gcut-hash-table.xml:15(type)
#: xml/gcut-hash-table.xml:23(link) xml/gcut-hash-table.xml:24(link)
#: xml/gcut-hash-table.xml:26(link) xml/gcut-hash-table.xml:30(link)
#: xml/gcut-hash-table.xml:31(link) xml/gcut-hash-table.xml:33(link)
#: xml/gcut-public.xml:29(link) xml/gcut-public.xml:30(link)
#: xml/gcut-test-utils.xml:31(link) xml/gcut-test-utils.xml:33(link)
msgid "GHashTable"
msgstr ""

#: xml/gcut-assertions-helper.xml:93(link)
#: xml/gcut-assertions-helper.xml:515(primary)
msgid "gcut_assert_error_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:98(link)
#: xml/gcut-assertions-helper.xml:543(primary)
msgid "gcut_assert_equal_error_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:105(link)
#: xml/gcut-assertions-helper.xml:579(primary)
msgid "gcut_assert_equal_enum_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:114(link)
#: xml/gcut-assertions-helper.xml:623(primary)
msgid "gcut_assert_equal_flags_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:123(link)
#: xml/gcut-assertions-helper.xml:667(primary)
msgid "gcut_assert_equal_object_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:132(link)
#: xml/gcut-assertions-helper.xml:711(primary)
msgid "gcut_assert_equal_int64_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:133(link)
#: xml/gcut-assertions-helper.xml:134(link)
msgid "gint64"
msgstr ""

#: xml/gcut-assertions-helper.xml:139(link)
#: xml/gcut-assertions-helper.xml:747(primary)
msgid "gcut_assert_equal_uint64_helper"
msgstr ""

#: xml/gcut-assertions-helper.xml:140(link)
#: xml/gcut-assertions-helper.xml:141(link)
msgid "guint64"
msgstr ""

#: xml/gcut-assertions-helper.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>       (<placeholder-3/> *test_context,\n"
"                                                         <placeholder-4/> expected,\n"
"                                                         <placeholder-5/> actual,\n"
"                                                         const <placeholder-6/> *expression_expected,\n"
"                                                         const <placeholder-7/> *expression_actual,\n"
"                                                         const <placeholder-8/> *format,\n"
"                                                         ...);\n"
"<placeholder-9/>                <placeholder-10/>      (<placeholder-11/> *test_context,\n"
"                                                         <placeholder-12/> *expected,\n"
"                                                         <placeholder-13/> *actual,\n"
"                                                         const <placeholder-14/> *expression_expected,\n"
"                                                         const <placeholder-15/> *expression_actual,\n"
"                                                         const <placeholder-16/> *format,\n"
"                                                         ...);\n"
"<placeholder-17/>                <placeholder-18/>   (<placeholder-19/> *test_context,\n"
"                                                         const <placeholder-20/> *expected,\n"
"                                                         const <placeholder-21/> *actual,\n"
"                                                         const <placeholder-22/> *expression_expected,\n"
"                                                         const <placeholder-23/> *expression_actual,\n"
"                                                         const <placeholder-24/> *format,\n"
"                                                         ...);\n"
"<placeholder-25/>                <placeholder-26/>  (<placeholder-27/> *test_context,\n"
"                                                         const <placeholder-28/> *expected,\n"
"                                                         const <placeholder-29/> *actual,\n"
"                                                         const <placeholder-30/> *expression_expected,\n"
"                                                         const <placeholder-31/> *expression_actual,\n"
"                                                         const <placeholder-32/> *user_message_format,\n"
"                                                         ...);\n"
"<placeholder-33/>                <placeholder-34/>\n"
"                                                        (<placeholder-35/> *test_context,\n"
"                                                         const <placeholder-36/> *expected,\n"
"                                                         const <placeholder-37/> *actual,\n"
"                                                         const <placeholder-38/> *expression_expected,\n"
"                                                         const <placeholder-39/> *expression_actual,\n"
"                                                         const <placeholder-40/> *user_message_format,\n"
"                                                         ...);\n"
"<placeholder-41/>                <placeholder-42/>  (<placeholder-43/> *test_context,\n"
"                                                         <placeholder-44/> type,\n"
"                                                         const <placeholder-45/> *expected,\n"
"                                                         const <placeholder-46/> *actual,\n"
"                                                         const <placeholder-47/> *expression_type,\n"
"                                                         const <placeholder-48/> *expression_expected,\n"
"                                                         const <placeholder-49/> *expression_actual,\n"
"                                                         const <placeholder-50/> *user_message_format,\n"
"                                                         ...);\n"
"<placeholder-51/>                <placeholder-52/> (<placeholder-53/> *test_context,\n"
"                                                         <placeholder-54/> type,\n"
"                                                         const <placeholder-55/> *expected,\n"
"                                                         const <placeholder-56/> *actual,\n"
"                                                         const <placeholder-57/> *expression_type,\n"
"                                                         const <placeholder-58/> *expression_expected,\n"
"                                                         const <placeholder-59/> *expression_actual,\n"
"                                                         const <placeholder-60/> *user_message_format,\n"
"                                                         ...);\n"
"<placeholder-61/>                <placeholder-62/>\n"
"                                                        (<placeholder-63/> *test_context,\n"
"                                                         const <placeholder-64/> *expected,\n"
"                                                         const <placeholder-65/> *actual,\n"
"                                                         <placeholder-66/> equal_function,\n"
"                                                         const <placeholder-67/> *expression_expected,\n"
"                                                         const <placeholder-68/> *expression_actual,\n"
"                                                         const <placeholder-69/> *user_message_format,\n"
"                                                         ...);\n"
"<placeholder-70/>                <placeholder-71/>\n"
"                                                        (<placeholder-72/> *test_context,\n"
"                                                         <placeholder-73/> *expected,\n"
"                                                         <placeholder-74/> *actual,\n"
"                                                         const <placeholder-75/> *expression_expected,\n"
"                                                         const <placeholder-76/> *expression_actual,\n"
"                                                         const <placeholder-77/> *user_message_format,\n"
"                                                         ...);\n"
"<placeholder-78/>                <placeholder-79/>            (<placeholder-80/> *test_context,\n"
"                                                         <placeholder-81/> *error,\n"
"                                                         const <placeholder-82/> *expression_error,\n"
"                                                         const <placeholder-83/> *user_message_format,\n"
"                                                         ...);\n"
"<placeholder-84/>                <placeholder-85/>      (<placeholder-86/> *test_context,\n"
"                                                         const <placeholder-87/> *expected,\n"
"                                                         const <placeholder-88/> *actual,\n"
"                                                         const <placeholder-89/> *expression_expected,\n"
"                                                         const <placeholder-90/> *expression_actual,\n"
"                                                         const <placeholder-91/> *user_message_format,\n"
"                                                         ...);\n"
"<placeholder-92/>                <placeholder-93/>       (<placeholder-94/> *test_context,\n"
"                                                         <placeholder-95/> enum_type,\n"
"                                                         <placeholder-96/> expected,\n"
"                                                         <placeholder-97/> actual,\n"
"                                                         const <placeholder-98/> *expression_enum_type,\n"
"                                                         const <placeholder-99/> *expression_expected,\n"
"                                                         const <placeholder-100/> *expression_actual,\n"
"                                                         const <placeholder-101/> *user_message_format,\n"
"                                                         ...);\n"
"<placeholder-102/>                <placeholder-103/>      (<placeholder-104/> *test_context,\n"
"                                                         <placeholder-105/> flags_type,\n"
"                                                         <placeholder-106/> expected,\n"
"                                                         <placeholder-107/> actual,\n"
"                                                         const <placeholder-108/> *expression_flags_type,\n"
"                                                         const <placeholder-109/> *expression_expected,\n"
"                                                         const <placeholder-110/> *expression_actual,\n"
"                                                         const <placeholder-111/> *user_message_format,\n"
"                                                         ...);\n"
"<placeholder-112/>                <placeholder-113/>     (<placeholder-114/> *test_context,\n"
"                                                         <placeholder-115/> *expected,\n"
"                                                         <placeholder-116/> *actual,\n"
"                                                         <placeholder-117/> equal_function,\n"
"                                                         const <placeholder-118/> *expression_expected,\n"
"                                                         const <placeholder-119/> *expression_actual,\n"
"                                                         const <placeholder-120/> *expression_equal_function,\n"
"                                                         const <placeholder-121/> *user_message_format,\n"
"                                                         ...);\n"
"<placeholder-122/>                <placeholder-123/>      (<placeholder-124/> *test_context,\n"
"                                                         <placeholder-125/> expected,\n"
"                                                         <placeholder-126/> actual,\n"
"                                                         const <placeholder-127/> *expression_expected,\n"
"                                                         const <placeholder-128/> *expression_actual,\n"
"                                                         const <placeholder-129/> *user_message_format,\n"
"                                                         ...);\n"
"<placeholder-130/>                <placeholder-131/>     (<placeholder-132/> *test_context,\n"
"                                                         <placeholder-133/> expected,\n"
"                                                         <placeholder-134/> actual,\n"
"                                                         const <placeholder-135/> *expression_expected,\n"
"                                                         const <placeholder-136/> *expression_actual,\n"
"                                                         const <placeholder-137/> *user_message_format,\n"
"                                                         ...);\n"
msgstr ""

#: xml/gcut-assertions-helper.xml:167(title)
msgid "gcut_assert_equal_type_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:168(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_type_helper       (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         <link linkend=\"GType\">GType</link> expected,\n"
"                                                         <link linkend=\"GType\">GType</link> actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:187(term)
#: xml/gcut-assertions-helper.xml:223(term)
#: xml/gcut-assertions-helper.xml:259(term)
#: xml/gcut-assertions-helper.xml:295(term)
#: xml/gcut-assertions-helper.xml:332(term)
#: xml/gcut-assertions-helper.xml:376(term)
#: xml/gcut-assertions-helper.xml:420(term)
#: xml/gcut-assertions-helper.xml:461(term)
#: xml/gcut-assertions-helper.xml:498(term)
#: xml/gcut-assertions-helper.xml:562(term)
#: xml/gcut-assertions-helper.xml:606(term)
#: xml/gcut-assertions-helper.xml:650(term)
#: xml/gcut-assertions-helper.xml:691(term)
#: xml/gcut-assertions-helper.xml:730(term)
#: xml/gcut-assertions-helper.xml:766(term)
#: xml/gdkcut-pixbuf-assertions-helper.xml:77(term)
msgid "<parameter>expression_expected</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-assertions-helper.xml:190(term)
#: xml/gcut-assertions-helper.xml:226(term)
#: xml/gcut-assertions-helper.xml:262(term)
#: xml/gcut-assertions-helper.xml:298(term)
#: xml/gcut-assertions-helper.xml:335(term)
#: xml/gcut-assertions-helper.xml:379(term)
#: xml/gcut-assertions-helper.xml:423(term)
#: xml/gcut-assertions-helper.xml:464(term)
#: xml/gcut-assertions-helper.xml:501(term)
#: xml/gcut-assertions-helper.xml:565(term)
#: xml/gcut-assertions-helper.xml:609(term)
#: xml/gcut-assertions-helper.xml:653(term)
#: xml/gcut-assertions-helper.xml:694(term)
#: xml/gcut-assertions-helper.xml:733(term)
#: xml/gcut-assertions-helper.xml:769(term)
#: xml/gdkcut-pixbuf-assertions-helper.xml:80(term)
msgid "<parameter>expression_actual</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-assertions-helper.xml:203(title)
msgid "gcut_assert_equal_value_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:204(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_value_helper      (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         <link linkend=\"GValue\">GValue</link> *expected,\n"
"                                                         <link linkend=\"GValue\">GValue</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:239(title)
msgid "gcut_assert_equal_list_int_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:240(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_int_helper   (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         const <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         const <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:275(title)
msgid "gcut_assert_equal_list_uint_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:276(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_uint_helper  (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         const <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         const <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:311(title)
msgid "gcut_assert_equal_list_string_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:312(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_string_helper\n"
"                                                        (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         const <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         const <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:348(title)
msgid "gcut_assert_equal_list_enum_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:349(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_enum_helper  (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         <link linkend=\"GType\">GType</link> type,\n"
"                                                         const <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         const <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:373(term)
#: xml/gcut-assertions-helper.xml:417(term)
msgid "<parameter>expression_type</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-assertions-helper.xml:392(title)
msgid "gcut_assert_equal_list_flags_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:393(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_flags_helper (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         <link linkend=\"GType\">GType</link> type,\n"
"                                                         const <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         const <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:436(title)
msgid "gcut_assert_equal_list_object_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:437(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_list_object_helper\n"
"                                                        (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         const <link linkend=\"GList\">GList</link> *expected,\n"
"                                                         const <link linkend=\"GList\">GList</link> *actual,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_function,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:458(term)
#: xml/gcut-assertions-helper.xml:688(term) xml/gcut-assertions.xml:298(term)
#: xml/gcut-assertions.xml:654(term)
msgid "<parameter>equal_function</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-assertions-helper.xml:477(title)
msgid "gcut_assert_equal_hash_table_string_string_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:478(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_hash_table_string_string_helper\n"
"                                                        (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         <link linkend=\"GHashTable\">GHashTable</link> *expected,\n"
"                                                         <link linkend=\"GHashTable\">GHashTable</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:514(title)
msgid "gcut_assert_error_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:515(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_error_helper            (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         <link linkend=\"GError\">GError</link> *error,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_error,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:529(term)
msgid "<parameter>expression_error</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-assertions-helper.xml:542(title)
msgid "gcut_assert_equal_error_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:543(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_error_helper      (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         const <link linkend=\"GError\">GError</link> *expected,\n"
"                                                         const <link linkend=\"GError\">GError</link> *actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:578(title)
msgid "gcut_assert_equal_enum_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:579(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_enum_helper       (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         <link linkend=\"GType\">GType</link> enum_type,\n"
"                                                         <link linkend=\"gint\">gint</link> expected,\n"
"                                                         <link linkend=\"gint\">gint</link> actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_enum_type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:594(term) xml/gcut-assertions.xml:537(term)
#: xml/gcut-enum.xml:70(term) xml/gcut-enum.xml:95(term)
msgid "<parameter>enum_type</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-assertions-helper.xml:603(term)
msgid "<parameter>expression_enum_type</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-assertions-helper.xml:622(title)
msgid "gcut_assert_equal_flags_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:623(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_flags_helper      (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         <link linkend=\"GType\">GType</link> flags_type,\n"
"                                                         <link linkend=\"gint\">gint</link> expected,\n"
"                                                         <link linkend=\"gint\">gint</link> actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_flags_type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:638(term) xml/gcut-assertions.xml:574(term)
#: xml/gcut-enum.xml:116(term) xml/gcut-enum.xml:140(term)
msgid "<parameter>flags_type</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-assertions-helper.xml:647(term)
msgid "<parameter>expression_flags_type</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-assertions-helper.xml:666(title)
msgid "gcut_assert_equal_object_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:667(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_object_helper     (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         <link linkend=\"GObject\">GObject</link> *expected,\n"
"                                                         <link linkend=\"GObject\">GObject</link> *actual,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_function,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_equal_function,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:697(term)
msgid "<parameter>expression_equal_function</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-assertions-helper.xml:710(title)
msgid "gcut_assert_equal_int64_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:711(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_int64_helper      (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         <link linkend=\"gint64\">gint64</link> expected,\n"
"                                                         <link linkend=\"gint64\">gint64</link> actual,\n"
"                                                         const <link linkend=\"char\">char</link> *expression_expected,\n"
"                                                         const <link linkend=\"char\">char</link> *expression_actual,\n"
"                                                         const <link linkend=\"char\">char</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions-helper.xml:746(title)
msgid "gcut_assert_equal_uint64_helper ()"
msgstr ""

#: xml/gcut-assertions-helper.xml:747(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_assert_equal_uint64_helper     (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         <link linkend=\"guint64\">guint64</link> expected,\n"
"                                                         <link linkend=\"guint64\">guint64</link> actual,\n"
"                                                         const <link linkend=\"char\">char</link> *expression_expected,\n"
"                                                         const <link linkend=\"char\">char</link> *expression_actual,\n"
"                                                         const <link linkend=\"char\">char</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-assertions.xml:7(refentrytitle)
#: xml/gcut-assertions.xml:13(refname)
msgid "Assertions with GLib support"
msgstr "GLibサポート付きの検証"

#: xml/gcut-assertions.xml:14(refpurpose)
msgid "Checks that your program works as you expect with GLib support."
msgstr ""
"GLibサポート付きであなたのプログラムが期待通りに動作しているかを検証します。"

#: xml/gcut-assertions.xml:23(link) xml/gcut-assertions.xml:78(primary)
msgid "gcut_assert_equal_type"
msgstr ""

#: xml/gcut-assertions.xml:24(link) xml/gcut-assertions.xml:98(primary)
msgid "cut_assert_equal_g_type"
msgstr ""

#: xml/gcut-assertions.xml:25(link) xml/gcut-assertions.xml:118(primary)
msgid "gcut_assert_equal_value"
msgstr ""

#: xml/gcut-assertions.xml:26(link) xml/gcut-assertions.xml:138(primary)
msgid "cut_assert_equal_g_value"
msgstr ""

#: xml/gcut-assertions.xml:27(link) xml/gcut-assertions.xml:158(primary)
msgid "gcut_assert_equal_list_int"
msgstr ""

#: xml/gcut-assertions.xml:28(link) xml/gcut-assertions.xml:178(primary)
msgid "cut_assert_equal_g_list_int"
msgstr ""

#: xml/gcut-assertions.xml:29(link) xml/gcut-assertions.xml:200(primary)
msgid "gcut_assert_equal_list_uint"
msgstr ""

#: xml/gcut-assertions.xml:30(link) xml/gcut-assertions.xml:220(primary)
msgid "gcut_assert_equal_list_string"
msgstr ""

#: xml/gcut-assertions.xml:31(link) xml/gcut-assertions.xml:240(primary)
msgid "cut_assert_equal_g_list_string"
msgstr ""

#: xml/gcut-assertions.xml:32(link) xml/gcut-assertions.xml:262(primary)
msgid "gcut_assert_equal_list_object"
msgstr ""

#: xml/gcut-assertions.xml:33(link) xml/gcut-assertions.xml:283(primary)
msgid "gcut_assert_equal_list_object_custom"
msgstr ""

#: xml/gcut-assertions.xml:35(link) xml/gcut-assertions.xml:310(primary)
msgid "gcut_assert_equal_list_enum"
msgstr ""

#: xml/gcut-assertions.xml:36(link) xml/gcut-assertions.xml:334(primary)
msgid "gcut_assert_equal_list_flags"
msgstr ""

#: xml/gcut-assertions.xml:37(link) xml/gcut-assertions.xml:358(primary)
msgid "gcut_assert_equal_hash_table_string_string"
msgstr ""

#: xml/gcut-assertions.xml:39(link) xml/gcut-assertions.xml:379(primary)
msgid "gcut_assert_error"
msgstr ""

#: xml/gcut-assertions.xml:40(link) xml/gcut-assertions.xml:396(primary)
msgid "cut_assert_g_error"
msgstr ""

#: xml/gcut-assertions.xml:41(link) xml/gcut-assertions.xml:415(primary)
msgid "gcut_assert_equal_error"
msgstr ""

#: xml/gcut-assertions.xml:42(link) xml/gcut-assertions.xml:435(primary)
msgid "gcut_assert_remove_path"
msgstr ""

#: xml/gcut-assertions.xml:43(link) xml/gcut-assertions.xml:451(primary)
msgid "gcut_assert_remove_path_helper"
msgstr ""

#: xml/gcut-assertions.xml:44(link) xml/gcut-assertions.xml:466(primary)
msgid "cut_assert_remove_path"
msgstr ""

#: xml/gcut-assertions.xml:45(link) xml/gcut-assertions.xml:484(primary)
msgid "gcut_assert_equal_time_val"
msgstr ""

#: xml/gcut-assertions.xml:46(link) xml/gcut-assertions.xml:504(primary)
msgid "gcut_assert_equal_time_val_helper"
msgstr ""

#: xml/gcut-assertions.xml:47(link) xml/gcut-assertions.xml:522(primary)
msgid "gcut_assert_equal_enum"
msgstr ""

#: xml/gcut-assertions.xml:48(link) xml/gcut-assertions.xml:554(primary)
msgid "gcut_assert_equal_flags"
msgstr ""

#: xml/gcut-assertions.xml:49(link) xml/gcut-assertions.xml:591(primary)
msgid "gcut_assert_equal_object"
msgstr ""

#: xml/gcut-assertions.xml:50(link) xml/gcut-assertions.xml:622(primary)
msgid "gcut_assert_equal_object_custom"
msgstr ""

#: xml/gcut-assertions.xml:52(link) xml/gcut-assertions.xml:665(primary)
msgid "gcut_assert_equal_int64"
msgstr ""

#: xml/gcut-assertions.xml:53(link) xml/gcut-assertions.xml:685(primary)
msgid "gcut_assert_equal_uint64"
msgstr ""

#: xml/gcut-assertions.xml:22(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>              (expected, actual, ...)\n"
"#define             <placeholder-2/>             (expected, actual, ...)\n"
"#define             <placeholder-3/>             (expected, actual, ...)\n"
"#define             <placeholder-4/>            (expected, actual, ...)\n"
"#define             <placeholder-5/>          (expected, actual, ...)\n"
"#define             <placeholder-6/>         (expected, actual, ...)\n"
"#define             <placeholder-7/>         (expected, actual, ...)\n"
"#define             <placeholder-8/>       (expected, actual, ...)\n"
"#define             <placeholder-9/>      (expected, actual, ...)\n"
"#define             <placeholder-10/>       (expected, actual, ...)\n"
"#define             <placeholder-11/>(expected, actual,\n"
"                                                         equal_function, ...)\n"
"#define             <placeholder-12/>         (type, expected, actual, ...)\n"
"#define             <placeholder-13/>        (type, expected, actual, ...)\n"
"#define             <placeholder-14/>(expected, actual,\n"
"                                                         ...)\n"
"#define             <placeholder-15/>                   (error, ...)\n"
"#define             <placeholder-16/>                  (error, ...)\n"
"#define             <placeholder-17/>             (expected, actual, ...)\n"
"#define             <placeholder-18/>             (path, ...)\n"
"#define             <placeholder-19/>      (path, ...)\n"
"#define             <placeholder-20/>              (path, ...)\n"
"#define             <placeholder-21/>          (expected, actual, ...)\n"
"#define             <placeholder-22/>   (expected, actual, ...)\n"
"#define             <placeholder-23/>              (enum_type, expected, actual, ...)\n"
"#define             <placeholder-24/>             (flags_type, expected, actual, ...)\n"
"#define             <placeholder-25/>            (expected, actual, ...)\n"
"#define             <placeholder-26/>     (expected, actual,\n"
"                                                         equal_function, ...)\n"
"#define             <placeholder-27/>             (expected, actual, ...)\n"
"#define             <placeholder-28/>            (expected, actual, ...)\n"
msgstr ""

#: xml/gcut-assertions.xml:77(title)
msgid "gcut_assert_equal_type()"
msgstr ""

#: xml/gcut-assertions.xml:78(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_type(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:85(simpara) xml/gcut-assertions.xml:106(simpara)
msgid "an expected GType."
msgstr "期待するGType。"

#: xml/gcut-assertions.xml:88(simpara) xml/gcut-assertions.xml:109(simpara)
msgid "an actual GType."
msgstr "実際のGType。"

#: xml/gcut-assertions.xml:97(title)
msgid "cut_assert_equal_g_type()"
msgstr ""

#: xml/gcut-assertions.xml:98(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_g_type(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:99(para)
msgid ""
"<literal>cut_assert_equal_g_type</literal> has been deprecated since version "
"1.0.3 and should not be used in newly-written code. Use <link linkend=\"gcut-"
"assert-equal-type\"><function>gcut_assert_equal_type()</function></link> "
"instead."
msgstr ""
"<literal>cut_assert_equal_g_type</literal>はバージョン1.0.3から非推奨になりま"
"した。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"assert-equal-type\"><function>gcut_assert_equal_type()</function></link>を"
"使ってください。"

#: xml/gcut-assertions.xml:117(title)
msgid "gcut_assert_equal_value()"
msgstr ""

#: xml/gcut-assertions.xml:118(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_value(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:125(simpara) xml/gcut-assertions.xml:146(simpara)
msgid "an expected GValue *."
msgstr "期待するGValue *。"

#: xml/gcut-assertions.xml:128(simpara) xml/gcut-assertions.xml:149(simpara)
msgid "an actual GValue *."
msgstr "実際のGValue *。"

#: xml/gcut-assertions.xml:137(title)
msgid "cut_assert_equal_g_value()"
msgstr ""

#: xml/gcut-assertions.xml:138(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_g_value(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:139(para)
msgid ""
"<literal>cut_assert_equal_g_value</literal> has been deprecated since "
"version 1.0.3 and should not be used in newly-written code. Use <link "
"linkend=\"gcut-assert-equal-value\"><function>gcut_assert_equal_value()</"
"function></link> instead."
msgstr ""
"<literal>cut_assert_equal_g_value</literal>はバージョン1.0.3から非推奨になり"
"ました。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"assert-equal-value\"><function>gcut_assert_equal_value()</function></link>を"
"使ってください。"

#: xml/gcut-assertions.xml:157(title)
msgid "gcut_assert_equal_list_int()"
msgstr ""

#: xml/gcut-assertions.xml:158(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_list_int(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:165(simpara) xml/gcut-assertions.xml:186(simpara)
msgid "an expected GList * of integer."
msgstr "期待する整数のリスト。（GList *）"

#: xml/gcut-assertions.xml:168(simpara) xml/gcut-assertions.xml:189(simpara)
msgid "an actual GList * of integer."
msgstr "実際の整数のリスト。（GList *）"

#: xml/gcut-assertions.xml:177(title)
msgid "cut_assert_equal_g_list_int()"
msgstr ""

#: xml/gcut-assertions.xml:178(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_g_list_int(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:179(para)
msgid ""
"<literal>cut_assert_equal_g_list_int</literal> has been deprecated since "
"version 1.0.3 and should not be used in newly-written code. Use <link "
"linkend=\"gcut-assert-equal-list-int\"><function>gcut_assert_equal_list_int()"
"</function></link> instead."
msgstr ""
"<literal>cut_assert_equal_g_string_list_int</literal>はバージョン1.0.3から非"
"推奨になりました。新しく書くコードでは使わないでください。代わりに<link "
"linkend=\"gcut-assert-equal-list-int\"><function>gcut_assert_equal_list_int()"
"</function></link>を使ってください。"

#: xml/gcut-assertions.xml:199(title)
msgid "gcut_assert_equal_list_uint()"
msgstr ""

#: xml/gcut-assertions.xml:200(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_list_uint(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:207(simpara)
msgid "an expected GList * of unsigned integer."
msgstr "期待する符号無し整数のリスト。（GList *）"

#: xml/gcut-assertions.xml:210(simpara)
msgid "an actual GList * of unsigned integer."
msgstr "実際の符号無し整数のリスト。（GList *）"

#: xml/gcut-assertions.xml:219(title)
msgid "gcut_assert_equal_list_string()"
msgstr ""

#: xml/gcut-assertions.xml:220(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_list_string(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:227(simpara) xml/gcut-assertions.xml:248(simpara)
msgid "an expected GList * of string."
msgstr "期待する文字列のリスト。（GList *）"

#: xml/gcut-assertions.xml:230(simpara) xml/gcut-assertions.xml:251(simpara)
msgid "an actual GList * of string."
msgstr "実際の文字列のリスト。（GList *）"

#: xml/gcut-assertions.xml:239(title)
msgid "cut_assert_equal_g_list_string()"
msgstr ""

#: xml/gcut-assertions.xml:240(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_g_list_string(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:241(para)
msgid ""
"<literal>cut_assert_equal_g_list_string</literal> has been deprecated since "
"version 1.0.3 and should not be used in newly-written code. Use <link "
"linkend=\"gcut-assert-equal-list-string"
"\"><function>gcut_assert_equal_list_string()</function></link> instead."
msgstr ""
"<literal>cut_assert_equal_g_list_string</literal>はバージョン1.0.3から非推奨"
"になりました。新しく書くコードでは使わないでください。代わりに<link linkend="
"\"gcut-assert-equal-list-string\"><function>gcut_assert_equal_list_string()</"
"function></link>を使ってください。"

#: xml/gcut-assertions.xml:261(title)
msgid "gcut_assert_equal_list_object()"
msgstr ""

#: xml/gcut-assertions.xml:262(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_list_object(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:263(para)
msgid ""
"Passes if <parameter>expected</parameter> and <parameter>actual</parameter> "
"has same GObject * in same order."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>が同じGObject *"
"を同じ順番で持っているときパスします。"

#: xml/gcut-assertions.xml:270(simpara) xml/gcut-assertions.xml:293(simpara)
msgid "an expected GList * of GObject *."
msgstr "期待するGObject *のリスト。（GList *）"

#: xml/gcut-assertions.xml:273(simpara) xml/gcut-assertions.xml:296(simpara)
msgid "an actual GList * of GObject *."
msgstr "実際のGObject *のリスト。（GList *）"

#: xml/gcut-assertions.xml:282(title)
msgid "gcut_assert_equal_list_object_custom()"
msgstr ""

#: xml/gcut-assertions.xml:283(programlisting)
#, no-wrap
msgid ""
"#define             gcut_assert_equal_list_object_custom(expected, actual,          \\\n"
"                                                         equal_function, ...)"
msgstr ""

#: xml/gcut-assertions.xml:285(para)
msgid ""
"Passes if <parameter>expected</parameter> and <parameter>actual</parameter> "
"has same GObject * in same order. Each comparison of GObject * uses "
"<parameter>equal_function</parameter>."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>が同じGObject *"
"を同じ順序で持っているときパスします。それぞれのGObjet *の比較には"
"<parameter>equal_function</parameter>を使います。"

#: xml/gcut-assertions.xml:299(simpara)
msgid ""
"a function that compares two GObject *. (<link linkend=\"GEqualFunc"
"\"><type>GEqualFunc</type></link>)"
msgstr ""
"二つのGObject *を比較する関数。(<link linkend=\"GEqualFunc"
"\"><type>GEqualFunc</type></link>)"

#: xml/gcut-assertions.xml:309(title)
msgid "gcut_assert_equal_list_enum()"
msgstr ""

#: xml/gcut-assertions.xml:310(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_list_enum(type, expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:311(para)
msgid ""
"Passes if <parameter>expected</parameter> and <parameter>actual</parameter> "
"has same enum values in same order."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>が同じ列挙値を"
"同じ順序で持っているときパスします。"

#: xml/gcut-assertions.xml:318(simpara) xml/gcut-assertions.xml:538(simpara)
msgid "a GEnum type."
msgstr "GEnumの型。"

#: xml/gcut-assertions.xml:321(simpara)
msgid "an expected GList * of enum value."
msgstr "期待する列挙値のリスト。（GList *）"

#: xml/gcut-assertions.xml:324(simpara)
msgid "an actual GList * of enum value."
msgstr "実際の列挙値のリスト。（GList *）"

#: xml/gcut-assertions.xml:333(title)
msgid "gcut_assert_equal_list_flags()"
msgstr ""

#: xml/gcut-assertions.xml:334(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_list_flags(type, expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:335(para)
msgid ""
"Passes if <parameter>expected</parameter> and <parameter>actual</parameter> "
"has same flags values in same order."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>が同じフラグ値"
"を同じ順序で持っているときパスします。"

#: xml/gcut-assertions.xml:342(simpara) xml/gcut-assertions.xml:575(simpara)
msgid "a GFlags type."
msgstr "GFlagsの型。"

#: xml/gcut-assertions.xml:345(simpara)
msgid "an expected GList * of flags value."
msgstr "期待するフラグ値のリスト。（GList *）"

#: xml/gcut-assertions.xml:348(simpara)
msgid "an actual GList * of flags value."
msgstr "実際のフラグ値のリスト。（GList *）"

#: xml/gcut-assertions.xml:357(title)
msgid "gcut_assert_equal_hash_table_string_string()"
msgstr ""

#: xml/gcut-assertions.xml:358(programlisting)
#, no-wrap
msgid ""
"#define             gcut_assert_equal_hash_table_string_string(expected, actual,    \\\n"
"                                                               ...)"
msgstr ""

#: xml/gcut-assertions.xml:366(simpara)
msgid "an expected GHashTable * of string."
msgstr "期待する文字列のハッシュテーブル（GHashTable *）。"

#: xml/gcut-assertions.xml:369(simpara)
msgid "an actual GHashTable * of string."
msgstr "実際の文字列のハッシュテーブル（GHashTable *）。"

#: xml/gcut-assertions.xml:378(title)
msgid "gcut_assert_error()"
msgstr ""

#: xml/gcut-assertions.xml:379(programlisting)
#, no-wrap
msgid "#define             gcut_assert_error(error, ...)"
msgstr ""

#: xml/gcut-assertions.xml:380(para) xml/gcut-assertions.xml:398(para)
msgid "Passes if <parameter>error</parameter> == NULL."
msgstr "<parameter>error</parameter>がNULLのときにパスします。"

#: xml/gcut-assertions.xml:386(simpara) xml/gcut-assertions.xml:404(simpara)
msgid "a target GError *."
msgstr "検証対象のGError *。"

#: xml/gcut-assertions.xml:395(title)
msgid "cut_assert_g_error()"
msgstr ""

#: xml/gcut-assertions.xml:396(programlisting)
#, no-wrap
msgid "#define             cut_assert_g_error(error, ...)"
msgstr ""

#: xml/gcut-assertions.xml:397(para)
msgid ""
"<literal>cut_assert_g_error</literal> has been deprecated since version "
"1.0.3 and should not be used in newly-written code. Use <link linkend=\"gcut-"
"assert-error\"><function>gcut_assert_error()</function></link> instead."
msgstr ""
"<literal>cut_assert_g_error</literal>はバージョン1.0.3から非推奨になりまし"
"た。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"assert-error\"><function>gcut_assert_error()</function></link>を使ってくださ"
"い。"

#: xml/gcut-assertions.xml:414(title)
msgid "gcut_assert_equal_error()"
msgstr ""

#: xml/gcut-assertions.xml:415(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_error(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:422(simpara)
msgid "an expected GError *."
msgstr "期待するGError *。"

#: xml/gcut-assertions.xml:425(simpara)
msgid "an actual GError *."
msgstr "実際のGError *。"

#: xml/gcut-assertions.xml:434(title)
msgid "gcut_assert_remove_path()"
msgstr ""

#: xml/gcut-assertions.xml:435(programlisting)
#, no-wrap
msgid "#define             gcut_assert_remove_path(path, ...)"
msgstr ""

#: xml/gcut-assertions.xml:436(para) xml/gcut-assertions.xml:468(para)
msgid ""
"Passes if cut_utils_build_path(<parameter>path</parameter>, ...) is removed "
"successfully."
msgstr ""
"cut_utils_build_path(<parameter>path</parameter>, ...)の削除に成功するとパス"
"します。"

#: xml/gcut-assertions.xml:442(simpara) xml/gcut-assertions.xml:474(simpara)
msgid "a first element of the path to the removed path."
msgstr "削除するパスの最初の要素。"

#: xml/gcut-assertions.xml:450(title)
msgid "gcut_assert_remove_path_helper()"
msgstr ""

#: xml/gcut-assertions.xml:451(programlisting)
#, no-wrap
msgid "#define             gcut_assert_remove_path_helper(path, ...)"
msgstr ""

#: xml/gcut-assertions.xml:465(title)
msgid "cut_assert_remove_path()"
msgstr ""

#: xml/gcut-assertions.xml:466(programlisting)
#, no-wrap
msgid "#define             cut_assert_remove_path(path, ...)"
msgstr ""

#: xml/gcut-assertions.xml:467(para)
msgid ""
"<literal>cut_assert_remove_path</literal> has been deprecated since version "
"1.0.3 and should not be used in newly-written code. Use <link linkend=\"gcut-"
"assert-remove-path\"><function>gcut_assert_remove_path()</function></link> "
"instead."
msgstr ""
"<literal>cut_assert_remove_path</literal>はバージョン1.0.3から非推奨になりま"
"した。新しく書くコードでは使わないでください。代わりに<link linkend=\"gcut-"
"assert-remove-path\"><function>gcut_assert_remove_path()</function></link>を"
"使ってください。"

#: xml/gcut-assertions.xml:483(title)
msgid "gcut_assert_equal_time_val()"
msgstr ""

#: xml/gcut-assertions.xml:484(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_time_val(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:491(simpara)
msgid "an expected GTimeVal."
msgstr "期待するGTimeVal。"

#: xml/gcut-assertions.xml:494(simpara)
msgid "an actual GTimeVal."
msgstr "実際のGTimeVal。"

#: xml/gcut-assertions.xml:503(title)
msgid "gcut_assert_equal_time_val_helper()"
msgstr ""

#: xml/gcut-assertions.xml:504(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_time_val_helper(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:521(title)
msgid "gcut_assert_equal_enum()"
msgstr ""

#: xml/gcut-assertions.xml:522(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_enum(enum_type, expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:528(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_assert_equal_enum(GTK_TYPE_DIRECTION_TYPE,\n"
"                          GTK_DIR_LEFT, GTK_DIR_LEFT); -&gt; Pass\n"
"gcut_assert_equal_enum(GTK_TYPE_DIRECTION_TYPE,\n"
"                          GTK_DIR_DOWN, GTK_DIR_LEFT); -&gt; Fail\n"
msgstr ""
"\n"
"gcut_assert_equal_enum(GTK_TYPE_DIRECTION_TYPE,\n"
"                          GTK_DIR_LEFT, GTK_DIR_LEFT); -&gt; パス\n"
"gcut_assert_equal_enum(GTK_TYPE_DIRECTION_TYPE,\n"
"                          GTK_DIR_DOWN, GTK_DIR_LEFT); -&gt; 失敗\n"

#: xml/gcut-assertions.xml:541(simpara)
msgid "an expected enum value."
msgstr "期待する列挙値。"

#: xml/gcut-assertions.xml:544(simpara)
msgid "an actual enum value."
msgstr "実際の列挙値。"

#: xml/gcut-assertions.xml:553(title)
msgid "gcut_assert_equal_flags()"
msgstr ""

#: xml/gcut-assertions.xml:554(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_flags(flags_type, expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:560(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_assert_equal_flags(GTK_TYPE_DIALOG_FLAGS,\n"
"                        GTK_DIALOG_DESTROY_MODAL |\n"
"                          GTK_DIALOG_DESTROY_WITH_PARENT,\n"
"                        GTK_DIALOG_DESTROY_MODAL |\n"
"                          GTK_DIALOG_DESTROY_WITH_PARENT); -&gt; Pass\n"
"gcut_assert_equal_flags(GTK_TYPE_DIALOG_FLAGS,\n"
"                        GTK_DIALOG_DESTROY_MODAL |\n"
"                          GTK_DIALOG_DESTROY_WITH_PARENT,\n"
"                        GTK_DIALOG_DESTROY_MODAL); -&gt; Fail\n"
msgstr ""
"\n"
"gcut_assert_equal_flags(GTK_TYPE_DIALOG_FLAGS,\n"
"                        GTK_DIALOG_DESTROY_MODAL |\n"
"                          GTK_DIALOG_DESTROY_WITH_PARENT,\n"
"                        GTK_DIALOG_DESTROY_MODAL |\n"
"                          GTK_DIALOG_DESTROY_WITH_PARENT); -&gt; パス\n"
"gcut_assert_equal_flags(GTK_TYPE_DIALOG_FLAGS,\n"
"                        GTK_DIALOG_DESTROY_MODAL |\n"
"                          GTK_DIALOG_DESTROY_WITH_PARENT,\n"
"                        GTK_DIALOG_DESTROY_MODAL); -&gt; 失敗\n"

#: xml/gcut-assertions.xml:578(simpara)
msgid "an expected flags value."
msgstr "期待するフラグ値。"

#: xml/gcut-assertions.xml:581(simpara)
msgid "an actual flags value."
msgstr "実際の列挙値。"

#: xml/gcut-assertions.xml:590(title)
msgid "gcut_assert_equal_object()"
msgstr ""

#: xml/gcut-assertions.xml:591(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_object(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:592(para)
msgid ""
"Passes if <parameter>expected</parameter> == <parameter>actual</parameter>. "
"See <link linkend=\"gcut-assert-equal-object-custom"
"\"><function>gcut_assert_equal_object_custom()</function></link> when you "
"need to customize equality check."
msgstr ""
"<parameter>expected</parameter> == <parameter>actual</parameter>のときパスし"
"ます。等価条件を変更する必要がある場合は<link linkend=\"gcut-assert-equal-"
"object-custom\"><function>gcut_assert_equal_object_custom()</function></link>"
"見てください。"

#: xml/gcut-assertions.xml:599(programlisting)
#, no-wrap
msgid ""
"\n"
"gcut_assert_equal_object(object, object);   -&gt; Pass\n"
"gcut_assert_equal_object(object1, object2); -&gt; Fail\n"
"gcut_assert_equal_object(NULL, NULL);       -&gt; Pass\n"
"gcut_assert_equal_object(object1, NULL);    -&gt; Fail\n"
msgstr ""
"\n"
"gcut_assert_equal_object(object, object);   -&gt; パス\n"
"gcut_assert_equal_object(object1, object2); -&gt; 失敗\n"
"gcut_assert_equal_object(NULL, NULL);       -&gt; パス\n"
"gcut_assert_equal_object(object1, NULL);    -&gt; 失敗\n"

#: xml/gcut-assertions.xml:609(simpara) xml/gcut-assertions.xml:649(simpara)
msgid ""
"an expected object. (<link linkend=\"GObject\"><type>GObject</type></link> *)"
msgstr ""
"期待するオブジェクト。（<link linkend=\"GObject\"><type>GObject</type></"
"link> *）"

#: xml/gcut-assertions.xml:612(simpara) xml/gcut-assertions.xml:652(simpara)
msgid ""
"an actual object. (<link linkend=\"GObject\"><type>GObject</type></link> *)"
msgstr ""
"実際のオブジェクト。（<link linkend=\"GObject\"><type>GObject</type></link> "
"*）"

#: xml/gcut-assertions.xml:621(title)
msgid "gcut_assert_equal_object_custom()"
msgstr ""

#: xml/gcut-assertions.xml:622(programlisting)
#, no-wrap
msgid ""
"#define             gcut_assert_equal_object_custom(expected, actual,               \\\n"
"                                                    equal_function, ...)"
msgstr ""

#: xml/gcut-assertions.xml:624(para)
msgid ""
"Passes if equal_function(<parameter>expected</parameter>, <parameter>actual</"
"parameter>) == TRUE."
msgstr ""
"equal_function(<parameter>expected</parameter>, <parameter>actual</"
"parameter>) == TRUEが成り立つときパスします。"

#: xml/gcut-assertions.xml:629(programlisting)
#, no-wrap
msgid ""
"\n"
"static gboolean\n"
"equal_name (gconstpointer data1, gconstpointer data2)\n"
"{\n"
"    return g_str_equal(my_object_get_name(MY_OBJECT(data1)),\n"
"                       my_object_get_name(MY_OBJECT(data2)));\n"
"}\n"
"\n"
"gcut_assert_equal_object_custom(object, object, equal_name);   -&gt; Pass\n"
"gcut_assert_equal_object_custom(same_name_object1,\n"
"                                same_name_object2,\n"
"                                equal_name);                   -&gt; Pass\n"
"gcut_assert_equal_object_custom(different_name_object1,\n"
"                                different_name_object2,\n"
"                                equal_name);                   -&gt; Fail\n"
msgstr ""
"\n"
"static gboolean\n"
"equal_name (gconstpointer data1, gconstpointer data2)\n"
"{\n"
"    return g_str_equal(my_object_get_name(MY_OBJECT(data1)),\n"
"                       my_object_get_name(MY_OBJECT(data2)));\n"
"}\n"
"\n"
"gcut_assert_equal_object_custom(object, object, equal_name);   -&gt; パス\n"
"gcut_assert_equal_object_custom(same_name_object1,\n"
"                                same_name_object2,\n"
"                                equal_name);                   -&gt; パス\n"
"gcut_assert_equal_object_custom(different_name_object1,\n"
"                                different_name_object2,\n"
"                                equal_name);                   -&gt; 失敗\n"

#: xml/gcut-assertions.xml:655(simpara)
msgid ""
"a function that compare two object. (<link linkend=\"GEqualFunc"
"\"><type>GEqualFunc</type></link>)"
msgstr ""
"二つのオブジェクトを比較する関数。（<link linkend=\"GEqualFunc"
"\"><type>GEqualFunc</type></link>）"

#: xml/gcut-assertions.xml:664(title)
msgid "gcut_assert_equal_int64()"
msgstr ""

#: xml/gcut-assertions.xml:665(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_int64(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:672(simpara)
msgid "an expected 64 bit integer value. (gint64)"
msgstr "期待する64bit整数の値。（gint64）"

#: xml/gcut-assertions.xml:675(simpara)
msgid "an actual 64 bit integer value. (gint64)"
msgstr "実際の64bit整数の値。（gint64）"

#: xml/gcut-assertions.xml:684(title)
msgid "gcut_assert_equal_uint64()"
msgstr ""

#: xml/gcut-assertions.xml:685(programlisting)
#, no-wrap
msgid "#define             gcut_assert_equal_uint64(expected, actual, ...)"
msgstr ""

#: xml/gcut-assertions.xml:692(simpara)
msgid "an expected unsigned integer value. (guint64)"
msgstr "期待する64bit符号無し整数の値。（guint64）"

#: xml/gcut-assertions.xml:695(simpara)
msgid "an actual unsigned integer value. (guint64)"
msgstr "実際の64bit符号無し符号整数の値。（guint64）"

#: xml/gcut-enum.xml:7(refentrytitle) xml/gcut-enum.xml:13(refname)
msgid "Assertion Utilities for #GEnum and #GFlags."
msgstr ""

#: xml/gcut-enum.xml:15(type)
msgid "GEnum"
msgstr ""

#: xml/gcut-enum.xml:15(type)
msgid "GFlags"
msgstr ""

#: xml/gcut-enum.xml:14(refpurpose)
msgid ""
"Utilities to write assertions related to <link linkend=\"GEnum"
"\"><placeholder-1/></link> or <link linkend=\"GFlags\"><placeholder-2/></"
"link> more easily."
msgstr ""
"<link linkend=\"GEnum\"><placeholder-1/></link>または<link linkend=\"GFlags"
"\"><placeholder-2/></link>に関する検証をもっと簡単に書くためのユーティリ"
"ティ。"

#: xml/gcut-enum.xml:23(link) xml/gcut-enum.xml:62(primary)
msgid "gcut_enum_equal"
msgstr ""

#: xml/gcut-enum.xml:26(link) xml/gcut-enum.xml:87(primary)
msgid "gcut_enum_inspect"
msgstr ""

#: xml/gcut-enum.xml:28(link) xml/gcut-enum.xml:108(primary)
msgid "gcut_flags_equal"
msgstr ""

#: xml/gcut-enum.xml:31(link) xml/gcut-enum.xml:132(primary)
msgid "gcut_flags_inspect"
msgstr ""

#: xml/gcut-enum.xml:22(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            <placeholder-2/>                     (<placeholder-3/> enum_type,\n"
"                                                         <placeholder-4/> enum1,\n"
"                                                         <placeholder-5/> enum2);\n"
"<placeholder-6/>*              <placeholder-7/>                   (<placeholder-8/> enum_type,\n"
"                                                         <placeholder-9/> enum_value);\n"
"<placeholder-10/>            <placeholder-11/>                    (<placeholder-12/> flags_type,\n"
"                                                         <placeholder-13/> flags1,\n"
"                                                         <placeholder-14/> flags2);\n"
"<placeholder-15/>*              <placeholder-16/>                  (<placeholder-17/> flags_type,\n"
"                                                         <placeholder-18/> flags);\n"
msgstr ""

#: xml/gcut-enum.xml:46(para) xml/gcut-error.xml:39(para)
#: xml/gcut-hash-table.xml:47(para) xml/gcut-list.xml:56(para)
#: xml/gcut-object.xml:43(para) xml/gcut-value-equal.xml:41(para)
msgid ""
"To write assertions, you need to check equality and show expected and actual "
"values."
msgstr ""

#: xml/gcut-enum.xml:50(para)
msgid ""
"The utilities help you to write assertions that are related to <link linkend="
"\"GEnum\"><type>GEnum</type></link> or <link linkend=\"GFlags"
"\"><type>GFlags</type></link>."
msgstr ""

#: xml/gcut-enum.xml:61(title)
msgid "gcut_enum_equal ()"
msgstr ""

#: xml/gcut-enum.xml:62(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_enum_equal                     (<link linkend=\"GType\">GType</link> enum_type,\n"
"                                                         <link linkend=\"gint\">gint</link> enum1,\n"
"                                                         <link linkend=\"gint\">gint</link> enum2);"
msgstr ""

#: xml/gcut-enum.xml:65(para)
msgid ""
"Compares two <link linkend=\"GError\"><type>GError</type></link>, "
"<parameter>enum1</parameter> and <parameter>enum2</parameter>."
msgstr ""
"ふたつの<link linkend=\"GError\"><type>GError</type></link>、"
"<parameter>enum1</parameter>と<parameter>enum2</parameter>を比較します。"

#: xml/gcut-enum.xml:73(term)
msgid "<parameter>enum1</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-enum.xml:76(term)
msgid "<parameter>enum2</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-enum.xml:79(simpara)
msgid ""
"TRUE if both of enum1 and enum2 have the same domain, code and message, "
"FALSE otherwise."
msgstr ""

#: xml/gcut-enum.xml:86(title)
msgid "gcut_enum_inspect ()"
msgstr ""

#: xml/gcut-enum.xml:87(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              gcut_enum_inspect                   (<link linkend=\"GType\">GType</link> enum_type,\n"
"                                                         <link linkend=\"gint\">gint</link> enum_value);"
msgstr ""

#: xml/gcut-enum.xml:89(para)
msgid ""
"Inspects <parameter>enum_type</parameter> value, <parameter>enum_value</"
"parameter>. The returned string should be freed when no longer needed."
msgstr ""
"<parameter>enum_type</parameter>の値<parameter>enum_value</parameter>の詳細を"
"返します。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-enum.xml:96(simpara) xml/gcut-list.xml:283(simpara)
msgid "a <link linkend=\"GEnum\"><type>GEnum</type></link> type."
msgstr "<link linkend=\"GEnum\"><type>GEnum</type></link>の型。"

#: xml/gcut-enum.xml:98(term)
msgid "<parameter>enum_value</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-enum.xml:99(simpara)
msgid ""
"a <link linkend=\"GEnum\"><type>GEnum</type></link> value to be inspected."
msgstr "詳細を示す<link linkend=\"GEnum\"><type>GEnum</type></link>の値。"

#: xml/gcut-enum.xml:101(simpara)
msgid "inspected <parameter>enum_value</parameter> as a string."
msgstr "<parameter>enum_value</parameter>の詳細を示した文字列。"

#: xml/gcut-enum.xml:107(title)
msgid "gcut_flags_equal ()"
msgstr ""

#: xml/gcut-enum.xml:108(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_flags_equal                    (<link linkend=\"GType\">GType</link> flags_type,\n"
"                                                         <link linkend=\"guint\">guint</link> flags1,\n"
"                                                         <link linkend=\"guint\">guint</link> flags2);"
msgstr ""

#: xml/gcut-enum.xml:111(para)
msgid ""
"Compares two <parameter>flags_type</parameter> values, <parameter>flags1</"
"parameter> and <parameter>flags2</parameter>."
msgstr "ふたつの<parameter>flags_type</parameter>の値<parameter>flags1</parameter>と<parameter>flags2</parameter>を比較します。"

#: xml/gcut-enum.xml:117(simpara) xml/gcut-enum.xml:141(simpara)
#: xml/gcut-list.xml:305(simpara)
msgid "a <link linkend=\"GFlags\"><type>GFlags</type></link> type."
msgstr "<link linkend=\"GFlags\"><type>GFlags</type></link>の型。"

#: xml/gcut-enum.xml:119(term)
msgid "<parameter>flags1</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-enum.xml:120(simpara) xml/gcut-enum.xml:123(simpara)
msgid ""
"a <link linkend=\"GFlags\"><type>GFlags</type></link> value to be compared."
msgstr "比較する<link linkend=\"GFlags\"><type>GFlags</type></link>の値。"

#: xml/gcut-enum.xml:122(term)
msgid "<parameter>flags2</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-enum.xml:125(simpara)
msgid ""
"TRUE if <parameter>flags1</parameter> == <parameter>flags2</parameter>, "
"FALSE otherwise."
msgstr "<parameter>flags1</parameter> == <parameter>flags2</parameter>のときTRUE、そうでない場合はFALSE。"

#: xml/gcut-enum.xml:131(title)
msgid "gcut_flags_inspect ()"
msgstr ""

#: xml/gcut-enum.xml:132(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              gcut_flags_inspect                  (<link linkend=\"GType\">GType</link> flags_type,\n"
"                                                         <link linkend=\"guint\">guint</link> flags);"
msgstr ""

#: xml/gcut-enum.xml:134(para)
msgid ""
"Inspects <parameter>flags_type</parameter> value, <parameter>flags_value</"
"parameter>. The returned string should be freed when no longer needed."
msgstr "<parameter>flags_type</parameter>の値<parameter>flags_value</parameter>の詳細を返します。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-enum.xml:143(term)
msgid "<parameter>flags</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-enum.xml:146(simpara)
msgid "inspected <parameter>flags_value</parameter> as a string."
msgstr "<parameter>flags_value</parameter>の詳細を示した文字列。"

#: xml/gcut-error.xml:7(refentrytitle) xml/gcut-error.xml:13(refname)
msgid "Assertion Utilities for #GError."
msgstr ""

#: xml/gcut-error.xml:14(refpurpose)
msgid ""
"Utilities to write assertions related to <link linkend=\"GError"
"\"><placeholder-1/></link> more easily."
msgstr "<link linkend=\"GError\"><placeholder-1/></link>に関連する検証をもっと簡単に書くためのユーティリティ。"

#: xml/gcut-error.xml:23(link) xml/gcut-error.xml:55(primary)
msgid "gcut_error_equal"
msgstr ""

#: xml/gcut-error.xml:25(link) xml/gcut-error.xml:73(primary)
msgid "gcut_error_inspect"
msgstr ""

#: xml/gcut-error.xml:22(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            <placeholder-2/>                    (const <placeholder-3/> *error1,\n"
"                                                         const <placeholder-4/> *error2);\n"
"<placeholder-5/>*              <placeholder-6/>                  (const <placeholder-7/> *error);\n"
msgstr ""

#: xml/gcut-error.xml:43(para)
msgid ""
"The utilities help you to write assertions that are related to <link linkend="
"\"GError\"><type>GError</type></link>."
msgstr ""

#: xml/gcut-error.xml:54(title)
msgid "gcut_error_equal ()"
msgstr ""

#: xml/gcut-error.xml:55(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_error_equal                    (const <link linkend=\"GError\">GError</link> *error1,\n"
"                                                         const <link linkend=\"GError\">GError</link> *error2);"
msgstr ""

#: xml/gcut-error.xml:60(term)
msgid "<parameter>error1</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-error.xml:63(term)
msgid "<parameter>error2</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-error.xml:72(title)
msgid "gcut_error_inspect ()"
msgstr ""

#: xml/gcut-error.xml:73(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              gcut_error_inspect                  (const <link linkend=\"GError\">GError</link> *error);"
msgstr ""

#: xml/gcut-error.xml:74(para)
msgid ""
"Inspects <parameter>error</parameter>. The returned string should be freed "
"when no longer needed."
msgstr "<parameter>error</parameter>の詳細を返します。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-error.xml:81(simpara)
msgid "a <link linkend=\"GError\"><type>GError</type></link> value."
msgstr "<link linkend=\"GError\"><type>GError</type></link>の値。"

#: xml/gcut-error.xml:83(simpara)
msgid "inspected <parameter>error</parameter> as a string."
msgstr "<parameter>error</parameter>の詳細を示した文字列。"

#: xml/gcut-hash-table.xml:7(refentrytitle)
#: xml/gcut-hash-table.xml:13(refname)
msgid "Assertion Utilities for #GHashTable."
msgstr "GHashTable用の検証ユーティリティ。"

#: xml/gcut-hash-table.xml:14(refpurpose)
msgid ""
"Utilities to write assertions related to <link linkend=\"GHashTable"
"\"><placeholder-1/></link> more easily."
msgstr "<link linkend=\"GHashTable\"><placeholder-1/></link>関連の検証をもっと簡単に書くためのユーティリティ。"

#: xml/gcut-hash-table.xml:23(link) xml/gcut-hash-table.xml:63(primary)
msgid "gcut_hash_table_equal"
msgstr ""

#: xml/gcut-hash-table.xml:26(link) xml/gcut-hash-table.xml:97(primary)
msgid "gcut_hash_table_inspect"
msgstr ""

#: xml/gcut-hash-table.xml:27(link) xml/gcut-hash-table.xml:28(link)
#: xml/gcut-list.xml:27(link) xml/gcut-object.xml:28(link)
#: xml/gcut-types.xml:47(primary)
msgid "GCutInspectFunc"
msgstr ""

#: xml/gcut-hash-table.xml:30(link) xml/gcut-hash-table.xml:134(primary)
msgid "gcut_hash_table_string_equal"
msgstr ""

#: xml/gcut-hash-table.xml:32(link) xml/gcut-hash-table.xml:157(primary)
msgid "gcut_hash_table_string_string_inspect"
msgstr ""

#: xml/gcut-hash-table.xml:22(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            <placeholder-2/>               (<placeholder-3/> *hash1,\n"
"                                                         <placeholder-4/> *hash2,\n"
"                                                         <placeholder-5/> equal_func);\n"
"<placeholder-6/>*              <placeholder-7/>             (<placeholder-8/> *hash,\n"
"                                                         <placeholder-9/> key_inspect_func,\n"
"                                                         <placeholder-10/> value_inspect_func,\n"
"                                                         <placeholder-11/> user_data);\n"
"<placeholder-12/>            <placeholder-13/>        (<placeholder-14/> *hash1,\n"
"                                                         <placeholder-15/> *hash2);\n"
"<placeholder-16/>*              <placeholder-17/>\n"
"                                                        (<placeholder-18/> *hash);\n"
msgstr ""

#: xml/gcut-hash-table.xml:51(para)
msgid ""
"The utilities help you to write assertions that are related to <link linkend="
"\"GHashTable\"><type>GHashTable</type></link>."
msgstr ""

#: xml/gcut-hash-table.xml:62(title)
msgid "gcut_hash_table_equal ()"
msgstr ""

#: xml/gcut-hash-table.xml:63(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_hash_table_equal               (<link linkend=\"GHashTable\">GHashTable</link> *hash1,\n"
"                                                         <link linkend=\"GHashTable\">GHashTable</link> *hash2,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_func);"
msgstr ""

#: xml/gcut-hash-table.xml:66(para)
msgid ""
"Compares two <link linkend=\"GHashTable\"><type>GHashTable</type></link>, "
"<parameter>hash1</parameter> and <parameter>hash2</parameter>. "
"<parameter>equal_func</parameter> is called for each values of the same key "
"of <parameter>hash1</parameter> and <parameter>hash2</parameter>."
msgstr ""

#: xml/gcut-hash-table.xml:73(programlisting)
#: xml/gcut-hash-table.xml:109(programlisting)
#: xml/gcut-list.xml:81(programlisting) xml/gcut-list.xml:114(programlisting)
#: xml/gcut-value-equal.xml:85(programlisting)
#, no-wrap
msgid ""
"\n"
"TODO\n"
msgstr ""

#: xml/gcut-hash-table.xml:79(term) xml/gcut-hash-table.xml:143(term)
msgid "<parameter>hash1</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-hash-table.xml:80(simpara) xml/gcut-hash-table.xml:83(simpara)
#: xml/gcut-hash-table.xml:144(simpara) xml/gcut-hash-table.xml:147(simpara)
msgid ""
"a <link linkend=\"GHashTable\"><type>GHashTable</type></link> to be compared."
msgstr "比較する<link linkend=\"GHashTable\"><type>GHashTable</type></link>。"

#: xml/gcut-hash-table.xml:82(term) xml/gcut-hash-table.xml:146(term)
msgid "<parameter>hash2</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-hash-table.xml:85(term) xml/gcut-list.xml:93(term)
#: xml/gcut-object.xml:75(term) xml/gcut-value-equal.xml:101(term)
msgid "<parameter>equal_func</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-hash-table.xml:86(simpara) xml/gcut-list.xml:94(simpara)
msgid "a function that compares two values."
msgstr ""

#: xml/gcut-hash-table.xml:88(simpara)
msgid ""
"TRUE if all same key's values of <parameter>hash1</parameter> and "
"<parameter>hash2</parameter> are reported TRUE by <parameter>equal_func</"
"parameter>, FALSE otherwise."
msgstr "同じキーに対応するすべての<parameter>hash1</parameter>と<parameter>hash2</parameter>の値が<parameter>equal_func</parameter>でTRUEとなったらTRUE、そうでない場合はFALSE。"

#: xml/gcut-hash-table.xml:96(title)
msgid "gcut_hash_table_inspect ()"
msgstr ""

#: xml/gcut-hash-table.xml:97(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              gcut_hash_table_inspect             (<link linkend=\"GHashTable\">GHashTable</link> *hash,\n"
"                                                         <link linkend=\"GCutInspectFunc\">GCutInspectFunc</link> key_inspect_func,\n"
"                                                         <link linkend=\"GCutInspectFunc\">GCutInspectFunc</link> value_inspect_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-hash-table.xml:101(para)
msgid ""
"Inspects <parameter>hash</parameter>. Each key of <parameter>hash</"
"parameter> is inspected by <parameter>key_inspect_func</parameter> and each "
"value of <parameter>hash</parameter> is inspected by "
"<parameter>value_inspect_func</parameter>. The returned string should be "
"freed when no longer needed."
msgstr "<parameter>hash</parameter>の詳細を返します。<parameter>hash</parameter>の各キーは<parameter>key_inspect_func</parameter>で詳細化し、<parameter>hash</parameter>の各値は<parameter>value_inspect_func</parameter>で詳細化します。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-hash-table.xml:115(term) xml/gcut-hash-table.xml:166(term)
msgid "<parameter>hash</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-hash-table.xml:116(simpara) xml/gcut-hash-table.xml:167(simpara)
msgid ""
"a <link linkend=\"GHashTable\"><type>GHashTable</type></link> to be "
"inspected."
msgstr "詳細を示す<link linkend=\"GHashTable\"><type>GHashTable</type></link>。"

#: xml/gcut-hash-table.xml:118(term)
msgid "<parameter>key_inspect_func</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-hash-table.xml:119(simpara)
msgid "a function that inspects each key."
msgstr ""

#: xml/gcut-hash-table.xml:121(term)
msgid "<parameter>value_inspect_func</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-hash-table.xml:122(simpara) xml/gcut-list.xml:124(simpara)
msgid "a function that inspects each value."
msgstr ""

#: xml/gcut-hash-table.xml:125(simpara) xml/gcut-list.xml:127(simpara)
msgid "user data to pass to the function."
msgstr ""

#: xml/gcut-hash-table.xml:127(simpara) xml/gcut-hash-table.xml:169(simpara)
msgid "inspected <parameter>hash</parameter> as a string."
msgstr "<parameter>hash</parameter>の詳細を示した文字列。"

#: xml/gcut-hash-table.xml:133(title)
msgid "gcut_hash_table_string_equal ()"
msgstr ""

#: xml/gcut-hash-table.xml:134(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_hash_table_string_equal        (<link linkend=\"GHashTable\">GHashTable</link> *hash1,\n"
"                                                         <link linkend=\"GHashTable\">GHashTable</link> *hash2);"
msgstr ""

#: xml/gcut-hash-table.xml:136(para)
msgid ""
"Compares two <link linkend=\"GHashTable\"><type>GHashTable</type></link>, "
"<parameter>hash1</parameter> and <parameter>hash2</parameter>. "
"<parameter>hash1</parameter> and <parameter>hash2</parameter> should have "
"string key and string value."
msgstr "ふたつの<link linkend=\"GHashTable\"><type>GHashTable</type></link>、<parameter>hash1</parameter>と<parameter>hash2</parameter>を比較します。<parameter>hash1</parameter>と<parameter>hash2</parameter>は文字列のキーと文字列の値を持っていなければいけません。"

#: xml/gcut-hash-table.xml:149(simpara)
msgid ""
"TRUE if all same key's values of <parameter>hash1</parameter> and "
"<parameter>hash2</parameter> are same string content, FALSE otherwise."
msgstr "<parameter>hash1</parameter>と<parameter>hash2</parameter>の同じキーの値それぞれすべてが同じ内容の文字列の場合TRUE、そうでない場合はFALSE。"

#: xml/gcut-hash-table.xml:156(title)
msgid "gcut_hash_table_string_string_inspect ()"
msgstr ""

#: xml/gcut-hash-table.xml:157(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              gcut_hash_table_string_string_inspect\n"
"                                                        (<link linkend=\"GHashTable\">GHashTable</link> *hash);"
msgstr ""

#: xml/gcut-hash-table.xml:159(para)
msgid ""
"Inspects <parameter>hash</parameter>. <parameter>hash</parameter> should "
"have string key and string value. The returned string should be freed when "
"no longer needed."
msgstr "<parameter>hash</parameter>の詳細を返します。<parameter>hash</parameter>は文字列のキーと文字列の値を持っていなければいけません。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-list.xml:7(refentrytitle) xml/gcut-list.xml:13(refname)
msgid "Assertion Utilities for #GList."
msgstr "GList用の検証ユーティリティ"

#: xml/gcut-list.xml:14(refpurpose)
msgid ""
"Utilities to write assertions related to <link linkend=\"GList"
"\"><placeholder-1/></link> more easily."
msgstr "<link linkend=\"GList\"><placeholder-1/></link>に関連する検証をもっと簡単に書くためのユーティリティ。"

#: xml/gcut-list.xml:23(link) xml/gcut-list.xml:72(primary)
msgid "gcut_list_equal"
msgstr ""

#: xml/gcut-list.xml:26(link) xml/gcut-list.xml:104(primary)
msgid "gcut_list_inspect"
msgstr ""

#: xml/gcut-list.xml:29(link) xml/gcut-list.xml:136(primary)
msgid "gcut_list_int_equal"
msgstr ""

#: xml/gcut-list.xml:31(link) xml/gcut-list.xml:158(primary)
msgid "gcut_list_int_inspect"
msgstr ""

#: xml/gcut-list.xml:32(link) xml/gcut-list.xml:175(primary)
msgid "gcut_list_uint_equal"
msgstr ""

#: xml/gcut-list.xml:34(link) xml/gcut-list.xml:197(primary)
msgid "gcut_list_uint_inspect"
msgstr ""

#: xml/gcut-list.xml:35(link) xml/gcut-list.xml:214(primary)
msgid "gcut_list_string_equal"
msgstr ""

#: xml/gcut-list.xml:37(link) xml/gcut-list.xml:236(primary)
msgid "gcut_list_string_inspect"
msgstr ""

#: xml/gcut-list.xml:38(link) xml/gcut-list.xml:253(primary)
msgid "gcut_list_object_inspect"
msgstr ""

#: xml/gcut-list.xml:39(link) xml/gcut-list.xml:270(primary)
msgid "gcut_list_enum_inspect"
msgstr ""

#: xml/gcut-list.xml:41(link) xml/gcut-list.xml:292(primary)
msgid "gcut_list_flags_inspect"
msgstr ""

#: xml/gcut-list.xml:22(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            <placeholder-2/>                     (const <placeholder-3/> *list1,\n"
"                                                         const <placeholder-4/> *list2,\n"
"                                                         <placeholder-5/> equal_func);\n"
"<placeholder-6/>*              <placeholder-7/>                   (const <placeholder-8/> *list,\n"
"                                                         <placeholder-9/> inspect_func,\n"
"                                                         <placeholder-10/> user_data);\n"
"<placeholder-11/>            <placeholder-12/>                 (const <placeholder-13/> *list1,\n"
"                                                         const <placeholder-14/> *list2);\n"
"<placeholder-15/>*              <placeholder-16/>               (const <placeholder-17/> *list);\n"
"<placeholder-18/>            <placeholder-19/>                (const <placeholder-20/> *list1,\n"
"                                                         const <placeholder-21/> *list2);\n"
"<placeholder-22/>*              <placeholder-23/>              (const <placeholder-24/> *list);\n"
"<placeholder-25/>            <placeholder-26/>              (const <placeholder-27/> *list1,\n"
"                                                         const <placeholder-28/> *list2);\n"
"<placeholder-29/>*              <placeholder-30/>            (const <placeholder-31/> *list);\n"
"<placeholder-32/>*              <placeholder-33/>            (const <placeholder-34/> *list);\n"
"<placeholder-35/>*              <placeholder-36/>              (const <placeholder-37/> *list,\n"
"                                                         <placeholder-38/> type);\n"
"<placeholder-39/>*              <placeholder-40/>             (const <placeholder-41/> *list,\n"
"                                                         <placeholder-42/> type);\n"
msgstr ""

#: xml/gcut-list.xml:60(para)
msgid ""
"The utilities help you to write assertions that are related to <link linkend="
"\"GList\"><type>GList</type></link>."
msgstr ""

#: xml/gcut-list.xml:71(title)
msgid "gcut_list_equal ()"
msgstr ""

#: xml/gcut-list.xml:72(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_list_equal                     (const <link linkend=\"GList\">GList</link> *list1,\n"
"                                                         const <link linkend=\"GList\">GList</link> *list2,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_func);"
msgstr ""

#: xml/gcut-list.xml:75(para)
msgid ""
"Compares two <link linkend=\"GList\"><type>GList</type></link>, "
"<parameter>list1</parameter> and <parameter>list2</parameter>. "
"<parameter>equal_func</parameter> is called for each values of "
"<parameter>list1</parameter> and <parameter>list2</parameter>."
msgstr "ふたつの<link linkend=\"GList\"><type>GList</type></link>、<parameter>list1</parameter>と<parameter>list2</parameter>を比較します。<parameter>equal_func</parameter>は<parameter>list1</parameter>と<parameter>list2</parameter>の対応する値それぞれに対して呼ばれます。."

#: xml/gcut-list.xml:87(term) xml/gcut-list.xml:144(term)
#: xml/gcut-list.xml:183(term) xml/gcut-list.xml:222(term)
msgid "<parameter>list1</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-list.xml:88(simpara) xml/gcut-list.xml:91(simpara)
msgid "a <link linkend=\"GList\"><type>GList</type></link> to be compared."
msgstr "比較する<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:90(term) xml/gcut-list.xml:147(term)
#: xml/gcut-list.xml:186(term) xml/gcut-list.xml:225(term)
msgid "<parameter>list2</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-list.xml:96(simpara)
msgid ""
"TRUE if all corresponding values of <parameter>list1</parameter> and "
"<parameter>list2</parameter> are reported TRUE by <parameter>equal_func</"
"parameter>, FALSE otherwise."
msgstr "<parameter>list1</parameter>と<parameter>list2</parameter>のすべての対応する値が<parameter>equal_func</parameter>でTRUEの場合はTRUE、そうでない場合はFALSE。"

#: xml/gcut-list.xml:103(title)
msgid "gcut_list_inspect ()"
msgstr ""

#: xml/gcut-list.xml:104(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              gcut_list_inspect                   (const <link linkend=\"GList\">GList</link> *list,\n"
"                                                         <link linkend=\"GCutInspectFunc\">GCutInspectFunc</link> inspect_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-list.xml:107(para)
msgid ""
"Inspects <parameter>list</parameter>. Each value of <parameter>list</"
"parameter> is inspected by <parameter>inspect_func</parameter>. The returned "
"string should be freed when no longer needed."
msgstr "<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>のそれぞれの値は<parameter>inspect_func</parameter>で詳細化されます。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-list.xml:121(simpara)
msgid "a <link linkend=\"GList\"><type>GList</type></link> to be inspected."
msgstr "詳細を示す<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:123(term) xml/gcut-object.xml:113(term)
msgid "<parameter>inspect_func</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-list.xml:129(simpara) xml/gcut-list.xml:168(simpara)
#: xml/gcut-list.xml:207(simpara) xml/gcut-list.xml:246(simpara)
#: xml/gcut-list.xml:263(simpara) xml/gcut-list.xml:285(simpara)
#: xml/gcut-list.xml:307(simpara)
msgid "inspected <parameter>list</parameter> as a string."
msgstr "<parameter>list</parameter>の詳細を示した文字列。"

#: xml/gcut-list.xml:135(title)
msgid "gcut_list_int_equal ()"
msgstr ""

#: xml/gcut-list.xml:136(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_list_int_equal                 (const <link linkend=\"GList\">GList</link> *list1,\n"
"                                                         const <link linkend=\"GList\">GList</link> *list2);"
msgstr ""

#: xml/gcut-list.xml:138(para)
msgid ""
"Compares two <link linkend=\"GList\"><type>GList</type></link>, "
"<parameter>list1</parameter> and <parameter>list2</parameter>. "
"<parameter>list1</parameter> and <parameter>list2</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"gint"
"\"><type>gint</type></link>."
msgstr ""

#: xml/gcut-list.xml:145(simpara) xml/gcut-list.xml:148(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"gint"
"\"><type>gint</type></link> to be compared."
msgstr ""

#: xml/gcut-list.xml:150(simpara)
msgid ""
"TRUE if all corresponding integers of <parameter>list1</parameter> and "
"<parameter>list2</parameter> are same value, FALSE otherwise."
msgstr "<parameter>list1</parameter>と<parameter>list2</parameter>の対応するすべての値が同じ場合はTRUE、そうでない場合はFALSE。"

#: xml/gcut-list.xml:157(title)
msgid "gcut_list_int_inspect ()"
msgstr ""

#: xml/gcut-list.xml:158(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              gcut_list_int_inspect               (const <link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/gcut-list.xml:159(para)
msgid ""
"Inspects <parameter>list</parameter>. <parameter>list</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"gint"
"\"><type>gint</type></link>. The returned string should be freed when no "
"longer needed."
msgstr "<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>は<link linkend=\"gint\"><type>gint</type></link>の<link linkend=\"GList\"><type>GList</type></link>でなければいけません。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-list.xml:166(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"gint"
"\"><type>gint</type></link> to be inspected."
msgstr ""

#: xml/gcut-list.xml:174(title)
msgid "gcut_list_uint_equal ()"
msgstr ""

#: xml/gcut-list.xml:175(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_list_uint_equal                (const <link linkend=\"GList\">GList</link> *list1,\n"
"                                                         const <link linkend=\"GList\">GList</link> *list2);"
msgstr ""

#: xml/gcut-list.xml:177(para)
msgid ""
"Compares two <link linkend=\"GList\"><type>GList</type></link>, "
"<parameter>list1</parameter> and <parameter>list2</parameter>. "
"<parameter>list1</parameter> and <parameter>list2</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"guint"
"\"><type>guint</type></link>."
msgstr ""

#: xml/gcut-list.xml:184(simpara) xml/gcut-list.xml:187(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"guint"
"\"><type>guint</type></link> to be compared."
msgstr ""

#: xml/gcut-list.xml:189(simpara)
msgid ""
"TRUE if all corresponding unsigned integers of <parameter>list1</parameter> "
"and <parameter>list2</parameter> are same value, FALSE otherwise."
msgstr "<parameter>list1</parameter>と<parameter>list2</parameter>のすべての対応する符号なし整数値が同じ値の場合はTRUE、そうでない場合はFALSE。"

#: xml/gcut-list.xml:196(title)
msgid "gcut_list_uint_inspect ()"
msgstr ""

#: xml/gcut-list.xml:197(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              gcut_list_uint_inspect              (const <link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/gcut-list.xml:198(para)
msgid ""
"Inspects <parameter>list</parameter>. <parameter>list</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"guint"
"\"><type>guint</type></link>. The returned string should be freed when no "
"longer needed."
msgstr "<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>は<link linkend=\"guint\"><type>guint</type></link>の<link linkend=\"GList\"><type>GList</type></link>でなければいけません。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-list.xml:205(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"guint"
"\"><type>guint</type></link> to be inspected."
msgstr ""

#: xml/gcut-list.xml:213(title)
msgid "gcut_list_string_equal ()"
msgstr ""

#: xml/gcut-list.xml:214(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_list_string_equal              (const <link linkend=\"GList\">GList</link> *list1,\n"
"                                                         const <link linkend=\"GList\">GList</link> *list2);"
msgstr ""

#: xml/gcut-list.xml:216(para)
msgid ""
"Compares two <link linkend=\"GList\"><type>GList</type></link>, "
"<parameter>list1</parameter> and <parameter>list2</parameter>. "
"<parameter>list1</parameter> and <parameter>list2</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of string."
msgstr "ふたつの<link linkend=\"GList\"><type>GList</type></link>、<parameter>list1</parameter>と<parameter>list2</parameter>を比較します。<parameter>list1</parameter>と<parameter>list2</parameter>は文字列の<link linkend=\"GList\"><type>GList</type></link>でなければいけません。"

#: xml/gcut-list.xml:223(simpara) xml/gcut-list.xml:226(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of string to be compared."
msgstr "比較する文字列の<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:228(simpara)
msgid ""
"TRUE if all corresponding string of <parameter>list1</parameter> and "
"<parameter>list2</parameter> are same value, FALSE otherwise."
msgstr "<parameter>list1</parameter>と<parameter>list2</parameter>のすべての対応する文字列が同じ内容の文字列の場合はTRUE、そうでない場合はFALSE。"

#: xml/gcut-list.xml:235(title)
msgid "gcut_list_string_inspect ()"
msgstr ""

#: xml/gcut-list.xml:236(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              gcut_list_string_inspect            (const <link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/gcut-list.xml:237(para)
msgid ""
"Inspects <parameter>list</parameter>. <parameter>list</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of string. The returned "
"string should be freed when no longer needed."
msgstr "<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>は文字列の<link linkend=\"GList\"><type>GList</type></link>でなければいけません。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-list.xml:244(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of string to be "
"inspected."
msgstr "詳細を示す文字列の<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:252(title)
msgid "gcut_list_object_inspect ()"
msgstr ""

#: xml/gcut-list.xml:253(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              gcut_list_object_inspect            (const <link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/gcut-list.xml:254(para)
msgid ""
"Inspects <parameter>list</parameter>. <parameter>list</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of <link linkend=\"GObject"
"\"><type>GObject</type></link>. The returned string should be freed when no "
"longer needed."
msgstr "<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>は<link linkend=\"GObject\"><type>GObject</type></link>の<link linkend=\"GList\"><type>GList</type></link>でなければいけません。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-list.xml:261(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of <link linkend="
"\"GObject\"><type>GObject</type></link> to be inspected."
msgstr "詳細を示す<link linkend=\"GObject\"><type>GObject</type></link>の<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:269(title)
msgid "gcut_list_enum_inspect ()"
msgstr ""

#: xml/gcut-list.xml:270(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              gcut_list_enum_inspect              (const <link linkend=\"GList\">GList</link> *list,\n"
"                                                         <link linkend=\"GType\">GType</link> type);"
msgstr ""

#: xml/gcut-list.xml:272(para)
msgid ""
"Inspects <parameter>list</parameter>. <parameter>list</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of enum value of <link "
"linkend=\"GEnum\"><type>GEnum</type></link>. The returned string should be "
"freed when no longer needed."
msgstr "<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>は<link linkend=\"GEnum\"><type>GEnum</type></link>の列挙値の<link linkend=\"GList\"><type>GList</type></link>でなければいけません。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-list.xml:280(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of enum value to be "
"inspected."
msgstr "詳細を示す列挙値の<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-list.xml:291(title)
msgid "gcut_list_flags_inspect ()"
msgstr ""

#: xml/gcut-list.xml:292(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              gcut_list_flags_inspect             (const <link linkend=\"GList\">GList</link> *list,\n"
"                                                         <link linkend=\"GType\">GType</link> type);"
msgstr ""

#: xml/gcut-list.xml:294(para)
msgid ""
"Inspects <parameter>list</parameter>. <parameter>list</parameter> should be "
"<link linkend=\"GList\"><type>GList</type></link> of flags value of <link "
"linkend=\"GFlags\"><type>GFlags</type></link>. The returned string should be "
"freed when no longer needed."
msgstr "<parameter>list</parameter>の詳細を返します。<parameter>list</parameter>は<link linkend=\"GFlags\"><type>GFlags</type></link>のフラグ値の<link linkend=\"GList\"><type>GList</type></link>でなければいけません。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-list.xml:302(simpara)
msgid ""
"a <link linkend=\"GList\"><type>GList</type></link> of flags value to be "
"inspected."
msgstr "詳細を示すフラグ値の<link linkend=\"GList\"><type>GList</type></link>。"

#: xml/gcut-main.xml:7(refentrytitle) xml/gcut-main.xml:13(refname)
msgid "gcut-main"
msgstr ""

#: xml/gcut-main.xml:22(link) xml/gcut-main.xml:48(primary)
msgid "gcut_init"
msgstr ""

#: xml/gcut-main.xml:23(link) xml/gcut-main.xml:54(primary)
msgid "gcut_value_equal_init"
msgstr ""

#: xml/gcut-main.xml:24(link) xml/gcut-main.xml:60(primary)
msgid "gcut_quit"
msgstr ""

#: xml/gcut-main.xml:25(link) xml/gcut-main.xml:66(primary)
msgid "gcut_value_equal_quit"
msgstr ""

#: xml/gcut-main.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                           (void);\n"
"<placeholder-3/>                <placeholder-4/>               (void);\n"
"<placeholder-5/>                <placeholder-6/>                           (void);\n"
"<placeholder-7/>                <placeholder-8/>               (void);\n"
msgstr ""

#: xml/gcut-main.xml:47(title)
msgid "gcut_init ()"
msgstr ""

#: xml/gcut-main.xml:48(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                gcut_init                           (void);"
msgstr ""

#: xml/gcut-main.xml:53(title)
msgid "gcut_value_equal_init ()"
msgstr ""

#: xml/gcut-main.xml:54(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                gcut_value_equal_init               (void);"
msgstr ""

#: xml/gcut-main.xml:59(title)
msgid "gcut_quit ()"
msgstr ""

#: xml/gcut-main.xml:60(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                gcut_quit                           (void);"
msgstr ""

#: xml/gcut-main.xml:65(title)
msgid "gcut_value_equal_quit ()"
msgstr ""

#: xml/gcut-main.xml:66(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                gcut_value_equal_quit               (void);"
msgstr ""

#: xml/gcut-object.xml:7(refentrytitle) xml/gcut-object.xml:13(refname)
msgid "Assertion Utilities for #GObject."
msgstr ""

#: xml/gcut-object.xml:14(refpurpose)
msgid ""
"Utilities to write assertions related to <link linkend=\"GObject"
"\"><placeholder-1/></link> more easily."
msgstr "<link linkend=\"GObject\"><placeholder-1/></link>関連の検証をもっと簡単に書くためのユーティリティ。"

#: xml/gcut-object.xml:23(link) xml/gcut-object.xml:59(primary)
msgid "gcut_object_equal"
msgstr ""

#: xml/gcut-object.xml:26(link) xml/gcut-object.xml:87(primary)
msgid "gcut_object_inspect"
msgstr ""

#: xml/gcut-object.xml:27(link) xml/gcut-object.xml:104(primary)
msgid "gcut_object_inspect_custom"
msgstr ""

#: xml/gcut-object.xml:22(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            <placeholder-2/>                   (const <placeholder-3/> *object1,\n"
"                                                         const <placeholder-4/> *object2,\n"
"                                                         <placeholder-5/> equal_func);\n"
"<placeholder-6/>*              <placeholder-7/>                 (const <placeholder-8/> *object);\n"
"<placeholder-9/>*              <placeholder-10/>          (const <placeholder-11/> *object,\n"
"                                                         <placeholder-12/> inspect_func,\n"
"                                                         <placeholder-13/> user_data);\n"
msgstr ""

#: xml/gcut-object.xml:47(para)
msgid ""
"The utilities help you to write assertions that are related to <link linkend="
"\"GObject\"><type>GObject</type></link>."
msgstr "このユーティリティは<link linkend=\"GObject\"><type>GObject</type></link>関連の検証の作成を補助します。"

#: xml/gcut-object.xml:58(title)
msgid "gcut_object_equal ()"
msgstr ""

#: xml/gcut-object.xml:59(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_object_equal                   (const <link linkend=\"GObject\">GObject</link> *object1,\n"
"                                                         const <link linkend=\"GObject\">GObject</link> *object2,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_func);"
msgstr ""

#: xml/gcut-object.xml:62(para)
msgid ""
"Compares two <link linkend=\"GObject\"><type>GObject</type></link>, "
"<parameter>object1</parameter> and <parameter>object2</parameter>. If "
"<parameter>equal_func</parameter> is NULL, <parameter>object1</parameter> "
"and <parameter>object2</parameter> is just only compared by memory location."
msgstr "ふたつの<link linkend=\"GObject\"><type>GObject</type></link>、<parameter>object1</parameter>と<parameter>object2</parameter>を比較します。<parameter>equal_func</parameter>がNULLの場合は<parameter>object1</parameter>と<parameter>object2</parameter>は単にメモリの位置だけで比較します。"

#: xml/gcut-object.xml:69(term)
msgid "<parameter>object1</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-object.xml:70(simpara) xml/gcut-object.xml:73(simpara)
msgid ""
"a <link linkend=\"GObject\"><type>GObject</type></link> value to be compared."
msgstr "比較する<link linkend=\"GObject\"><type>GObject</type></link>。"

#: xml/gcut-object.xml:72(term)
msgid "<parameter>object2</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-object.xml:76(simpara)
msgid ""
"a function that compares two <link linkend=\"GObject\"><type>GObject</type></"
"link>. NULL is OK."
msgstr "ふたつの<link linkend=\"GObject\"><type>GObject</type></link>を比較する関数。NULLも可。"

#: xml/gcut-object.xml:79(simpara)
msgid ""
"TRUE if <parameter>object1</parameter> == <parameter>object2</parameter> or "
"<parameter>equal_func</parameter>(<parameter>object1</parameter>, "
"<parameter>object2</parameter>), FALSE otherwise."
msgstr "<parameter>object1</parameter> == <parameter>object2</parameter>あるいは<parameter>equal_func</parameter>(<parameter>object1</parameter>, <parameter>object2</parameter>)がTRUEならTRUE、そうでない場合はFALSE。"

#: xml/gcut-object.xml:86(title)
msgid "gcut_object_inspect ()"
msgstr ""

#: xml/gcut-object.xml:87(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              gcut_object_inspect                 (const <link linkend=\"GObject\">GObject</link> *object);"
msgstr ""

#: xml/gcut-object.xml:88(para)
msgid ""
"Inspects <parameter>object</parameter> by <parameter>inspect_func</"
"parameter>. The returned string should be freed when no longer needed."
msgstr "<parameter>object</parameter>を<parameter>inspect_func</parameter>で詳細を示します。返された文字列が必要なくなったときは開放してください。"

#: xml/gcut-object.xml:95(simpara)
msgid "a <link linkend=\"GObject\"><type>GObject</type></link>."
msgstr "<link linkend=\"GObject\"><type>GObject</type></link>。"

#: xml/gcut-object.xml:97(simpara)
msgid "inspected <parameter>object</parameter> as a string."
msgstr "<parameter>object</parameter>の詳細を示した文字列。"

#: xml/gcut-object.xml:103(title)
msgid "gcut_object_inspect_custom ()"
msgstr ""

#: xml/gcut-object.xml:104(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              gcut_object_inspect_custom          (const <link linkend=\"GObject\">GObject</link> *object,\n"
"                                                         <link linkend=\"GCutInspectFunc\">GCutInspectFunc</link> inspect_func,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-public.xml:7(refentrytitle) xml/gcut-public.xml:13(refname)
msgid "gcut-public"
msgstr ""

#: xml/gcut-public.xml:22(link) xml/gcut-public.xml:53(primary)
msgid "cut_test_context_take_g_object"
msgstr ""

#: xml/gcut-public.xml:24(link) xml/gcut-public.xml:71(primary)
msgid "cut_test_context_take_g_error"
msgstr ""

#: xml/gcut-public.xml:26(link) xml/gcut-public.xml:89(primary)
msgid "cut_test_context_take_g_list"
msgstr ""

#: xml/gcut-public.xml:29(link) xml/gcut-public.xml:111(primary)
msgid "cut_test_context_take_g_hash_table"
msgstr ""

#: xml/gcut-public.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>*            <placeholder-2/>      (<placeholder-3/> *context,\n"
"                                                         <placeholder-4/> *object);\n"
"const <placeholder-5/>*       <placeholder-6/>       (<placeholder-7/> *context,\n"
"                                                         <placeholder-8/> *error);\n"
"const <placeholder-9/>*        <placeholder-10/>        (<placeholder-11/> *context,\n"
"                                                         <placeholder-12/> *list,\n"
"                                                         <placeholder-13/> destroy);\n"
"<placeholder-14/>*         <placeholder-15/>  (<placeholder-16/> *context,\n"
"                                                         <placeholder-17/> *hash_table);\n"
msgstr ""

#: xml/gcut-public.xml:52(title)
msgid "cut_test_context_take_g_object ()"
msgstr ""

#: xml/gcut-public.xml:53(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GObject\">GObject</link>*            cut_test_context_take_g_object      (<link linkend=\"CutTestContext\">CutTestContext</link> *context,\n"
"                                                         <link linkend=\"GObject\">GObject</link> *object);"
msgstr ""

#: xml/gcut-public.xml:70(title)
msgid "cut_test_context_take_g_error ()"
msgstr ""

#: xml/gcut-public.xml:71(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"GError\">GError</link>*       cut_test_context_take_g_error       (<link linkend=\"CutTestContext\">CutTestContext</link> *context,\n"
"                                                         <link linkend=\"GError\">GError</link> *error);"
msgstr ""

#: xml/gcut-public.xml:88(title)
msgid "cut_test_context_take_g_list ()"
msgstr ""

#: xml/gcut-public.xml:89(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"GList\">GList</link>*        cut_test_context_take_g_list        (<link linkend=\"CutTestContext\">CutTestContext</link> *context,\n"
"                                                         <link linkend=\"GList\">GList</link> *list,\n"
"                                                         <link linkend=\"CutDestroyFunction\">CutDestroyFunction</link> destroy);"
msgstr ""

#: xml/gcut-public.xml:101(term)
msgid "<parameter>destroy</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-public.xml:110(title)
msgid "cut_test_context_take_g_hash_table ()"
msgstr ""

#: xml/gcut-public.xml:111(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GHashTable\">GHashTable</link>*         cut_test_context_take_g_hash_table  (<link linkend=\"CutTestContext\">CutTestContext</link> *context,\n"
"                                                         <link linkend=\"GHashTable\">GHashTable</link> *hash_table);"
msgstr ""

#: xml/gcut-public.xml:119(term) xml/gcut-test-utils.xml:118(term)
msgid "<parameter>hash_table</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-test-utils.xml:7(refentrytitle)
#: xml/gcut-test-utils.xml:13(refname)
msgid "Test Utilities with GLib support"
msgstr "GLibサポート付きテストユーティリティ"

#: xml/gcut-test-utils.xml:14(refpurpose)
msgid "Utilities to write tests more easily with GLib support."
msgstr "テストをもっと簡単に書くためのGLibサポート付きユーティリティ。"

#: xml/gcut-test-utils.xml:23(link) xml/gcut-test-utils.xml:66(primary)
msgid "gcut_take_object"
msgstr ""

#: xml/gcut-test-utils.xml:24(link) xml/gcut-test-utils.xml:79(primary)
msgid "gcut_take_error"
msgstr ""

#: xml/gcut-test-utils.xml:25(link) xml/gcut-test-utils.xml:93(primary)
msgid "gcut_take_list"
msgstr ""

#: xml/gcut-test-utils.xml:26(link) xml/gcut-test-utils.xml:111(primary)
msgid "gcut_take_hash_table"
msgstr ""

#: xml/gcut-test-utils.xml:27(link) xml/gcut-test-utils.xml:125(primary)
msgid "gcut_list_string_new"
msgstr ""

#: xml/gcut-test-utils.xml:29(link) xml/gcut-test-utils.xml:146(primary)
msgid "gcut_take_new_list_string"
msgstr ""

#: xml/gcut-test-utils.xml:30(link) xml/gcut-test-utils.xml:163(primary)
msgid "gcut_list_string_free"
msgstr ""

#: xml/gcut-test-utils.xml:31(link) xml/gcut-test-utils.xml:176(primary)
msgid "gcut_hash_table_string_string_new"
msgstr ""

#: xml/gcut-test-utils.xml:33(link) xml/gcut-test-utils.xml:202(primary)
msgid "gcut_hash_table_string_string_newv"
msgstr ""

#: xml/gcut-test-utils.xml:35(link) xml/gcut-test-utils.xml:228(primary)
msgid "gcut_take_new_hash_table_string_string"
msgstr ""

#: xml/gcut-test-utils.xml:22(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>                    (object)\n"
"#define             <placeholder-2/>                     (error)\n"
"#define             <placeholder-3/>                      (list, destroy_function)\n"
"#define             <placeholder-4/>                (hash_table)\n"
"<placeholder-5/>*              <placeholder-6/>                (const <placeholder-7/> *value,\n"
"                                                         ...);\n"
"#define             <placeholder-8/>           (value, ...)\n"
"<placeholder-9/>                <placeholder-10/>               (<placeholder-11/> *list);\n"
"<placeholder-12/>*         <placeholder-13/>   (const <placeholder-14/> *key,\n"
"                                                         ...);\n"
"<placeholder-15/>*         <placeholder-16/>  (const <placeholder-17/> *key,\n"
"                                                         <placeholder-18/> args);\n"
"#define             <placeholder-19/>(key, ...)\n"
msgstr ""

#: xml/gcut-test-utils.xml:55(para)
msgid "The utilities work with GLib."
msgstr "このユーティリティはGLibと一緒に使います。"

#: xml/gcut-test-utils.xml:65(title)
msgid "gcut_take_object()"
msgstr ""

#: xml/gcut-test-utils.xml:66(programlisting)
#, no-wrap
msgid "#define             gcut_take_object(object)"
msgstr ""

#: xml/gcut-test-utils.xml:67(para)
msgid ""
"Passes ownership of <parameter>object</parameter> to Cutter and returns "
"<parameter>object</parameter>."
msgstr ""
"<parameter>object</parameter>の所有権をCutterに渡し、<parameter>object</"
"parameter>を返します。"

#: xml/gcut-test-utils.xml:73(simpara)
msgid "the GObject * to be owned by Cutter."
msgstr "Cutterが所有権をもつことになるGObject *。"

#: xml/gcut-test-utils.xml:78(title)
msgid "gcut_take_error()"
msgstr ""

#: xml/gcut-test-utils.xml:79(programlisting)
#, no-wrap
msgid "#define             gcut_take_error(error)"
msgstr ""

#: xml/gcut-test-utils.xml:80(para)
msgid ""
"Passes ownership of <parameter>error</parameter> to Cutter and returns a "
"GError * that has same contents of <parameter>error</parameter>."
msgstr ""
"<parameter>error</parameter>の所有権をCutterに渡し、<parameter>error</"
"parameter>と同じ内容のGError *を返します。"

#: xml/gcut-test-utils.xml:87(simpara)
msgid "the GError * to be owned by Cutter."
msgstr "Cutterが所有権を持つことになるGError *。"

#: xml/gcut-test-utils.xml:92(title)
msgid "gcut_take_list()"
msgstr ""

#: xml/gcut-test-utils.xml:93(programlisting)
#, no-wrap
msgid "#define             gcut_take_list(list, destroy_function)"
msgstr ""

#: xml/gcut-test-utils.xml:94(para)
msgid ""
"Passes ownership of <parameter>list</parameter> to Cutter and returns a "
"GList * that has same elements of <parameter>list</parameter>."
msgstr ""
"<parameter>list</parameter>の所有権をCutterに渡し、<parameter>list</"
"parameter>と同じ要素を持つGList *を返します。"

#: xml/gcut-test-utils.xml:101(simpara)
msgid "the GList * to be owned by Cutter."
msgstr "Cutterが所有権を持つことになるGList *。"

#: xml/gcut-test-utils.xml:104(simpara)
msgid ""
"the destroy function (<link linkend=\"CutDestroyFunction"
"\"><type>CutDestroyFunction</type></link>) that destroys the elements of "
"<parameter>list</parameter>, or NULL."
msgstr ""
"<parameter>list</parameter>の要素を破棄する関数(<link linkend="
"\"CutDestroyFunction\"><type>CutDestroyFunction</type></link>)、あるいは"
"NULL。"

#: xml/gcut-test-utils.xml:110(title)
msgid "gcut_take_hash_table()"
msgstr ""

#: xml/gcut-test-utils.xml:111(programlisting)
#, no-wrap
msgid "#define             gcut_take_hash_table(hash_table)"
msgstr ""

#: xml/gcut-test-utils.xml:112(para)
msgid ""
"Passes ownership of <parameter>hash_table</parameter> to Cutter and returns "
"<parameter>hash_table</parameter>."
msgstr ""
"<parameter>hash_table</parameter>の所有権をCutterに渡し、"
"<parameter>hash_table</parameter>を返します。"

#: xml/gcut-test-utils.xml:119(simpara)
msgid "the GHashTable * to be owned by Cutter."
msgstr "Cutterが所有権をもつことになるGHashTable *。"

#: xml/gcut-test-utils.xml:124(title)
msgid "gcut_list_string_new ()"
msgstr ""

#: xml/gcut-test-utils.xml:125(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GList\">GList</link>*              gcut_list_string_new                (const <link linkend=\"gchar\">gchar</link> *value,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-test-utils.xml:127(para)
msgid "Creates a list from passed strings."
msgstr "渡された文字列からリストを作ります。"

#: xml/gcut-test-utils.xml:133(simpara)
msgid "the first string."
msgstr "最初の文字列。"

#: xml/gcut-test-utils.xml:136(simpara) xml/gcut-test-utils.xml:157(simpara)
msgid "remaining strings in list, terminated by NULL."
msgstr "リストに入れる残りの文字列。最後の引数としてNULLを指定してください。"

#: xml/gcut-test-utils.xml:138(simpara)
msgid ""
"a newly-allocated GList * that contains passed strings and must be freed "
"with <link linkend=\"gcut-list-string-free\"><function>gcut_list_string_free"
"()</function></link>."
msgstr ""
"渡された文字列のリスト。<link linkend=\"gcut-list-string-free"
"\"><function>gcut_list_string_free()</function></link>で開放してください。"

#: xml/gcut-test-utils.xml:145(title)
msgid "gcut_take_new_list_string()"
msgstr ""

#: xml/gcut-test-utils.xml:146(programlisting)
#, no-wrap
msgid "#define             gcut_take_new_list_string(value, ...)"
msgstr ""

#: xml/gcut-test-utils.xml:147(para)
msgid "Creates a list from passed strings that is owned by Cutter."
msgstr ""
"渡された文字列からリストを作ります。作られたリストはCutterが所有権を持ちま"
"す。"

#: xml/gcut-test-utils.xml:154(simpara)
msgid "the first string. (const char *)"
msgstr "最初の文字列。（const char *）"

#: xml/gcut-test-utils.xml:162(title)
msgid "gcut_list_string_free ()"
msgstr ""

#: xml/gcut-test-utils.xml:163(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                gcut_list_string_free               (<link linkend=\"GList\">GList</link> *list);"
msgstr ""

#: xml/gcut-test-utils.xml:164(para)
msgid "Frees <parameter>list</parameter> and contained strings."
msgstr ""
"<parameter>list</parameter>と<parameter>list</parameter>内にある文字列を開放"
"します。"

#: xml/gcut-test-utils.xml:170(simpara)
msgid "the list that contains strings to be freed."
msgstr "開放する文字列のリスト。"

#: xml/gcut-test-utils.xml:175(title)
msgid "gcut_hash_table_string_string_new ()"
msgstr ""

#: xml/gcut-test-utils.xml:176(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GHashTable\">GHashTable</link>*         gcut_hash_table_string_string_new   (const <link linkend=\"gchar\">gchar</link> *key,\n"
"                                                         ...);"
msgstr ""

#: xml/gcut-test-utils.xml:178(para) xml/gcut-test-utils.xml:204(para)
msgid ""
"Creates a hash table that has string key and string value from passed key/"
"value pairs."
msgstr ""
"引数で指定されたキーと値のペアから、文字列のキーと値を持つハッシュテーブルを"
"作成します。"

#: xml/gcut-test-utils.xml:184(term) xml/gcut-test-utils.xml:210(term)
#: xml/gcut-test-utils.xml:236(term)
msgid "<parameter>key</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-test-utils.xml:185(simpara) xml/gcut-test-utils.xml:211(simpara)
msgid "The first key string."
msgstr "最初のキー文字列。"

#: xml/gcut-test-utils.xml:188(simpara) xml/gcut-test-utils.xml:214(simpara)
msgid ""
"A NULL-terminated list of rest arguments. The first item is the string value "
"of the first key, followed optionally by more key/value pairs. It must end "
"with NULL."
msgstr ""
"残りの引数のNULL終端のリスト。まず、最初のキーの文字列値を指定します。続い"
"て、任意の数だけキー・値のペアを指定します。最後にNULLを指定しなければいけま"
"せん。"

#: xml/gcut-test-utils.xml:193(simpara) xml/gcut-test-utils.xml:219(simpara)
msgid ""
"a newly-allocated GHashTable * that contains passed key/value pairs and must "
"be freed with <link linkend=\"g-hash-table-unref"
"\"><function>g_hash_table_unref()</function></link>."
msgstr ""
"渡されたキー・値を持つハッシュテーブル（GHashTable *）。<link linkend=\"g-"
"hash-table-unref\"><function>g_hash_table_unref()</function></link>で開放して"
"ください。"

#: xml/gcut-test-utils.xml:201(title)
msgid "gcut_hash_table_string_string_newv ()"
msgstr ""

#: xml/gcut-test-utils.xml:202(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GHashTable\">GHashTable</link>*         gcut_hash_table_string_string_newv  (const <link linkend=\"gchar\">gchar</link> *key,\n"
"                                                         <link linkend=\"va-list\">va_list</link> args);"
msgstr ""

#: xml/gcut-test-utils.xml:227(title)
msgid "gcut_take_new_hash_table_string_string()"
msgstr ""

#: xml/gcut-test-utils.xml:228(programlisting)
#, no-wrap
msgid "#define             gcut_take_new_hash_table_string_string(key, ...)"
msgstr ""

#: xml/gcut-test-utils.xml:229(para)
msgid ""
"Creates a hash table that has string key and string value from passed key/"
"value pairs. The created hash table is owned by Cutter. So don't <link "
"linkend=\"g-hash-table-unref\"><function>g_hash_table_unref()</function></"
"link> it."
msgstr ""
"渡されたキー・値のペアから文字列のキー・値を持つハッシュテーブルを作成しま"
"す。作成されたハッシュテーブルはCutterが所有権を持つので、<link linkend=\"g-"
"hash-table-unref\"><function>g_hash_table_unref()</function></link>を呼ばない"
"でください。"

#: xml/gcut-test-utils.xml:237(simpara)
msgid "The first key string. (const gchar *)"
msgstr "最初のキー文字列。（const gchar *）"

#: xml/gcut-test-utils.xml:240(simpara)
msgid ""
"A NULL-terminated list of rest arguments. The string value of the first key, "
"followed optionally by more key/value pairs. It must end with NULL."
msgstr ""
"残りの引数のNULL終端のリスト。まず、最初のキーの文字列値を指定します。続い"
"て、任意の数だけキー・値のペアを指定します。最後にNULLを指定しなければいけま"
"せん。"

#: xml/gcut-types.xml:7(refentrytitle) xml/gcut-types.xml:13(refname)
msgid "gcut-types"
msgstr ""

#: xml/gcut-types.xml:22(link)
msgid "*GCutInspectFunc"
msgstr ""

#: xml/gcut-types.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                (<placeholder-2/>)                  (<placeholder-3/> *string,\n"
"                                                         <placeholder-4/> data,\n"
"                                                         <placeholder-5/> user_data);\n"
msgstr ""

#: xml/gcut-types.xml:46(title)
msgid "GCutInspectFunc ()"
msgstr ""

#: xml/gcut-types.xml:47(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                (*GCutInspectFunc)                  (<link linkend=\"GString\">GString</link> *string,\n"
"                                                         <link linkend=\"gconstpointer\">gconstpointer</link> data,\n"
"                                                         <link linkend=\"gpointer\">gpointer</link> user_data);"
msgstr ""

#: xml/gcut-value-equal.xml:7(refentrytitle)
#: xml/gcut-value-equal.xml:13(refname)
msgid "Assertion Utilities for #GValue."
msgstr ""

#: xml/gcut-value-equal.xml:14(refpurpose)
msgid ""
"Utilities to write assertions related to <link linkend=\"GValue"
"\"><placeholder-1/></link> more easily."
msgstr "<link linkend=\"GValue\"><placeholder-1/></link>関連の検証をもっと簡単に書くためのユーティリティ。"

#: xml/gcut-value-equal.xml:23(link) xml/gcut-value-equal.xml:57(primary)
msgid "gcut_value_equal"
msgstr ""

#: xml/gcut-value-equal.xml:25(link) xml/gcut-value-equal.xml:80(primary)
msgid "gcut_value_register_equal_func"
msgstr ""

#: xml/gcut-value-equal.xml:22(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            <placeholder-2/>                    (const <placeholder-3/> *value1,\n"
"                                                         const <placeholder-4/> *value2);\n"
"<placeholder-5/>                <placeholder-6/>      (<placeholder-7/> type1,\n"
"                                                         <placeholder-8/> type2,\n"
"                                                         <placeholder-9/> equal_func);\n"
msgstr ""

#: xml/gcut-value-equal.xml:45(para)
msgid ""
"The utilities help you to write assertions that are related to <link linkend="
"\"GValue\"><type>GValue</type></link>."
msgstr "このユーティリティは<link linkend=\"GValue\"><type>GValue</type></link>関連の検証を作成を補助します。"

#: xml/gcut-value-equal.xml:56(title)
msgid "gcut_value_equal ()"
msgstr ""

#: xml/gcut-value-equal.xml:57(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gcut_value_equal                    (const <link linkend=\"GValue\">GValue</link> *value1,\n"
"                                                         const <link linkend=\"GValue\">GValue</link> *value2);"
msgstr ""

#: xml/gcut-value-equal.xml:59(para)
msgid ""
"Compares two <link linkend=\"GValue\"><type>GValue</type></link>, "
"<parameter>value1</parameter> and <parameter>value2</parameter> by "
"registered equal function. (See <link linkend=\"gcut-value-register-equal-"
"func\"><function>gcut_value_register_equal_func()</function></link> for "
"detail of how to register equal function of <link linkend=\"GValue"
"\"><type>GValue</type></link>)"
msgstr ""

#: xml/gcut-value-equal.xml:66(term)
msgid "<parameter>value1</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-value-equal.xml:67(simpara) xml/gcut-value-equal.xml:70(simpara)
msgid "a <link linkend=\"GValue\"><type>GValue</type></link> to be compared."
msgstr "比較する<link linkend=\"GValue\"><type>GValue</type></link>。"

#: xml/gcut-value-equal.xml:69(term)
msgid "<parameter>value2</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-value-equal.xml:72(simpara)
msgid ""
"TRUE if <parameter>value1</parameter> equals to <parameter>value2</"
"parameter>, FALSE otherwise."
msgstr "<parameter>value1</parameter>と<parameter>value2</parameter>が等しいときはTRUE、そうでない場合はFALSE。"

#: xml/gcut-value-equal.xml:79(title)
msgid "gcut_value_register_equal_func ()"
msgstr ""

#: xml/gcut-value-equal.xml:80(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gcut_value_register_equal_func      (<link linkend=\"GType\">GType</link> type1,\n"
"                                                         <link linkend=\"GType\">GType</link> type2,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_func);"
msgstr ""

#: xml/gcut-value-equal.xml:89(para)
msgid ""
"Registers equality check function between <link linkend=\"GValue"
"\"><type>GValue</type></link> of <parameter>type1</parameter> and <link "
"linkend=\"GValue\"><type>GValue</type></link> of <parameter>type2</"
"parameter>."
msgstr ""

#: xml/gcut-value-equal.xml:95(term)
msgid "<parameter>type1</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-value-equal.xml:96(simpara) xml/gcut-value-equal.xml:99(simpara)
msgid ""
"a <link linkend=\"GType\"><type>GType</type></link> of compared <link "
"linkend=\"GValue\"><type>GValue</type></link>."
msgstr "比較する<link linkend=\"GValue\"><type>GValue</type></link>の<link linkend=\"GType\"><type>GType</type></link>。"

#: xml/gcut-value-equal.xml:98(term)
msgid "<parameter>type2</parameter>&nbsp;:"
msgstr ""

#: xml/gcut-value-equal.xml:102(simpara)
msgid ""
"a function that compares <parameter>type1</parameter>'s <link linkend="
"\"GValue\"><type>GValue</type></link> with <parameter>type2</parameter>'s "
"<link linkend=\"GValue\"><type>GValue</type></link>."
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:7(refentrytitle)
#: xml/gdkcut-pixbuf-assertions-helper.xml:13(refname)
msgid "gdkcut-pixbuf-assertions-helper"
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:22(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:53(primary)
msgid "gdkcut_pixbuf_assert_equal_helper"
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:23(link)
#: xml/gdkcut-pixbuf-assertions-helper.xml:24(link)
#: xml/gdkcut-pixbuf.xml:22(link) xml/gdkcut-pixbuf.xml:23(link)
#: xml/gdkcut-pixbuf.xml:24(link) xml/gdkcut-pixbuf.xml:25(link)
#: xml/gdkcut-pixbuf.xml:27(link) xml/gdkcut-pixbuf.xml:28(link)
#: xml/gdkcut-pixbuf.xml:30(link) xml/gdkcut-pixbuf.xml:31(link)
msgid "GdkPixbuf"
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>   (<placeholder-3/> *test_context,\n"
"                                                         const <placeholder-4/> *expected,\n"
"                                                         const <placeholder-5/> *actual,\n"
"                                                         <placeholder-6/> threshold,\n"
"                                                         const <placeholder-7/> *expression_expected,\n"
"                                                         const <placeholder-8/> *expression_actual,\n"
"                                                         const <placeholder-9/> *expression_threshold,\n"
"                                                         const <placeholder-10/> *user_message_format,\n"
"                                                         ...);\n"
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:52(title)
msgid "gdkcut_pixbuf_assert_equal_helper ()"
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:53(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                gdkcut_pixbuf_assert_equal_helper   (<link linkend=\"CutTestContext\">CutTestContext</link> *test_context,\n"
"                                                         const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *expected,\n"
"                                                         const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *actual,\n"
"                                                         <link linkend=\"guint\">guint</link> threshold,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_expected,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_actual,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *expression_threshold,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *user_message_format,\n"
"                                                         ...);"
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:74(term)
#: xml/gdkcut-pixbuf-assertions.xml:70(term) xml/gdkcut-pixbuf.xml:87(term)
#: xml/gdkcut-pixbuf.xml:109(term) xml/gdkcut-pixbuf.xml:133(term)
msgid "<parameter>threshold</parameter>&nbsp;:"
msgstr ""

#: xml/gdkcut-pixbuf-assertions-helper.xml:83(term)
msgid "<parameter>expression_threshold</parameter>&nbsp;:"
msgstr ""

#: xml/gdkcut-pixbuf-assertions.xml:7(refentrytitle)
#: xml/gdkcut-pixbuf-assertions.xml:13(refname)
msgid "Assertions with gdk-pixbuf support"
msgstr "gdk-pixbufサポート付きの検証"

#: xml/gdkcut-pixbuf-assertions.xml:14(refpurpose)
msgid "Checks that your program works as you expect with gdk-pixbuf support."
msgstr ""
"gdk-pixbufサポート付きであなたのプログラムが期待通りに動作しているかを検証し"
"ます。"

#: xml/gdkcut-pixbuf-assertions.xml:23(link)
#: xml/gdkcut-pixbuf-assertions.xml:48(primary)
msgid "gdkcut_pixbuf_assert_equal"
msgstr ""

#: xml/gdkcut-pixbuf-assertions.xml:22(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>          (expected, actual, threshold, ...)\n"
msgstr ""

#: xml/gdkcut-pixbuf-assertions.xml:47(title)
msgid "gdkcut_pixbuf_assert_equal()"
msgstr ""

#: xml/gdkcut-pixbuf-assertions.xml:48(programlisting)
#, no-wrap
msgid "#define             gdkcut_pixbuf_assert_equal(expected, actual, threshold, ...)"
msgstr ""

#: xml/gdkcut-pixbuf-assertions.xml:49(para)
msgid ""
"Passes if <parameter>expected</parameter> == <parameter>actual</parameter>. "
"If difference of each corresponding pixel value is within threshold, "
"<parameter>expected</parameter> and <parameter>actual</parameter> are "
"treated as equal image."
msgstr ""
"<parameter>expected</parameter> == <parameter>actual</parameter>が成り立つと"
"きパスします。もし、対応するピクセル値のそれぞれの違いがしきい値以内の場合は"
"<parameter>expected</parameter>と<parameter>actual</parameter>は同じ画像とし"
"て扱います。"

#: xml/gdkcut-pixbuf-assertions.xml:54(para)
msgid ""
"If threshold is 3, pixel value of <parameter>expected</parameter> at (1, 1) "
"is 127 and pixel value of <parameter>actual</parameter> at (1, 1) is 131, "
"<parameter>actual</parameter> doesn't equals to <parameter>expected</"
"parameter>. If pixel value of <parameter>actual</parameter> at (1, 1) is "
"130, <parameter>actual</parameter> may equal to <parameter>expected</"
"parameter>. (All other corresponding pixel values are needed to fill this "
"condition.)"
msgstr ""
"もし、しきい値が3、<parameter>expected</parameter>の(1, 1)のピクセル値が127、"
"<parameter>actual</parameter>の(1, 1)のピクセル値が131とすると、"
"<parameter>actual</parameter>と<parameter>expected</parameter>は等しくありま"
"せん。もし、<parameter>actual</parameter>の(1, 1)のピクセル値が130なら"
"<parameter>actual</parameter>と<parameter>expected</parameter>は等しいかもし"
"れません。（等しくなるためには、他のすべての対応するピクセル値がこの条件を満"
"たしている必要があります。）"

#: xml/gdkcut-pixbuf-assertions.xml:65(simpara)
msgid "an expected GdkPixbuf *."
msgstr "期待するGdkPixbuf *。"

#: xml/gdkcut-pixbuf-assertions.xml:68(simpara)
msgid "an actual GdkPixbuf *."
msgstr "実際のGdkPixbuf *。"

#: xml/gdkcut-pixbuf-assertions.xml:71(simpara)
msgid "an threshold used for detecting pixel difference."
msgstr "ピクセルの違いを検出するために使われるしきい値。"

#: xml/gdkcut-pixbuf.xml:7(refentrytitle) xml/gdkcut-pixbuf.xml:13(refname)
msgid "gdkcut-pixbuf"
msgstr ""

#: xml/gdkcut-pixbuf.xml:22(link) xml/gdkcut-pixbuf.xml:57(primary)
msgid "gdkcut_pixbuf_equal_property"
msgstr ""

#: xml/gdkcut-pixbuf.xml:24(link) xml/gdkcut-pixbuf.xml:75(primary)
msgid "gdkcut_pixbuf_equal_content"
msgstr ""

#: xml/gdkcut-pixbuf.xml:27(link) xml/gdkcut-pixbuf.xml:97(primary)
msgid "gdkcut_pixbuf_diff"
msgstr ""

#: xml/gdkcut-pixbuf.xml:30(link) xml/gdkcut-pixbuf.xml:119(primary)
msgid "gdkcut_pixbuf_save_diff"
msgstr ""

#: xml/gdkcut-pixbuf.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>            <placeholder-2/>        (const <placeholder-3/> *pixbuf1,\n"
"                                                         const <placeholder-4/> *pixbuf2);\n"
"<placeholder-5/>            <placeholder-6/>         (const <placeholder-7/> *pixbuf1,\n"
"                                                         const <placeholder-8/> *pixbuf2,\n"
"                                                         <placeholder-9/> threshold);\n"
"<placeholder-10/>*          <placeholder-11/>                  (const <placeholder-12/> *pixbuf1,\n"
"                                                         const <placeholder-13/> *pixbuf2,\n"
"                                                         <placeholder-14/> threshold);\n"
"<placeholder-15/>*              <placeholder-16/>             (const <placeholder-17/> *pixbuf1,\n"
"                                                         const <placeholder-18/> *pixbuf2,\n"
"                                                         <placeholder-19/> threshold,\n"
"                                                         const <placeholder-20/> *prefix,\n"
"                                                         <placeholder-21/> **error);\n"
msgstr ""

#: xml/gdkcut-pixbuf.xml:56(title)
msgid "gdkcut_pixbuf_equal_property ()"
msgstr ""

#: xml/gdkcut-pixbuf.xml:57(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gdkcut_pixbuf_equal_property        (const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf1,\n"
"                                                         const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf2);"
msgstr ""

#: xml/gdkcut-pixbuf.xml:62(term) xml/gdkcut-pixbuf.xml:81(term)
#: xml/gdkcut-pixbuf.xml:103(term) xml/gdkcut-pixbuf.xml:127(term)
msgid "<parameter>pixbuf1</parameter>&nbsp;:"
msgstr ""

#: xml/gdkcut-pixbuf.xml:65(term) xml/gdkcut-pixbuf.xml:84(term)
#: xml/gdkcut-pixbuf.xml:106(term) xml/gdkcut-pixbuf.xml:130(term)
msgid "<parameter>pixbuf2</parameter>&nbsp;:"
msgstr ""

#: xml/gdkcut-pixbuf.xml:74(title)
msgid "gdkcut_pixbuf_equal_content ()"
msgstr ""

#: xml/gdkcut-pixbuf.xml:75(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            gdkcut_pixbuf_equal_content         (const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf1,\n"
"                                                         const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf2,\n"
"                                                         <link linkend=\"guint\">guint</link> threshold);"
msgstr ""

#: xml/gdkcut-pixbuf.xml:96(title)
msgid "gdkcut_pixbuf_diff ()"
msgstr ""

#: xml/gdkcut-pixbuf.xml:97(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GdkPixbuf\">GdkPixbuf</link>*          gdkcut_pixbuf_diff                  (const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf1,\n"
"                                                         const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf2,\n"
"                                                         <link linkend=\"guint\">guint</link> threshold);"
msgstr ""

#: xml/gdkcut-pixbuf.xml:118(title)
msgid "gdkcut_pixbuf_save_diff ()"
msgstr ""

#: xml/gdkcut-pixbuf.xml:119(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              gdkcut_pixbuf_save_diff             (const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf1,\n"
"                                                         const <link linkend=\"GdkPixbuf\">GdkPixbuf</link> *pixbuf2,\n"
"                                                         <link linkend=\"guint\">guint</link> threshold,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *prefix,\n"
"                                                         <link linkend=\"GError\">GError</link> **error);"
msgstr ""

#: xml/gdkcut-pixbuf.xml:136(term)
msgid "<parameter>prefix</parameter>&nbsp;:"
msgstr ""

#: xml/gst-cutter-console-output.xml:7(refentrytitle)
#: xml/gst-cutter-console-output.xml:13(refname)
#: xml/gst-cutter-console-output.xml:22(link)
#: xml/gst-cutter-console-output.xml:44(title)
#: xml/gst-cutter-console-output.xml:45(primary)
msgid "GstCutterConsoleOutput"
msgstr ""

#: xml/gst-cutter-console-output.xml:45(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GstBaseSink parent;\n"
"} GstCutterConsoleOutput;\n"
msgstr ""

#: xml/gst-cutter-server.xml:7(refentrytitle)
#: xml/gst-cutter-server.xml:13(refname) xml/gst-cutter-server.xml:22(link)
#: xml/gst-cutter-server.xml:44(title) xml/gst-cutter-server.xml:45(primary)
msgid "GstCutterServer"
msgstr ""

#: xml/gst-cutter-server.xml:45(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GstElement parent;\n"
"} GstCutterServer;\n"
msgstr ""

#: xml/gst-cutter-test-runner.xml:7(refentrytitle)
#: xml/gst-cutter-test-runner.xml:13(refname)
#: xml/gst-cutter-test-runner.xml:22(link)
#: xml/gst-cutter-test-runner.xml:44(title)
#: xml/gst-cutter-test-runner.xml:45(primary)
msgid "GstCutterTestRunner"
msgstr ""

#: xml/gst-cutter-test-runner.xml:45(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GstBaseSrc parent;\n"
"} GstCutterTestRunner;\n"
msgstr ""

#: xml/stack.xml:7(refentrytitle) xml/stack.xml:13(refname)
msgid "stack"
msgstr ""

#: xml/stack.xml:22(link) xml/stack.xml:23(link) xml/stack.xml:24(link)
#: xml/stack.xml:25(link) xml/stack.xml:26(link) xml/stack.xml:27(link)
#: xml/stack.xml:29(link) xml/stack.xml:51(title) xml/stack.xml:52(primary)
msgid "Stack"
msgstr ""

#: xml/stack.xml:23(link) xml/stack.xml:58(primary)
msgid "stack_new"
msgstr ""

#: xml/stack.xml:24(link) xml/stack.xml:69(primary)
msgid "stack_free"
msgstr ""

#: xml/stack.xml:25(link) xml/stack.xml:81(primary)
msgid "stack_is_empty"
msgstr ""

#: xml/stack.xml:26(link) xml/stack.xml:95(primary)
msgid "stack_get_size"
msgstr ""

#: xml/stack.xml:27(link) xml/stack.xml:109(primary)
msgid "stack_push"
msgstr ""

#: xml/stack.xml:29(link) xml/stack.xml:125(primary)
msgid "stack_pop"
msgstr ""

#: xml/stack.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*              <placeholder-3/>                           (void);\n"
"<placeholder-4/>                <placeholder-5/>                          (<placeholder-6/> *stack);\n"
"<placeholder-7/>                 <placeholder-8/>                      (<placeholder-9/> *stack);\n"
"<placeholder-10/>                 <placeholder-11/>                      (<placeholder-12/> *stack);\n"
"<placeholder-13/>                <placeholder-14/>                          (<placeholder-15/> *stack,\n"
"                                                         <placeholder-16/> value);\n"
"<placeholder-17/>                 <placeholder-18/>                           (<placeholder-19/> *stack);\n"
msgstr ""

#: xml/stack.xml:52(programlisting)
#, no-wrap
msgid "typedef struct _Stack Stack;"
msgstr ""

#: xml/stack.xml:57(title)
msgid "stack_new ()"
msgstr ""

#: xml/stack.xml:58(programlisting)
#, no-wrap
msgid "<link linkend=\"Stack\">Stack</link>*              stack_new                           (void);"
msgstr ""

#: xml/stack.xml:68(title)
msgid "stack_free ()"
msgstr ""

#: xml/stack.xml:69(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                stack_free                          (<link linkend=\"Stack\">Stack</link> *stack);"
msgstr ""

#: xml/stack.xml:73(term) xml/stack.xml:85(term) xml/stack.xml:99(term)
#: xml/stack.xml:114(term) xml/stack.xml:129(term)
msgid "<parameter>stack</parameter>&nbsp;:"
msgstr ""

#: xml/stack.xml:80(title)
msgid "stack_is_empty ()"
msgstr ""

#: xml/stack.xml:81(programlisting)
#, no-wrap
msgid "<link linkend=\"int\">int</link>                 stack_is_empty                      (<link linkend=\"Stack\">Stack</link> *stack);"
msgstr ""

#: xml/stack.xml:94(title)
msgid "stack_get_size ()"
msgstr ""

#: xml/stack.xml:95(programlisting)
#, no-wrap
msgid "<link linkend=\"int\">int</link>                 stack_get_size                      (<link linkend=\"Stack\">Stack</link> *stack);"
msgstr ""

#: xml/stack.xml:108(title)
msgid "stack_push ()"
msgstr ""

#: xml/stack.xml:109(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                stack_push                          (<link linkend=\"Stack\">Stack</link> *stack,\n"
"                                                         <link linkend=\"int\">int</link> value);"
msgstr ""

#: xml/stack.xml:124(title)
msgid "stack_pop ()"
msgstr ""

#: xml/stack.xml:125(programlisting)
#, no-wrap
msgid "<link linkend=\"int\">int</link>                 stack_pop                           (<link linkend=\"Stack\">Stack</link> *stack);"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: xml/stack.xml:0(None)
msgid "translator-credits"
msgstr ""
