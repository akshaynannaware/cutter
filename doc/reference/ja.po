# ja.po for Cutter Reference.
# Copyright (C) 2007 Kouhei Sutou
# This file is distributed under the same license as the Cutter package.
# Kouhei Sutou <kou@cozmixng.org>, 2007.
#
msgid ""
msgstr ""
"Project-Id-Version: Cutter 0.6.0\n"
"POT-Creation-Date: 2008-04-02 10:36+0900\n"
"PO-Revision-Date: 2008-04-02 10:38+0900\n"
"Last-Translator: Kouhei Sutou <kou@cozmixng.org>\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\\n\n"

#: cutter-docs.sgml:7(title)
msgid "Cutter Reference Manual"
msgstr "Cutterリファレンスマニュアル"

#: cutter-docs.sgml:8(releaseinfo)
msgid "for Cutter &version;"
msgstr "Cutter &version;用"

#: cutter-docs.sgml:12(title)
msgid "Introduction"
msgstr "はじめに"

#: cutter-docs.sgml:14(title)
msgid "Getting start"
msgstr "はじめよう"

#: cutter-docs.sgml:22(title)
msgid "Reference"
msgstr "リファレンス"

#: cutter-docs.sgml:24(title)
msgid "Writing tests"
msgstr "テスト作成"

#: cutter-docs.sgml:59(title)
msgid "Index"
msgstr "索引"

#: cutter-docs.sgml:62(title)
msgid "Index of deprecated symbols"
msgstr "非推奨のシンボル一覧"

#: cutter-docs.sgml:65(title)
msgid "Index of new symbols in 0.6"
msgstr "0.6での新しいシンボル一覧"

#: cutter-docs.sgml:68(title)
msgid "Index of new symbols in 0.5"
msgstr "0.5での新しいシンボル一覧"

#: cutter-docs.sgml:71(title)
msgid "Index of new symbols in 0.4"
msgstr "0.4での新しいシンボル一覧"

#: cutter-docs.sgml:74(title)
msgid "Index of new symbols in 0.3"
msgstr "0.3での新しいシンボル一覧"

#: xml/cut-assertions.xml:7(refentrytitle) xml/cut-assertions.xml:13(refname)
#: xml/cutter.xml:188(link)
msgid "Assertions"
msgstr "検証"

#: xml/cut-assertions.xml:8(manvolnum) xml/cut-contractor.xml:8(manvolnum)
#: xml/cut-factory-builder.xml:8(manvolnum)
#: xml/cut-gassertions.xml:8(manvolnum) xml/cut-listener.xml:8(manvolnum)
#: xml/cut-main.xml:8(manvolnum) xml/cut-module-factory.xml:8(manvolnum)
#: xml/cut-report-factory-builder.xml:8(manvolnum)
#: xml/cut-report.xml:8(manvolnum) xml/cut-ui-factory-builder.xml:8(manvolnum)
#: xml/cut-ui-factory.xml:8(manvolnum) xml/cut-ui.xml:8(manvolnum)
#: xml/cut-value-equal.xml:8(manvolnum) xml/cutter.xml:8(manvolnum)
#: xml/gbsearcharray.xml:8(manvolnum)
msgid "3"
msgstr ""

#: xml/cut-assertions.xml:9(refmiscinfo) xml/cut-contractor.xml:9(refmiscinfo)
#: xml/cut-factory-builder.xml:9(refmiscinfo)
#: xml/cut-gassertions.xml:9(refmiscinfo) xml/cut-listener.xml:9(refmiscinfo)
#: xml/cut-main.xml:9(refmiscinfo) xml/cut-module-factory.xml:9(refmiscinfo)
#: xml/cut-report-factory-builder.xml:9(refmiscinfo)
#: xml/cut-report.xml:9(refmiscinfo)
#: xml/cut-ui-factory-builder.xml:9(refmiscinfo)
#: xml/cut-ui-factory.xml:9(refmiscinfo) xml/cut-ui.xml:9(refmiscinfo)
#: xml/cut-value-equal.xml:9(refmiscinfo) xml/cutter.xml:9(refmiscinfo)
#: xml/gbsearcharray.xml:9(refmiscinfo)
msgid "CUTTER Library"
msgstr "Cutterライブラリ"

#: xml/cut-assertions.xml:14(refpurpose)
msgid "Checks that your program works as you expect."
msgstr "あなたのプログラムが期待通りに動作しているかを検証します。"

#: xml/cut-assertions.xml:19(title) xml/cut-contractor.xml:19(title)
#: xml/cut-factory-builder.xml:19(title) xml/cut-gassertions.xml:20(title)
#: xml/cut-listener.xml:19(title) xml/cut-main.xml:19(title)
#: xml/cut-module-factory.xml:19(title)
#: xml/cut-report-factory-builder.xml:19(title) xml/cut-report.xml:19(title)
#: xml/cut-ui-factory-builder.xml:19(title) xml/cut-ui-factory.xml:19(title)
#: xml/cut-ui.xml:19(title) xml/cut-value-equal.xml:19(title)
#: xml/cutter.xml:19(title) xml/gbsearcharray.xml:19(title)
msgid "Synopsis"
msgstr "概要"

#: xml/cut-assertions.xml:22(link) xml/cut-assertions.xml:75(primary)
msgid "cut_error"
msgstr ""

#: xml/cut-assertions.xml:23(link) xml/cut-assertions.xml:90(primary)
msgid "cut_fail"
msgstr ""

#: xml/cut-assertions.xml:24(link) xml/cut-assertions.xml:105(primary)
msgid "cut_pend"
msgstr ""

#: xml/cut-assertions.xml:25(link) xml/cut-assertions.xml:121(primary)
msgid "cut_pending"
msgstr ""

#: xml/cut-assertions.xml:26(link) xml/cut-assertions.xml:139(primary)
msgid "cut_notify"
msgstr ""

#: xml/cut-assertions.xml:27(link) xml/cut-assertions.xml:154(primary)
msgid "cut_assert"
msgstr ""

#: xml/cut-assertions.xml:28(link) xml/cut-assertions.xml:170(primary)
msgid "cut_assert_null"
msgstr ""

#: xml/cut-assertions.xml:29(link) xml/cut-assertions.xml:186(primary)
msgid "cut_assert_null_string"
msgstr ""

#: xml/cut-assertions.xml:30(link) xml/cut-assertions.xml:203(primary)
msgid "cut_assert_not_null"
msgstr ""

#: xml/cut-assertions.xml:31(link) xml/cut-assertions.xml:219(primary)
msgid "cut_assert_equal_int"
msgstr ""

#: xml/cut-assertions.xml:32(link) xml/cut-assertions.xml:238(primary)
msgid "cut_assert_equal_uint"
msgstr ""

#: xml/cut-assertions.xml:33(link) xml/cut-assertions.xml:257(primary)
msgid "cut_assert_equal_double"
msgstr ""

#: xml/cut-assertions.xml:34(link) xml/cut-assertions.xml:279(primary)
msgid "cut_assert_equal_string"
msgstr ""

#: xml/cut-assertions.xml:35(link) xml/cut-assertions.xml:299(primary)
msgid "cut_assert_equal_string_with_free"
msgstr ""

#: xml/cut-assertions.xml:36(link) xml/cut-assertions.xml:320(primary)
msgid "cut_assert_equal_string_or_null"
msgstr ""

#: xml/cut-assertions.xml:37(link) xml/cut-assertions.xml:341(primary)
msgid "cut_assert_equal_memory"
msgstr ""

#: xml/cut-assertions.xml:39(link) xml/cut-assertions.xml:368(primary)
msgid "cut_assert_equal_string_array"
msgstr ""

#: xml/cut-assertions.xml:40(link) xml/cut-assertions.xml:388(primary)
msgid "cut_assert_operator"
msgstr ""

#: xml/cut-assertions.xml:41(link) xml/cut-assertions.xml:416(primary)
msgid "cut_assert_operator_int"
msgstr ""

#: xml/cut-assertions.xml:42(link) xml/cut-assertions.xml:444(primary)
msgid "cut_assert_equal"
msgstr ""

#: xml/cut-assertions.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>                           (format, ...)\n"
"#define             <placeholder-2/>                            (format, ...)\n"
"#define             <placeholder-3/>                            (format, ...)\n"
"#define             <placeholder-4/>                         (format, ...)\n"
"#define             <placeholder-5/>                          (format, ...)\n"
"#define             <placeholder-6/>                          (expression, ...)\n"
"#define             <placeholder-7/>                     (expression, ...)\n"
"#define             <placeholder-8/>              (expression, ...)\n"
"#define             <placeholder-9/>                 (expression, ...)\n"
"#define             <placeholder-10/>                (expected, actual, ...)\n"
"#define             <placeholder-11/>               (expected, actual, ...)\n"
"#define             <placeholder-12/>             (expected, error, actual, ...)\n"
"#define             <placeholder-13/>             (expected, actual, ...)\n"
"#define             <placeholder-14/>   (expected, actual, ...)\n"
"#define             <placeholder-15/>     (expected, actual, ...)\n"
"#define             <placeholder-16/>             (expected, expected_size,\n"
"                                                         actual, actual_size, ...)\n"
"#define             <placeholder-17/>       (expected, actual, ...)\n"
"#define             <placeholder-18/>                 (lhs, operator, rhs, ...)\n"
"#define             <placeholder-19/>             (lhs, operator, rhs, ...)\n"
"#define             <placeholder-20/>                    (function, expected, actual, ...)\n"
msgstr ""

#: xml/cut-assertions.xml:55(title) xml/cut-contractor.xml:42(title)
#: xml/cut-factory-builder.xml:42(title) xml/cut-gassertions.xml:37(title)
#: xml/cut-listener.xml:38(title) xml/cut-main.xml:40(title)
#: xml/cut-module-factory.xml:60(title)
#: xml/cut-report-factory-builder.xml:35(title) xml/cut-report.xml:55(title)
#: xml/cut-ui-factory-builder.xml:35(title) xml/cut-ui-factory.xml:34(title)
#: xml/cut-ui.xml:40(title) xml/cut-value-equal.xml:40(title)
#: xml/cutter.xml:38(title) xml/gbsearcharray.xml:45(title)
msgid "Description"
msgstr "説明"

#: xml/cut-assertions.xml:56(para)
msgid ""
"To check that your program works as you expect, you use <link linkend=\"cut-"
"assert-XXX\"><function>cut_assert_XXX()</function></link> where you want to "
"check expected value is got."
msgstr ""
"あなたのプログラムが期待通りに動作しているかを検証するために、期待した値が得"
"られていることを検証したい箇所で<link linkend=\"cut-assert-XXX"
"\"><function>cut_assert_XXX()</function></link>を使います。"

#: xml/cut-assertions.xml:63(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal_int(3, 1 + 2);\n"
msgstr ""

#: xml/cut-assertions.xml:61(para) xml/cut-assertions.xml:392(para)
#: xml/cut-assertions.xml:420(para) xml/cut-assertions.xml:448(para)
msgid "e.g.: <placeholder-1/>"
msgstr "例: <placeholder-1/>"

#: xml/cut-assertions.xml:72(title) xml/cut-contractor.xml:49(title)
#: xml/cut-factory-builder.xml:49(title) xml/cut-gassertions.xml:46(title)
#: xml/cut-listener.xml:45(title) xml/cut-main.xml:47(title)
#: xml/cut-module-factory.xml:67(title)
#: xml/cut-report-factory-builder.xml:42(title) xml/cut-report.xml:62(title)
#: xml/cut-ui-factory-builder.xml:42(title) xml/cut-ui-factory.xml:41(title)
#: xml/cut-ui.xml:47(title) xml/cut-value-equal.xml:47(title)
#: xml/cutter.xml:143(title) xml/gbsearcharray.xml:52(title)
msgid "Details"
msgstr "詳細"

#: xml/cut-assertions.xml:74(title)
msgid "cut_error()"
msgstr ""

#: xml/cut-assertions.xml:75(programlisting)
#, no-wrap
msgid "#define             cut_error(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:76(para)
msgid "Raises an error with message."
msgstr "メッセージ付きでエラーを発生させます。"

#: xml/cut-assertions.xml:81(term) xml/cut-assertions.xml:96(term)
#: xml/cut-assertions.xml:112(term) xml/cut-assertions.xml:130(term)
#: xml/cut-assertions.xml:145(term)
msgid "<parameter>format</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:82(simpara) xml/cut-assertions.xml:97(simpara)
#: xml/cut-assertions.xml:113(simpara) xml/cut-assertions.xml:131(simpara)
#: xml/cut-assertions.xml:146(simpara)
msgid ""
"the message format. See the <link linkend=\"printf\"><function>printf()</"
"function></link> documentation."
msgstr ""
"整形文字列。<link linkend=\"printf\"><function>printf()</function></link>のド"
"キュメントを見てください。"

#: xml/cut-assertions.xml:84(term) xml/cut-assertions.xml:99(term)
#: xml/cut-assertions.xml:115(term) xml/cut-assertions.xml:133(term)
#: xml/cut-assertions.xml:148(term) xml/cut-assertions.xml:163(term)
#: xml/cut-assertions.xml:179(term) xml/cut-assertions.xml:195(term)
#: xml/cut-assertions.xml:212(term) xml/cut-assertions.xml:231(term)
#: xml/cut-assertions.xml:250(term) xml/cut-assertions.xml:272(term)
#: xml/cut-assertions.xml:292(term) xml/cut-assertions.xml:312(term)
#: xml/cut-assertions.xml:334(term) xml/cut-assertions.xml:361(term)
#: xml/cut-assertions.xml:381(term) xml/cut-assertions.xml:409(term)
#: xml/cut-assertions.xml:437(term) xml/cut-assertions.xml:465(term)
#: xml/cut-gassertions.xml:61(term) xml/cut-gassertions.xml:80(term)
#: xml/cut-module-factory.xml:198(term) xml/cut-report.xml:136(term)
#: xml/cut-ui.xml:80(term)
msgid "<parameter>...</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:85(simpara) xml/cut-assertions.xml:100(simpara)
#: xml/cut-assertions.xml:116(simpara) xml/cut-assertions.xml:134(simpara)
#: xml/cut-assertions.xml:149(simpara)
msgid "the parameters to insert into the format string."
msgstr "整形文字列に挿入されるパラメータ。"

#: xml/cut-assertions.xml:89(title)
msgid "cut_fail()"
msgstr ""

#: xml/cut-assertions.xml:90(programlisting)
#, no-wrap
msgid "#define             cut_fail(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:91(para)
msgid "Raises a failure with message."
msgstr "メッセージ付きでテストを失敗させます。"

#: xml/cut-assertions.xml:104(title)
msgid "cut_pend()"
msgstr ""

#: xml/cut-assertions.xml:105(programlisting)
#, no-wrap
msgid "#define             cut_pend(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:106(para) xml/cut-assertions.xml:124(para)
msgid "Marks the test is pending with message. The test is stopped."
msgstr ""
"メッセージ付きでこのテストが未解決であると印を付けます。テストはここで中断し"
"ます。"

#: xml/cut-assertions.xml:120(title)
msgid "cut_pending()"
msgstr ""

#: xml/cut-assertions.xml:121(programlisting)
#, no-wrap
msgid "#define cut_pending(format, ...) cut_pend(format, ## __VA_ARGS__)\n"
msgstr ""

#: xml/cut-assertions.xml:123(para)
msgid ""
"<literal>cut_pending</literal> has been deprecated since version 0.4 and "
"should not be used in newly-written code. Use <link linkend=\"cut-pend"
"\"><function>cut_pend()</function></link> instead."
msgstr ""
"<literal>cut_pending</literal>はバージョン0.4から非推奨になりました。新しく書"
"くコードでは使わないでください。代わりに<link linkend=\"cut-pend"
"\"><function>cut_pend()</function></link>を使ってください。"

#: xml/cut-assertions.xml:138(title)
msgid "cut_notify()"
msgstr ""

#: xml/cut-assertions.xml:139(programlisting)
#, no-wrap
msgid "#define             cut_notify(format, ...)"
msgstr ""

#: xml/cut-assertions.xml:140(para)
msgid "Leaves a notification message. The test is continued."
msgstr "通知用のメッセージを残します。テストは続行します。"

#: xml/cut-assertions.xml:153(title)
msgid "cut_assert()"
msgstr ""

#: xml/cut-assertions.xml:154(programlisting)
#, no-wrap
msgid "#define             cut_assert(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:155(para)
msgid "Passes if <parameter>expression</parameter> is not 0 or NULL."
msgstr "<parameter>expression</parameter>が0でもNULLでもないときにパスします。"

#: xml/cut-assertions.xml:160(term) xml/cut-assertions.xml:176(term)
#: xml/cut-assertions.xml:192(term) xml/cut-assertions.xml:209(term)
msgid "<parameter>expression</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:161(simpara) xml/cut-assertions.xml:177(simpara)
#: xml/cut-assertions.xml:210(simpara)
msgid "the expression to check."
msgstr "チェックする式。"

#: xml/cut-assertions.xml:164(simpara) xml/cut-assertions.xml:180(simpara)
#: xml/cut-assertions.xml:196(simpara) xml/cut-assertions.xml:213(simpara)
#: xml/cut-assertions.xml:232(simpara) xml/cut-assertions.xml:251(simpara)
#: xml/cut-assertions.xml:273(simpara) xml/cut-assertions.xml:293(simpara)
#: xml/cut-assertions.xml:313(simpara) xml/cut-assertions.xml:335(simpara)
#: xml/cut-assertions.xml:362(simpara) xml/cut-assertions.xml:382(simpara)
#: xml/cut-assertions.xml:410(simpara) xml/cut-assertions.xml:438(simpara)
#: xml/cut-assertions.xml:466(simpara) xml/cut-gassertions.xml:62(simpara)
#: xml/cut-gassertions.xml:81(simpara)
msgid ""
"optional format string, followed by parameters to insert into the format "
"string (as with <link linkend=\"printf\"><function>printf()</function></"
"link>)"
msgstr ""
"省略可能な整形文字列。以降のパラメータが整形文字列に挿入されます。（<link "
"linkend=\"printf\"><function>printf()</function></link>と同じ）"

#: xml/cut-assertions.xml:169(title)
msgid "cut_assert_null()"
msgstr ""

#: xml/cut-assertions.xml:170(programlisting)
#, no-wrap
msgid "#define             cut_assert_null(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:171(para) xml/cut-assertions.xml:187(para)
msgid "Passes if <parameter>expression</parameter> is NULL."
msgstr "<parameter>expression</parameter>がNULLのときにパスします。"

#: xml/cut-assertions.xml:185(title)
msgid "cut_assert_null_string()"
msgstr ""

#: xml/cut-assertions.xml:186(programlisting)
#, no-wrap
msgid "#define             cut_assert_null_string(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:193(simpara)
msgid "the expression that returns string."
msgstr "文字列を返す式。"

#: xml/cut-assertions.xml:199(para) xml/cut-assertions.xml:316(para)
msgid "Since 0.3"
msgstr "0.3から"

#: xml/cut-assertions.xml:202(title)
msgid "cut_assert_not_null()"
msgstr ""

#: xml/cut-assertions.xml:203(programlisting)
#, no-wrap
msgid "#define             cut_assert_not_null(expression, ...)"
msgstr ""

#: xml/cut-assertions.xml:204(para)
msgid "Passes if <parameter>expression</parameter> is not NULL."
msgstr "<parameter>expression</parameter>がNULLではないときにパスします。"

#: xml/cut-assertions.xml:218(title)
msgid "cut_assert_equal_int()"
msgstr ""

#: xml/cut-assertions.xml:219(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_int(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:220(para) xml/cut-assertions.xml:239(para)
#: xml/cut-gassertions.xml:50(para) xml/cut-gassertions.xml:69(para)
msgid ""
"Passes if <parameter>expected</parameter> == <parameter>actual</parameter>."
msgstr ""
"<parameter>expected</parameter> == <parameter>actual</parameter>が成り立つと"
"きパスします。"

#: xml/cut-assertions.xml:225(term) xml/cut-assertions.xml:244(term)
#: xml/cut-assertions.xml:263(term) xml/cut-assertions.xml:286(term)
#: xml/cut-assertions.xml:306(term) xml/cut-assertions.xml:328(term)
#: xml/cut-assertions.xml:349(term) xml/cut-assertions.xml:375(term)
#: xml/cut-assertions.xml:459(term) xml/cut-gassertions.xml:55(term)
#: xml/cut-gassertions.xml:74(term)
msgid "<parameter>expected</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:226(simpara)
msgid "an expected integer value."
msgstr "期待する整数の値。"

#: xml/cut-assertions.xml:228(term) xml/cut-assertions.xml:247(term)
#: xml/cut-assertions.xml:269(term) xml/cut-assertions.xml:289(term)
#: xml/cut-assertions.xml:309(term) xml/cut-assertions.xml:331(term)
#: xml/cut-assertions.xml:355(term) xml/cut-assertions.xml:378(term)
#: xml/cut-assertions.xml:462(term) xml/cut-gassertions.xml:58(term)
#: xml/cut-gassertions.xml:77(term)
msgid "<parameter>actual</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:229(simpara)
msgid "an actual integer value."
msgstr "実際の整数の値。"

#: xml/cut-assertions.xml:237(title)
msgid "cut_assert_equal_uint()"
msgstr ""

#: xml/cut-assertions.xml:238(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_uint(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:245(simpara)
msgid "an expected unsigned integer value."
msgstr "期待する符号無し整数の値。"

#: xml/cut-assertions.xml:248(simpara)
msgid "an actual unsigned integer value."
msgstr "実際の符号無し符号整数の値。"

#: xml/cut-assertions.xml:256(title)
msgid "cut_assert_equal_double()"
msgstr ""

#: xml/cut-assertions.xml:257(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_double(expected, error, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:258(para)
msgid ""
"Passes if (<parameter>expected</parameter> - <parameter>error</parameter>) "
"&lt;= <parameter>actual</parameter> &lt;= (<parameter>expected</parameter> + "
"<parameter>error</parameter>)."
msgstr ""
"(<parameter>expected</parameter> - <parameter>error</parameter>) &lt;= "
"<parameter>actual</parameter> &lt;= (<parameter>expected</parameter> + "
"<parameter>error</parameter>)が成り立つときパスします。"

#: xml/cut-assertions.xml:264(simpara)
msgid "an expected float value."
msgstr "期待される浮動小数点数。"

#: xml/cut-assertions.xml:266(term)
msgid "<parameter>error</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:267(simpara)
msgid "an float value that specifies error range."
msgstr "誤差範囲を示す浮動小数点数。"

#: xml/cut-assertions.xml:270(simpara)
msgid "an actual float value."
msgstr "実際の浮動小数点数。"

#: xml/cut-assertions.xml:278(title)
msgid "cut_assert_equal_string()"
msgstr ""

#: xml/cut-assertions.xml:279(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:280(para) xml/cut-assertions.xml:300(para)
#: xml/cut-assertions.xml:322(para)
msgid ""
"Passes if both <parameter>expected</parameter> and <parameter>actual</"
"parameter> are NULL or strcmp(<parameter>expected</parameter>, "
"<parameter>actual</parameter>) == 0."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>がどちらとも"
"NULL、あるいはstrcmp(<parameter>expected</parameter>, <parameter>actual</"
"parameter>) == 0が成り立つときにパスします。"

#: xml/cut-assertions.xml:287(simpara) xml/cut-assertions.xml:307(simpara)
#: xml/cut-assertions.xml:329(simpara)
msgid "an expected string value."
msgstr "期待される文字列。"

#: xml/cut-assertions.xml:290(simpara) xml/cut-assertions.xml:332(simpara)
msgid "an actual string value."
msgstr "実際の文字列の値。"

#: xml/cut-assertions.xml:298(title)
msgid "cut_assert_equal_string_with_free()"
msgstr ""

#: xml/cut-assertions.xml:299(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string_with_free(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:310(simpara)
msgid "an actual string value that is freed."
msgstr "実際の文字列の値（メモリは開放される）。"

#: xml/cut-assertions.xml:319(title)
msgid "cut_assert_equal_string_or_null()"
msgstr ""

#: xml/cut-assertions.xml:320(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string_or_null(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:321(para)
msgid ""
"<literal>cut_assert_equal_string_or_null</literal> has been deprecated since "
"version 0.3 and should not be used in newly-written code. Use <link linkend="
"\"cut-assert-equal-string\"><function>cut_assert_equal_string()</function></"
"link> instead."
msgstr ""
"<literal>cut_assert_equal_string_or_null</literal>はバージョン0.3から非推奨に"
"なりました。新しく書くコードでは使わないでください。代わりに<link linkend="
"\"cut-assert-equal-string\"><function>cut_assert_equal_string()</function></"
"link>を使ってください。"

#: xml/cut-assertions.xml:340(title)
msgid "cut_assert_equal_memory()"
msgstr ""

#: xml/cut-assertions.xml:341(programlisting)
#, no-wrap
msgid ""
"#define             cut_assert_equal_memory(expected, expected_size,                \\\n"
"                                            actual, actual_size, ...)"
msgstr ""

#: xml/cut-assertions.xml:343(para)
msgid ""
"Passes if <parameter>expected_size</parameter> == <parameter>actual_size</"
"parameter> and memcmp(<parameter>expected</parameter>, <parameter>actual</"
"parameter>, <parameter>expected_size</parameter>) == 0."
msgstr ""
"<parameter>expected_size</parameter> == <parameter>actual_size</parameter>が"
"成り立ち、かつ、memcmp(<parameter>expected</parameter>, <parameter>actual</"
"parameter>, <parameter>expected_size</parameter>) == 0が成り立つときにパスし"
"ます。"

#: xml/cut-assertions.xml:350(simpara)
msgid "an expected data."
msgstr "期待するデータ。"

#: xml/cut-assertions.xml:352(term)
msgid "<parameter>expected_size</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:353(simpara)
msgid "a size of <parameter>expected</parameter>."
msgstr "<parameter>expected</parameter>のサイズ。"

#: xml/cut-assertions.xml:356(simpara)
msgid "an actual data."
msgstr "実際のデータ。"

#: xml/cut-assertions.xml:358(term)
msgid "<parameter>actual_size</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:359(simpara)
msgid "a size of <parameter>actual</parameter>."
msgstr "<parameter>actual</parameter>のサイズ。"

#: xml/cut-assertions.xml:367(title)
msgid "cut_assert_equal_string_array()"
msgstr ""

#: xml/cut-assertions.xml:368(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_string_array(expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:369(para)
msgid ""
"Passes if both <parameter>expected</parameter> and <parameter>actual</"
"parameter> are not NULL and have same content (<link linkend=\"strcmp"
"\"><function>strcmp()</function></link> == 0) strings."
msgstr ""
"<parameter>expected</parameter>と<parameter>actual</parameter>がどちらとも"
"NULLではなく、どちらも同じ内容の文字列(<link linkend=\"strcmp"
"\"><function>strcmp()</function></link> == 0)を持つときにパスします。"

#: xml/cut-assertions.xml:376(simpara)
msgid "an expected NULL-terminated array of strings."
msgstr "期待する文字列の配列。配列はNULL終端。"

#: xml/cut-assertions.xml:379(simpara)
msgid "an actual NULL-terminated array of strings."
msgstr "実際の文字列の配列。配列はNULL終端。"

#: xml/cut-assertions.xml:387(title)
msgid "cut_assert_operator()"
msgstr ""

#: xml/cut-assertions.xml:388(programlisting)
#, no-wrap
msgid "#define             cut_assert_operator(lhs, operator, rhs, ...)"
msgstr ""

#: xml/cut-assertions.xml:389(para) xml/cut-assertions.xml:417(para)
msgid ""
"Passes if (<parameter>lhs</parameter> <parameter>operator</parameter> "
"<parameter>rhs</parameter>) is TRUE."
msgstr ""
"(<parameter>lhs</parameter> <parameter>operator</parameter> <parameter>rhs</"
"parameter>)が真のときにパスします。"

#: xml/cut-assertions.xml:394(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_operator(1, &lt;, 2) -&gt; (1 &lt; 2)\n"
msgstr ""

#: xml/cut-assertions.xml:400(term) xml/cut-assertions.xml:428(term)
msgid "<parameter>lhs</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:401(simpara)
msgid "a left hand side value."
msgstr "左辺値。"

#: xml/cut-assertions.xml:403(term) xml/cut-assertions.xml:431(term)
msgid "<parameter>operator</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:404(simpara) xml/cut-assertions.xml:432(simpara)
msgid "a binary operator."
msgstr "二項演算子。"

#: xml/cut-assertions.xml:406(term) xml/cut-assertions.xml:434(term)
msgid "<parameter>rhs</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:407(simpara)
msgid "a right hand side value."
msgstr "右辺値。"

#: xml/cut-assertions.xml:415(title)
msgid "cut_assert_operator_int()"
msgstr ""

#: xml/cut-assertions.xml:416(programlisting)
#, no-wrap
msgid "#define             cut_assert_operator_int(lhs, operator, rhs, ...)"
msgstr ""

#: xml/cut-assertions.xml:422(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_operator_int(1, &lt;, 2) -&gt; (1 &lt; 2)\n"
msgstr ""

#: xml/cut-assertions.xml:429(simpara)
msgid "a left hand side integer value."
msgstr "左辺の整数の値。"

#: xml/cut-assertions.xml:435(simpara)
msgid "a right hand side integer value."
msgstr "右辺の整数の値。"

#: xml/cut-assertions.xml:443(title)
msgid "cut_assert_equal()"
msgstr ""

#: xml/cut-assertions.xml:444(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal(function, expected, actual, ...)"
msgstr ""

#: xml/cut-assertions.xml:445(para)
msgid ""
"Passes if <parameter>function</parameter>(<parameter>expected</parameter>, "
"<parameter>actual</parameter>) returns TRUE."
msgstr ""
"<parameter>function</parameter>(<parameter>expected</parameter>, "
"<parameter>actual</parameter>)が真を返すときパスします。"

#: xml/cut-assertions.xml:450(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal(!strcmp, \"abc\", \"abc\") -&gt; Pass\n"
msgstr ""

#: xml/cut-assertions.xml:456(term)
msgid "<parameter>function</parameter>&nbsp;:"
msgstr ""

#: xml/cut-assertions.xml:457(simpara)
msgid ""
"a function that compares <parameter>actual</parameter> with "
"<parameter>expected</parameter>."
msgstr ""
"<parameter>actual</parameter>と<parameter>expected</parameter>を比較する関"
"数。"

#: xml/cut-assertions.xml:460(simpara)
msgid "an expected value."
msgstr "期待値。"

#: xml/cut-assertions.xml:463(simpara)
msgid "an actual value."
msgstr "実測値。"

#: xml/cut-contractor.xml:7(refentrytitle) xml/cut-contractor.xml:13(refname)
#: xml/cut-contractor.xml:22(link) xml/cut-contractor.xml:23(link)
#: xml/cut-contractor.xml:24(link) xml/cut-contractor.xml:25(link)
#: xml/cut-contractor.xml:26(link) xml/cut-contractor.xml:28(link)
#: xml/cut-contractor.xml:51(title) xml/cut-contractor.xml:52(primary)
msgid "CutContractor"
msgstr ""

#: xml/cut-contractor.xml:23(link) xml/cut-contractor.xml:61(primary)
msgid "cut_contractor_new"
msgstr ""

#: xml/cut-contractor.xml:24(link) xml/cut-contractor.xml:25(link)
#: xml/cut-factory-builder.xml:28(link) xml/cut-factory-builder.xml:29(link)
#: xml/cut-module-factory.xml:33(link) xml/cut-report.xml:26(link)
#: xml/cut-report.xml:27(link)
msgid "GList"
msgstr ""

#: xml/cut-contractor.xml:24(link) xml/cut-contractor.xml:72(primary)
msgid "cut_contractor_build_factories"
msgstr ""

#: xml/cut-contractor.xml:25(link) xml/cut-contractor.xml:86(primary)
msgid "cut_contractor_build_all_factories"
msgstr ""

#: xml/cut-contractor.xml:26(link) xml/cut-main.xml:25(link)
#: xml/cut-main.xml:27(link) xml/cut-module-factory.xml:34(link)
#: xml/cut-report.xml:32(link) xml/cut-value-equal.xml:23(link)
msgid "gboolean"
msgstr ""

#: xml/cut-contractor.xml:26(link) xml/cut-contractor.xml:100(primary)
msgid "cut_contractor_has_builder"
msgstr ""

#: xml/cut-contractor.xml:27(link) xml/cut-factory-builder.xml:23(link)
#: xml/cut-factory-builder.xml:24(link) xml/cut-module-factory.xml:25(link)
#: xml/cut-module-factory.xml:28(link) xml/cut-module-factory.xml:29(link)
#: xml/cut-module-factory.xml:30(link) xml/cut-module-factory.xml:31(link)
#: xml/cut-module-factory.xml:33(link) xml/cut-module-factory.xml:34(link)
#: xml/cut-module-factory.xml:35(link) xml/cut-module-factory.xml:36(link)
#: xml/cut-module-factory.xml:37(link) xml/cut-module-factory.xml:38(link)
#: xml/cut-module-factory.xml:40(link) xml/cut-module-factory.xml:41(link)
#: xml/cut-module-factory.xml:42(link) xml/cut-module-factory.xml:47(link)
#: xml/cut-report.xml:24(link) xml/cut-report.xml:28(link)
#: xml/cut-report.xml:29(link) xml/cut-report.xml:31(link)
#: xml/cut-report.xml:33(link) xml/cut-report.xml:35(link)
#: xml/cut-report.xml:36(link) xml/cut-report.xml:37(link)
#: xml/cut-report.xml:38(link) xml/cut-report.xml:39(link)
#: xml/cut-report.xml:40(link) xml/cut-report.xml:41(link)
#: xml/cut-report.xml:42(link) xml/cut-ui.xml:25(link) xml/cut-ui.xml:26(link)
msgid "gchar"
msgstr ""

#: xml/cut-contractor.xml:28(link) xml/cut-factory-builder.xml:25(link)
#: xml/cut-listener.xml:22(link) xml/cut-listener.xml:24(link)
#: xml/cut-main.xml:22(link) xml/cut-main.xml:24(link)
#: xml/cut-module-factory.xml:23(link) xml/cut-module-factory.xml:24(link)
#: xml/cut-module-factory.xml:27(link) xml/cut-module-factory.xml:29(link)
#: xml/cut-module-factory.xml:31(link) xml/cut-module-factory.xml:32(link)
#: xml/cut-module-factory.xml:44(link) xml/cut-report.xml:24(link)
#: xml/cut-report.xml:25(link) xml/cut-ui.xml:23(link) xml/cut-ui.xml:24(link)
#: xml/cut-value-equal.xml:22(link) xml/cut-value-equal.xml:25(link)
#: xml/cutter.xml:22(link) xml/cutter.xml:23(link) xml/cutter.xml:24(link)
#: xml/cutter.xml:25(link)
msgid "void"
msgstr ""

#: xml/cut-contractor.xml:28(link) xml/cut-contractor.xml:118(primary)
msgid "cut_contractor_set_option_context"
msgstr ""

#: xml/cut-contractor.xml:29(link) xml/cut-factory-builder.xml:27(link)
#: xml/cut-module-factory.xml:45(link)
msgid "GOptionContext"
msgstr ""

#: xml/cut-contractor.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>*      <placeholder-3/>                  (void);\n"
"<placeholder-4/>*              <placeholder-5/>      (<placeholder-6/> *contractor);\n"
"<placeholder-7/>*              <placeholder-8/>  (<placeholder-9/> *contractor);\n"
"<placeholder-10/>            <placeholder-11/>          (<placeholder-12/> *contractor,\n"
"                                                         const <placeholder-13/> *type_name);\n"
"<placeholder-14/>                <placeholder-15/>   (<placeholder-16/> *contractor,\n"
"                                                         <placeholder-17/> *context);\n"
msgstr ""

#: xml/cut-contractor.xml:52(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutContractor;\n"
msgstr ""

#: xml/cut-contractor.xml:60(title)
msgid "cut_contractor_new ()"
msgstr ""

#: xml/cut-contractor.xml:61(programlisting)
#, no-wrap
msgid "<link linkend=\"CutContractor\">CutContractor</link>*      cut_contractor_new                  (void);"
msgstr ""

#: xml/cut-contractor.xml:65(term) xml/cut-contractor.xml:79(term)
#: xml/cut-contractor.xml:93(term) xml/cut-contractor.xml:111(term)
#: xml/cut-factory-builder.xml:68(term) xml/cut-factory-builder.xml:82(term)
#: xml/cut-factory-builder.xml:113(term) xml/cut-factory-builder.xml:127(term)
#: xml/cut-main.xml:76(term) xml/cut-main.xml:87(term)
#: xml/cut-main.xml:101(term) xml/cut-module-factory.xml:96(term)
#: xml/cut-module-factory.xml:157(term) xml/cut-module-factory.xml:175(term)
#: xml/cut-module-factory.xml:201(term) xml/cut-module-factory.xml:227(term)
#: xml/cut-module-factory.xml:257(term) xml/cut-module-factory.xml:271(term)
#: xml/cut-report.xml:106(term) xml/cut-report.xml:117(term)
#: xml/cut-report.xml:139(term) xml/cut-report.xml:153(term)
#: xml/cut-report.xml:175(term) xml/cut-report.xml:189(term)
#: xml/cut-report.xml:207(term) xml/cut-report.xml:221(term)
#: xml/cut-report.xml:235(term) xml/cut-report.xml:249(term)
#: xml/cut-report.xml:263(term) xml/cut-report.xml:277(term)
#: xml/cut-ui.xml:83(term) xml/cut-value-equal.xml:67(term)
#: xml/gbsearcharray.xml:78(term) xml/gbsearcharray.xml:191(term)
#: xml/gbsearcharray.xml:205(term)
msgid "<emphasis>Returns</emphasis>&nbsp;:"
msgstr "<emphasis>戻り値</emphasis>&nbsp;:"

#: xml/cut-contractor.xml:71(title)
msgid "cut_contractor_build_factories ()"
msgstr ""

#: xml/cut-contractor.xml:72(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_contractor_build_factories      (<link linkend=\"CutContractor\">CutContractor</link> *contractor);"
msgstr ""

#: xml/cut-contractor.xml:76(term) xml/cut-contractor.xml:90(term)
#: xml/cut-contractor.xml:105(term) xml/cut-contractor.xml:123(term)
msgid "<parameter>contractor</parameter>&nbsp;:"
msgstr ""

#: xml/cut-contractor.xml:85(title)
msgid "cut_contractor_build_all_factories ()"
msgstr ""

#: xml/cut-contractor.xml:86(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_contractor_build_all_factories  (<link linkend=\"CutContractor\">CutContractor</link> *contractor);"
msgstr ""

#: xml/cut-contractor.xml:99(title)
msgid "cut_contractor_has_builder ()"
msgstr ""

#: xml/cut-contractor.xml:100(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_contractor_has_builder          (<link linkend=\"CutContractor\">CutContractor</link> *contractor,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *type_name);"
msgstr ""

#: xml/cut-contractor.xml:108(term)
msgid "<parameter>type_name</parameter>&nbsp;:"
msgstr "<parameter>type_name</parameter>&nbsp;:"

#: xml/cut-contractor.xml:117(title)
msgid "cut_contractor_set_option_context ()"
msgstr ""

#: xml/cut-contractor.xml:118(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_contractor_set_option_context   (<link linkend=\"CutContractor\">CutContractor</link> *contractor,\n"
"                                                         <link linkend=\"GOptionContext\">GOptionContext</link> *context);"
msgstr ""

#: xml/cut-contractor.xml:126(term) xml/cut-factory-builder.xml:98(term)
#: xml/cut-module-factory.xml:242(term)
msgid "<parameter>context</parameter>&nbsp;:"
msgstr ""

#: xml/cut-factory-builder.xml:7(refentrytitle)
#: xml/cut-factory-builder.xml:13(refname)
#: xml/cut-factory-builder.xml:22(link) xml/cut-factory-builder.xml:23(link)
#: xml/cut-factory-builder.xml:24(link) xml/cut-factory-builder.xml:26(link)
#: xml/cut-factory-builder.xml:28(link) xml/cut-factory-builder.xml:29(link)
#: xml/cut-factory-builder.xml:51(title)
#: xml/cut-factory-builder.xml:52(primary)
msgid "CutFactoryBuilder"
msgstr ""

#: xml/cut-factory-builder.xml:23(link)
#: xml/cut-factory-builder.xml:61(primary)
msgid "cut_factory_builder_get_type_name"
msgstr ""

#: xml/cut-factory-builder.xml:24(link)
#: xml/cut-factory-builder.xml:75(primary)
msgid "cut_factory_builder_get_module_dir"
msgstr ""

#: xml/cut-factory-builder.xml:25(link)
#: xml/cut-factory-builder.xml:89(primary)
msgid "cut_factory_builder_set_option_context"
msgstr ""

#: xml/cut-factory-builder.xml:28(link)
#: xml/cut-factory-builder.xml:106(primary)
msgid "cut_factory_builder_build"
msgstr ""

#: xml/cut-factory-builder.xml:29(link)
#: xml/cut-factory-builder.xml:120(primary)
msgid "cut_factory_builder_build_all"
msgstr ""

#: xml/cut-factory-builder.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"const <placeholder-2/>*        <placeholder-3/>   (<placeholder-4/> *builder);\n"
"const <placeholder-5/>*        <placeholder-6/>  (<placeholder-7/> *builder);\n"
"<placeholder-8/>                <placeholder-9/>\n"
"                                                        (<placeholder-10/> *builder,\n"
"                                                         <placeholder-11/> *context);\n"
"<placeholder-12/>*              <placeholder-13/>           (<placeholder-14/> *builder);\n"
"<placeholder-15/>*              <placeholder-16/>       (<placeholder-17/> *builder);\n"
msgstr ""

#: xml/cut-factory-builder.xml:52(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutFactoryBuilder;\n"
msgstr ""

#: xml/cut-factory-builder.xml:60(title)
msgid "cut_factory_builder_get_type_name ()"
msgstr ""

#: xml/cut-factory-builder.xml:61(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_factory_builder_get_type_name   (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder);"
msgstr ""

#: xml/cut-factory-builder.xml:65(term) xml/cut-factory-builder.xml:79(term)
#: xml/cut-factory-builder.xml:95(term) xml/cut-factory-builder.xml:110(term)
#: xml/cut-factory-builder.xml:124(term)
msgid "<parameter>builder</parameter>&nbsp;:"
msgstr ""

#: xml/cut-factory-builder.xml:74(title)
msgid "cut_factory_builder_get_module_dir ()"
msgstr ""

#: xml/cut-factory-builder.xml:75(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_factory_builder_get_module_dir  (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder);"
msgstr ""

#: xml/cut-factory-builder.xml:88(title)
msgid "cut_factory_builder_set_option_context ()"
msgstr ""

#: xml/cut-factory-builder.xml:89(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_factory_builder_set_option_context\n"
"                                                        (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder,\n"
"                                                         <link linkend=\"GOptionContext\">GOptionContext</link> *context);"
msgstr ""

#: xml/cut-factory-builder.xml:105(title)
msgid "cut_factory_builder_build ()"
msgstr ""

#: xml/cut-factory-builder.xml:106(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_factory_builder_build           (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder);"
msgstr ""

#: xml/cut-factory-builder.xml:119(title)
msgid "cut_factory_builder_build_all ()"
msgstr ""

#: xml/cut-factory-builder.xml:120(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_factory_builder_build_all       (<link linkend=\"CutFactoryBuilder\">CutFactoryBuilder</link> *builder);"
msgstr ""

#: xml/cut-gassertions.xml:7(refentrytitle)
#: xml/cut-gassertions.xml:13(refname)
msgid "Assertions with GLib support"
msgstr "GLibサポート付きの検証"

#: xml/cut-gassertions.xml:14(refpurpose)
msgid "Checks that your program works as you expect with GLib support."
msgstr ""
"GLibサポート付きであなたのプログラムが期待通りに動作しているかを検証します。"

#: xml/cut-gassertions.xml:23(link) xml/cut-gassertions.xml:49(primary)
msgid "cut_assert_equal_g_type"
msgstr ""

#: xml/cut-gassertions.xml:24(link) xml/cut-gassertions.xml:68(primary)
msgid "cut_assert_equal_g_value"
msgstr ""

#: xml/cut-gassertions.xml:22(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>             (expected, actual, ...)\n"
"#define             <placeholder-2/>            (expected, actual, ...)\n"
msgstr ""

#: xml/cut-gassertions.xml:48(title)
msgid "cut_assert_equal_g_type()"
msgstr ""

#: xml/cut-gassertions.xml:49(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_g_type(expected, actual, ...)"
msgstr ""

#: xml/cut-gassertions.xml:56(simpara)
msgid "an expected GType."
msgstr "期待するGType。"

#: xml/cut-gassertions.xml:59(simpara)
msgid "an actual GType."
msgstr "実際のGType。"

#: xml/cut-gassertions.xml:67(title)
msgid "cut_assert_equal_g_value()"
msgstr ""

#: xml/cut-gassertions.xml:68(programlisting)
#, no-wrap
msgid "#define             cut_assert_equal_g_value(expected, actual, ...)"
msgstr ""

#: xml/cut-gassertions.xml:75(simpara)
msgid "an expected GValue *."
msgstr "期待するGValue *。"

#: xml/cut-gassertions.xml:78(simpara)
msgid "an actual GValue *."
msgstr "実際のGValue *。"

#: xml/cut-listener.xml:7(refentrytitle) xml/cut-listener.xml:13(refname)
#: xml/cut-listener.xml:22(link) xml/cut-listener.xml:24(link)
msgid "CutListener"
msgstr ""

#: xml/cut-listener.xml:22(link) xml/cut-listener.xml:48(primary)
msgid "cut_listener_attach_to_runner"
msgstr ""

#: xml/cut-listener.xml:23(link) xml/cut-listener.xml:25(link)
#: xml/cut-main.xml:26(link) xml/cut-main.xml:27(link)
msgid "CutRunner"
msgstr ""

#: xml/cut-listener.xml:24(link) xml/cut-listener.xml:64(primary)
msgid "cut_listener_detach_from_runner"
msgstr ""

#: xml/cut-listener.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>       (<placeholder-3/> *listener,\n"
"                                                         <placeholder-4/> *runner);\n"
"<placeholder-5/>                <placeholder-6/>     (<placeholder-7/> *listener,\n"
"                                                         <placeholder-8/> *runner);\n"
msgstr ""

#: xml/cut-listener.xml:47(title)
msgid "cut_listener_attach_to_runner ()"
msgstr ""

#: xml/cut-listener.xml:48(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_listener_attach_to_runner       (<link linkend=\"CutListener\">CutListener</link> *listener,\n"
"                                                         <link linkend=\"CutRunner\">CutRunner</link> *runner);"
msgstr ""

#: xml/cut-listener.xml:53(term) xml/cut-listener.xml:69(term)
msgid "<parameter>listener</parameter>&nbsp;:"
msgstr ""

#: xml/cut-listener.xml:56(term) xml/cut-listener.xml:72(term)
#: xml/cut-main.xml:98(term)
msgid "<parameter>runner</parameter>&nbsp;:"
msgstr ""

#: xml/cut-listener.xml:63(title)
msgid "cut_listener_detach_from_runner ()"
msgstr ""

#: xml/cut-listener.xml:64(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_listener_detach_from_runner     (<link linkend=\"CutListener\">CutListener</link> *listener,\n"
"                                                         <link linkend=\"CutRunner\">CutRunner</link> *runner);"
msgstr ""

#: xml/cut-main.xml:7(refentrytitle) xml/cut-main.xml:13(refname)
msgid "cut-main"
msgstr ""

#: xml/cut-main.xml:22(link) xml/cut-main.xml:50(primary)
msgid "cut_init"
msgstr ""

#: xml/cut-main.xml:22(link)
msgid "int"
msgstr ""

#: xml/cut-main.xml:23(link)
msgid "char"
msgstr ""

#: xml/cut-main.xml:24(link) xml/cut-main.xml:66(primary)
msgid "cut_quit"
msgstr ""

#: xml/cut-main.xml:25(link) xml/cut-main.xml:72(primary)
msgid "cut_run"
msgstr ""

#: xml/cut-main.xml:26(link) xml/cut-main.xml:83(primary)
msgid "cut_create_runner"
msgstr ""

#: xml/cut-main.xml:27(link) xml/cut-main.xml:94(primary)
msgid "cut_run_runner"
msgstr ""

#: xml/cut-main.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                            (<placeholder-3/> *argc,\n"
"                                                         <placeholder-4/> ***argv);\n"
"<placeholder-5/>                <placeholder-6/>                            (void);\n"
"<placeholder-7/>            <placeholder-8/>                             (void);\n"
"<placeholder-9/>*          <placeholder-10/>                   (void);\n"
"<placeholder-11/>            <placeholder-12/>                      (<placeholder-13/> *runner);\n"
msgstr ""

#: xml/cut-main.xml:49(title)
msgid "cut_init ()"
msgstr ""

#: xml/cut-main.xml:50(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_init                            (<link linkend=\"int\">int</link> *argc,\n"
"                                                         <link linkend=\"char\">char</link> ***argv);"
msgstr ""

#: xml/cut-main.xml:55(term)
msgid "<parameter>argc</parameter>&nbsp;:"
msgstr ""

#: xml/cut-main.xml:58(term)
msgid "<parameter>argv</parameter>&nbsp;:"
msgstr ""

#: xml/cut-main.xml:65(title)
msgid "cut_quit ()"
msgstr ""

#: xml/cut-main.xml:66(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_quit                            (void);"
msgstr ""

#: xml/cut-main.xml:71(title)
msgid "cut_run ()"
msgstr ""

#: xml/cut-main.xml:72(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run                             (void);"
msgstr ""

#: xml/cut-main.xml:82(title)
msgid "cut_create_runner ()"
msgstr ""

#: xml/cut-main.xml:83(programlisting)
#, no-wrap
msgid "<link linkend=\"CutRunner\">CutRunner</link>*          cut_create_runner                   (void);"
msgstr ""

#: xml/cut-main.xml:93(title)
msgid "cut_run_runner ()"
msgstr ""

#: xml/cut-main.xml:94(programlisting)
#, no-wrap
msgid "<link linkend=\"gboolean\">gboolean</link>            cut_run_runner                      (<link linkend=\"CutRunner\">CutRunner</link> *runner);"
msgstr ""

#: xml/cut-module-factory.xml:7(refentrytitle)
#: xml/cut-module-factory.xml:13(refname) xml/cut-module-factory.xml:22(link)
#: xml/cut-module-factory.xml:36(link) xml/cut-module-factory.xml:40(link)
#: xml/cut-module-factory.xml:44(link) xml/cut-module-factory.xml:46(link)
#: xml/cut-module-factory.xml:47(link) xml/cut-module-factory.xml:69(title)
#: xml/cut-module-factory.xml:70(primary)
msgid "CutModuleFactory"
msgstr ""

#: xml/cut-module-factory.xml:23(link) xml/cut-module-factory.xml:79(primary)
msgid "cut_module_factory_init"
msgstr ""

#: xml/cut-module-factory.xml:24(link) xml/cut-module-factory.xml:85(primary)
msgid "cut_module_factory_quit"
msgstr ""

#: xml/cut-module-factory.xml:25(link) xml/cut-module-factory.xml:91(primary)
msgid "cut_module_factory_get_default_module_dir"
msgstr ""

#: xml/cut-module-factory.xml:27(link) xml/cut-module-factory.xml:103(primary)
msgid "cut_module_factory_set_default_module_dir"
msgstr ""

#: xml/cut-module-factory.xml:29(link) xml/cut-module-factory.xml:116(primary)
msgid "cut_module_factory_load"
msgstr ""

#: xml/cut-module-factory.xml:31(link) xml/cut-module-factory.xml:132(primary)
msgid "cut_module_factory_load_all"
msgstr ""

#: xml/cut-module-factory.xml:32(link) xml/cut-module-factory.xml:144(primary)
msgid "cut_module_factory_unload"
msgstr ""

#: xml/cut-module-factory.xml:33(link) xml/cut-module-factory.xml:150(primary)
msgid "cut_module_factory_get_names"
msgstr ""

#: xml/cut-module-factory.xml:34(link) xml/cut-module-factory.xml:164(primary)
msgid "cut_module_factory_exist_module"
msgstr ""

#: xml/cut-module-factory.xml:36(link) xml/cut-module-factory.xml:182(primary)
msgid "cut_module_factory_new"
msgstr ""

#: xml/cut-module-factory.xml:40(link) xml/cut-module-factory.xml:208(primary)
msgid "cut_module_factory_new_valist"
msgstr ""

#: xml/cut-module-factory.xml:43(link)
msgid "va_list"
msgstr ""

#: xml/cut-module-factory.xml:44(link) xml/cut-module-factory.xml:234(primary)
msgid "cut_module_factory_set_option_group"
msgstr ""

#: xml/cut-module-factory.xml:46(link) xml/cut-ui.xml:25(link)
msgid "GObject"
msgstr ""

#: xml/cut-module-factory.xml:46(link) xml/cut-module-factory.xml:250(primary)
msgid "cut_module_factory_create"
msgstr ""

#: xml/cut-module-factory.xml:47(link) xml/cut-module-factory.xml:264(primary)
msgid "cut_module_factory_get_name"
msgstr ""

#: xml/cut-module-factory.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>                <placeholder-3/>             (void);\n"
"<placeholder-4/>                <placeholder-5/>             (void);\n"
"const <placeholder-6/>*        <placeholder-7/>\n"
"                                                        (void);\n"
"<placeholder-8/>                <placeholder-9/>\n"
"                                                        (const <placeholder-10/> *dir);\n"
"<placeholder-11/>                <placeholder-12/>             (const <placeholder-13/> *dir,\n"
"                                                         const <placeholder-14/> *type);\n"
"<placeholder-15/>                <placeholder-16/>         (const <placeholder-17/> *base_dir);\n"
"<placeholder-18/>                <placeholder-19/>           (void);\n"
"<placeholder-20/>*              <placeholder-21/>        (const <placeholder-22/> *type);\n"
"<placeholder-23/>            <placeholder-24/>     (const <placeholder-25/> *type,\n"
"                                                         const <placeholder-26/> *name);\n"
"<placeholder-27/>*   <placeholder-28/>              (const <placeholder-29/> *type,\n"
"                                                         const <placeholder-30/> *name,\n"
"                                                         const <placeholder-31/> *first_property,\n"
"                                                         ...);\n"
"<placeholder-32/>*   <placeholder-33/>       (const <placeholder-34/> *type,\n"
"                                                         const <placeholder-35/> *name,\n"
"                                                         const <placeholder-36/> *first_property,\n"
"                                                         <placeholder-37/> var_args);\n"
"<placeholder-38/>                <placeholder-39/> (<placeholder-40/> *factory,\n"
"                                                         <placeholder-41/> *context);\n"
"<placeholder-42/>*            <placeholder-43/>           (<placeholder-44/> *factory);\n"
"const <placeholder-45/>*        <placeholder-46/>         (<placeholder-47/> *factory);\n"
msgstr ""

#: xml/cut-module-factory.xml:70(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutModuleFactory;\n"
msgstr ""

#: xml/cut-module-factory.xml:78(title)
msgid "cut_module_factory_init ()"
msgstr ""

#: xml/cut-module-factory.xml:79(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_module_factory_init             (void);"
msgstr ""

#: xml/cut-module-factory.xml:84(title)
msgid "cut_module_factory_quit ()"
msgstr ""

#: xml/cut-module-factory.xml:85(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_module_factory_quit             (void);"
msgstr ""

#: xml/cut-module-factory.xml:90(title)
msgid "cut_module_factory_get_default_module_dir ()"
msgstr ""

#: xml/cut-module-factory.xml:91(programlisting)
#, no-wrap
msgid ""
"const <link linkend=\"gchar\">gchar</link>*        cut_module_factory_get_default_module_dir\n"
"                                                        (void);"
msgstr ""

#: xml/cut-module-factory.xml:102(title)
msgid "cut_module_factory_set_default_module_dir ()"
msgstr ""

#: xml/cut-module-factory.xml:103(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_module_factory_set_default_module_dir\n"
"                                                        (const <link linkend=\"gchar\">gchar</link> *dir);"
msgstr ""

#: xml/cut-module-factory.xml:108(term) xml/cut-module-factory.xml:121(term)
msgid "<parameter>dir</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory.xml:115(title)
msgid "cut_module_factory_load ()"
msgstr ""

#: xml/cut-module-factory.xml:116(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_module_factory_load             (const <link linkend=\"gchar\">gchar</link> *dir,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *type);"
msgstr ""

#: xml/cut-module-factory.xml:124(term) xml/cut-module-factory.xml:154(term)
#: xml/cut-module-factory.xml:169(term) xml/cut-module-factory.xml:189(term)
#: xml/cut-module-factory.xml:215(term)
msgid "<parameter>type</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory.xml:131(title)
msgid "cut_module_factory_load_all ()"
msgstr ""

#: xml/cut-module-factory.xml:132(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_module_factory_load_all         (const <link linkend=\"gchar\">gchar</link> *base_dir);"
msgstr ""

#: xml/cut-module-factory.xml:136(term) xml/cut-report.xml:88(term)
msgid "<parameter>base_dir</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory.xml:143(title)
msgid "cut_module_factory_unload ()"
msgstr ""

#: xml/cut-module-factory.xml:144(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_module_factory_unload           (void);"
msgstr ""

#: xml/cut-module-factory.xml:149(title)
msgid "cut_module_factory_get_names ()"
msgstr ""

#: xml/cut-module-factory.xml:150(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_module_factory_get_names        (const <link linkend=\"gchar\">gchar</link> *type);"
msgstr ""

#: xml/cut-module-factory.xml:163(title)
msgid "cut_module_factory_exist_module ()"
msgstr ""

#: xml/cut-module-factory.xml:164(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_module_factory_exist_module     (const <link linkend=\"gchar\">gchar</link> *type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name);"
msgstr ""

#: xml/cut-module-factory.xml:172(term) xml/cut-module-factory.xml:192(term)
#: xml/cut-module-factory.xml:218(term) xml/cut-report.xml:130(term)
#: xml/cut-ui.xml:74(term)
msgid "<parameter>name</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory.xml:181(title)
msgid "cut_module_factory_new ()"
msgstr ""

#: xml/cut-module-factory.xml:182(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutModuleFactory\">CutModuleFactory</link>*   cut_module_factory_new              (const <link linkend=\"gchar\">gchar</link> *type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-module-factory.xml:195(term) xml/cut-module-factory.xml:221(term)
#: xml/cut-report.xml:133(term) xml/cut-ui.xml:77(term)
msgid "<parameter>first_property</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory.xml:207(title)
msgid "cut_module_factory_new_valist ()"
msgstr ""

#: xml/cut-module-factory.xml:208(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutModuleFactory\">CutModuleFactory</link>*   cut_module_factory_new_valist       (const <link linkend=\"gchar\">gchar</link> *type,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         <link linkend=\"va-list\">va_list</link> var_args);"
msgstr ""

#: xml/cut-module-factory.xml:224(term)
msgid "<parameter>var_args</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory.xml:233(title)
msgid "cut_module_factory_set_option_group ()"
msgstr ""

#: xml/cut-module-factory.xml:234(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_module_factory_set_option_group (<link linkend=\"CutModuleFactory\">CutModuleFactory</link> *factory,\n"
"                                                         <link linkend=\"GOptionContext\">GOptionContext</link> *context);"
msgstr ""

#: xml/cut-module-factory.xml:239(term) xml/cut-module-factory.xml:254(term)
#: xml/cut-module-factory.xml:268(term)
msgid "<parameter>factory</parameter>&nbsp;:"
msgstr ""

#: xml/cut-module-factory.xml:249(title)
msgid "cut_module_factory_create ()"
msgstr ""

#: xml/cut-module-factory.xml:250(programlisting)
#, no-wrap
msgid "<link linkend=\"GObject\">GObject</link>*            cut_module_factory_create           (<link linkend=\"CutModuleFactory\">CutModuleFactory</link> *factory);"
msgstr ""

#: xml/cut-module-factory.xml:263(title)
msgid "cut_module_factory_get_name ()"
msgstr ""

#: xml/cut-module-factory.xml:264(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_module_factory_get_name         (<link linkend=\"CutModuleFactory\">CutModuleFactory</link> *factory);"
msgstr ""

#: xml/cut-report-factory-builder.xml:7(refentrytitle)
#: xml/cut-report-factory-builder.xml:13(refname)
#: xml/cut-report-factory-builder.xml:22(link)
#: xml/cut-report-factory-builder.xml:44(title)
#: xml/cut-report-factory-builder.xml:45(primary)
msgid "CutReportFactoryBuilder"
msgstr ""

#: xml/cut-report-factory-builder.xml:21(synopsis)
#: xml/cut-ui-factory-builder.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
msgstr ""

#: xml/cut-report-factory-builder.xml:45(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutFactoryBuilder object;\n"
"} CutReportFactoryBuilder;\n"
msgstr ""

#: xml/cut-report.xml:7(refentrytitle) xml/cut-report.xml:13(refname)
#: xml/cut-report.xml:23(link) xml/cut-report.xml:28(link)
#: xml/cut-report.xml:31(link) xml/cut-report.xml:32(link)
#: xml/cut-report.xml:35(link) xml/cut-report.xml:36(link)
#: xml/cut-report.xml:38(link) xml/cut-report.xml:39(link)
#: xml/cut-report.xml:40(link) xml/cut-report.xml:41(link)
#: xml/cut-report.xml:42(link) xml/cut-report.xml:74(title)
#: xml/cut-report.xml:75(primary)
msgid "CutReport"
msgstr ""

#: xml/cut-report.xml:22(link) xml/cut-report.xml:34(link)
#: xml/cut-report.xml:65(primary)
msgid "CutReportFileMode"
msgstr ""

#: xml/cut-report.xml:24(link) xml/cut-report.xml:84(primary)
msgid "cut_report_load"
msgstr ""

#: xml/cut-report.xml:25(link) xml/cut-report.xml:96(primary)
msgid "cut_report_unload"
msgstr ""

#: xml/cut-report.xml:26(link) xml/cut-report.xml:102(primary)
msgid "cut_report_get_registered_types"
msgstr ""

#: xml/cut-report.xml:27(link) xml/cut-report.xml:113(primary)
msgid "cut_report_get_log_domains"
msgstr ""

#: xml/cut-report.xml:28(link) xml/cut-report.xml:124(primary)
msgid "cut_report_new"
msgstr ""

#: xml/cut-report.xml:31(link) xml/cut-report.xml:146(primary)
msgid "cut_report_get_filename"
msgstr ""

#: xml/cut-report.xml:32(link) xml/cut-report.xml:160(primary)
msgid "cut_report_result_to_file"
msgstr ""

#: xml/cut-report.xml:35(link) xml/cut-report.xml:182(primary)
msgid "cut_report_get_all_results"
msgstr ""

#: xml/cut-report.xml:36(link) xml/cut-report.xml:196(primary)
msgid "cut_report_get_test_result"
msgstr ""

#: xml/cut-report.xml:38(link) xml/cut-report.xml:214(primary)
msgid "cut_report_get_success_results"
msgstr ""

#: xml/cut-report.xml:39(link) xml/cut-report.xml:228(primary)
msgid "cut_report_get_error_results"
msgstr ""

#: xml/cut-report.xml:40(link) xml/cut-report.xml:242(primary)
msgid "cut_report_get_failure_results"
msgstr ""

#: xml/cut-report.xml:41(link) xml/cut-report.xml:256(primary)
msgid "cut_report_get_pending_results"
msgstr ""

#: xml/cut-report.xml:42(link) xml/cut-report.xml:270(primary)
msgid "cut_report_get_notification_results"
msgstr ""

#: xml/cut-report.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"enum                <placeholder-1/>;\n"
"                    <placeholder-2/>;\n"
"<placeholder-3/>                <placeholder-4/>                     (const <placeholder-5/> *base_dir);\n"
"<placeholder-6/>                <placeholder-7/>                   (void);\n"
"<placeholder-8/>*              <placeholder-9/>     (void);\n"
"<placeholder-10/>*              <placeholder-11/>          (void);\n"
"<placeholder-12/>*          <placeholder-13/>                      (const <placeholder-14/> *name,\n"
"                                                         const <placeholder-15/> *first_property,\n"
"                                                         ...);\n"
"const <placeholder-16/>*        <placeholder-17/>             (<placeholder-18/> *report);\n"
"<placeholder-19/>            <placeholder-20/>           (<placeholder-21/> *report,\n"
"                                                         const <placeholder-22/> *filename,\n"
"                                                         <placeholder-23/> mode);\n"
"<placeholder-24/>*              <placeholder-25/>          (<placeholder-26/> *report);\n"
"<placeholder-27/>*              <placeholder-28/>          (<placeholder-29/> *report,\n"
"                                                         const <placeholder-30/> *test_name);\n"
"<placeholder-31/>*              <placeholder-32/>      (<placeholder-33/> *report);\n"
"<placeholder-34/>*              <placeholder-35/>        (<placeholder-36/> *report);\n"
"<placeholder-37/>*              <placeholder-38/>      (<placeholder-39/> *report);\n"
"<placeholder-40/>*              <placeholder-41/>      (<placeholder-42/> *report);\n"
"<placeholder-43/>*              <placeholder-44/> (<placeholder-45/> *report);\n"
msgstr ""

#: xml/cut-report.xml:64(title)
msgid "enum CutReportFileMode"
msgstr ""

#: xml/cut-report.xml:65(programlisting)
#, no-wrap
msgid ""
"typedef enum {\n"
"    CUT_REPORT_FILE_OVERWRITE,\n"
"    CUT_REPORT_FILE_APPEND\n"
"} CutReportFileMode;\n"
msgstr ""

#: xml/cut-report.xml:75(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    GObject object;\n"
"} CutReport;\n"
msgstr ""

#: xml/cut-report.xml:83(title)
msgid "cut_report_load ()"
msgstr ""

#: xml/cut-report.xml:84(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_report_load                     (const <link linkend=\"gchar\">gchar</link> *base_dir);"
msgstr ""

#: xml/cut-report.xml:95(title)
msgid "cut_report_unload ()"
msgstr ""

#: xml/cut-report.xml:96(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_report_unload                   (void);"
msgstr ""

#: xml/cut-report.xml:101(title)
msgid "cut_report_get_registered_types ()"
msgstr ""

#: xml/cut-report.xml:102(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_report_get_registered_types     (void);"
msgstr ""

#: xml/cut-report.xml:112(title)
msgid "cut_report_get_log_domains ()"
msgstr ""

#: xml/cut-report.xml:113(programlisting)
#, no-wrap
msgid "<link linkend=\"GList\">GList</link>*              cut_report_get_log_domains          (void);"
msgstr ""

#: xml/cut-report.xml:123(title)
msgid "cut_report_new ()"
msgstr ""

#: xml/cut-report.xml:124(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"CutReport\">CutReport</link>*          cut_report_new                      (const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-report.xml:145(title)
msgid "cut_report_get_filename ()"
msgstr ""

#: xml/cut-report.xml:146(programlisting)
#, no-wrap
msgid "const <link linkend=\"gchar\">gchar</link>*        cut_report_get_filename             (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:150(term) xml/cut-report.xml:166(term)
#: xml/cut-report.xml:186(term) xml/cut-report.xml:201(term)
#: xml/cut-report.xml:218(term) xml/cut-report.xml:232(term)
#: xml/cut-report.xml:246(term) xml/cut-report.xml:260(term)
#: xml/cut-report.xml:274(term)
msgid "<parameter>report</parameter>&nbsp;:"
msgstr ""

#: xml/cut-report.xml:159(title)
msgid "cut_report_result_to_file ()"
msgstr ""

#: xml/cut-report.xml:160(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_report_result_to_file           (<link linkend=\"CutReport\">CutReport</link> *report,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *filename,\n"
"                                                         <link linkend=\"CutReportFileMode\">CutReportFileMode</link> mode);"
msgstr ""

#: xml/cut-report.xml:169(term)
msgid "<parameter>filename</parameter>&nbsp;:"
msgstr ""

#: xml/cut-report.xml:172(term)
msgid "<parameter>mode</parameter>&nbsp;:"
msgstr ""

#: xml/cut-report.xml:181(title)
msgid "cut_report_get_all_results ()"
msgstr ""

#: xml/cut-report.xml:182(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_all_results          (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:195(title)
msgid "cut_report_get_test_result ()"
msgstr ""

#: xml/cut-report.xml:196(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gchar\">gchar</link>*              cut_report_get_test_result          (<link linkend=\"CutReport\">CutReport</link> *report,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *test_name);"
msgstr ""

#: xml/cut-report.xml:204(term)
msgid "<parameter>test_name</parameter>&nbsp;:"
msgstr ""

#: xml/cut-report.xml:213(title)
msgid "cut_report_get_success_results ()"
msgstr ""

#: xml/cut-report.xml:214(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_success_results      (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:227(title)
msgid "cut_report_get_error_results ()"
msgstr ""

#: xml/cut-report.xml:228(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_error_results        (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:241(title)
msgid "cut_report_get_failure_results ()"
msgstr ""

#: xml/cut-report.xml:242(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_failure_results      (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:255(title)
msgid "cut_report_get_pending_results ()"
msgstr ""

#: xml/cut-report.xml:256(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_pending_results      (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-report.xml:269(title)
msgid "cut_report_get_notification_results ()"
msgstr ""

#: xml/cut-report.xml:270(programlisting)
#, no-wrap
msgid "<link linkend=\"gchar\">gchar</link>*              cut_report_get_notification_results (<link linkend=\"CutReport\">CutReport</link> *report);"
msgstr ""

#: xml/cut-ui-factory-builder.xml:7(refentrytitle)
#: xml/cut-ui-factory-builder.xml:13(refname)
#: xml/cut-ui-factory-builder.xml:22(link)
#: xml/cut-ui-factory-builder.xml:44(title)
#: xml/cut-ui-factory-builder.xml:45(primary)
msgid "CutUIFactoryBuilder"
msgstr ""

#: xml/cut-ui-factory-builder.xml:45(programlisting)
#, no-wrap
msgid ""
"typedef struct {\n"
"    CutFactoryBuilder object;\n"
"} CutUIFactoryBuilder;\n"
msgstr ""

#: xml/cut-ui-factory.xml:7(refentrytitle) xml/cut-ui-factory.xml:13(refname)
msgid "CutUIFactory"
msgstr ""

#: xml/cut-ui.xml:7(refentrytitle) xml/cut-ui.xml:13(refname)
#: xml/cut-ui.xml:22(link) xml/cut-ui.xml:49(title) xml/cut-ui.xml:50(primary)
msgid "CutUI"
msgstr ""

#: xml/cut-ui.xml:23(link) xml/cut-ui.xml:56(primary)
msgid "cut_ui_init"
msgstr ""

#: xml/cut-ui.xml:24(link) xml/cut-ui.xml:62(primary)
msgid "cut_ui_quit"
msgstr ""

#: xml/cut-ui.xml:25(link) xml/cut-ui.xml:68(primary)
msgid "cut_ui_new"
msgstr ""

#: xml/cut-ui.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"                    <placeholder-1/>;\n"
"<placeholder-2/>                <placeholder-3/>                         (void);\n"
"<placeholder-4/>                <placeholder-5/>                         (void);\n"
"<placeholder-6/>*            <placeholder-7/>                          (const <placeholder-8/> *name,\n"
"                                                         const <placeholder-9/> *first_property,\n"
"                                                         ...);\n"
msgstr ""

#: xml/cut-ui.xml:50(programlisting)
#, no-wrap
msgid "typedef struct _CutUI CutUI;"
msgstr ""

#: xml/cut-ui.xml:55(title)
msgid "cut_ui_init ()"
msgstr ""

#: xml/cut-ui.xml:56(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_ui_init                         (void);"
msgstr ""

#: xml/cut-ui.xml:61(title)
msgid "cut_ui_quit ()"
msgstr ""

#: xml/cut-ui.xml:62(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_ui_quit                         (void);"
msgstr ""

#: xml/cut-ui.xml:67(title)
msgid "cut_ui_new ()"
msgstr ""

#: xml/cut-ui.xml:68(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"GObject\">GObject</link>*            cut_ui_new                          (const <link linkend=\"gchar\">gchar</link> *name,\n"
"                                                         const <link linkend=\"gchar\">gchar</link> *first_property,\n"
"                                                         ...);"
msgstr ""

#: xml/cut-value-equal.xml:7(refentrytitle)
#: xml/cut-value-equal.xml:13(refname)
msgid "cut-value-equal"
msgstr ""

#: xml/cut-value-equal.xml:22(link) xml/cut-value-equal.xml:50(primary)
msgid "cut_value_equal_init"
msgstr ""

#: xml/cut-value-equal.xml:23(link) xml/cut-value-equal.xml:56(primary)
msgid "cut_value_equal"
msgstr ""

#: xml/cut-value-equal.xml:23(link) xml/cut-value-equal.xml:24(link)
msgid "GValue"
msgstr ""

#: xml/cut-value-equal.xml:25(link) xml/cut-value-equal.xml:74(primary)
msgid "cut_value_register_equal_func"
msgstr ""

#: xml/cut-value-equal.xml:25(link) xml/cut-value-equal.xml:26(link)
msgid "GType"
msgstr ""

#: xml/cut-value-equal.xml:27(link)
msgid "GEqualFunc"
msgstr ""

#: xml/cut-value-equal.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                (void);\n"
"<placeholder-3/>            <placeholder-4/>                     (const <placeholder-5/> *value1,\n"
"                                                         const <placeholder-6/> *value2);\n"
"<placeholder-7/>                <placeholder-8/>       (<placeholder-9/> type1,\n"
"                                                         <placeholder-10/> type2,\n"
"                                                         <placeholder-11/> equal_func);\n"
msgstr ""

#: xml/cut-value-equal.xml:49(title)
msgid "cut_value_equal_init ()"
msgstr ""

#: xml/cut-value-equal.xml:50(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                cut_value_equal_init                (void);"
msgstr ""

#: xml/cut-value-equal.xml:55(title)
msgid "cut_value_equal ()"
msgstr ""

#: xml/cut-value-equal.xml:56(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"gboolean\">gboolean</link>            cut_value_equal                     (const <link linkend=\"GValue\">GValue</link> *value1,\n"
"                                                         const <link linkend=\"GValue\">GValue</link> *value2);"
msgstr ""

#: xml/cut-value-equal.xml:61(term)
msgid "<parameter>value1</parameter>&nbsp;:"
msgstr ""

#: xml/cut-value-equal.xml:64(term)
msgid "<parameter>value2</parameter>&nbsp;:"
msgstr ""

#: xml/cut-value-equal.xml:73(title)
msgid "cut_value_register_equal_func ()"
msgstr ""

#: xml/cut-value-equal.xml:74(programlisting)
#, no-wrap
msgid ""
"<link linkend=\"void\">void</link>                cut_value_register_equal_func       (<link linkend=\"GType\">GType</link> type1,\n"
"                                                         <link linkend=\"GType\">GType</link> type2,\n"
"                                                         <link linkend=\"GEqualFunc\">GEqualFunc</link> equal_func);"
msgstr ""

#: xml/cut-value-equal.xml:80(term)
msgid "<parameter>type1</parameter>&nbsp;:"
msgstr ""

#: xml/cut-value-equal.xml:83(term)
msgid "<parameter>type2</parameter>&nbsp;:"
msgstr ""

#: xml/cut-value-equal.xml:86(term)
msgid "<parameter>equal_func</parameter>&nbsp;:"
msgstr ""

#: xml/cutter.xml:7(refentrytitle) xml/cutter.xml:13(refname)
msgid "Cutter"
msgstr ""

#: xml/cutter.xml:14(refpurpose)
msgid "An Unit Testing Framework for C."
msgstr "C言語用単体テストフレームワーク"

#: xml/cutter.xml:22(link) xml/cutter.xml:146(primary)
msgid "setup"
msgstr ""

#: xml/cutter.xml:23(link) xml/cutter.xml:155(primary)
msgid "teardown"
msgstr ""

#: xml/cutter.xml:24(link) xml/cutter.xml:165(primary)
msgid "startup"
msgstr ""

#: xml/cutter.xml:25(link) xml/cutter.xml:174(primary)
msgid "shutdown"
msgstr ""

#: xml/cutter.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"<placeholder-1/>                <placeholder-2/>                               (void);\n"
"<placeholder-3/>                <placeholder-4/>                            (void);\n"
"<placeholder-5/>                <placeholder-6/>                             (void);\n"
"<placeholder-7/>                <placeholder-8/>                            (void);\n"
msgstr ""

#: xml/cutter.xml:49(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;cutter.h&gt;\n"
"#include \"my-stack.h\"\n"
"\n"
"void\n"
"test_my_stack (void)\n"
"{\n"
"    MyStack *stack = my_stack_new();\n"
"\n"
"    cut_assert_not_null(stack);\n"
"    cut_assert(my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(0, my_stack_get_size(stack));\n"
"\n"
"    my_stack_push(stack, 10);\n"
"    cut_assert(!my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(1, my_stack_get_size(stack));\n"
"\n"
"    my_stack_push(stack, 20);\n"
"    cut_assert_equal_int(2, my_stack_get_size(stack));\n"
"\n"
"    cut_assert_equal(20, my_stack_pop(stack));\n"
"    cut_assert(!my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(1, my_stack_get_size(stack));\n"
"\n"
"    cut_assert_equal(10, my_stack_pop(stack));\n"
"    cut_assert(my_stack_is_empty(stack));\n"
"    cut_assert_equal_int(0, my_stack_get_size(stack));\n"
"}\n"
msgstr ""

#: xml/cutter.xml:43(para)
msgid ""
"Easy to use. Cutter doesn't introduce any magic macros like "
"CUTTER_DEFINE_TEST_START and CUTTER_DEFINE_TEST_END into your test program. "
"You can write your test program like normal program. You only use <link "
"linkend=\"cut-assert-XXX\"><function>cut_assert_XXX()</function></link> to "
"check that your program works as you expect. <placeholder-1/>"
msgstr ""
"簡単に使えます。Cutterではテストプログラム中にCUTTER_DEFINE_TEST_STARTや"
"CUTTER_DEFINE_TEST_ENDなどといった不思議なマクロを使う必要がありません。通常"
"のプログラムと同じようにテストプログラムを書くことができます。ただし、プログ"
"ラムが期待した通り動作していることを検証するために<link linkend=\"cut-assert-"
"XXX\"><function>cut_assert_XXX()</function></link>を使う必要があります。"
"<placeholder-1/>"

#: xml/cutter.xml:83(programlisting)
#, no-wrap
msgid ""
"\n"
"...........................................................\n"
"\n"
"Finished in 0.213021 seconds\n"
"\n"
"59 test(s), 246 assertion(s), 0 failure(s), 0 error(s), 0 pending(s), 0 notification(s)\n"
msgstr ""

#: xml/cutter.xml:79(para)
msgid ""
"Simple but useful output. Cutter works quietly if tests are running without "
"any problems by default. The following is an output of self test: "
"<placeholder-1/> Cutter just outputs \".\" for a passed test and a summary "
"at the end. Cutter doesn't output each test name, how many assertions are "
"used for a test and so because we don't need the information on success."
msgstr ""
"簡素ですが有用な情報を出力をします。Cutterはデフォルトではテストが問題なく動"
"いているときは静かに動きます。以下は、Cutter自身のテストの出力です。"
"<placeholder-1/>Cutterはテストが1つパスしたことを示すためには「.」だけを出力"
"し、最後にテスト結果の要約を出力します。Cutterは各テストの名前や何個検証した"
"かなどの情報は表示しません。これは、テスト成功時にはこれらの情報は必要ないか"
"らです。"

#: xml/cutter.xml:96(programlisting)
#, no-wrap
msgid ""
"\n"
".....................F.....................................\n"
"\n"
"1) Failure: test_error\n"
"&lt;\"Strange\" == cut_test_result_get_test_name(result)&gt;\n"
"expected: &lt;Strange!!!&gt;\n"
" but was: &lt;dummy-error-test&gt;\n"
"test/test-cut-assertions.c:240: cut_assert_test_result()\n"
"\n"
"Finished in 0.223657 seconds\n"
"\n"
"59 test(s), 242 assertion(s), 1 failure(s), 0 error(s), 0 pending(s), 0 notification(s)\n"
msgstr ""

#: xml/cutter.xml:111(programlisting)
#, no-wrap
msgid ""
"\n"
"cut_assert_equal_string(\"Strange!!!\", cut_test_result_get_test_name(result));\n"
msgstr ""

#: xml/cutter.xml:94(para)
msgid ""
"Cutter outputs many information on failure: <placeholder-1/> The above "
"result is happened because I add a strange expected staring in Cutter's self "
"test: <placeholder-2/> The strange assertion is written in the 240th line in "
"test/test-cut-assertions.c and the line is in the <link linkend=\"cut-assert-"
"test-result\"><function>cut_assert_test_result()</function></link> function. "
"The function is called in test_error test. We expected "
"cut_test_result_get_test_name(result) should return \"Strange!!!\" but got "
"\"dummy-error-name\". We can get the above information from Cutter output. "
"This will help your debug."
msgstr ""
"Cutterは失敗時にはたくさんの情報を出力します。<placeholder-1/>上記の結果は"
"Cutterの自己テストにおかしな期待値を追加したために起きています。<placeholder-"
"2/>おかしな検証はtest/test-cut-assertions.cの240行目に書かれていて、その行は"
"<link linkend=\"cut-assert-test-result\"><function>cut_assert_test_result()</"
"function></link>関数内にあります。この関数はtest_errorテストから呼び出されて"
"います。cut_test_result_get_test_name(result)が\"Strange!!!\"を返すことを期待"
"していますが、実際は\"dummy-error-name\"が返ってきています。このような情報を"
"上記のCutterの出力から得ることができます。これはデバッグの手助けになるでしょ"
"う。"

#: xml/cutter.xml:122(para)
msgid ""
"Cutter's output format is pragmatic. ' but was:' is indented and aligned "
"with the above 'expected:'. This helps that you find difference between "
"expected value and actual value by your eyes easily. The problem line is "
"formated as 'FILENAME:LINE: FUNCTION' to integrate Emacs. In Emacs's "
"compilation-mode, if the format is appeared in *compilation* buffer, we can "
"jump to FILENAME at LINE with next-error command. (C-x `) This helps that "
"you find the problem line rapidly."
msgstr ""
"Cutterの出力形式は実用的です。' but was:'はその上の'expected:'と並ぶようにイ"
"ンデントされています。これは期待値と実測値をパッと見て簡単に比較できるように"
"するためです。問題のあった行は「ファイル名:行: 関数」というように整形されてい"
"ます。これはEmacsと連携するためです。Emacsのcompilation-modeではこの形式が"
"*compilation*バッファに表れると、next-errorコマンド(C-x `)で「ファイル名」の"
"「行」へジャンプすることができます。これは問題行を素早く見つける手助けをしま"
"す。"

#: xml/cutter.xml:132(para)
msgid "Cutter supports not only easy test writing but also easy debugging."
msgstr ""
"Cutterは簡単にテストを書くことを支援するだけではなく、簡単にデバッグをできる"
"ことも支援します。"

#: xml/cutter.xml:39(para)
msgid ""
"Cutter is an Unit Testing Framework for C and has the following features: "
"<placeholder-1/>"
msgstr ""
"Cutterは以下のような特徴をもったC用の単体テストフレームワークです。"
"<placeholder-1/>"

#: xml/cutter.xml:145(title)
msgid "setup ()"
msgstr ""

#: xml/cutter.xml:146(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                setup                               (void);"
msgstr ""

#: xml/cutter.xml:147(para)
msgid ""
"If you define <link linkend=\"setup\"><function>setup()</function></link> in "
"your test program, cutter will call your <link linkend=\"setup"
"\"><function>setup()</function></link> before each your test is run."
msgstr ""
"テストプログラム中で<link linkend=\"setup\"><function>setup()</function></"
"link>を定義していたら、cutterは各テストが実行される前に定義された<link "
"linkend=\"setup\"><function>setup()</function></link>を呼びだします。"

#: xml/cutter.xml:154(title)
msgid "teardown ()"
msgstr ""

#: xml/cutter.xml:155(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                teardown                            (void);"
msgstr ""

#: xml/cutter.xml:156(para)
msgid ""
"If you define <link linkend=\"teardown\"><function>teardown()</function></"
"link> in your test program, cutter will call your <link linkend=\"teardown"
"\"><function>teardown()</function></link> after each your test is run even "
"if a test is failed."
msgstr ""
"テストプログラム中で<link linkend=\"teardown\"><function>teardown()</"
"function></link>を定義していたら、cutterは各テストの後に、たとえテストが失敗"
"していた時でも、<link linkend=\"teardown\"><function>teardown()</function></"
"link>を呼びだします。"

#: xml/cutter.xml:164(title)
msgid "startup ()"
msgstr ""

#: xml/cutter.xml:165(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                startup                             (void);"
msgstr ""

#: xml/cutter.xml:166(para)
msgid ""
"If you define <link linkend=\"startup\"><function>startup()</function></"
"link> in your test program, cutter will call your <link linkend=\"startup"
"\"><function>startup()</function></link> before each your test case is run."
msgstr "テストプログラム中で<link linkend=\"startup\"><function>startup()</function></link>を定義していたら、cutterは各テストケースが実行される前に定義された<link linkend=\"startup\"><function>startup()</function></link>を呼びだします。"

#: xml/cutter.xml:173(title)
msgid "shutdown ()"
msgstr ""

#: xml/cutter.xml:174(programlisting)
#, no-wrap
msgid "<link linkend=\"void\">void</link>                shutdown                            (void);"
msgstr ""

#: xml/cutter.xml:175(para)
msgid ""
"If you define <link linkend=\"shutdown\"><function>shutdown()</function></"
"link> in your test program, cutter will call your <link linkend=\"shutdown"
"\"><function>shutdown()</function></link> after each your test case is run."
msgstr "テストプログラム中で<link linkend=\"shutdown\"><function>shutdown()</function></link>を定義していたら、cutterは各テストケースが実行された後に定義された<link linkend=\"shutdown\"><function>shutdown()</function></link>を呼びだします。"

#: xml/cutter.xml:187(title)
msgid "See Also"
msgstr "参考"

#: xml/gbsearcharray.xml:7(refentrytitle) xml/gbsearcharray.xml:13(refname)
msgid "gbsearcharray"
msgstr ""

#: xml/gbsearcharray.xml:22(link) xml/gbsearcharray.xml:55(primary)
msgid "G_BSEARCH_ARRAY_CMP"
msgstr ""

#: xml/gbsearcharray.xml:23(link)
msgid "gint"
msgstr ""

#: xml/gbsearcharray.xml:23(link)
msgid "*GBSearchCompareFunc"
msgstr ""

#: xml/gbsearcharray.xml:23(link)
msgid "gconstpointer"
msgstr ""

#: xml/gbsearcharray.xml:24(link) xml/gbsearcharray.xml:85(primary)
msgid "GBSearchArrayFlags"
msgstr ""

#: xml/gbsearcharray.xml:25(link) xml/gbsearcharray.xml:96(primary)
msgid "g_bsearch_array_get_n_nodes"
msgstr ""

#: xml/gbsearcharray.xml:26(link) xml/gbsearcharray.xml:108(primary)
msgid "g_bsearch_array_lookup"
msgstr ""

#: xml/gbsearcharray.xml:27(link) xml/gbsearcharray.xml:126(primary)
msgid "g_bsearch_array_lookup_sibling"
msgstr ""

#: xml/gbsearcharray.xml:28(link) xml/gbsearcharray.xml:144(primary)
msgid "g_bsearch_array_lookup_insertion"
msgstr ""

#: xml/gbsearcharray.xml:29(link) xml/gbsearcharray.xml:162(primary)
msgid "G_BSEARCH_UPPER_POWER2"
msgstr ""

#: xml/gbsearcharray.xml:30(link) xml/gbsearcharray.xml:174(primary)
msgid "G_BSEARCH_ARRAY_NODES"
msgstr ""

#: xml/gbsearcharray.xml:31(link)
msgid "else"
msgstr ""

#: xml/gbsearcharray.xml:31(link) xml/gbsearcharray.xml:187(primary)
msgid "if"
msgstr ""

#: xml/gbsearcharray.xml:32(link)
msgid "return"
msgstr ""

#: xml/gbsearcharray.xml:32(link) xml/gbsearcharray.xml:198(primary)
msgid "MIN"
msgstr ""

#: xml/gbsearcharray.xml:32(link)
msgid "distance"
msgstr ""

#: xml/gbsearcharray.xml:21(synopsis)
#, no-wrap
msgid ""
"\n"
"#define             <placeholder-1/>                 (v1,v2)\n"
"<placeholder-2/>                (<placeholder-3/>)              (<placeholder-4/> bsearch_node1);\n"
"enum                <placeholder-5/>;\n"
"#define             <placeholder-6/>         (barray)\n"
"#define             <placeholder-7/>              (barray, bconfig, key_node)\n"
"#define             <placeholder-8/>      (barray, bconfig, key_node)\n"
"#define             <placeholder-9/>    (barray, bconfig, key_node)\n"
"#define             <placeholder-10/>              (n)\n"
"#define             <placeholder-11/>               (barray)\n"
"<placeholder-12/>                <placeholder-13/>                                  ();\n"
"<placeholder-14/>              <placeholder-15/>                                 (<placeholder-16/> );\n"
msgstr ""

#: xml/gbsearcharray.xml:54(title)
msgid "G_BSEARCH_ARRAY_CMP()"
msgstr ""

#: xml/gbsearcharray.xml:55(programlisting)
#, no-wrap
msgid "#define G_BSEARCH_ARRAY_CMP(v1,v2) ((v1) &gt; (v2) ? +1 : (v1) == (v2) ? 0 : -1)\n"
msgstr ""

#: xml/gbsearcharray.xml:60(term)
msgid "<parameter>v1</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:63(term)
msgid "<parameter>v2</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:70(title)
msgid "GBSearchCompareFunc ()"
msgstr ""

#: xml/gbsearcharray.xml:71(primary)
msgid "GBSearchCompareFunc"
msgstr ""

#: xml/gbsearcharray.xml:71(programlisting)
#, no-wrap
msgid "<link linkend=\"gint\">gint</link>                (*GBSearchCompareFunc)              (<link linkend=\"gconstpointer\">gconstpointer</link> bsearch_node1);"
msgstr ""

#: xml/gbsearcharray.xml:75(term)
msgid "<parameter>bsearch_node1</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:84(title)
msgid "enum GBSearchArrayFlags"
msgstr ""

#: xml/gbsearcharray.xml:85(programlisting)
#, no-wrap
msgid ""
"typedef enum\n"
"{\n"
"  G_BSEARCH_ARRAY_ALIGN_POWER2  = 1 &lt;&lt; 0, /* align memory to power2 sizes */\n"
"  G_BSEARCH_ARRAY_AUTO_SHRINK  = 1 &lt;&lt; 1   /* shrink array upon removal */\n"
"} GBSearchArrayFlags;\n"
msgstr ""

#: xml/gbsearcharray.xml:95(title)
msgid "g_bsearch_array_get_n_nodes()"
msgstr ""

#: xml/gbsearcharray.xml:96(programlisting)
#, no-wrap
msgid "#define             g_bsearch_array_get_n_nodes(barray)"
msgstr ""

#: xml/gbsearcharray.xml:100(term) xml/gbsearcharray.xml:112(term)
#: xml/gbsearcharray.xml:130(term) xml/gbsearcharray.xml:148(term)
#: xml/gbsearcharray.xml:179(term)
msgid "<parameter>barray</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:107(title)
msgid "g_bsearch_array_lookup()"
msgstr ""

#: xml/gbsearcharray.xml:108(programlisting)
#, no-wrap
msgid "#define             g_bsearch_array_lookup(barray, bconfig, key_node)"
msgstr ""

#: xml/gbsearcharray.xml:115(term) xml/gbsearcharray.xml:133(term)
#: xml/gbsearcharray.xml:151(term)
msgid "<parameter>bconfig</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:118(term) xml/gbsearcharray.xml:136(term)
#: xml/gbsearcharray.xml:154(term)
msgid "<parameter>key_node</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:125(title)
msgid "g_bsearch_array_lookup_sibling()"
msgstr ""

#: xml/gbsearcharray.xml:126(programlisting)
#, no-wrap
msgid "#define             g_bsearch_array_lookup_sibling(barray, bconfig, key_node)"
msgstr ""

#: xml/gbsearcharray.xml:143(title)
msgid "g_bsearch_array_lookup_insertion()"
msgstr ""

#: xml/gbsearcharray.xml:144(programlisting)
#, no-wrap
msgid "#define             g_bsearch_array_lookup_insertion(barray, bconfig, key_node)"
msgstr ""

#: xml/gbsearcharray.xml:161(title)
msgid "G_BSEARCH_UPPER_POWER2()"
msgstr ""

#: xml/gbsearcharray.xml:162(programlisting)
#, no-wrap
msgid "#define             G_BSEARCH_UPPER_POWER2(n)"
msgstr ""

#: xml/gbsearcharray.xml:166(term)
msgid "<parameter>n</parameter>&nbsp;:"
msgstr ""

#: xml/gbsearcharray.xml:173(title)
msgid "G_BSEARCH_ARRAY_NODES()"
msgstr ""

#: xml/gbsearcharray.xml:174(programlisting)
#, no-wrap
msgid "#define G_BSEARCH_ARRAY_NODES(barray)    (((guint8*) (barray)) + sizeof (GBSearchArray))\n"
msgstr ""

#: xml/gbsearcharray.xml:186(title)
msgid "if ()"
msgstr ""

#: xml/gbsearcharray.xml:187(programlisting)
#, no-wrap
msgid "<link linkend=\"else\">else</link>                if                                  ();"
msgstr ""

#: xml/gbsearcharray.xml:197(title)
msgid "MIN ()"
msgstr ""

#: xml/gbsearcharray.xml:198(programlisting)
#, no-wrap
msgid "<link linkend=\"return\">return</link>              MIN                                 (<link linkend=\"distance\">distance</link> );"
msgstr ""

#: xml/gbsearcharray.xml:202(term)
msgid "<parameter>Param1</parameter>&nbsp;:"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: xml/gbsearcharray.xml:0(None)
msgid "translator-credits"
msgstr ""

#~ msgid ""
#~ "This is useful only if you make a custom test runner like cutter command. "
#~ "You can pass a data from your custom test runner to test programs. They "
#~ "will receive your data through this."
#~ msgstr ""
#~ "cutterコマンドのようなテスト起動コマンドを独自に作ったときにだけ役にたちま"
#~ "す。独自のテスト起動コマンドからテストプログラムにデータを渡すことができま"
#~ "す。テストプログラムはこのマクロを使ってデータを受け取ることができます。"

#~ msgid "a data from a program who invokes your test."
#~ msgstr "テストを実行したプログラムからのデータ。"

#~ msgid "Tutorial"
#~ msgstr "チュートリアル"

#~ msgid "Object Hierarchy"
#~ msgstr "オブジェクト階層"

#~ msgid "Properties"
#~ msgstr "プロパティ"

#~ msgid "n-tests"
#~ msgstr "テスト数"

#~ msgid "Signals"
#~ msgstr "シグナル"

#~ msgid "Property Details"
#~ msgstr "プロパティ詳細"

#~ msgid "Signal Details"
#~ msgstr "シグナル詳細"

#~ msgid "description"
#~ msgstr "説明"

#~ msgid ""
#~ "format string, followed by parameters to insert into the format string "
#~ "(as with <link linkend=\"printf\"><function>printf()</function></link>)"
#~ msgstr ""
#~ "整形文字列。以降のパラメータが整形文字列に挿入されます。（<link linkend="
#~ "\"printf\"><function>printf()</function></link>と同じ）"
