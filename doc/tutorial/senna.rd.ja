# -*- rd -*-

= Cutter導入事例: Senna

((<Senna|URL:http://qwik.jp/senna/>))の単体テストフレームワー
クとしてCutterを導入したときの手順です。自分のプロジェクトに
Cutterを導入するときの参考にしてください。

もし、まだCutterについて知らない場合は、はじめに((<チュートリ
アル
|URL:http://cutter.sourceforge.net/reference/ja/tutorial.html>))
を読んでください。

== はじめに

まず、Sennaについて簡単に説明します。

Sennaは組み込み型の全文検索エンジンで、その機能をライブラリ
として提供します。SennaのAPIはbasic APIやadvanced APIなどい
くつかのグループにわかれています。

今回はSennaの単体テストフレームワークとしてCutterを導入し、
utility APIのひとつ、snippet((-検索キーワードの周辺テキストの
こと。ここではそれを取得するSennaの機能のこと。-))のテストを
作成するまでを示します。このためには以下の作業が必要になりま
す。

  * SennaのビルドシステムにCutterを組み込む
  * Cutterでsnippet APIのテストを記述する

作業に入る前にSennaのビルドシステムについて確認します。

=== Sennaのビルドシステム

Sennaでは((<GNU
Automake|URL:http://www.gnu.org/software/automake/>))や
((<GNU Libtool|URL:http://www.gnu.org/software/libtool/>))な
どGNUビルドシステムを利用したビルドシステムを採用しています。

CutterはGNUビルドシステムサポート用の機能をいくつか提供してい
ます。そのため、GNUビルドシステムを用いているプロジェクトへ
はCutterを容易に導入することができます。

もし、これからプロジェクトを始める場合でGNUビルドシステムを
採用する場合は((<Cutterのチュートリアル
|URL:http://cutter.sourceforge.net/reference/ja/tutorial.html>))
が参考になるでしょう。

== ビルドシステムへのCutterの組み込み

Sennaの単体テストフレームワークとしてCutterを採用するにあたっ
て、以下のような条件を満たすこととします。

  * Cutterがない場合でもユーザがSennaをビルドできること
  * Cutterがない場合でも開発者がSennaをビルドできること
  * configure時にCutterを使用するかどうかを指定できること
  * Cutterで作成したテストはtest/unit/以下に配置すること
  * テストではテストを簡潔・容易に記述するためにGLibを利用す
    る

上記の中でのユーザと開発者の違いは、autogen.shを用いて自分で
configureを作成するかどうかです。ユーザは開発者が作成した
configureを利用するため、自分でconfigureを作成しません。一方、
開発者はSubversionリポジトリ内にはconfigureは入っていないの
でautogen.shを使ってconfigure.acからconfigureを作成し、利用
します。つまり、違いは以下の通りになります。

  * ユーザ: configureのみ実行
  * 開発者: autogen.shとconfigureを実行

それでは、まずは、開発者はすべてCutterをインストールしている
ものとしてCutter対応のconfigureを生成できるようにします。

=== cutter.m4

Cutterはconfigure.ac内で利用できるCutter検出用のM4マクロを
cutter.m4として提供しています。このファイルは
${PREFIX}/share/aclocal/cutter.m4としてインストールされます。
${PREFIX}/share/aclocal/以下に他の.m4ファイルがインストールされ
ているような環境ではおそらくそのままで大丈夫ですが、そうでな
い場合はautogen.shの中でaclocalを呼び出しているところを編集
して${PREFIX}/share/aclocal/以下を.m4ファイルの検索パスに加
える必要があります。

もし、Cutterのconfigureに--prefix=/tmp/localオプションをつけ
てビルド・インストールした場合はautogen.shを以下のように変更
する必要があります。

  # source: diff
  Index: autogen.sh
  ===================================================================
  --- autogen.sh	(リビジョン 820)
  +++ autogen.sh	(作業コピー)
  @@ -105,7 +105,7 @@
   echo "Running libtoolize ..."
   $LIBTOOLIZE --force --copy
   echo "Running aclocal ..."
  -$ACLOCAL ${ACLOCAL_ARGS} -I .
  +$ACLOCAL ${ACLOCAL_ARGS} -I . -I /tmp/local/share/aclocal
   echo "Running autoheader..."
   $AUTOHEADER
   echo "Running automake ..."

これでconfigure.ac内でCutterが提供する便利M4マクロを利用する
準備が整いました。

=== テスト作成用パッケージ

Cutterはパッケージを
((<pkg-config|URL:http://pkg-config.freedesktop.org/>))のパッ
ケージとしてインストールします。パッケージをpkg-configのパッ
ケージとして作成しているのは、pkg-configが広く普及していて、
GNUビルドツールなどpkg-configに対応しているビルドシステムが
多いからです。

Cutterは、テスト作成用に以下の2つのパッケージを用意しています。

  * cutter: Cutterを利用してテストを作成する場合に利用
  * gcutter: cutterパッケージにGLibサポート機能を追加したパッ
    ケージ。GLibを利用してもっと簡潔・容易にテストを書きたい
    場合に利用

今回はGLibを利用してテストを作成するので、cutterパッケージで
はなくgcutterパッケージを利用します。

Cutterはconfigure.acで簡単にcutter/gcutterパッケージの設定を
行えるように以下のM4マクロを提供しています。

: AC_CHECK_CUTTER

   cutterパッケージ検出マクロです。以下の変数をAC_SUBSTしま
   す。
    * CUTTER: cutterコマンドのパス
    * CUTTER_CFLAGS: cutterパッケージを用いたテストをビルド
      するためのCFLAGS
    * CUTTER_LIBS: cutterパッケージを用いたテストをビルド
      するためのLIBS

   また、cutterパッケージが利用不可能な場合は
   ac_cv_use_cutterが"no"になります。

: AC_CHECK_GCUTTER
   gcutterパッケージ検出マクロです。上述のAC_CHECK_CUTTERマ
   クロがAC_SUBSTする変数に加えて、以下の変数もAC_SUBSTしま
   す。
     * GCUTTER_CFLAGS: gcutterパッケージを用いたテストをビル
       ドするためのCFLAGS
     * GCUTTER_LIBS: gcutterパッケージを用いたテストをビルド
       するためのLIBS

今回はGLibサポートがついたgcutterパッケージを利用するので、
AC_CHECK_GCUTTERマクロを利用します。よってconfigure.acには以
下を追加することになります。

configure.ac:
  # source: sh
  AC_CHECK_GCUTTER

  AM_CONDITIONAL([WITH_CUTTER], [test "$ac_cv_use_cutter" != "no"])
  if test "$ac_cv_use_cutter" != "no"; then
    AC_DEFINE(WITH_CUTTER, 1, [Define to 1 if you use Cutter])
  fi

これで、Makefile.amではCutterが利用できるかどうかはif
WITH_CUTTER ... endifで判断できます。Makefile.amではCutterが
利用できない場合はテストプログラムをビルドしないようにします。
こうすることにより、ユーザがCutterをインストールしていなくて
も、Sennaをビルドできます。

=== cutter.m4がない場合への対応

cutter.m4がない場合は./autogen.shの実行が失敗します。つまり、
開発者がconfigureを正常に生成できなくなります。

残念ながら、Cutterはそれほど有名なフリーソフトウェアではない
ため、開発者がCutterをインストールしていることはほとんどあり
ません。そこで、開発者がCutterをインストールしていなくても
configureを生成できるようにします。((-本当は開発者には頻繁に
テストを走らせて欲しいのでCutterを必須にしたいところです。-))

cutter.m4がインストールされているかどうかはAC_CHECK_GCUTTER
関数が定義されているかどうかでわかります。そのため、以下のよ
うに書くことにより、Cutterがインストールされてない環境でも
configureを生成できます。もちろん、生成されたconfigureには
Cutterの検出機能などはありません。

configure.ac:
  # source: sh
  m4_ifdef([AC_CHECK_GCUTTER], [
  AC_CHECK_GCUTTER
  ],
  [ac_cv_use_cutter="no"])

  AM_CONDITIONAL([WITH_CUTTER], [test "$ac_cv_use_cutter" != "no"])
  if test "$ac_cv_use_cutter" != "no"; then
    AC_DEFINE(WITH_CUTTER, 1, [Define to 1 if you use Cutter])
  fi

このようにAC_CHECK_GCUTTERの呼び出し部分をm4_ifdefの中に入れ
るだけです。AC_CHECK_GCUTTERが定義されていない場合は
ac_cv_use_cutterを"no"にしているのでWITH_CUTTERが真になるこ
とはありません。

=== ビルドシステムへtest/unit/以下を追加

Cutterを用いたテストプログラムはtest/unit/以下に配置します。
このディレクトリは新規に作成するため、以下の作業が必要になり
ます。

  * test/Makefile.amのSUBDIRSにunitを追加
  * configureでtest/unit/Makefileを生成する設定を追加
  * test/unit/Makefile.amの作成

まずは、test/Makefile.amのSUBDIRSにunitを追加し、test/unit/
以下もビルド対象とします。

test/Makefile.am:
  # source: makefile
  SUBDIRS = unit

続いて、configure.acのAC_CONFIG_FILESにtest/unit/Makefileを
追加し、configureがtest/unit/Makefileを生成するようにします。

configure.ac:
  # source: m4
  AC_CONFIG_FILES([... test/unit/Makefile ...])

最後に、test/unit/Makefile.amを作成し、test/unit/以下のビル
ド方法を設定します。とりあえず、今は空っぽでかまいません。

  % touch test/unit/Makefile.am

これで、test/unit/以下をSennaのビルドシステムに加えることがで
きました。再度./autogen.sh, ./configureを実行してからmakeす
れば、test/unit/以下もビルド対象になっていることがわかります。

  % ./autogen.sh
  % ./configure
  % make
  ...
  make[3]: ディレクトリ `.../test/unit' に入ります
  ...

=== テスト起動コマンド

test/unit/以下がビルド対象に加わったので、test/unit/以下に作
成するテストプログラムを起動するコマンドを作成します。このテ
スト起動コマンドはmake checkから呼び出されることになります。

テスト起動コマンドは伝統的にrun-test.shというシェルスクリプ
トになっています。このシェルスクリプトからcutterコマンドを呼
び出してテストを実行します。

ただし、Sennaのようにライブラリ初期化・終了関数
（sen_init()/sen_fin()）を用意している場合はCutterが提供して
いるcutterコマンドを利用することはできません。テストを実行す
る前に初期化関数を、実行した後に終了関数を呼び出す必要がある
からです。

このような場合はプロジェクト専用のcutterコマンドを作成し、テ
スト実行前と後に必要な処理を行います。プロジェクト専用の
cutterコマンドを作成するためにはlibcutterパッケージを利用し
ます。

=== libcutter

libcutterは独自のテスト起動コマンド（通常はcutterコマンド）
を作成する場合に利用するパッケージです。libcutterを利用する
ためには以下の作業が必要になります。

  * libcutterが利用可能かどうかを検出する
  * cutter-senna（Senna用のテスト起動コマンド）をビルドする
    ための設定
  * cutter-senna.cの作成

まず、libcutterが利用可能かどうかを検出するために
configure.acに以下を追加します。

configure.ac:
  # source: m4
  if test "$ac_cv_use_cutter" != "no"; then
    PKG_CHECK_MODULES(LIBCUTTER, libcutter, [], [ac_cv_use_cutter=no])
    AC_SUBST(LIBCUTTER_CFLAGS)
    AC_SUBST(LIBCUTTER_LIBS)
  fi

libcutterもpkg-configのパッケージなのでpkg-configに対応して
いる他のライブラリと同じように利用可能かどうかを検出できます。
ここではCutterが利用可能な場合だけ（$ac_cv_use_cutterが"no"
ではないときだけ）libcutterを検出しています。そのため、この
記述はAC_CHECK_GCUTTERのあとに記述する必要があります。

configure.ac:
  # source: m4
  m4_ifdef([AC_CHECK_GCUTTER], [
  AC_CHECK_GCUTTER

  if test "$ac_cv_use_cutter" != "no"; then
    PKG_CHECK_MODULES(LIBCUTTER, libcutter, [], [ac_cv_use_cutter=no])
    AC_SUBST(LIBCUTTER_CFLAGS)
    AC_SUBST(LIBCUTTER_LIBS)
  fi
  ],
  [ac_cv_use_cutter="no"])

  AM_CONDITIONAL([WITH_CUTTER], [test "$ac_cv_use_cutter" != "no"])
  if test "$ac_cv_use_cutter" != "no"; then
    AC_DEFINE(WITH_CUTTER, 1, [Define to 1 if you use Cutter])
  fi

テストプログラムをビルドするときはGCUTTER_CFLAGSと
GCUTTER_LIBSを使いますが、Senna専用テスト起動プログラム
cutter-sennaをビルドするときはLIBCUTTER_CLFAGSと
LIBCUTTER_LIBSを使います。このように、今回は同じディレクトリ
以下（test/unit/）にビルドのしかたが異なるプログラムが含まれ
るので、configure.acに以下を記述し、各ターゲット毎にビルド方
法を変更できるようにすることを忘れないでください。

configure.ac:
  # source: m4
  AM_PROG_CC_C_O

libcutterが検出できたで、それを利用してcutter-sennaをビルド
する方法を設定します。test/unit/Makefile.amを以下のように変
更します。

test/unit/Makefile.am:
  # source: makefile
  if WITH_CUTTER
  noinst_PROGRAMS = cutter-senna
  endif

  INCLUDES = -I. -I../.. -I../../lib $(SENNA_INCLUDEDIR)

  cutter_senna_SOURCES = cutter-senna.c
  cutter_senna_CFLAGS = $(LIBCUTTER_CFLAGS)
  cutter_senna_LDADD = $(top_builddir)/lib/libsenna.la $(LIBCUTTER_LIBS)

よくあるMakefile.amの書き方です。noinst_PROGRAMSをif
WITH_CUTTER ... endifの中に入れているのは、Cutterがない環境で
はビルド対象からはずし、ビルドエラーにならないようにするため
です。

=== カスタムテスト起動プログラム

libcutterパッケージを使用することで簡単にテスト起動プログラ
ムを作成することができます。Senna用のテスト起動プログラム
cutter-sennaのソースは以下の通りです。

test/unit/cutter-senna.c:
  # source: C
  #include <stdlib.h>
  #include <senna.h>
  #include <cutter/cut-main.h>

  int
  main(int argc, char **argv)
  {
    int success;

    sen_init();
    cut_init(&argc, &argv);
    success = cut_run();
    sen_fin();
    exit(success ? EXIT_SUCCESS : EXIT_FAILURE);
  }

上記のソースを見れば分かる通り、テスト起動プログラムを作成す
るためにはcut_init()とcut_run()を呼び出すだけです。あとは、適
切なタイミングで必要な処理を行うだけです。例えば、Cutterの初
期化（cut_init()）を行う前にSennaの初期化（sen_init()）を行う、
などです。

=== テスト起動スクリプト

Cutterをビルドシステムへ組み込むための最後の作業は、
cutter-sennaを起動してテストを走らせるためのシェルスクリプト
run-test.shの作成です。

もちろん、直接cutter-sennaを実行してもテストを走らせることは
できます。しかし、cutter-sennaを実行するときはいくつかオプショ
ンを指定する必要があります。例えば、テストプログラムがあるディ
レクトリなどがそれです。ここでrun-test.shを作成する理由は、
cutter-sennaへ渡すオプションなどを指定しなくてもよいようにす
るなど、より簡単にテストを実行できるようにするためです。

テストが簡単に実行できるということはとても重要なことです。テ
ストを実行することが面倒だと、だんだんテストを実行しなくなっ
てしまうからです。テストが実行されないと、新しくテストを作成
することも面倒になってくるでしょう。これは悪い循環といえます。
これを防ぐためにも最初のうちから簡単にテストを実行できる仕組
みを用意しておくことが重要です。

また、引数なしでも動くrun-test.shを用意することにはもう一つ理
由があります。それは、GNU Automakeが提供するテスト起動の仕組
みであるmake checkからも利用できるようにすることです。make
checkでは指定されたテスト起動スクリプトが引数なしでテストを実
行できる必要があります。((-テスト起動スクリプトにオプションを
指定する場合は環境変数を利用します。-))

前置きが長くなりましたがテストをもっと簡単に走らせるためのス
クリプト、run-test.shは以下のようになります。

test/unit/run-test.sh:
  # source: sh
  #!/bin/sh

  export BASE_DIR="`dirname $0`"

  if test x"$NO_MAKE" != x"yes"; then
      make -C $BASE_DIR/../../ > /dev/null || exit 1
  fi

  CUTTER=$BASE_DIR/cutter-senna
  if test x"$CUTTER_DEBUG" = x"yes"; then
      CUTTER="$BASE_DIR/../../libtool --mode=execute gdb --args $CUTTER"
  fi
  CUTTER_ARGS="-s $BASE_DIR"
  $CUTTER $CUTTER_ARGS "$@" $BASE_DIR

このスクリプトではmake check以外からも便利に利用できるように
なっています。make check以外から起動された場合は必要なビルド
を行ってからテストを起動します。つまり、run-test.shからテス
トを起動した場合はビルド忘れがなくなります。

また、make checkではテスト結果とビルド結果が混ざりそこそこの
出力になりますが、run-test.sh経由でビルド・テストを行うと必
要最小限の出力になり、問題の発見が簡単になります。実際の開発
は以下のようなサイクルになります。

  (1) ソース変更
  (2) test/unit/run-test.shを実行
      (1) テスト失敗→(1)に戻る
  (3) コミット→(1)に戻る

手順が少ないため開発のリズムが崩れにくくなります。このサイク
ルをより簡単に行うための方法もあるのですが、それはまた別の機
会にします。

run-test.shができたので、make checkでrun-test.shを起動するよ
うにMakefile.amを変更します。

test/unit/Makefile.am:
  # source: makefile
  if WITH_CUTTER
  TESTS = run-test.sh
  TESTS_ENVIRONMENT = NO_MAKE=yes
  ...
  endif

TESTS_ENVIRONMENTにNO_MAKE=yesを指定することにより、make
check経由の場合はテスト実行前のmake実行を抑制します。

== テストの作成

テスト実行環境が整ったのでテストを作成します。ここでは検索キー
ワードの周辺テキストを取得する((<snippet
API|URL:http://qwik.jp/senna/APIJ.html#snippet_API>))のテスト
を1つ作成します。

テストの流れは以下の通りです。

  (1) sen_snip_open()でsen_snipオブジェクトの生成
  (2) sen_snip_add_cond()でキーワードを指定
  (3) sen_snip_exec()でsnippetを生成
  (4) sen_snip_get_result()で取得した結果が期待していたものか
      を検証
  (5) sen_snip_close()で生成したsen_snipオブジェクトを開放

基本的なCutterのテスト作成方法については((<チュートリアル
|URL:http://cutter.sourceforge.net/reference/ja/tutorial.html>))
を参考にしてください。

=== sen_snip_open()のテスト

まずは、sen_snip_open()でsen_snipオブジェクトを生成する部分
と、sen_snip_close()で生成したsen_snipオブジェクトを開放する
部分を作成します。

今回はGLibサポート付きでCutterを使用するgcutterパッケージを
使っているので、テストは以下のようにgcutter.hを利用します。

test/unit/test-snip.c:
  # source: C
  #include <senna.h>
  #include <gcutter.h>

  void test_simple_exec(void);

  static const gchar default_open_tag[] = "[[";
  static const gchar default_close_tag[] = "]]";

  void
  test_simple_exec(void)
  {
    sen_snip *snip;

    snip = sen_snip_open(sen_enc_default, 0, 100, 10,
                         default_open_tag, strlen(default_open_tag),
                         default_close_tag, strlen(default_close_tag),
                         NULL);
    cut_assert_not_null(snip);
    sen_snip_close(snip);
  }


sen_snip_open()は引数が多いですが、ここでは気にする必要はあ
りません。sen_snip_open()によりsen_snip *が生成されるだけ知っ
ていれば問題ありません。

((<cut_assert_not_null|URL:http://cutter.sourceforge.net/reference/ja/cutter-cut-assertions.html#cut-assert-not-null>))(snip)
でsen_snip *が正常に生成されているかを確認します。これは、
sen_snip_open()は失敗時にはNULLを返すからです。

最後にsen_snip_close()で生成したsen_snip *を開放します。

=== sen_snip_add_cond()のテスト

次はsen_snip_add_cond()でキーワードを指定する処理を追加しま
す。sen_snip_add_cond()の戻り値はsen_rcです。sen_rcはエラー
番号を示す数値でsen_success(0)以外はエラーになります。よって
テストは以下のようになります。sen_snip_open()のときと同じく、
sen_snip_add_cond()の引数は気にしなくても構いません。

test/unit/test-snip.c:
  # source: C
  ...
  void
  test_simple_exec(void)
  {
    sen_snip *snip;
    const gchar keyword[] = "Senna";

    snip = sen_snip_open(sen_enc_default, 0, 100, 10,
                         default_open_tag, strlen(default_open_tag),
                         default_close_tag, strlen(default_close_tag),
                         NULL);
    cut_assert_not_null(snip);

    cut_assert_equal_int(sen_success,
                         sen_snip_add_cond(snip, keyword, strlen(keyword),
                                           NULL, 0, NULL, 0));

    sen_snip_close(snip);
  }

sen_snip_add_cond()の結果は
((<cut_assert_equal_int|URL:http://cutter.sourceforge.net/reference/ja/cutter-cut-assertions.html#cut-assert-equal-int>))
で検証しています。

ただし、ここで問題があります。cut_assert*()は検証が失敗する
とその時点でテスト関数からreturnし、それ以降のコードは実行し
ません。つまり、cut_assert_equal_int()が失敗した場合は、
sen_snip_open()で生成したsen_snip *が開放されないことになり
ます。この問題を解決するためにsetup()/teardown()という仕組み
があります。

setup()はテストが実行される前に必ず実行され、teardown()はテ
ストが実行された後に成功・失敗に関わらず必ず実行されます。こ
の仕組みを利用することで確実にメモリ開放処理を行うことができ
ます。

test/unit/test-snip.c:
  # source: C
  ...
  static sen_snip *snip;
  ...

  void
  setup(void)
  {
    snip = NULL;
  }

  void
  teardown(void)
  {
    if (snip) {
      sen_snip_close(snip);
    }
  }

  void
  test_simple_exec(void)
  {
    const gchar keyword[] = "Senna";

    snip = sen_snip_open(sen_enc_default, 0, 100, 10,
                         default_open_tag, strlen(default_open_tag),
                         default_close_tag, strlen(default_close_tag),
                         NULL);
    cut_assert_not_null(snip);

    cut_assert_equal_int(sen_success,
                         sen_snip_add_cond(snip, keyword, strlen(keyword),
                                           NULL, 0, NULL, 0));
  }

これでcut_assert_equal_int()が成功しても失敗してもsen_snip *
は開放されます。Cutterではメモリ開放処理のためにstatic変数と
setup()/teardown()を使うことが定石になっています。

=== sen_snip_exec()のテスト

次はsen_snip_add_cond()で設定したキーワード用のsnippetを生成
するsen_snip_exec()のテストです。sen_snip_exec()もsen_rcを返
すので、それを検証します。また、引数でsnippet数とsnippet文字
列のバイト数も受けとるのでそれも検証します。特に目立った部分
はありません。

test/unit/test-snip.c:
  # source: C
  ...
  static const gchar text[] =
    "Senna is an embeddable fulltext search engine, which you can use in\n"
    "conjunction with various scripting languages and databases. Senna is\n"
    "an inverted index based engine, & combines the best of n-gram\n"
    "indexing and word indexing to achieve fast, precise searches. While\n"
    "senna codebase is rather compact it is scalable enough to handle large\n"
    "amounts of data and queries.";
  ...
  void
  test_simple_exec(void)
  {
    ...
    unsigned int n_results;
    unsigned int max_tagged_len;

    ...

    cut_assert_equal_int(sen_success,
                         sen_snip_exec(snip, text, strlen(text),
                                       &n_results, &max_tagged_len));
    cut_assert_equal_uint(2, n_results);
    cut_assert_equal_uint(105, max_tagged_len);
  }

=== sen_snip_get_result()のテスト

最後はsen_snip_exec()で生成したsnippetの内容が正しいかどうか
のテストです。snippetはsen_snip_get_result()で取得できるので
その結果を検証します。n_resultsが2なので2回
sen_snip_get_result()を呼び出す必要があります。

snippetを格納する場所のサイズは動的に決まります。そのため、
snippetを格納する領域を動的に確保する必要があります。
setup()/teardown()の仕組みを用いてメモリを開放するようにしま
す。ここ以外は特に目立った部分はありません。

test/unit/test-snip.c:
  # source: C
  ...
  static gchar *result;

  void
  setup(void)
  {
    ...
    result = NULL;
  }

  void
  teardown(void)
  {
    ...
    if (result) {
      g_free(result);
    }
  }

  void
  test_simple_exec(void)
  {
    ...
    unsigned int result_len;

    ...
    result = g_new(gchar, max_tagged_len);

    cut_assert_equal_int(sen_success,
                         sen_snip_get_result(snip, 0, result, &result_len));
    cut_assert_equal_string("[[Senna]] is an embeddable fulltext search engine, "
                            "which you can use in\n"
                            "conjunction with various scripti",
                            result);
    cut_assert_equal_uint(104, result_len);

    cut_assert_equal_int(sen_success,
                         sen_snip_get_result(snip, 1, result, &result_len));
    cut_assert_equal_string("ng languages and databases. [[Senna]] is\n"
                            "an inverted index based engine, & combines "
                            "the best of n-gram\ni",
                            result);
    cut_assert_equal_uint(104, result_len);
  }

これで単純にsnippet APIを使った場合のテストが1つできました。
同様に、異常な場合や違ったデータを用いた場合などのテストを作
成していきます。

=== diff

せっかくなのでCutterのテスト結果の出力方法を紹介します。

Cutterは
((<cut_assert_equal_string|URL:http://cutter.sourceforge.net/reference/ja/cutter-cut-assertions.html#cut-assert-equal-string>))
で文字列の比較が失敗したときには、どの部分が異なったかという
差分情報を表示します。

例えば、今回のテストの最後のcut_assert_equal_string()が失敗
した場合は以下のような差分情報が表示されます。

  diff:
    - ng languages and DBes. [[Senna]] is
    ?                  ^^
    + ng languages and databases. [[Senna]] is
    ?                  ^^^^^^^
    - an Inverted Index Based Engine, & combines the best of n-gram
    ?    ^        ^     ^     ^
    + an inverted index based engine, & combines the best of n-gram
    ?    ^        ^     ^     ^
      i

このときの期待した結果は以下の通りです。
  ng languages and DBes. [[Senna]] is
  an Inverted Index Based Engine, & combines the best of n-gram
  i

実際の結果は以下の通りです。
  ng languages and databases. [[Senna]] is
  an inverted index based engine, & combines the best of n-gram
  i

差分を見てもらうと分かる通り、異なっている行を示すだけではな
くて、行内で異なっている文字まで示しています。（例えば、DBの
下に^^が付いている。）

広く使われているunified diff形式では行内で異なる文字は表示し
ません。テストでは1行のみの比較を行うことも多く、行単位だけ
の差分よりも文字単位での差分表示も行った方がデバッグが行いや
すいという判断からこのような形式になっています。

=== テスト全体

今回作成したテストは以下の通りです。

test/unit/test-snip.c:
test/unit/test-snip.c:
  # source: C
  #include <senna.h>
  #include <gcutter.h>

  void test_simple_exec(void);

  static sen_snip *snip;
  static const gchar default_open_tag[] = "[[";
  static const gchar default_close_tag[] = "]]";
  static const gchar text[] =
    "Senna is an embeddable fulltext search engine, which you can use in\n"
    "conjunction with various scripting languages and databases. Senna is\n"
    "an inverted index based engine, & combines the best of n-gram\n"
    "indexing and word indexing to achieve fast, precise searches. While\n"
    "senna codebase is rather compact it is scalable enough to handle large\n"
    "amounts of data and queries.";
  static gchar *result;

  void
  setup(void)
  {
    snip = NULL;
    result = NULL;
  }

  void
  teardown(void)
  {
    if (snip) {
      sen_snip_close(snip);
    }
    if (result) {
      g_free(result);
    }
  }

  void
  test_simple_exec(void)
  {
    const gchar keyword[] = "Senna";
    unsigned int n_results;
    unsigned int max_tagged_len;
    unsigned int result_len;

    snip = sen_snip_open(sen_enc_default, 0, 100, 10,
                         default_open_tag, strlen(default_open_tag),
                         default_close_tag, strlen(default_close_tag),
                         NULL);
    cut_assert_not_null(snip);

    cut_assert_equal_int(sen_success,
                         sen_snip_add_cond(snip, keyword, strlen(keyword),
                                           NULL, 0, NULL, 0));

    cut_assert_equal_int(sen_success,
                         sen_snip_exec(snip, text, strlen(text),
                                       &n_results, &max_tagged_len));
    cut_assert_equal_uint(2, n_results);
    cut_assert_equal_uint(105, max_tagged_len);

    result = g_new(gchar, max_tagged_len);

    cut_assert_equal_int(sen_success,
                         sen_snip_get_result(snip, 0, result, &result_len));
    cut_assert_equal_string("[[Senna]] is an embeddable fulltext search engine, "
                            "which you can use in\n"
                            "conjunction with various scripti",
                            result);
    cut_assert_equal_uint(104, result_len);

    cut_assert_equal_int(sen_success,
                         sen_snip_get_result(snip, 1, result, &result_len));
    cut_assert_equal_string("ng languages and databases. [[Senna]] is\n"
                            "an inverted index based engine, & combines "
                            "the best of n-gram\ni",
                            result);
    cut_assert_equal_uint(104, result_len);
  }

問題発生時に有用なデバッグ情報を増やしたり、より読みやすいテ
ストにするなど、いろいろ改良するべき点は残っていますが、今回
はこれで終了します。実際のコードはSennaのリポジトリを((<参照
|URL:http://svn.razil.jp/senna/test/unit/>))してください。

== まとめ

ここでは以下のことについて説明しました。

  * GNUビルドシステムを採用した既存のプロジェクトへのCutter
    の組み込み方法
    * cutter.m4で提供するM4マクロの使用方法
    * Cutterをインストールしていないユーザへの対応
    * Cutterをインストールしていない開発者への対応
  * Cutterを用いたテスト環境の構築方法
    * 独自cutterコマンドの作成方法
    * 便利なテスト起動スクリプトrun-test.shの作成方法
  * Cutterを用いたテストの作成方法
    * setup()/teardown()を用いたメモリ管理の方法
    * diffの出力

Cで書かれたプロジェクトに単体テストフレームワークを導入する
場合はCutterも検討してみてはいかがでしょうか。
